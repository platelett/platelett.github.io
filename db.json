{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/android-chrome-192x192.png","path":"images/android-chrome-192x192.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/android-chrome-384x384.png","path":"images/android-chrome-384x384.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16.png","path":"images/favicon-16x16.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32.png","path":"images/favicon-32x32.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/manifest.json","path":"images/manifest.json","modified":1,"renderable":1},{"_id":"themes/next/source/images/safari-pinned-tab.svg","path":"images/safari-pinned-tab.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/51nod1847.md","hash":"679782dcdafbd194fe3e2a82a9aa6eab359110cc","modified":1631368874735},{"_id":"source/_posts/BZ2238.md","hash":"4a0fb90892b3b2cecfbe527d7cfae264a3355799","modified":1631368874736},{"_id":"source/_posts/CF1144G.md","hash":"f3efe35311b8f87c4ba6e6275d45913cd9a8577b","modified":1631368874736},{"_id":"source/_posts/CF1430F.md","hash":"4fa88387414b66f742fc0ab051696de0eef38969","modified":1631368874736},{"_id":"source/_posts/CF1305G.md","hash":"e6683f63a322dbb9a969b7eb056e367bf02694d3","modified":1631368874736},{"_id":"source/_posts/CF1498D.md","hash":"737a73f65cdf97b911721663ea7587f16c0f55ca","modified":1631368874736},{"_id":"source/_posts/CF1498E.md","hash":"663749da5c0ca17e1a243df9e4aac34a0985597a","modified":1631368874736},{"_id":"source/_posts/CF1498F.md","hash":"56e10a3897823e8f7a524722b12e8a3e95a374c3","modified":1631368874736},{"_id":"source/_posts/CF1508C.md","hash":"0e5d99029ec6d4449f6bea7af932e2087bc1b907","modified":1631368874736},{"_id":"source/_posts/CF1515E.md","hash":"15ffcf5f4e4ff2ee6ebf449421029584ca50dd60","modified":1631368874736},{"_id":"source/_posts/CF1515F.md","hash":"cc179a7858390db299f99aa498154f01698b6e38","modified":1631368874736},{"_id":"source/_posts/CF1515G.md","hash":"5cae1738a9d090e87989be0061099d9782bfa221","modified":1631365533839},{"_id":"source/_posts/CF1519E.md","hash":"ddde01500c4f66d7a7d88c2683436b2439579017","modified":1631368874736},{"_id":"source/_posts/CF493E.md","hash":"541faa4b5f60e5b21922f8c11bb1034c8857dbfe","modified":1631368874735},{"_id":"source/_posts/CF521E.md","hash":"a8fc26391d80c4ea506394bdcadcd8c91142b4b7","modified":1631368874736},{"_id":"source/_posts/CF549F.md","hash":"ee21a80ea7e4b12c06cd89b0628775d93c21814e","modified":1631368874735},{"_id":"source/_posts/CF845F.md","hash":"9e12eaf2503f78ec2934f0cc98bdd69b0a0b1180","modified":1631368874736},{"_id":"source/_posts/CF555E.md","hash":"d7ff3eba851383111599f8d751e6b2ddc1446cbe","modified":1631368874736},{"_id":"source/_posts/CF868E.md","hash":"7be9020c2756e3e95a53122e42a0ec186270c364","modified":1631368874736},{"_id":"source/_posts/CF908G.md","hash":"0a9bcf617631826210e36daa59af7e4919baee30","modified":1631368874736},{"_id":"source/_posts/Gym100958B.md","hash":"b148bd8dbad8f825936cb787f94983bd58fa35d5","modified":1631368874735},{"_id":"source/_posts/Hello-world.md","hash":"3c5461ee0c7c4abad21c17104d2d5be104bb6841","modified":1631367138819},{"_id":"source/_posts/IOI2009.md","hash":"1b3a43a44710a34579db9e3662b4a7120e0f07f7","modified":1631368874735},{"_id":"source/_posts/JOI2021D1T3.md","hash":"eac24d9f38c4b5939cb6e1e7dc304b6374ad8cb5","modified":1631368874735},{"_id":"source/_posts/JOISC2021D1T3.md","hash":"eac24d9f38c4b5939cb6e1e7dc304b6374ad8cb5","modified":1631368874735},{"_id":"source/_posts/JOISC2021D3T3.md","hash":"38d09a29ecafe93552681e12b62d89c3ac6d373e","modified":1631368874735},{"_id":"source/_posts/UVa12212.md","hash":"b9536530a8c3a97848d40aa951b0f6ffbd7d9174","modified":1631368874735},{"_id":"source/_posts/TC11351.md","hash":"1efea43a7bfc2ca7621851f9d1c96237280c9906","modified":1631368874735},{"_id":"source/_posts/abc140f.md","hash":"a12da75f0e73c2977d901ca6ebe66573dcbc3452","modified":1631368874736},{"_id":"source/_posts/cerc2009.md","hash":"c586ac8617b981380192831c6fd8f0882e170642","modified":1631368874736},{"_id":"source/_posts/cong-c11-dao-c17.md","hash":"88932b63a5fffb7b6c477b754668db7a38b1d8f4","modified":1631367786158},{"_id":"source/_posts/gridea-c-gao-liang-dai-ma-kuai-zhe-die.md","hash":"6b49b3ca2aea75dab4e63b2408c65b20e1cbfcfd","modified":1631365616862},{"_id":"source/_posts/du-jiao-shai-and-min-25-shai-and-powerful-number-shai.md","hash":"8101eff9719c568087255b5997ce678fce81ac87","modified":1631367609338},{"_id":"source/_posts/guan-yu-xi-bao-zi-dong-ji-kang-wei-sheng-ming-you-xi.md","hash":"b94ba2b4a021dcd14161789988d4f8cbb3cb1d88","modified":1631367212487},{"_id":"source/_posts/ji-yu-stdstreambuf-de-fast-io-mo-ban.md","hash":"4f895bbb86030b319811eeaac12da9119ae6e9c0","modified":1631367855793},{"_id":"source/_posts/jing-zhun-yu-ce-or-jsoi2019.md","hash":"80fd31577e605f3f8e2091db941bf9634ea8cd7a","modified":1631368874735},{"_id":"source/_posts/luogu7481.md","hash":"12a9e365bbc3d6a89f3adf59cbbfc3d7884db3ba","modified":1631368874735},{"_id":"source/_posts/luogu7482.md","hash":"855c69d40e3597f7426051aa247dea187b387f48","modified":1631368874735},{"_id":"source/_posts/nim-you-xi-and-sg-ding-li.md","hash":"c6b4394056c890711df49f0da2f6f6f26944c557","modified":1631367769206},{"_id":"source/_posts/problem.md","hash":"7bd66d11f4358ffdddc8a2178305cf4f663f17f2","modified":1631368874735},{"_id":"source/_posts/problem1.md","hash":"c11b02b54ccb5508c0eca455a36dc04189688def","modified":1631368874735},{"_id":"source/_posts/problem2.md","hash":"aab727d195ead9b0f938559fcb944434e977d121","modified":1631367980471},{"_id":"source/_posts/problem3.md","hash":"40149e220c215a5875232fd3986adfef2dc58eeb","modified":1631368874735},{"_id":"source/_posts/problem4.md","hash":"ae33db2ee0efe13b62f8343ad0837bc7f9f16172","modified":1631368874735},{"_id":"source/_posts/ren-yi-mo-shu-ntt.md","hash":"dc843709fd5f801cee4a68287216dfde0a62bfc7","modified":1631368874735},{"_id":"source/_posts/template.md","hash":"9639be9cfe9a6402353137237e6491c327974623","modified":1631368874735},{"_id":"source/_posts/za-xiang.md","hash":"b8ef6876fbfe335b943c34e0360785cec4276102","modified":1631368274387},{"_id":"source/_posts/zi-ran-shu-deng-mi-qiu-he.md","hash":"313620b2acade5cec4479cb8c598e361f204a2d9","modified":1631367741133},{"_id":"source/categories/index.md","hash":"9f2dc0cface7cfecdc2811984b7fe2e4a98c399c","modified":1631272541000},{"_id":"source/links/index.md","hash":"073ed4075a23aff49de2e9a0cfc4a8b00b8c846d","modified":1631282765000},{"_id":"source/tags/index.md","hash":"e0bd8be3030af799767a2f3349f5d9e0d38cb15b","modified":1631281186000},{"_id":"source/_posts/problems.md","hash":"efd652e8c7fa42f8fd4abb2efe0429e78ec99b91","modified":1631368874735},{"_id":"source/_posts/yi-yan.md","hash":"77a95b06db5a4ab25468d10457e12c1d07cf1fff","modified":1631367919945},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1631193230000},{"_id":"themes/next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1631193230000},{"_id":"themes/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1631193230000},{"_id":"themes/next/.gitignore","hash":"68d2f59b79fbc9edf358295ac38515c4b32126c1","modified":1631193230000},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1631193230000},{"_id":"themes/next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1631193230000},{"_id":"themes/next/README.md","hash":"fab15a85d9d8d90ecd8879525b9b74fb1c197978","modified":1631193230000},{"_id":"themes/next/_vendors.yml","hash":"afdebdb0be4158c0bf0a408109a5aa42c496dffd","modified":1631193230000},{"_id":"themes/next/_config.yml","hash":"3dfd450b4c7163442427f0de8bb8235361ec36fe","modified":1631368634901},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1631193230000},{"_id":"themes/next/package.json","hash":"f41a8858849f4ac9384cb4469c5c00ad192e79d9","modified":1631193230000},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1631193230000},{"_id":"themes/next/.githooks/pre-commit","hash":"f473eac1aaaa96c947d67988bbed140bbab1a821","modified":1631193230000},{"_id":"themes/next/.githooks/install.js","hash":"4d77dbddf2eac1f3fc78f151d12ed22208ed655b","modified":1631193230000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"21cbff565a0445d3a880fff1ee417e309740a9ab","modified":1631193230000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"330656d93b6c03df9fb1f2f0e3534c971969473b","modified":1631193230000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3e9fbb78e3dee0ca1dc886d0c28b0148ba0ca499","modified":1631193230000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1631193230000},{"_id":"themes/next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1631193230000},{"_id":"themes/next/.github/release-drafter.yml","hash":"dedc56fdcd58c58fe81728754abc531691106b0c","modified":1631193230000},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"1097fc47beeacfc1edb0248c27b17bf64bde3565","modified":1631193230000},{"_id":"themes/next/.github/labeler.yml","hash":"5c4bc2bd561e6d9b33ee118cc12218c5de46f72d","modified":1631193230000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1631193231000},{"_id":"themes/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1631193231000},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1631193231000},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1631193231000},{"_id":"themes/next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":1631193231000},{"_id":"themes/next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":1631193231000},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1631193231000},{"_id":"themes/next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1631193231000},{"_id":"themes/next/languages/es.yml","hash":"651e3b33d86a7cdb9fd7895ca28279f8b1a24faa","modified":1631193231000},{"_id":"themes/next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":1631193231000},{"_id":"themes/next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":1631193231000},{"_id":"themes/next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":1631193231000},{"_id":"themes/next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":1631193231000},{"_id":"themes/next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":1631193231000},{"_id":"themes/next/languages/ko.yml","hash":"6387357ac2dd498e8b8d630d27050a59180d7e8f","modified":1631193231000},{"_id":"themes/next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":1631193231000},{"_id":"themes/next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":1631193231000},{"_id":"themes/next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":1631193231000},{"_id":"themes/next/languages/ru.yml","hash":"e9af1afe529ca747a04b801401d394b2ad696fde","modified":1631193231000},{"_id":"themes/next/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":1631193232000},{"_id":"themes/next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":1631193232000},{"_id":"themes/next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":1631193232000},{"_id":"themes/next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":1631193232000},{"_id":"themes/next/languages/zh-CN.yml","hash":"fca412bd903e1b59a99dbb5f50165285897bddcc","modified":1631365909473},{"_id":"themes/next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":1631193232000},{"_id":"themes/next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":1631193232000},{"_id":"themes/next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":1631193232000},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1631193232000},{"_id":"themes/next/layout/category.njk","hash":"0a590e87af50e57b15fc37695c9a3bf4a97c3d92","modified":1631193232000},{"_id":"themes/next/layout/index.njk","hash":"37ec3d1bcd20b8ac1d18e0d68f990450890b46cd","modified":1631193232000},{"_id":"themes/next/layout/page.njk","hash":"9cd3eca2c468bb46c7c5bf391bea4b025af178f6","modified":1631193232000},{"_id":"themes/next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1631193232000},{"_id":"themes/next/layout/tag.njk","hash":"6cd707f846bfd6becbcfb060c26958bb4015c31f","modified":1631193232000},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1631193238000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"fc4dce84ed9a5d21d3a8833ff6d776c46f876115","modified":1631193231000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"c40ae7903b6cc99f94c9d45ac7ba8c2850bb1309","modified":1631193231000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4ecac91716eac59d7c2bc53cf6e95612d44da97b","modified":1631193231000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"8cc5b5c116f6a052865a324512362f145d699202","modified":1631193231000},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"44405477660289d4ed9beba1d054b15bb67bba06","modified":1631193231000},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"8b73c439dc796be141d521a4546bcfb7a5485534","modified":1631193231000},{"_id":"themes/next/.github/workflows/linter.yml","hash":"276a91c7179926f410c784c99fa635dc0a016c2d","modified":1631193231000},{"_id":"themes/next/.github/workflows/lock.yml","hash":"70bd0be3f33774e4b0ada3a59c901f8f9cff1013","modified":1631193231000},{"_id":"themes/next/.github/workflows/release-drafter.yml","hash":"4f3af81009cb922be91f718a67425377515ea69d","modified":1631193231000},{"_id":"themes/next/.github/workflows/stale.yml","hash":"0feb3e1afd1b2dca9dbc7811ce4cf5520e2d186c","modified":1631193231000},{"_id":"themes/next/.github/workflows/tester.yml","hash":"22aaaa3eba1a7ebcf0f78417fd9a7113ee7b6c6c","modified":1631193231000},{"_id":"themes/next/docs/ru/README.md","hash":"87edab5a3eb7577a409c01df3f1631de40f8956f","modified":1631193231000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1631193231000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1631193231000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"02bafc6ee86263790603861e356596f0c916e392","modified":1631193231000},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1631193232000},{"_id":"themes/next/layout/_macro/post.njk","hash":"b106599106285ecd4c0c1e0ed11c46a36b5a69d5","modified":1631193232000},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"a20ed899d6a797de0b35c46bfd03722023649187","modified":1631193232000},{"_id":"themes/next/layout/_partials/comments.njk","hash":"c12f8a7497596441503f2541d2f746f2ee7dd594","modified":1631193232000},{"_id":"themes/next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":1631193232000},{"_id":"themes/next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1631193232000},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1631193232000},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":1631193232000},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1631193233000},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1631193233000},{"_id":"themes/next/layout/_third-party/index.njk","hash":"3221ebcb2f308659ed1a86d1d53978aa62576958","modified":1631193233000},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1631193233000},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1631193233000},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":1631193233000},{"_id":"themes/next/scripts/events/index.js","hash":"89091bc943cd8b8c63b8af3d26fb0a027048e9ba","modified":1631193233000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1631193234000},{"_id":"themes/next/scripts/filters/locals.js","hash":"0cd7da6755459d60779f0a7ccf311e26e184d55d","modified":1631193234000},{"_id":"themes/next/scripts/filters/minify.js","hash":"7dc9e9366a19dc3c7be7ff482fbd19c88e620bf5","modified":1631193234000},{"_id":"themes/next/scripts/filters/post.js","hash":"42a9b81c5449afa9d67770604478168333c93804","modified":1631193234000},{"_id":"themes/next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1631193234000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"b9785bc737470e9b8e910e7da9e8c45c2ead58fa","modified":1631193234000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"3850424dbb23ca0791b35695e24804492d89f925","modified":1631193234000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":1631193234000},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1631193234000},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1631193234000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1631193234000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"79102d9e9bccff6224e77a77c4d2d363094ae3df","modified":1631193234000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1631193234000},{"_id":"themes/next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1631193234000},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1631193234000},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1631193234000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1631193234000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1631193234000},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1631193234000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1631193234000},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1631193234000},{"_id":"themes/next/source/css/_colors.styl","hash":"b37f9847d2f95632e911df670b51921a7d748068","modified":1631193234000},{"_id":"themes/next/source/css/_mixins.styl","hash":"acef5acc728f24cb657be8d7010d836b4d556b0e","modified":1631193234000},{"_id":"themes/next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":1631193235000},{"_id":"themes/next/source/css/noscript.styl","hash":"76bba5d7916e9930e68215a0fce3a7d81c44510f","modified":1631193235000},{"_id":"themes/next/source/images/android-chrome-192x192.png","hash":"70f5e754238a5e6e43737a246e245645e449866d","modified":1631262602000},{"_id":"themes/next/source/images/apple-touch-icon.png","hash":"41e20d1bcc0b024c4febb4a167c0b3bae786533d","modified":1631262547000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1631193237000},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1631193237000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1631193237000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1631193237000},{"_id":"themes/next/source/images/favicon-16x16.png","hash":"402e199ec5e50b4946915763cedd17b87caa3942","modified":1631262547000},{"_id":"themes/next/source/images/favicon-32x32.png","hash":"6214cb02754f6c94fcb79bb9e936d3231320d1e9","modified":1631262547000},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1631193237000},{"_id":"themes/next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1631193237000},{"_id":"themes/next/source/images/manifest.json","hash":"e1723dd9813b4f2df2da91f834ff644578649cc1","modified":1631262547000},{"_id":"themes/next/source/images/safari-pinned-tab.svg","hash":"caac31677d5a20d151b2e19906b3ce440aac7bfd","modified":1631262547000},{"_id":"themes/next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1631193237000},{"_id":"themes/next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1631193237000},{"_id":"themes/next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1631193237000},{"_id":"themes/next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1631193237000},{"_id":"themes/next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1631193237000},{"_id":"themes/next/source/js/next-boot.js","hash":"b1d24dc9ebc2a3b4a4c5a4f737de2f8ef126cfa9","modified":1631193237000},{"_id":"themes/next/source/js/pjax.js","hash":"5bfc1cea214bd31847adc356f37df8e0b6a449df","modified":1631193237000},{"_id":"themes/next/source/js/schedule.js","hash":"71d62fc3584c47ff2d4cc945226e412264399be9","modified":1631193237000},{"_id":"themes/next/source/js/utils.js","hash":"a4d42422119a0dacad426f033ea3aaf4e3cf339b","modified":1631193237000},{"_id":"themes/next/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1631193238000},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1631193238000},{"_id":"themes/next/test/helpers/next-url.js","hash":"a91d880cb75e0a8e65a7be4c7362b2c8ebfb7c4f","modified":1631193238000},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1631193238000},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1631193238000},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1631193238000},{"_id":"themes/next/test/tags/group-pictures.js","hash":"f41640e5d0f552c0b0c4ac8876a2edb0fcf54e56","modified":1631193238000},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1631193238000},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1631193238000},{"_id":"themes/next/test/tags/link-grid.js","hash":"43d298fafb7c45a874b766d443843bd26346e689","modified":1631193238000},{"_id":"themes/next/test/tags/mermaid.js","hash":"ab77be5f3c6d9a57c7b9dda6decf1906a736fef9","modified":1631193238000},{"_id":"themes/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1631193238000},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1631193238000},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1631193238000},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1631193238000},{"_id":"themes/next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1631193238000},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"49aa8de07918a11399131dfd703418af3f0a1a19","modified":1631193232000},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"8ed5ab7ec63f9fd5438d1c497cc5f50ae11fcfdf","modified":1631193232000},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"ffb6c69a9c90793cbe9bf0544b55f7a41c016d8f","modified":1631193232000},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"53895b3af95667edc5bf5d7356f8a2b4fe091447","modified":1631193232000},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"b46f412c0b4f775fd329d50357f722f5d7c1a3ba","modified":1631193232000},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"c9390824b57f23b7c8a5c23a9834514123673766","modified":1631193232000},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":1631193232000},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":1631193232000},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1631193232000},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1631193232000},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1631193232000},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"ca2ccf3cf1874c45712f192ad45dea96fbd9920d","modified":1631193232000},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1631193233000},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1631193233000},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1631193233000},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1631193232000},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1631193232000},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1631193232000},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"471dcbe22d0dbe043dcf25a1a1c17ca76aa9a548","modified":1631193232000},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"7384e6390067ef2a84e7310d6adb3f6104ed62e2","modified":1631193233000},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":1631193233000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"5c01e380ba843f8016d8fa4593432430f5bd3584","modified":1631193233000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1631193233000},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":1631193233000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1631193233000},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1631193233000},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"2d36a481a70d5f450f1f166dc556ac1218b18537","modified":1631193233000},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1631193233000},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1631193233000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1631193233000},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1631193233000},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1631193233000},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1631193233000},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1631193233000},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1631193233000},{"_id":"themes/next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1631193233000},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1631193233000},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1631193233000},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"d82c24136bbd3443b85f07f5579845833b594684","modified":1631193233000},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1631193233000},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1631193233000},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"3fc91aba5b17a5ae60b8e04707a7da87db4d0340","modified":1631193233000},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1631193233000},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1631193233000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1631193233000},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1631193233000},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1631193233000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1631193233000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"92ab6bb3c3122980699f0613dac27a7cabfedecc","modified":1631193234000},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1631193234000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1631193234000},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"b281be775b693f9bf32766c8f6ef703c72ac9b00","modified":1631193234000},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"08dac57e15c9f06c7cf54884b045f2362595f9d2","modified":1631193234000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"aa05e6b3d613a756178b8ba06832ad27499d4c14","modified":1631193234000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1631193234000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1631193234000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1631193234000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"135b87d151055eefdbc711d9e704b112b3214a84","modified":1631193234000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1631193234000},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1631193234000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1631193234000},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1631193234000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1631193237000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1631193237000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1631193237000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1631193237000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"32a1b73944561655087d80f025208a84e012b3cf","modified":1631193237000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"62f4638674c92dfb72454fee38751d0227d3d225","modified":1631193237000},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1631193237000},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"6f58cd7aa8f6f1ab92d5a96551add293f4e55312","modified":1631193237000},{"_id":"themes/next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1631193237000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d4809783ded05625675b1b4bbd9e99d7f5f7d7f9","modified":1631193235000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ece860218125bdb2578f373ed4f5040c9670e4b1","modified":1631193235000},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"3c7ae405dd30b9b46494a6b9a6cb1b7ec6138ba9","modified":1631193235000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2a29bf3692f42f84e8f29314e0fb349f86fc727a","modified":1631193235000},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"0c9f72ad98807521cbdcee7b5bbe2e884311db39","modified":1631193235000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"aafbb3c5c20f525a92716d89ff216c3081d7b4da","modified":1631193235000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2e58cb90a77d3dd16e02b8949808b4b16453828c","modified":1631193236000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1631193236000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1631193236000},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1631193236000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1631193236000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"41cba8c4c5637a6b8f1b62e67673b33676f5d734","modified":1631193236000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1631193236000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1631193236000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1631193236000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1631193236000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1631193236000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"357b899ac0f0dfbbbebf1ea972030c7cefa463ce","modified":1631193236000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"b332868d76d9f1651efd65abfc0d3c9d699b1a45","modified":1631193236000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1631193236000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1631193236000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"8a70d51d8f7cd113e5fbc9f0e70c46a072f282c8","modified":1631193236000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1631193236000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":1631193236000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1631193236000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1631193237000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"be5c46b983df08b9dbac1b4749b1a101b54b6b50","modified":1631193237000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1631193237000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1631193237000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":1631193237000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1631193237000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1631193237000},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1631193237000},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1631193237000},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1631193237000},{"_id":"themes/next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1631193237000},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1631193237000},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1631193237000},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"8c8ebec444c727b704ea41ad88b0b96ed2e4b8d4","modified":1631193238000},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1631193238000},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1631193238000},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1631193238000},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1631193238000},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1631193238000},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1631193238000},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1631193238000},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1631193238000},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"b37f1b14aef2402d0c2d88f999ff0ce5ef6823c1","modified":1631193238000},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1631193238000},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1631193238000},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1631193238000},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"aafb764c64f6cd5a48ad194adf65ac77078242b1","modified":1631193238000},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1631193238000},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"b3fa752f72ca1413289b76c56fbd33a00e3d25d7","modified":1631193235000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1631193235000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"76d0dfb3a8b873a6180604ac6daecf38b6a963a2","modified":1631193235000},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"ea351936d71e0b6259febac3d7d56d1be6927bf9","modified":1631193235000},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":1631193235000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1631193235000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"bef7791a2e67e79f02076f2a89e1c7f95a83048c","modified":1631193235000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1631193235000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1631193235000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":1631193235000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1631193235000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1631193235000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1631193235000},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1631193235000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1631193235000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"7102f8e819b62cf7d121fd063dc663fd068feaa6","modified":1631193235000},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"b457756758f0632767e8a560e3033059cbe4a67b","modified":1631193235000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"83c6588c51cd418336f4945813410a100ddfe2a4","modified":1631193235000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"2896840ab8ac8ab2a7f76d18df893f290ac31625","modified":1631193235000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"2c534d2b2dbc932ad65d335a720a7ba9612bac04","modified":1631193235000},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"bf88d9c585d7b00463c46352402cfea415c29493","modified":1631193235000},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"5a4e5ed613f3990378f3f632e8f16b33374e0095","modified":1631193235000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"d6d60f02b5e9f89dbfce180b3884030898022664","modified":1631193235000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"cf194bea1c9e67fde871a04de3bc81df72c54277","modified":1631193235000},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"f1778d2c56974b96dae429456d5c55be325c4946","modified":1631193235000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":1631193235000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"9a47c9045e443b8d20932f9c564a3a05fa4c6b51","modified":1631193235000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1631193235000},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"eae7b83f1c711ad2ab3a41d89f517445856ffec8","modified":1631193235000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1631193236000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1631193236000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1631193236000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1631193236000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"f7ff85fe6c4efb8ff036fab2c3277b7d8bed69a8","modified":1631193236000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1631193236000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"432e73bc4f99322af6af1852e0ea6e674919c31a","modified":1631193236000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"6394340c28a21f6aa90e786f3bfe24fb26595653","modified":1631193236000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"69eb1c282a8fd5dbab606cc09c34c5dc8e44e753","modified":1631193236000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":1631193236000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"15a5e273a8137550c93c8d2a60f9fcf86e04a89e","modified":1631193236000},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"cef4e779473daa3761709958243c6b8a57bbd814","modified":1631193236000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1631193236000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"08e79881d58d01afab6dbed37ab4f52356564d7e","modified":1631193236000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1631193236000},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"2421500e447822ef1b6826403a3e1df3345641d7","modified":1631193236000},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"3c029a003e9bf747e1b9cc7c0c127f6028374876","modified":1631193236000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"f53e6c12bd4805888f696386d00668f23cd335e7","modified":1631193236000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"50b00218e854200c4ec0573a841e226d49c45cba","modified":1631193236000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1631193236000},{"_id":"themes/next/source/images/avatar.png","hash":"cdbd12c9229c8bda65254daf50d47240c08b469f","modified":1615631935000},{"_id":"themes/next/source/images/android-chrome-384x384.png","hash":"f4b6028e2a30ef95bd2d628d6daab0a919d9349e","modified":1631262602000},{"_id":"source/_posts/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1631368953159},{"_id":"source/_posts/.git/config","hash":"80de82dfd57795eed1fcbc83b7a9a318eb9e3b20","modified":1631368953170},{"_id":"source/_posts/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1631368953142},{"_id":"source/_posts/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1631368953144},{"_id":"source/_posts/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1631368953145},{"_id":"source/_posts/.git/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1631368953146},{"_id":"source/_posts/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1631368953147},{"_id":"source/_posts/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1631368953148},{"_id":"source/_posts/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1631368953148},{"_id":"source/_posts/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1631368953149},{"_id":"source/_posts/.git/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1631368953150},{"_id":"source/_posts/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1631368953151},{"_id":"source/_posts/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1631368953152},{"_id":"source/_posts/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1631368953151},{"_id":"source/_posts/.git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1631368953153},{"_id":"source/_posts/.git/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1631368953154},{"_id":"source/_posts/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1631368953154}],"Category":[{"name":"51nod","_id":"cktfuxgzd0004ootnbvejgzkw"},{"name":"Codeforces","_id":"cktfuxgzi000aootn0hdt5hpc"},{"name":"BZOJ","_id":"cktfuxgzo000kootnhijj3257"},{"name":"JOISC","_id":"cktfuxh04001zootnfod93aor"},{"name":"UVa","_id":"cktfuxh0i002nootnfeus43na"},{"name":"TopCoder","_id":"cktfuxh0l002tootn5ze3g1yp"},{"name":"ABC","_id":"cktfuxh0n002zootnbvqq5e9h"},{"name":"Cerc","_id":"cktfuxh0r0035ootngti891de"},{"name":"算法","_id":"cktfuxh0u003cootn49unguzf"},{"name":"省选","_id":"cktfuxh0w003iootnh8t6aqd0"},{"name":"洛谷月赛","_id":"cktfuxh0y003nootnc698djm6"},{"name":"考试","_id":"cktfuxh110041ootn77mkbnvr"}],"Data":[],"Page":[{"title":"categories","date":"2021-09-10T09:12:50.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-09-10 17:12:50\ntype: categories\n---\n","updated":"2021-09-10T11:15:41.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cktfuxgz40000ootng7m93nvu","content":"\r\n","site":{"data":{}},"length":0,"excerpt":"","more":"\r\n"},{"title":"标签","date":"2021-09-10T09:09:59.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-09-10 17:09:59\ntype: tags\n---\n","updated":"2021-09-10T13:39:46.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cktfuxgzb0002ootn6llubwif","content":"\r\n","site":{"data":{}},"length":0,"excerpt":"","more":"\r\n"},{"title":"友情链接","date":"2021-09-10T11:13:33.000Z","type":"links","_content":"- [yyh](https://yijan.co/)\n- [cjz](https://www.cnblogs.com/Juanzhang/)\n- [zjk](https://4182543731.github.io/)\n- [lsj](https://0x131cc05.github.io/)\n- [zzh](https://orzzh.icu/)\n- [wkm](https://blog.blackwhitetony.com/links.html)\n- [gjh](https://www.cnblogs.com/KevinTalent)","source":"links/index.md","raw":"---\ntitle: 友情链接\ndate: 2021-09-10 19:13:33\ntype: links\n---\n- [yyh](https://yijan.co/)\n- [cjz](https://www.cnblogs.com/Juanzhang/)\n- [zjk](https://4182543731.github.io/)\n- [lsj](https://0x131cc05.github.io/)\n- [zzh](https://orzzh.icu/)\n- [wkm](https://blog.blackwhitetony.com/links.html)\n- [gjh](https://www.cnblogs.com/KevinTalent)","updated":"2021-09-10T14:06:05.000Z","path":"links/index.html","comments":1,"layout":"page","_id":"cktfuxgzf0006ootn6jeuaudv","content":"<ul>\r\n<li><a href=\"https://yijan.co/\">yyh</a></li>\r\n<li><a href=\"https://www.cnblogs.com/Juanzhang/\">cjz</a></li>\r\n<li><a href=\"https://4182543731.github.io/\">zjk</a></li>\r\n<li><a href=\"https://0x131cc05.github.io/\">lsj</a></li>\r\n<li><a href=\"https://orzzh.icu/\">zzh</a></li>\r\n<li><a href=\"https://blog.blackwhitetony.com/links.html\">wkm</a></li>\r\n<li><a href=\"https://www.cnblogs.com/KevinTalent\">gjh</a></li>\r\n</ul>\r\n","site":{"data":{}},"length":21,"excerpt":"","more":"<ul>\r\n<li><a href=\"https://yijan.co/\">yyh</a></li>\r\n<li><a href=\"https://www.cnblogs.com/Juanzhang/\">cjz</a></li>\r\n<li><a href=\"https://4182543731.github.io/\">zjk</a></li>\r\n<li><a href=\"https://0x131cc05.github.io/\">lsj</a></li>\r\n<li><a href=\"https://orzzh.icu/\">zzh</a></li>\r\n<li><a href=\"https://blog.blackwhitetony.com/links.html\">wkm</a></li>\r\n<li><a href=\"https://www.cnblogs.com/KevinTalent\">gjh</a></li>\r\n</ul>\r\n"}],"Post":[{"title":"奇怪的数学题 | 51nod1847","date":"2021-05-03T10:13:25.000Z","updated":"2021-05-03T10:13:25.000Z","_content":"> [题目链接](https://www.51nod.com/Challenge/Problem.html#problemId=1847)\n>\n> 给定 $n,k$，求 $\\sum\\limits_{i=1}^n\\sum\\limits_{j=1}^n\\text{sgcd}(i,j)^k$。\n>\n> 其中 $\\text{sgcd}(i,j)$ 表示 $i,j$ 的次大公约数。特别地，如果 $\\text{gcd}(i,j)=1$，则 $\\text{sgcd}(i,j)=0$。\n>\n> 答案对 $2^{32}$ 取模。\n>\n> $n \\le 10^9,k \\le 50$\n\n$p_i$ 表示第 $i$ 个质数，$d_i$ 表示 $i$ 的最小质因子。\n\n有 $\\text{sgcd}(i,j)=\\dfrac{\\gcd(i,j)}{d_{\\gcd(i,j)}}$。\n\n考虑枚举 $\\gcd$。\n$$\n\\begin{aligned}\n&\\sum_{i=1}^n\\sum_{j=1}^n\\text{sgcd}(i,j)^k\\\\\n&=\\sum_{c=2}^n(\\frac c{d_c})^k\\sum_{i=1}^{\\lfloor\\frac nc\\rfloor}\\sum_{j=1}^{\\lfloor\\frac nc\\rfloor}[gcd(i,j)=1]\\\\\n&=\\sum_{c=2}^n(\\frac c{d_c})^k(2\\sum_{i=1}^{\\lfloor\\frac nc\\rfloor}\\varphi(i)-1)\n\\end{aligned}\n$$\n现在的问题是算 $(\\frac x{d_x})^k$ 和 $\\varphi(x)$ 在 $\\lfloor \\frac nc \\rfloor$ 处的前缀和，后者直接[杜教筛](http://coding-pages-bucket-3532178-8430896-13917-522304-1305159063.cos-website.ap-hongkong.myqcloud.com/du-jiao-shai-and-min-25-shai-and-powerful-number-shai/#%E6%9D%9C%E6%95%99%E7%AD%9B)即可。\n\n对于前者，由于涉及到 $d_x$ 考虑 [Min-25 筛](http://coding-pages-bucket-3532178-8430896-13917-522304-1305159063.cos-website.ap-hongkong.myqcloud.com/du-jiao-shai-and-min-25-shai-and-powerful-number-shai/#min-25-%E7%AD%9B)。\n\n设\n$$\ng(n,i) = \\sum_{j=2}^n [j \\in P \\lor d_j > p_i]j^k\\\\\nf(n,i) = \\sum_{j=2}^n [j \\not\\in P \\land d_j \\le p_i](\\frac j{d_j})^k\\\\\nh(h,i) = \\sum_{j=2}^n [j \\in P \\lor d_j > p_i]\n$$\n有递推\n$$\ng(n, i) = g(n, i - 1) - p_i^k(g(\\lfloor\\frac n {p_i} \\rfloor, i - 1) - g(p_i-1,i))\\\\\nf(n,i) = f(n,i-1)+g(\\lfloor\\frac n {p_i} \\rfloor,i-1) - g(p_i-1,i)\\\\\nh(n,i)=h(n,i-1)-h(\\lfloor\\frac n {p_i} \\rfloor, i - 1) + h(p_i-1,i)\n$$\n初始化\n$$\ng(n,0)=\\sum_{i=2}^ni^k\\\\\nf(n,0)=0\\\\\nh(n,0)=n-1\n$$\n这里需要求[自然数等幂和](http://coding-pages-bucket-3532178-8430896-13917-522304-1305159063.cos-website.ap-hongkong.myqcloud.com/zi-ran-shu-deng-mi-qiu-he/)。\n\n当 $n < p_i^2$ 时都不需要转移，因此这是一个标准的 Min-25 筛。\n\n复杂度 $O(\\frac {n^{\\frac 34}}{\\log n}+n^{\\frac 23})$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\ntypedef unsigned int U;\n\nint n, K;\nnamespace Sum {\n    U S[55][55];\n    void pre() {\n        S[0][0] = 1;\n        rep(i, 1, K) rep(j, 1, i) S[i][j] = S[i - 1][j - 1] + (U)j * S[i - 1][j];\n    }\n    U qry(int n, U re = 0) {\n        rep(i, 1, K) {\n            U t = 1;\n            rep(j, n + 1 - i, n + 1) if(j % (i + 1)) t *= j;\n            else t *= j / (i + 1);\n            re += t * S[K][i];\n        }\n        return re - 1u;\n    }\n};\nnamespace Du {\n    int m, pid, prm[100000];\n    U phi[1000005], S[1005];\n    void pre() {\n        m = pow(n, 2. / 3);\n        phi[1] = 1;\n        rep(i, 2, m) {\n            if(!phi[i]) phi[i] = i - 1, prm[++pid] = i;\n            for(int j = 1; i * prm[j] <= m; j++)\n            if(i % prm[j]) phi[i * prm[j]] = phi[i] * phi[prm[j]];\n            else { phi[i * prm[j]] = phi[i] * prm[j]; break; }\n        }\n        rep(i, 1, m) phi[i] += phi[i - 1];\n    }\n    U qry(int i) {\n        if(i <= m) return phi[i];\n        if(S[n / i]) return S[n / i];\n        U res = i * (i + 1ll) / 2;\n        for(int l = 2, r; l <= i; l = r + 1) {\n            r = i / (i / l);\n            res -= qry(i / l) * (r - l + 1);\n        }\n        return S[n / i] = res;\n    }\n};\nnamespace M25 {\n    constexpr int N = sqrt(1e9) + 5;\n    int m;\n    U g1[N], g2[N], f1[N], f2[N], h1[N], h2[N];\n    void pre() {\n        m = sqrt(n);\n        rep(i, 1, m) {\n            g1[i] = Sum::qry(i), g2[i] = Sum::qry(n / i);\n            h1[i] = i - 1, h2[i] = n / i - 1;\n        }\n        rep(p, 2, m) if(h1[p] ^ h1[p - 1]) {\n            int w1 = m / p, w3 = p * p, w2 = min(m, n / w3);\n            int j, d = n / p;\n            U x = 1, gx = g1[p - 1], hx = h1[p - 1];\n            rep(i, 1, K) x *= p;\n            rep(i, 1, w1) {\n                j = i * p, h2[i] -= h2[j] - hx;\n                f2[i] += g2[j] - gx, g2[i] -= x * (g2[j] - gx);\n            }\n            rep(i, w1 + 1, w2) {\n                j = d / i, h2[i] -= h1[j] - hx;\n                f2[i] += g1[j] - gx, g2[i] -= x * (g1[j] - gx);\n            }\n            per(i, m, w3) {\n                j = i / p, h1[i] -= h1[j] - hx;\n                f1[i] += g1[j] - gx, g1[i] -= x * (g1[j] - gx);\n            }\n        }\n    }\n    U qry(int i) {return i <= m ? f1[i] + h1[i] : f2[n / i] + h2[n / i]; }\n};\nint main() {\n    cin >> n >> K;\n    Sum::pre(), Du::pre(), M25::pre();\n    U as = 0;\n    for(int l = 2, r; l <= n; l = r + 1) {\n        r = n / (n / l);\n        as += (2u * Du::qry(n / l) - 1u) * (M25::qry(r) - M25::qry(l - 1));\n    }\n    cout << as;\n    return 0;\n}\n```","source":"_posts/51nod1847.md","raw":"---\ntitle: 奇怪的数学题 | 51nod1847\ndate: 2021-05-03 18:13:25\nupdated: 2021-05-03 18:13:25\ntags: [数论,自然数等幂求和,Min-25 筛,杜教筛]\ncategories: 51nod\n---\n> [题目链接](https://www.51nod.com/Challenge/Problem.html#problemId=1847)\n>\n> 给定 $n,k$，求 $\\sum\\limits_{i=1}^n\\sum\\limits_{j=1}^n\\text{sgcd}(i,j)^k$。\n>\n> 其中 $\\text{sgcd}(i,j)$ 表示 $i,j$ 的次大公约数。特别地，如果 $\\text{gcd}(i,j)=1$，则 $\\text{sgcd}(i,j)=0$。\n>\n> 答案对 $2^{32}$ 取模。\n>\n> $n \\le 10^9,k \\le 50$\n\n$p_i$ 表示第 $i$ 个质数，$d_i$ 表示 $i$ 的最小质因子。\n\n有 $\\text{sgcd}(i,j)=\\dfrac{\\gcd(i,j)}{d_{\\gcd(i,j)}}$。\n\n考虑枚举 $\\gcd$。\n$$\n\\begin{aligned}\n&\\sum_{i=1}^n\\sum_{j=1}^n\\text{sgcd}(i,j)^k\\\\\n&=\\sum_{c=2}^n(\\frac c{d_c})^k\\sum_{i=1}^{\\lfloor\\frac nc\\rfloor}\\sum_{j=1}^{\\lfloor\\frac nc\\rfloor}[gcd(i,j)=1]\\\\\n&=\\sum_{c=2}^n(\\frac c{d_c})^k(2\\sum_{i=1}^{\\lfloor\\frac nc\\rfloor}\\varphi(i)-1)\n\\end{aligned}\n$$\n现在的问题是算 $(\\frac x{d_x})^k$ 和 $\\varphi(x)$ 在 $\\lfloor \\frac nc \\rfloor$ 处的前缀和，后者直接[杜教筛](http://coding-pages-bucket-3532178-8430896-13917-522304-1305159063.cos-website.ap-hongkong.myqcloud.com/du-jiao-shai-and-min-25-shai-and-powerful-number-shai/#%E6%9D%9C%E6%95%99%E7%AD%9B)即可。\n\n对于前者，由于涉及到 $d_x$ 考虑 [Min-25 筛](http://coding-pages-bucket-3532178-8430896-13917-522304-1305159063.cos-website.ap-hongkong.myqcloud.com/du-jiao-shai-and-min-25-shai-and-powerful-number-shai/#min-25-%E7%AD%9B)。\n\n设\n$$\ng(n,i) = \\sum_{j=2}^n [j \\in P \\lor d_j > p_i]j^k\\\\\nf(n,i) = \\sum_{j=2}^n [j \\not\\in P \\land d_j \\le p_i](\\frac j{d_j})^k\\\\\nh(h,i) = \\sum_{j=2}^n [j \\in P \\lor d_j > p_i]\n$$\n有递推\n$$\ng(n, i) = g(n, i - 1) - p_i^k(g(\\lfloor\\frac n {p_i} \\rfloor, i - 1) - g(p_i-1,i))\\\\\nf(n,i) = f(n,i-1)+g(\\lfloor\\frac n {p_i} \\rfloor,i-1) - g(p_i-1,i)\\\\\nh(n,i)=h(n,i-1)-h(\\lfloor\\frac n {p_i} \\rfloor, i - 1) + h(p_i-1,i)\n$$\n初始化\n$$\ng(n,0)=\\sum_{i=2}^ni^k\\\\\nf(n,0)=0\\\\\nh(n,0)=n-1\n$$\n这里需要求[自然数等幂和](http://coding-pages-bucket-3532178-8430896-13917-522304-1305159063.cos-website.ap-hongkong.myqcloud.com/zi-ran-shu-deng-mi-qiu-he/)。\n\n当 $n < p_i^2$ 时都不需要转移，因此这是一个标准的 Min-25 筛。\n\n复杂度 $O(\\frac {n^{\\frac 34}}{\\log n}+n^{\\frac 23})$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\ntypedef unsigned int U;\n\nint n, K;\nnamespace Sum {\n    U S[55][55];\n    void pre() {\n        S[0][0] = 1;\n        rep(i, 1, K) rep(j, 1, i) S[i][j] = S[i - 1][j - 1] + (U)j * S[i - 1][j];\n    }\n    U qry(int n, U re = 0) {\n        rep(i, 1, K) {\n            U t = 1;\n            rep(j, n + 1 - i, n + 1) if(j % (i + 1)) t *= j;\n            else t *= j / (i + 1);\n            re += t * S[K][i];\n        }\n        return re - 1u;\n    }\n};\nnamespace Du {\n    int m, pid, prm[100000];\n    U phi[1000005], S[1005];\n    void pre() {\n        m = pow(n, 2. / 3);\n        phi[1] = 1;\n        rep(i, 2, m) {\n            if(!phi[i]) phi[i] = i - 1, prm[++pid] = i;\n            for(int j = 1; i * prm[j] <= m; j++)\n            if(i % prm[j]) phi[i * prm[j]] = phi[i] * phi[prm[j]];\n            else { phi[i * prm[j]] = phi[i] * prm[j]; break; }\n        }\n        rep(i, 1, m) phi[i] += phi[i - 1];\n    }\n    U qry(int i) {\n        if(i <= m) return phi[i];\n        if(S[n / i]) return S[n / i];\n        U res = i * (i + 1ll) / 2;\n        for(int l = 2, r; l <= i; l = r + 1) {\n            r = i / (i / l);\n            res -= qry(i / l) * (r - l + 1);\n        }\n        return S[n / i] = res;\n    }\n};\nnamespace M25 {\n    constexpr int N = sqrt(1e9) + 5;\n    int m;\n    U g1[N], g2[N], f1[N], f2[N], h1[N], h2[N];\n    void pre() {\n        m = sqrt(n);\n        rep(i, 1, m) {\n            g1[i] = Sum::qry(i), g2[i] = Sum::qry(n / i);\n            h1[i] = i - 1, h2[i] = n / i - 1;\n        }\n        rep(p, 2, m) if(h1[p] ^ h1[p - 1]) {\n            int w1 = m / p, w3 = p * p, w2 = min(m, n / w3);\n            int j, d = n / p;\n            U x = 1, gx = g1[p - 1], hx = h1[p - 1];\n            rep(i, 1, K) x *= p;\n            rep(i, 1, w1) {\n                j = i * p, h2[i] -= h2[j] - hx;\n                f2[i] += g2[j] - gx, g2[i] -= x * (g2[j] - gx);\n            }\n            rep(i, w1 + 1, w2) {\n                j = d / i, h2[i] -= h1[j] - hx;\n                f2[i] += g1[j] - gx, g2[i] -= x * (g1[j] - gx);\n            }\n            per(i, m, w3) {\n                j = i / p, h1[i] -= h1[j] - hx;\n                f1[i] += g1[j] - gx, g1[i] -= x * (g1[j] - gx);\n            }\n        }\n    }\n    U qry(int i) {return i <= m ? f1[i] + h1[i] : f2[n / i] + h2[n / i]; }\n};\nint main() {\n    cin >> n >> K;\n    Sum::pre(), Du::pre(), M25::pre();\n    U as = 0;\n    for(int l = 2, r; l <= n; l = r + 1) {\n        r = n / (n / l);\n        as += (2u * Du::qry(n / l) - 1u) * (M25::qry(r) - M25::qry(l - 1));\n    }\n    cout << as;\n    return 0;\n}\n```","slug":"51nod1847","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxgz80001ootnd14262cw","content":"<blockquote>\r\n<p><a href=\"https://www.51nod.com/Challenge/Problem.html#problemId=1847\">题目链接</a></p>\r\n<p>给定 <span class=\"math inline\">\\(n,k\\)</span>，求 <span class=\"math inline\">\\(\\sum\\limits_{i=1}^n\\sum\\limits_{j=1}^n\\text{sgcd}(i,j)^k\\)</span>。</p>\r\n<p>其中 <span class=\"math inline\">\\(\\text{sgcd}(i,j)\\)</span> 表示 <span class=\"math inline\">\\(i,j\\)</span> 的次大公约数。特别地，如果 <span class=\"math inline\">\\(\\text{gcd}(i,j)=1\\)</span>，则 <span class=\"math inline\">\\(\\text{sgcd}(i,j)=0\\)</span>。</p>\r\n<p>答案对 <span class=\"math inline\">\\(2^{32}\\)</span> 取模。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^9,k \\le 50\\)</span></p>\r\n</blockquote>\r\n<p><span class=\"math inline\">\\(p_i\\)</span> 表示第 <span class=\"math inline\">\\(i\\)</span> 个质数，<span class=\"math inline\">\\(d_i\\)</span> 表示 <span class=\"math inline\">\\(i\\)</span> 的最小质因子。</p>\r\n<p>有 <span class=\"math inline\">\\(\\text{sgcd}(i,j)=\\dfrac{\\gcd(i,j)}{d_{\\gcd(i,j)}}\\)</span>。</p>\r\n<p>考虑枚举 <span class=\"math inline\">\\(\\gcd\\)</span>。 <span class=\"math display\">\\[\r\n\\begin{aligned}\r\n&amp;\\sum_{i=1}^n\\sum_{j=1}^n\\text{sgcd}(i,j)^k\\\\\r\n&amp;=\\sum_{c=2}^n(\\frac c{d_c})^k\\sum_{i=1}^{\\lfloor\\frac nc\\rfloor}\\sum_{j=1}^{\\lfloor\\frac nc\\rfloor}[gcd(i,j)=1]\\\\\r\n&amp;=\\sum_{c=2}^n(\\frac c{d_c})^k(2\\sum_{i=1}^{\\lfloor\\frac nc\\rfloor}\\varphi(i)-1)\r\n\\end{aligned}\r\n\\]</span> 现在的问题是算 <span class=\"math inline\">\\((\\frac x{d_x})^k\\)</span> 和 <span class=\"math inline\">\\(\\varphi(x)\\)</span> 在 <span class=\"math inline\">\\(\\lfloor \\frac nc \\rfloor\\)</span> 处的前缀和，后者直接<a href=\"http://coding-pages-bucket-3532178-8430896-13917-522304-1305159063.cos-website.ap-hongkong.myqcloud.com/du-jiao-shai-and-min-25-shai-and-powerful-number-shai/#%E6%9D%9C%E6%95%99%E7%AD%9B\">杜教筛</a>即可。</p>\r\n<p>对于前者，由于涉及到 <span class=\"math inline\">\\(d_x\\)</span> 考虑 <a href=\"http://coding-pages-bucket-3532178-8430896-13917-522304-1305159063.cos-website.ap-hongkong.myqcloud.com/du-jiao-shai-and-min-25-shai-and-powerful-number-shai/#min-25-%E7%AD%9B\">Min-25 筛</a>。</p>\r\n<p>设 <span class=\"math display\">\\[\r\ng(n,i) = \\sum_{j=2}^n [j \\in P \\lor d_j &gt; p_i]j^k\\\\\r\nf(n,i) = \\sum_{j=2}^n [j \\not\\in P \\land d_j \\le p_i](\\frac j{d_j})^k\\\\\r\nh(h,i) = \\sum_{j=2}^n [j \\in P \\lor d_j &gt; p_i]\r\n\\]</span> 有递推 <span class=\"math display\">\\[\r\ng(n, i) = g(n, i - 1) - p_i^k(g(\\lfloor\\frac n {p_i} \\rfloor, i - 1) - g(p_i-1,i))\\\\\r\nf(n,i) = f(n,i-1)+g(\\lfloor\\frac n {p_i} \\rfloor,i-1) - g(p_i-1,i)\\\\\r\nh(n,i)=h(n,i-1)-h(\\lfloor\\frac n {p_i} \\rfloor, i - 1) + h(p_i-1,i)\r\n\\]</span> 初始化 <span class=\"math display\">\\[\r\ng(n,0)=\\sum_{i=2}^ni^k\\\\\r\nf(n,0)=0\\\\\r\nh(n,0)=n-1\r\n\\]</span> 这里需要求<a href=\"http://coding-pages-bucket-3532178-8430896-13917-522304-1305159063.cos-website.ap-hongkong.myqcloud.com/zi-ran-shu-deng-mi-qiu-he/\">自然数等幂和</a>。</p>\r\n<p>当 <span class=\"math inline\">\\(n &lt; p_i^2\\)</span> 时都不需要转移，因此这是一个标准的 Min-25 筛。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(\\frac {n^{\\frac 34}}{\\log n}+n^{\\frac 23})\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> U;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, K;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> Sum &#123;</span><br><span class=\"line\">    U S[<span class=\"number\">55</span>][<span class=\"number\">55</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pre</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        S[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, K) <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, i) S[i][j] = S[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + (U)j * S[i - <span class=\"number\">1</span>][j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">U <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> n, U re = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, K) &#123;</span><br><span class=\"line\">            U t = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(j, n + <span class=\"number\">1</span> - i, n + <span class=\"number\">1</span>) <span class=\"keyword\">if</span>(j % (i + <span class=\"number\">1</span>)) t *= j;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> t *= j / (i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            re += t * S[K][i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> re - <span class=\"number\">1u</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> Du &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m, pid, prm[<span class=\"number\">100000</span>];</span><br><span class=\"line\">    U phi[<span class=\"number\">1000005</span>], S[<span class=\"number\">1005</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pre</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        m = <span class=\"built_in\">pow</span>(n, <span class=\"number\">2.</span> / <span class=\"number\">3</span>);</span><br><span class=\"line\">        phi[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, m) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!phi[i]) phi[i] = i - <span class=\"number\">1</span>, prm[++pid] = i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; i * prm[j] &lt;= m; j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i % prm[j]) phi[i * prm[j]] = phi[i] * phi[prm[j]];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123; phi[i * prm[j]] = phi[i] * prm[j]; <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) phi[i] += phi[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">U <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt;= m) <span class=\"keyword\">return</span> phi[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S[n / i]) <span class=\"keyword\">return</span> S[n / i];</span><br><span class=\"line\">        U res = i * (i + <span class=\"number\">1ll</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">2</span>, r; l &lt;= i; l = r + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            r = i / (i / l);</span><br><span class=\"line\">            res -= <span class=\"built_in\">qry</span>(i / l) * (r - l + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> S[n / i] = res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> M25 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> <span class=\"keyword\">int</span> N = <span class=\"built_in\">sqrt</span>(<span class=\"number\">1e9</span>) + <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    U g1[N], g2[N], f1[N], f2[N], h1[N], h2[N];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pre</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        m = <span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">            g1[i] = Sum::<span class=\"built_in\">qry</span>(i), g2[i] = Sum::<span class=\"built_in\">qry</span>(n / i);</span><br><span class=\"line\">            h1[i] = i - <span class=\"number\">1</span>, h2[i] = n / i - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(p, <span class=\"number\">2</span>, m) <span class=\"keyword\">if</span>(h1[p] ^ h1[p - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> w1 = m / p, w3 = p * p, w2 = <span class=\"built_in\">min</span>(m, n / w3);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j, d = n / p;</span><br><span class=\"line\">            U x = <span class=\"number\">1</span>, gx = g1[p - <span class=\"number\">1</span>], hx = h1[p - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, K) x *= p;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, w1) &#123;</span><br><span class=\"line\">                j = i * p, h2[i] -= h2[j] - hx;</span><br><span class=\"line\">                f2[i] += g2[j] - gx, g2[i] -= x * (g2[j] - gx);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(i, w1 + <span class=\"number\">1</span>, w2) &#123;</span><br><span class=\"line\">                j = d / i, h2[i] -= h1[j] - hx;</span><br><span class=\"line\">                f2[i] += g1[j] - gx, g2[i] -= x * (g1[j] - gx);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">per</span>(i, m, w3) &#123;</span><br><span class=\"line\">                j = i / p, h1[i] -= h1[j] - hx;</span><br><span class=\"line\">                f1[i] += g1[j] - gx, g1[i] -= x * (g1[j] - gx);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">U <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;<span class=\"keyword\">return</span> i &lt;= m ? f1[i] + h1[i] : f2[n / i] + h2[n / i]; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; K;</span><br><span class=\"line\">    Sum::<span class=\"built_in\">pre</span>(), Du::<span class=\"built_in\">pre</span>(), M25::<span class=\"built_in\">pre</span>();</span><br><span class=\"line\">    U as = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">2</span>, r; l &lt;= n; l = r + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        r = n / (n / l);</span><br><span class=\"line\">        as += (<span class=\"number\">2u</span> * Du::<span class=\"built_in\">qry</span>(n / l) - <span class=\"number\">1u</span>) * (M25::<span class=\"built_in\">qry</span>(r) - M25::<span class=\"built_in\">qry</span>(l - <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; as;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":3233,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"https://www.51nod.com/Challenge/Problem.html#problemId=1847\">题目链接</a></p>\r\n<p>给定 <span class=\"math inline\">\\(n,k\\)</span>，求 <span class=\"math inline\">\\(\\sum\\limits_{i=1}^n\\sum\\limits_{j=1}^n\\text{sgcd}(i,j)^k\\)</span>。</p>\r\n<p>其中 <span class=\"math inline\">\\(\\text{sgcd}(i,j)\\)</span> 表示 <span class=\"math inline\">\\(i,j\\)</span> 的次大公约数。特别地，如果 <span class=\"math inline\">\\(\\text{gcd}(i,j)=1\\)</span>，则 <span class=\"math inline\">\\(\\text{sgcd}(i,j)=0\\)</span>。</p>\r\n<p>答案对 <span class=\"math inline\">\\(2^{32}\\)</span> 取模。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^9,k \\le 50\\)</span></p>\r\n</blockquote>\r\n<p><span class=\"math inline\">\\(p_i\\)</span> 表示第 <span class=\"math inline\">\\(i\\)</span> 个质数，<span class=\"math inline\">\\(d_i\\)</span> 表示 <span class=\"math inline\">\\(i\\)</span> 的最小质因子。</p>\r\n<p>有 <span class=\"math inline\">\\(\\text{sgcd}(i,j)=\\dfrac{\\gcd(i,j)}{d_{\\gcd(i,j)}}\\)</span>。</p>\r\n<p>考虑枚举 <span class=\"math inline\">\\(\\gcd\\)</span>。 <span class=\"math display\">\\[\r\n\\begin{aligned}\r\n&amp;\\sum_{i=1}^n\\sum_{j=1}^n\\text{sgcd}(i,j)^k\\\\\r\n&amp;=\\sum_{c=2}^n(\\frac c{d_c})^k\\sum_{i=1}^{\\lfloor\\frac nc\\rfloor}\\sum_{j=1}^{\\lfloor\\frac nc\\rfloor}[gcd(i,j)=1]\\\\\r\n&amp;=\\sum_{c=2}^n(\\frac c{d_c})^k(2\\sum_{i=1}^{\\lfloor\\frac nc\\rfloor}\\varphi(i)-1)\r\n\\end{aligned}\r\n\\]</span> 现在的问题是算 <span class=\"math inline\">\\((\\frac x{d_x})^k\\)</span> 和 <span class=\"math inline\">\\(\\varphi(x)\\)</span> 在 <span class=\"math inline\">\\(\\lfloor \\frac nc \\rfloor\\)</span> 处的前缀和，后者直接<a href=\"http://coding-pages-bucket-3532178-8430896-13917-522304-1305159063.cos-website.ap-hongkong.myqcloud.com/du-jiao-shai-and-min-25-shai-and-powerful-number-shai/#%E6%9D%9C%E6%95%99%E7%AD%9B\">杜教筛</a>即可。</p>\r\n<p>对于前者，由于涉及到 <span class=\"math inline\">\\(d_x\\)</span> 考虑 <a href=\"http://coding-pages-bucket-3532178-8430896-13917-522304-1305159063.cos-website.ap-hongkong.myqcloud.com/du-jiao-shai-and-min-25-shai-and-powerful-number-shai/#min-25-%E7%AD%9B\">Min-25 筛</a>。</p>\r\n<p>设 <span class=\"math display\">\\[\r\ng(n,i) = \\sum_{j=2}^n [j \\in P \\lor d_j &gt; p_i]j^k\\\\\r\nf(n,i) = \\sum_{j=2}^n [j \\not\\in P \\land d_j \\le p_i](\\frac j{d_j})^k\\\\\r\nh(h,i) = \\sum_{j=2}^n [j \\in P \\lor d_j &gt; p_i]\r\n\\]</span> 有递推 <span class=\"math display\">\\[\r\ng(n, i) = g(n, i - 1) - p_i^k(g(\\lfloor\\frac n {p_i} \\rfloor, i - 1) - g(p_i-1,i))\\\\\r\nf(n,i) = f(n,i-1)+g(\\lfloor\\frac n {p_i} \\rfloor,i-1) - g(p_i-1,i)\\\\\r\nh(n,i)=h(n,i-1)-h(\\lfloor\\frac n {p_i} \\rfloor, i - 1) + h(p_i-1,i)\r\n\\]</span> 初始化 <span class=\"math display\">\\[\r\ng(n,0)=\\sum_{i=2}^ni^k\\\\\r\nf(n,0)=0\\\\\r\nh(n,0)=n-1\r\n\\]</span> 这里需要求<a href=\"http://coding-pages-bucket-3532178-8430896-13917-522304-1305159063.cos-website.ap-hongkong.myqcloud.com/zi-ran-shu-deng-mi-qiu-he/\">自然数等幂和</a>。</p>\r\n<p>当 <span class=\"math inline\">\\(n &lt; p_i^2\\)</span> 时都不需要转移，因此这是一个标准的 Min-25 筛。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(\\frac {n^{\\frac 34}}{\\log n}+n^{\\frac 23})\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> U;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, K;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> Sum &#123;</span><br><span class=\"line\">    U S[<span class=\"number\">55</span>][<span class=\"number\">55</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pre</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        S[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, K) <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, i) S[i][j] = S[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + (U)j * S[i - <span class=\"number\">1</span>][j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">U <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> n, U re = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, K) &#123;</span><br><span class=\"line\">            U t = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(j, n + <span class=\"number\">1</span> - i, n + <span class=\"number\">1</span>) <span class=\"keyword\">if</span>(j % (i + <span class=\"number\">1</span>)) t *= j;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> t *= j / (i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            re += t * S[K][i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> re - <span class=\"number\">1u</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> Du &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m, pid, prm[<span class=\"number\">100000</span>];</span><br><span class=\"line\">    U phi[<span class=\"number\">1000005</span>], S[<span class=\"number\">1005</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pre</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        m = <span class=\"built_in\">pow</span>(n, <span class=\"number\">2.</span> / <span class=\"number\">3</span>);</span><br><span class=\"line\">        phi[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, m) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!phi[i]) phi[i] = i - <span class=\"number\">1</span>, prm[++pid] = i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; i * prm[j] &lt;= m; j++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i % prm[j]) phi[i * prm[j]] = phi[i] * phi[prm[j]];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123; phi[i * prm[j]] = phi[i] * prm[j]; <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) phi[i] += phi[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">U <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt;= m) <span class=\"keyword\">return</span> phi[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S[n / i]) <span class=\"keyword\">return</span> S[n / i];</span><br><span class=\"line\">        U res = i * (i + <span class=\"number\">1ll</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">2</span>, r; l &lt;= i; l = r + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            r = i / (i / l);</span><br><span class=\"line\">            res -= <span class=\"built_in\">qry</span>(i / l) * (r - l + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> S[n / i] = res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> M25 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constexpr</span> <span class=\"keyword\">int</span> N = <span class=\"built_in\">sqrt</span>(<span class=\"number\">1e9</span>) + <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    U g1[N], g2[N], f1[N], f2[N], h1[N], h2[N];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pre</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        m = <span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">            g1[i] = Sum::<span class=\"built_in\">qry</span>(i), g2[i] = Sum::<span class=\"built_in\">qry</span>(n / i);</span><br><span class=\"line\">            h1[i] = i - <span class=\"number\">1</span>, h2[i] = n / i - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(p, <span class=\"number\">2</span>, m) <span class=\"keyword\">if</span>(h1[p] ^ h1[p - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> w1 = m / p, w3 = p * p, w2 = <span class=\"built_in\">min</span>(m, n / w3);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j, d = n / p;</span><br><span class=\"line\">            U x = <span class=\"number\">1</span>, gx = g1[p - <span class=\"number\">1</span>], hx = h1[p - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, K) x *= p;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, w1) &#123;</span><br><span class=\"line\">                j = i * p, h2[i] -= h2[j] - hx;</span><br><span class=\"line\">                f2[i] += g2[j] - gx, g2[i] -= x * (g2[j] - gx);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(i, w1 + <span class=\"number\">1</span>, w2) &#123;</span><br><span class=\"line\">                j = d / i, h2[i] -= h1[j] - hx;</span><br><span class=\"line\">                f2[i] += g1[j] - gx, g2[i] -= x * (g1[j] - gx);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">per</span>(i, m, w3) &#123;</span><br><span class=\"line\">                j = i / p, h1[i] -= h1[j] - hx;</span><br><span class=\"line\">                f1[i] += g1[j] - gx, g1[i] -= x * (g1[j] - gx);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">U <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;<span class=\"keyword\">return</span> i &lt;= m ? f1[i] + h1[i] : f2[n / i] + h2[n / i]; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; K;</span><br><span class=\"line\">    Sum::<span class=\"built_in\">pre</span>(), Du::<span class=\"built_in\">pre</span>(), M25::<span class=\"built_in\">pre</span>();</span><br><span class=\"line\">    U as = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">2</span>, r; l &lt;= n; l = r + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        r = n / (n / l);</span><br><span class=\"line\">        as += (<span class=\"number\">2u</span> * Du::<span class=\"built_in\">qry</span>(n / l) - <span class=\"number\">1u</span>) * (M25::<span class=\"built_in\">qry</span>(r) - M25::<span class=\"built_in\">qry</span>(l - <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; as;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"Two Merged Sequences | Codeforces 1144G","date":"2021-03-26T07:56:27.000Z","updated":"2021-03-26T07:56:27.000Z","_content":"> [题目链接](https://codeforces.com/problemset/problem/1144/G)\n>\n> 给定一个长度为 $n$ 的序列 $A$。\n>\n> 问能否把它拆成一个严格递增序列和一个严格递减序列，如果有解则输出方案。\n>\n> $n \\le 2 \\cdot 10^5$\n\n设 $f_{i,0}$ 表示把序列的前 $i$ 个数拆成一个递增序列和一个递减序列（可以为空），并且 $A_i$ 属于递增序列时，递减序列结尾可能的最大值。$f_{i,1}$ 表示 $A_i$ 属于递减序列时，递增序列结尾可能的最小值。\n\n转移有四种：\n\n- $A_{i-1},A_i$ 都属于递增序列，条件是 $A_{i-1} < A_i$，转移为 $f_{i-1,0} \\rightarrow f_{i,0}$ 。\n- $A_{i-1},A_i$ 都属于递减序列，情况类似。\n- $A_{i-1}$ 属于递减序列，$A_i$ 属于递增序列，条件是 $f_{i-1,1} < A_i$，转移为 $A_{i-1} \\rightarrow f_{i,0}$。\n- $A_{i-1}$ 属于递增序列，$A_i$ 属于递减序列，情况类似。\n\n为了输出方案，记 $g_{i,0}$ 表示在最优方案中 $A_{i-1}$ 属于哪个序列，$g_{i,1}$ 同理。\n\n实现中可以用 ```pair <int, int>``` 把 ```f``` 和 ```g``` 数组压一起。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define fi first\n#define se second\n#define mp make_pair\n\nusing namespace std;\nconst int N = 2e5 + 5;\nint n, A[N], in[N];\npair <int, int> f[N][2], ans;\nint main() {\n    cin >> n;\n    rep(i, 1, n) scanf(\"%d\", &A[i]);\n    f[1][0].fi = N, f[1][1].fi = -1;\n    rep(i, 2, n) {\n        f[i][0].fi = -1, f[i][1].fi = N;\n        if(A[i - 1] < A[i]) f[i][0] = {f[i - 1][0].fi, 0};\n        if(A[i - 1] > A[i]) f[i][1] = {f[i - 1][1].fi, 1};\n        if(f[i - 1][1].fi < A[i]) f[i][0] = max(f[i][0], mp(A[i - 1], 1));\n        if(f[i - 1][0].fi > A[i]) f[i][1] = min(f[i][1], mp(A[i - 1], 0));\n    }\n    if(~f[n][0].fi || f[n][1].fi < N) {\n        puts(\"YES\");\n        in[n] = ~f[n][0].fi ? 0 : 1;\n        per(i, n, 2) in[i - 1] = f[i][in[i]].se;\n        rep(i, 1, n) printf(\"%d \", in[i]);\n    } else puts(\"NO\");\n    return 0;\n}\n```","source":"_posts/CF1144G.md","raw":"---\ntitle: Two Merged Sequences | Codeforces 1144G\ndate: 2021-03-26 15:56:27\nupdated: 2021-03-26 15:56:27\ntags: [动态规划]\ncategories: Codeforces\n---\n> [题目链接](https://codeforces.com/problemset/problem/1144/G)\n>\n> 给定一个长度为 $n$ 的序列 $A$。\n>\n> 问能否把它拆成一个严格递增序列和一个严格递减序列，如果有解则输出方案。\n>\n> $n \\le 2 \\cdot 10^5$\n\n设 $f_{i,0}$ 表示把序列的前 $i$ 个数拆成一个递增序列和一个递减序列（可以为空），并且 $A_i$ 属于递增序列时，递减序列结尾可能的最大值。$f_{i,1}$ 表示 $A_i$ 属于递减序列时，递增序列结尾可能的最小值。\n\n转移有四种：\n\n- $A_{i-1},A_i$ 都属于递增序列，条件是 $A_{i-1} < A_i$，转移为 $f_{i-1,0} \\rightarrow f_{i,0}$ 。\n- $A_{i-1},A_i$ 都属于递减序列，情况类似。\n- $A_{i-1}$ 属于递减序列，$A_i$ 属于递增序列，条件是 $f_{i-1,1} < A_i$，转移为 $A_{i-1} \\rightarrow f_{i,0}$。\n- $A_{i-1}$ 属于递增序列，$A_i$ 属于递减序列，情况类似。\n\n为了输出方案，记 $g_{i,0}$ 表示在最优方案中 $A_{i-1}$ 属于哪个序列，$g_{i,1}$ 同理。\n\n实现中可以用 ```pair <int, int>``` 把 ```f``` 和 ```g``` 数组压一起。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define fi first\n#define se second\n#define mp make_pair\n\nusing namespace std;\nconst int N = 2e5 + 5;\nint n, A[N], in[N];\npair <int, int> f[N][2], ans;\nint main() {\n    cin >> n;\n    rep(i, 1, n) scanf(\"%d\", &A[i]);\n    f[1][0].fi = N, f[1][1].fi = -1;\n    rep(i, 2, n) {\n        f[i][0].fi = -1, f[i][1].fi = N;\n        if(A[i - 1] < A[i]) f[i][0] = {f[i - 1][0].fi, 0};\n        if(A[i - 1] > A[i]) f[i][1] = {f[i - 1][1].fi, 1};\n        if(f[i - 1][1].fi < A[i]) f[i][0] = max(f[i][0], mp(A[i - 1], 1));\n        if(f[i - 1][0].fi > A[i]) f[i][1] = min(f[i][1], mp(A[i - 1], 0));\n    }\n    if(~f[n][0].fi || f[n][1].fi < N) {\n        puts(\"YES\");\n        in[n] = ~f[n][0].fi ? 0 : 1;\n        per(i, n, 2) in[i - 1] = f[i][in[i]].se;\n        rep(i, 1, n) printf(\"%d \", in[i]);\n    } else puts(\"NO\");\n    return 0;\n}\n```","slug":"CF1144G","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxgzc0003ootnay514bwf","content":"<blockquote>\r\n<p><a href=\"https://codeforces.com/problemset/problem/1144/G\">题目链接</a></p>\r\n<p>给定一个长度为 <span class=\"math inline\">\\(n\\)</span> 的序列 <span class=\"math inline\">\\(A\\)</span>。</p>\r\n<p>问能否把它拆成一个严格递增序列和一个严格递减序列，如果有解则输出方案。</p>\r\n<p><span class=\"math inline\">\\(n \\le 2 \\cdot 10^5\\)</span></p>\r\n</blockquote>\r\n<p>设 <span class=\"math inline\">\\(f_{i,0}\\)</span> 表示把序列的前 <span class=\"math inline\">\\(i\\)</span> 个数拆成一个递增序列和一个递减序列（可以为空），并且 <span class=\"math inline\">\\(A_i\\)</span> 属于递增序列时，递减序列结尾可能的最大值。<span class=\"math inline\">\\(f_{i,1}\\)</span> 表示 <span class=\"math inline\">\\(A_i\\)</span> 属于递减序列时，递增序列结尾可能的最小值。</p>\r\n<p>转移有四种：</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(A_{i-1},A_i\\)</span> 都属于递增序列，条件是 <span class=\"math inline\">\\(A_{i-1} &lt; A_i\\)</span>，转移为 <span class=\"math inline\">\\(f_{i-1,0} \\rightarrow f_{i,0}\\)</span> 。</li>\r\n<li><span class=\"math inline\">\\(A_{i-1},A_i\\)</span> 都属于递减序列，情况类似。</li>\r\n<li><span class=\"math inline\">\\(A_{i-1}\\)</span> 属于递减序列，<span class=\"math inline\">\\(A_i\\)</span> 属于递增序列，条件是 <span class=\"math inline\">\\(f_{i-1,1} &lt; A_i\\)</span>，转移为 <span class=\"math inline\">\\(A_{i-1} \\rightarrow f_{i,0}\\)</span>。</li>\r\n<li><span class=\"math inline\">\\(A_{i-1}\\)</span> 属于递增序列，<span class=\"math inline\">\\(A_i\\)</span> 属于递减序列，情况类似。</li>\r\n</ul>\r\n<p>为了输出方案，记 <span class=\"math inline\">\\(g_{i,0}\\)</span> 表示在最优方案中 <span class=\"math inline\">\\(A_{i-1}\\)</span> 属于哪个序列，<span class=\"math inline\">\\(g_{i,1}\\)</span> 同理。</p>\r\n<p>实现中可以用 <code>pair &lt;int, int&gt;</code> 把 <code>f</code> 和 <code>g</code> 数组压一起。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mp make_pair</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, A[N], in[N];</span><br><span class=\"line\">pair &lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; f[N][<span class=\"number\">2</span>], ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;A[i]);</span><br><span class=\"line\">    f[<span class=\"number\">1</span>][<span class=\"number\">0</span>].fi = N, f[<span class=\"number\">1</span>][<span class=\"number\">1</span>].fi = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, n) &#123;</span><br><span class=\"line\">        f[i][<span class=\"number\">0</span>].fi = <span class=\"number\">-1</span>, f[i][<span class=\"number\">1</span>].fi = N;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[i - <span class=\"number\">1</span>] &lt; A[i]) f[i][<span class=\"number\">0</span>] = &#123;f[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>].fi, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[i - <span class=\"number\">1</span>] &gt; A[i]) f[i][<span class=\"number\">1</span>] = &#123;f[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>].fi, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>].fi &lt; A[i]) f[i][<span class=\"number\">0</span>] = <span class=\"built_in\">max</span>(f[i][<span class=\"number\">0</span>], <span class=\"built_in\">mp</span>(A[i - <span class=\"number\">1</span>], <span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>].fi &gt; A[i]) f[i][<span class=\"number\">1</span>] = <span class=\"built_in\">min</span>(f[i][<span class=\"number\">1</span>], <span class=\"built_in\">mp</span>(A[i - <span class=\"number\">1</span>], <span class=\"number\">0</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(~f[n][<span class=\"number\">0</span>].fi || f[n][<span class=\"number\">1</span>].fi &lt; N) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;YES&quot;</span>);</span><br><span class=\"line\">        in[n] = ~f[n][<span class=\"number\">0</span>].fi ? <span class=\"number\">0</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">per</span>(i, n, <span class=\"number\">2</span>) in[i - <span class=\"number\">1</span>] = f[i][in[i]].se;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, in[i]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;NO&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":1488,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"https://codeforces.com/problemset/problem/1144/G\">题目链接</a></p>\r\n<p>给定一个长度为 <span class=\"math inline\">\\(n\\)</span> 的序列 <span class=\"math inline\">\\(A\\)</span>。</p>\r\n<p>问能否把它拆成一个严格递增序列和一个严格递减序列，如果有解则输出方案。</p>\r\n<p><span class=\"math inline\">\\(n \\le 2 \\cdot 10^5\\)</span></p>\r\n</blockquote>\r\n<p>设 <span class=\"math inline\">\\(f_{i,0}\\)</span> 表示把序列的前 <span class=\"math inline\">\\(i\\)</span> 个数拆成一个递增序列和一个递减序列（可以为空），并且 <span class=\"math inline\">\\(A_i\\)</span> 属于递增序列时，递减序列结尾可能的最大值。<span class=\"math inline\">\\(f_{i,1}\\)</span> 表示 <span class=\"math inline\">\\(A_i\\)</span> 属于递减序列时，递增序列结尾可能的最小值。</p>\r\n<p>转移有四种：</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(A_{i-1},A_i\\)</span> 都属于递增序列，条件是 <span class=\"math inline\">\\(A_{i-1} &lt; A_i\\)</span>，转移为 <span class=\"math inline\">\\(f_{i-1,0} \\rightarrow f_{i,0}\\)</span> 。</li>\r\n<li><span class=\"math inline\">\\(A_{i-1},A_i\\)</span> 都属于递减序列，情况类似。</li>\r\n<li><span class=\"math inline\">\\(A_{i-1}\\)</span> 属于递减序列，<span class=\"math inline\">\\(A_i\\)</span> 属于递增序列，条件是 <span class=\"math inline\">\\(f_{i-1,1} &lt; A_i\\)</span>，转移为 <span class=\"math inline\">\\(A_{i-1} \\rightarrow f_{i,0}\\)</span>。</li>\r\n<li><span class=\"math inline\">\\(A_{i-1}\\)</span> 属于递增序列，<span class=\"math inline\">\\(A_i\\)</span> 属于递减序列，情况类似。</li>\r\n</ul>\r\n<p>为了输出方案，记 <span class=\"math inline\">\\(g_{i,0}\\)</span> 表示在最优方案中 <span class=\"math inline\">\\(A_{i-1}\\)</span> 属于哪个序列，<span class=\"math inline\">\\(g_{i,1}\\)</span> 同理。</p>\r\n<p>实现中可以用 <code>pair &lt;int, int&gt;</code> 把 <code>f</code> 和 <code>g</code> 数组压一起。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mp make_pair</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, A[N], in[N];</span><br><span class=\"line\">pair &lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; f[N][<span class=\"number\">2</span>], ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;A[i]);</span><br><span class=\"line\">    f[<span class=\"number\">1</span>][<span class=\"number\">0</span>].fi = N, f[<span class=\"number\">1</span>][<span class=\"number\">1</span>].fi = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, n) &#123;</span><br><span class=\"line\">        f[i][<span class=\"number\">0</span>].fi = <span class=\"number\">-1</span>, f[i][<span class=\"number\">1</span>].fi = N;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[i - <span class=\"number\">1</span>] &lt; A[i]) f[i][<span class=\"number\">0</span>] = &#123;f[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>].fi, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[i - <span class=\"number\">1</span>] &gt; A[i]) f[i][<span class=\"number\">1</span>] = &#123;f[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>].fi, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[i - <span class=\"number\">1</span>][<span class=\"number\">1</span>].fi &lt; A[i]) f[i][<span class=\"number\">0</span>] = <span class=\"built_in\">max</span>(f[i][<span class=\"number\">0</span>], <span class=\"built_in\">mp</span>(A[i - <span class=\"number\">1</span>], <span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>].fi &gt; A[i]) f[i][<span class=\"number\">1</span>] = <span class=\"built_in\">min</span>(f[i][<span class=\"number\">1</span>], <span class=\"built_in\">mp</span>(A[i - <span class=\"number\">1</span>], <span class=\"number\">0</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(~f[n][<span class=\"number\">0</span>].fi || f[n][<span class=\"number\">1</span>].fi &lt; N) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;YES&quot;</span>);</span><br><span class=\"line\">        in[n] = ~f[n][<span class=\"number\">0</span>].fi ? <span class=\"number\">0</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">per</span>(i, n, <span class=\"number\">2</span>) in[i - <span class=\"number\">1</span>] = f[i][in[i]].se;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, in[i]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;NO&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"Realistic Gameplay | Codefoces 1430F","date":"2021-03-19T06:20:57.000Z","updated":"2021-03-19T06:20:57.000Z","_content":"> [题目链接](https://codeforces.com/problemset/problem/1430/F)\n>\n> 你有一把枪，枪的弹匣量为 $k$。 \n>\n> 有 $n$ 波怪物，对于第 $i$ 波，你必须在 $[l_i,r_i]$ 时间内消灭 $a_i$ 只怪物 $(r_i \\le l_{i+1})$，你可以在任意时刻打出一发子弹击杀一只怪物且不耗费时间。你每次换弹都需要将弹匣（包括里面的子弹）扔掉，并花费 1 单位的时间。\n>\n> 在保证通关的情况下，需要的最少的子弹数为多少。\n>\n> $n \\le 2000,k \\le 10^9, l_i \\le r_i \\le 10^9,a_i \\le 10^9$\n\n考虑什么时候会换弹，要么是当前子弹打完了，而这波怪还没打完，称之为一类换弹；要么是当前这波怪已经打完了，但为了通关而换新弹匣 ，称之为二类换弹。\n\n如果所有二类换弹在哪一波都是确定的，只要按时间线扫描一遍就可以算出所有一类换弹的时间。\n\n因此设 $f_i$ 表示打完前 $i$ 波怪，且在第 $i$ 波进行一次二类换弹需要的最少的子弹数。  \n转移就从第 $i + 1$ 波开始扫描，同时维护当前弹匣中的子弹数，直到不合法为止。  \n如果在 $r_j$ 之前消灭了第 $j$ 波的所有怪物，就可以在第 $j$ 波进行一次二类换弹后转移到 $f_j$。  \n如果能消灭完所有怪就更新 ```ans```。\n\n复杂度 $O(n^2)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define upd(a, b) (a = min(a, b))\n\nusing namespace std;\nconst int N = 2005;\ntypedef long long ll;\nint n, K;\nint l[N], r[N], a[N];\nll f[N];\nint main() {\n    mem(f, 63), f[0] = 0;\n    cin >> n >> K;\n    rep(i, 1, n) scanf(\"%d%d%d\", &l[i], &r[i], &a[i]);\n    rep(i, 0, n - 1) {\n        int nw = K;\n        rep(j, i + 1, n) {\n            int t = (a[j] - nw + K - 1) / K;\n            if(t > r[j] - l[j]) break;\n            nw += t * K - a[j];\n            f[i] += a[j];\n            if(j == n) upd(f[j], f[i]);\n            else if(t < l[j + 1] - l[j]) upd(f[j], f[i] + nw);\n        }\n    }\n    if(f[n] < 0x3f3f3f3f3f3f3f3f) cout << f[n];\n    else puts(\"-1\");\n    return 0;\n}\n```\n\n","source":"_posts/CF1430F.md","raw":"---\ntitle: Realistic Gameplay | Codefoces 1430F\ndate: 2021-03-19 14:20:57\nupdated: 2021-03-19 14:20:57\ntags: [动态规划,贪心]\ncategories: Codeforces\n---\n> [题目链接](https://codeforces.com/problemset/problem/1430/F)\n>\n> 你有一把枪，枪的弹匣量为 $k$。 \n>\n> 有 $n$ 波怪物，对于第 $i$ 波，你必须在 $[l_i,r_i]$ 时间内消灭 $a_i$ 只怪物 $(r_i \\le l_{i+1})$，你可以在任意时刻打出一发子弹击杀一只怪物且不耗费时间。你每次换弹都需要将弹匣（包括里面的子弹）扔掉，并花费 1 单位的时间。\n>\n> 在保证通关的情况下，需要的最少的子弹数为多少。\n>\n> $n \\le 2000,k \\le 10^9, l_i \\le r_i \\le 10^9,a_i \\le 10^9$\n\n考虑什么时候会换弹，要么是当前子弹打完了，而这波怪还没打完，称之为一类换弹；要么是当前这波怪已经打完了，但为了通关而换新弹匣 ，称之为二类换弹。\n\n如果所有二类换弹在哪一波都是确定的，只要按时间线扫描一遍就可以算出所有一类换弹的时间。\n\n因此设 $f_i$ 表示打完前 $i$ 波怪，且在第 $i$ 波进行一次二类换弹需要的最少的子弹数。  \n转移就从第 $i + 1$ 波开始扫描，同时维护当前弹匣中的子弹数，直到不合法为止。  \n如果在 $r_j$ 之前消灭了第 $j$ 波的所有怪物，就可以在第 $j$ 波进行一次二类换弹后转移到 $f_j$。  \n如果能消灭完所有怪就更新 ```ans```。\n\n复杂度 $O(n^2)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define upd(a, b) (a = min(a, b))\n\nusing namespace std;\nconst int N = 2005;\ntypedef long long ll;\nint n, K;\nint l[N], r[N], a[N];\nll f[N];\nint main() {\n    mem(f, 63), f[0] = 0;\n    cin >> n >> K;\n    rep(i, 1, n) scanf(\"%d%d%d\", &l[i], &r[i], &a[i]);\n    rep(i, 0, n - 1) {\n        int nw = K;\n        rep(j, i + 1, n) {\n            int t = (a[j] - nw + K - 1) / K;\n            if(t > r[j] - l[j]) break;\n            nw += t * K - a[j];\n            f[i] += a[j];\n            if(j == n) upd(f[j], f[i]);\n            else if(t < l[j + 1] - l[j]) upd(f[j], f[i] + nw);\n        }\n    }\n    if(f[n] < 0x3f3f3f3f3f3f3f3f) cout << f[n];\n    else puts(\"-1\");\n    return 0;\n}\n```\n\n","slug":"CF1430F","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxgzf0007ootn8uajb5sj","content":"<blockquote>\r\n<p><a href=\"https://codeforces.com/problemset/problem/1430/F\">题目链接</a></p>\r\n<p>你有一把枪，枪的弹匣量为 <span class=\"math inline\">\\(k\\)</span>。</p>\r\n<p>有 <span class=\"math inline\">\\(n\\)</span> 波怪物，对于第 <span class=\"math inline\">\\(i\\)</span> 波，你必须在 <span class=\"math inline\">\\([l_i,r_i]\\)</span> 时间内消灭 <span class=\"math inline\">\\(a_i\\)</span> 只怪物 <span class=\"math inline\">\\((r_i \\le l_{i+1})\\)</span>，你可以在任意时刻打出一发子弹击杀一只怪物且不耗费时间。你每次换弹都需要将弹匣（包括里面的子弹）扔掉，并花费 1 单位的时间。</p>\r\n<p>在保证通关的情况下，需要的最少的子弹数为多少。</p>\r\n<p><span class=\"math inline\">\\(n \\le 2000,k \\le 10^9, l_i \\le r_i \\le 10^9,a_i \\le 10^9\\)</span></p>\r\n</blockquote>\r\n<p>考虑什么时候会换弹，要么是当前子弹打完了，而这波怪还没打完，称之为一类换弹；要么是当前这波怪已经打完了，但为了通关而换新弹匣 ，称之为二类换弹。</p>\r\n<p>如果所有二类换弹在哪一波都是确定的，只要按时间线扫描一遍就可以算出所有一类换弹的时间。</p>\r\n<p>因此设 <span class=\"math inline\">\\(f_i\\)</span> 表示打完前 <span class=\"math inline\">\\(i\\)</span> 波怪，且在第 <span class=\"math inline\">\\(i\\)</span> 波进行一次二类换弹需要的最少的子弹数。<br />\r\n转移就从第 <span class=\"math inline\">\\(i + 1\\)</span> 波开始扫描，同时维护当前弹匣中的子弹数，直到不合法为止。<br />\r\n如果在 <span class=\"math inline\">\\(r_j\\)</span> 之前消灭了第 <span class=\"math inline\">\\(j\\)</span> 波的所有怪物，就可以在第 <span class=\"math inline\">\\(j\\)</span> 波进行一次二类换弹后转移到 <span class=\"math inline\">\\(f_j\\)</span>。<br />\r\n如果能消灭完所有怪就更新 <code>ans</code>。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^2)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> upd(a, b) (a = min(a, b))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2005</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, K;</span><br><span class=\"line\"><span class=\"keyword\">int</span> l[N], r[N], a[N];</span><br><span class=\"line\">ll f[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">mem</span>(f, <span class=\"number\">63</span>), f[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; K;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;l[i], &amp;r[i], &amp;a[i]);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nw = K;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, i + <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> t = (a[j] - nw + K - <span class=\"number\">1</span>) / K;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(t &gt; r[j] - l[j]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            nw += t * K - a[j];</span><br><span class=\"line\">            f[i] += a[j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j == n) <span class=\"built_in\">upd</span>(f[j], f[i]);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(t &lt; l[j + <span class=\"number\">1</span>] - l[j]) <span class=\"built_in\">upd</span>(f[j], f[i] + nw);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[n] &lt; <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>) cout &lt;&lt; f[n];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":1232,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"https://codeforces.com/problemset/problem/1430/F\">题目链接</a></p>\r\n<p>你有一把枪，枪的弹匣量为 <span class=\"math inline\">\\(k\\)</span>。</p>\r\n<p>有 <span class=\"math inline\">\\(n\\)</span> 波怪物，对于第 <span class=\"math inline\">\\(i\\)</span> 波，你必须在 <span class=\"math inline\">\\([l_i,r_i]\\)</span> 时间内消灭 <span class=\"math inline\">\\(a_i\\)</span> 只怪物 <span class=\"math inline\">\\((r_i \\le l_{i+1})\\)</span>，你可以在任意时刻打出一发子弹击杀一只怪物且不耗费时间。你每次换弹都需要将弹匣（包括里面的子弹）扔掉，并花费 1 单位的时间。</p>\r\n<p>在保证通关的情况下，需要的最少的子弹数为多少。</p>\r\n<p><span class=\"math inline\">\\(n \\le 2000,k \\le 10^9, l_i \\le r_i \\le 10^9,a_i \\le 10^9\\)</span></p>\r\n</blockquote>\r\n<p>考虑什么时候会换弹，要么是当前子弹打完了，而这波怪还没打完，称之为一类换弹；要么是当前这波怪已经打完了，但为了通关而换新弹匣 ，称之为二类换弹。</p>\r\n<p>如果所有二类换弹在哪一波都是确定的，只要按时间线扫描一遍就可以算出所有一类换弹的时间。</p>\r\n<p>因此设 <span class=\"math inline\">\\(f_i\\)</span> 表示打完前 <span class=\"math inline\">\\(i\\)</span> 波怪，且在第 <span class=\"math inline\">\\(i\\)</span> 波进行一次二类换弹需要的最少的子弹数。<br />\r\n转移就从第 <span class=\"math inline\">\\(i + 1\\)</span> 波开始扫描，同时维护当前弹匣中的子弹数，直到不合法为止。<br />\r\n如果在 <span class=\"math inline\">\\(r_j\\)</span> 之前消灭了第 <span class=\"math inline\">\\(j\\)</span> 波的所有怪物，就可以在第 <span class=\"math inline\">\\(j\\)</span> 波进行一次二类换弹后转移到 <span class=\"math inline\">\\(f_j\\)</span>。<br />\r\n如果能消灭完所有怪就更新 <code>ans</code>。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^2)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> upd(a, b) (a = min(a, b))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2005</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, K;</span><br><span class=\"line\"><span class=\"keyword\">int</span> l[N], r[N], a[N];</span><br><span class=\"line\">ll f[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">mem</span>(f, <span class=\"number\">63</span>), f[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; K;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;l[i], &amp;r[i], &amp;a[i]);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nw = K;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, i + <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> t = (a[j] - nw + K - <span class=\"number\">1</span>) / K;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(t &gt; r[j] - l[j]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            nw += t * K - a[j];</span><br><span class=\"line\">            f[i] += a[j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j == n) <span class=\"built_in\">upd</span>(f[j], f[i]);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(t &lt; l[j + <span class=\"number\">1</span>] - l[j]) <span class=\"built_in\">upd</span>(f[j], f[i] + nw);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[n] &lt; <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>) cout &lt;&lt; f[n];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"Mst | BZOJ 2238","date":"2021-03-13T13:26:51.000Z","updated":"2021-03-13T13:26:51.000Z","_content":"> [题目链接](https://darkbzoj.tk/problem/2238)  \n> 给出 $n$ 个点，$m$ 条边的无向带权图，$q$ 次询问，询问在图中删掉一条边后的 $\\text{MST}$ 的边权和。询问独立。  \n>     $n \\leq 5 \\times 10^4, m \\leq 10^5$。\n\n记原图的 $\\text{MST} = (E_{\\text{MST}}, V_{\\text{MST}})$。\n\n对于 $e(u, v, w) \\not \\in E_{\\text{MST}}$（下文称为非树边），将它删去后显然不会对答案造成任何影响。\n\n对于 $e(u, v, w) \\in E_{\\text{MST}}$（下文称为树边），将它删去后，为了使得点 $u, v$ 仍然连通，我们必须要找一条非树边代替之，且这条非树边 $e'(u', v', w')$ 所连接的顶点 $(u', v')$，在 $\\text{MST}$ 上的路径必定覆盖了 $(u, v)$。\n\n自然的，我们想到枚举每一条非树边，并将其所连接的两个节点在 $\\text{MST}$ 上的路径中的所有树边更新。\n\n更具体的，记 $f_e$（其中 $e$ 为一条树边）为能代替 $e$ 的非树边的最小权值。一开始 $f_e = +\\infty$。对于枚举到的非树边 $e'(u', v', w')$，更新所有 $e \\in E'$（其中 $E'$ 代表 $(u', v')$ 在 $\\text{MST}$ 上的路径）的 $f_e \\leftarrow \\min(f_e, w')$。\n\n问题转化为如何维护这个过程。\n\n一个经典的解法是利用树链剖分与线段树，网络上大多数的题解也是如此。不过这样做的复杂度是 $O(n \\log^2 n)$ 的，且代码长度较长。\n\n我们采用一种码量更少，复杂度更为优秀的 $O(n \\log n)$ 算法，树上倍增来解决。\n\n记录倍增数组 $\\text{fa}(u, k)$ 表示 $u$ 的 $2^k$ 级祖先。\n\n令标记 $\\text{tag}(u, k)$ 表示从 $u$ 到其 $2^k$ 级祖先的链上被更新的延时标记。易知整个算法就是要回答 $\\text{tag}(u, 0)$。\n\n考虑倍增求 LCA 的过程，同样的，我们不断从 $u', v'$ 向上跳，直到相遇，同时打上标记即可。\n\n最后将标记下传，即 \n\n$$\\text{tag}(u, i - 1) \\leftarrow \\min(\\text{tag}(u, i - 1), \\text{tag(u, i)})\\\\ $$\n$$\\text{tag}(\\text{fa}(u, i - 1), i - 1) \\leftarrow \\min(\\text{tag}(\\text{fa}(u, i - 1), i - 1), \\text{tag}(u, i))$$\n\n感性理解起来就是将 $u$ 到 $\\text{fa}(u, i)$ 的标记下传给上下两半。\n\n至此，对于删除树边 $e(u, v, w)$，其答案为:\n\n$$\n\\text{MST}_w - w + \\text{tag}(u, 0)\n$$\n\n（这里我们假设 $u$ 在 $\\text{MST}$ 上的深度更深一点）。\n\n代码实现上有一些区别。\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define upd(a, b) a = min(a, b)\n\nusing namespace std;\nconst int N = 5e4 + 5, MI = 1e6;\nconst char* Nc = \"Not connected\";\nint n, m, q, cnt, mst, head[N], d[N], fa[N][16], tag[N][16], dwn[N*2], pr[N], w[N*2];\nstruct Edge {\n    int u, v, w, id;\n    bool operator <(const Edge& b)const { return w < b.w; }\n} E[N*2];\nstruct edge { int v, nxt, id; } e[N*2];\n\nint find(int x) { return x == pr[x] ? x : pr[x] = find(pr[x]); }\nvoid add(int u, int v, int id) {\n    e[++cnt] = (edge){ v, head[u], id };\n    head[u] = cnt;\n}\nvoid dfs(int u) { // 求 d, fa, dwn 数组, dwn[i] 是第 i 条边的下端点 \n    d[u] = d[fa[u][0]] + 1;\n    rep(i, 1, 15) fa[u][i] = fa[fa[u][i-1]][i-1];\n    for(int i = head[u]; i; i = e[i].nxt) {\n        int v = e[i].v;\n        if(v == fa[u][0]) continue;\n        fa[dwn[e[i].id] = v][0] = u;\n        dfs(v);\n    }\n}\nvoid update(int u, int v, int w) { // 倍增打标记 \n    if(d[u] < d[v]) swap(u, v);\n    per(j, 15, 0) if(d[u] - (1 << j) >= d[v])\n        upd(tag[u][j], w), u = fa[u][j];\n    if(u == v) return;\n    per(j, 15, 0) if(fa[u][j] != fa[v][j]) {\n        upd(tag[u][j], w), upd(tag[v][j], w);\n        u = fa[u][j], v = fa[v][j];\n    }\n    upd(tag[u][0], w); upd(tag[v][0], w);\n}\n\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    rep(i, 1, m) {\n        int u, v; scanf(\"%d%d%d\", &u, &v, &w[i]);\n        E[i] = (Edge){ u, v, w[i], i };\n    }\n    sort(E + 1, E + m + 1);\n    rep(i, 1, n) pr[i] = i;\n    rep(i, 1, m) {\n        int f1 = find(E[i].u), f2 = find(E[i].v);\n        if(f1 == f2) continue;\n        pr[f2] = f1; mst += E[i].w; \n        add(E[i].u, E[i].v, E[i].id); add(E[i].v, E[i].u, E[i].id);\n    }\n    scanf(\"%d\", &q);\n    if(cnt / 2 < n - 1) { while(q--) puts(Nc); return 0; }\n    dfs(1);\n    memset(tag, 0x3f, sizeof tag);\n    rep(i, 1, m) if(!dwn[E[i].id]) update(E[i].u, E[i].v, E[i].w);\n    per(i, 15, 1) rep(j, 1, n) { // 标记下传到底 \n        upd(tag[j][i-1], tag[j][i]);\n        upd(tag[fa[j][i-1]][i-1], tag[j][i]);\n    }\n    while(q--) {\n        int T; scanf(\"%d\", &T);\n        if(!dwn[T]) printf(\"%d\\n\", mst);\n        else {\n            int ans = tag[dwn[T]][0];\n            if(ans == 0x3f3f3f3f) puts(Nc);\n            else printf(\"%d\\n\", mst + ans - w[T]);\n        }\n    }\n    return 0;\n}\n```","source":"_posts/BZ2238.md","raw":"---\ntitle: Mst | BZOJ 2238\ndate: 2021-03-13 21:26:51\nupdated: 2021-03-13 21:26:51\ntags: [图论,最小生成树,倍增]\ncategories: BZOJ\n---\n> [题目链接](https://darkbzoj.tk/problem/2238)  \n> 给出 $n$ 个点，$m$ 条边的无向带权图，$q$ 次询问，询问在图中删掉一条边后的 $\\text{MST}$ 的边权和。询问独立。  \n>     $n \\leq 5 \\times 10^4, m \\leq 10^5$。\n\n记原图的 $\\text{MST} = (E_{\\text{MST}}, V_{\\text{MST}})$。\n\n对于 $e(u, v, w) \\not \\in E_{\\text{MST}}$（下文称为非树边），将它删去后显然不会对答案造成任何影响。\n\n对于 $e(u, v, w) \\in E_{\\text{MST}}$（下文称为树边），将它删去后，为了使得点 $u, v$ 仍然连通，我们必须要找一条非树边代替之，且这条非树边 $e'(u', v', w')$ 所连接的顶点 $(u', v')$，在 $\\text{MST}$ 上的路径必定覆盖了 $(u, v)$。\n\n自然的，我们想到枚举每一条非树边，并将其所连接的两个节点在 $\\text{MST}$ 上的路径中的所有树边更新。\n\n更具体的，记 $f_e$（其中 $e$ 为一条树边）为能代替 $e$ 的非树边的最小权值。一开始 $f_e = +\\infty$。对于枚举到的非树边 $e'(u', v', w')$，更新所有 $e \\in E'$（其中 $E'$ 代表 $(u', v')$ 在 $\\text{MST}$ 上的路径）的 $f_e \\leftarrow \\min(f_e, w')$。\n\n问题转化为如何维护这个过程。\n\n一个经典的解法是利用树链剖分与线段树，网络上大多数的题解也是如此。不过这样做的复杂度是 $O(n \\log^2 n)$ 的，且代码长度较长。\n\n我们采用一种码量更少，复杂度更为优秀的 $O(n \\log n)$ 算法，树上倍增来解决。\n\n记录倍增数组 $\\text{fa}(u, k)$ 表示 $u$ 的 $2^k$ 级祖先。\n\n令标记 $\\text{tag}(u, k)$ 表示从 $u$ 到其 $2^k$ 级祖先的链上被更新的延时标记。易知整个算法就是要回答 $\\text{tag}(u, 0)$。\n\n考虑倍增求 LCA 的过程，同样的，我们不断从 $u', v'$ 向上跳，直到相遇，同时打上标记即可。\n\n最后将标记下传，即 \n\n$$\\text{tag}(u, i - 1) \\leftarrow \\min(\\text{tag}(u, i - 1), \\text{tag(u, i)})\\\\ $$\n$$\\text{tag}(\\text{fa}(u, i - 1), i - 1) \\leftarrow \\min(\\text{tag}(\\text{fa}(u, i - 1), i - 1), \\text{tag}(u, i))$$\n\n感性理解起来就是将 $u$ 到 $\\text{fa}(u, i)$ 的标记下传给上下两半。\n\n至此，对于删除树边 $e(u, v, w)$，其答案为:\n\n$$\n\\text{MST}_w - w + \\text{tag}(u, 0)\n$$\n\n（这里我们假设 $u$ 在 $\\text{MST}$ 上的深度更深一点）。\n\n代码实现上有一些区别。\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define upd(a, b) a = min(a, b)\n\nusing namespace std;\nconst int N = 5e4 + 5, MI = 1e6;\nconst char* Nc = \"Not connected\";\nint n, m, q, cnt, mst, head[N], d[N], fa[N][16], tag[N][16], dwn[N*2], pr[N], w[N*2];\nstruct Edge {\n    int u, v, w, id;\n    bool operator <(const Edge& b)const { return w < b.w; }\n} E[N*2];\nstruct edge { int v, nxt, id; } e[N*2];\n\nint find(int x) { return x == pr[x] ? x : pr[x] = find(pr[x]); }\nvoid add(int u, int v, int id) {\n    e[++cnt] = (edge){ v, head[u], id };\n    head[u] = cnt;\n}\nvoid dfs(int u) { // 求 d, fa, dwn 数组, dwn[i] 是第 i 条边的下端点 \n    d[u] = d[fa[u][0]] + 1;\n    rep(i, 1, 15) fa[u][i] = fa[fa[u][i-1]][i-1];\n    for(int i = head[u]; i; i = e[i].nxt) {\n        int v = e[i].v;\n        if(v == fa[u][0]) continue;\n        fa[dwn[e[i].id] = v][0] = u;\n        dfs(v);\n    }\n}\nvoid update(int u, int v, int w) { // 倍增打标记 \n    if(d[u] < d[v]) swap(u, v);\n    per(j, 15, 0) if(d[u] - (1 << j) >= d[v])\n        upd(tag[u][j], w), u = fa[u][j];\n    if(u == v) return;\n    per(j, 15, 0) if(fa[u][j] != fa[v][j]) {\n        upd(tag[u][j], w), upd(tag[v][j], w);\n        u = fa[u][j], v = fa[v][j];\n    }\n    upd(tag[u][0], w); upd(tag[v][0], w);\n}\n\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    rep(i, 1, m) {\n        int u, v; scanf(\"%d%d%d\", &u, &v, &w[i]);\n        E[i] = (Edge){ u, v, w[i], i };\n    }\n    sort(E + 1, E + m + 1);\n    rep(i, 1, n) pr[i] = i;\n    rep(i, 1, m) {\n        int f1 = find(E[i].u), f2 = find(E[i].v);\n        if(f1 == f2) continue;\n        pr[f2] = f1; mst += E[i].w; \n        add(E[i].u, E[i].v, E[i].id); add(E[i].v, E[i].u, E[i].id);\n    }\n    scanf(\"%d\", &q);\n    if(cnt / 2 < n - 1) { while(q--) puts(Nc); return 0; }\n    dfs(1);\n    memset(tag, 0x3f, sizeof tag);\n    rep(i, 1, m) if(!dwn[E[i].id]) update(E[i].u, E[i].v, E[i].w);\n    per(i, 15, 1) rep(j, 1, n) { // 标记下传到底 \n        upd(tag[j][i-1], tag[j][i]);\n        upd(tag[fa[j][i-1]][i-1], tag[j][i]);\n    }\n    while(q--) {\n        int T; scanf(\"%d\", &T);\n        if(!dwn[T]) printf(\"%d\\n\", mst);\n        else {\n            int ans = tag[dwn[T]][0];\n            if(ans == 0x3f3f3f3f) puts(Nc);\n            else printf(\"%d\\n\", mst + ans - w[T]);\n        }\n    }\n    return 0;\n}\n```","slug":"BZ2238","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxgzg0008ootn1ii8gnvn","content":"<blockquote>\r\n<p><a href=\"https://darkbzoj.tk/problem/2238\">题目链接</a><br />\r\n给出 <span class=\"math inline\">\\(n\\)</span> 个点，<span class=\"math inline\">\\(m\\)</span> 条边的无向带权图，<span class=\"math inline\">\\(q\\)</span> 次询问，询问在图中删掉一条边后的 <span class=\"math inline\">\\(\\text{MST}\\)</span> 的边权和。询问独立。<br />\r\n<span class=\"math inline\">\\(n \\leq 5 \\times 10^4, m \\leq 10^5\\)</span>。</p>\r\n</blockquote>\r\n<p>记原图的 <span class=\"math inline\">\\(\\text{MST} = (E_{\\text{MST}}, V_{\\text{MST}})\\)</span>。</p>\r\n<p>对于 <span class=\"math inline\">\\(e(u, v, w) \\not \\in E_{\\text{MST}}\\)</span>（下文称为非树边），将它删去后显然不会对答案造成任何影响。</p>\r\n<p>对于 <span class=\"math inline\">\\(e(u, v, w) \\in E_{\\text{MST}}\\)</span>（下文称为树边），将它删去后，为了使得点 <span class=\"math inline\">\\(u, v\\)</span> 仍然连通，我们必须要找一条非树边代替之，且这条非树边 <span class=\"math inline\">\\(e&#39;(u&#39;, v&#39;, w&#39;)\\)</span> 所连接的顶点 <span class=\"math inline\">\\((u&#39;, v&#39;)\\)</span>，在 <span class=\"math inline\">\\(\\text{MST}\\)</span> 上的路径必定覆盖了 <span class=\"math inline\">\\((u, v)\\)</span>。</p>\r\n<p>自然的，我们想到枚举每一条非树边，并将其所连接的两个节点在 <span class=\"math inline\">\\(\\text{MST}\\)</span> 上的路径中的所有树边更新。</p>\r\n<p>更具体的，记 <span class=\"math inline\">\\(f_e\\)</span>（其中 <span class=\"math inline\">\\(e\\)</span> 为一条树边）为能代替 <span class=\"math inline\">\\(e\\)</span> 的非树边的最小权值。一开始 <span class=\"math inline\">\\(f_e = +\\infty\\)</span>。对于枚举到的非树边 <span class=\"math inline\">\\(e&#39;(u&#39;, v&#39;, w&#39;)\\)</span>，更新所有 <span class=\"math inline\">\\(e \\in E&#39;\\)</span>（其中 <span class=\"math inline\">\\(E&#39;\\)</span> 代表 <span class=\"math inline\">\\((u&#39;, v&#39;)\\)</span> 在 <span class=\"math inline\">\\(\\text{MST}\\)</span> 上的路径）的 <span class=\"math inline\">\\(f_e \\leftarrow \\min(f_e, w&#39;)\\)</span>。</p>\r\n<p>问题转化为如何维护这个过程。</p>\r\n<p>一个经典的解法是利用树链剖分与线段树，网络上大多数的题解也是如此。不过这样做的复杂度是 <span class=\"math inline\">\\(O(n \\log^2 n)\\)</span> 的，且代码长度较长。</p>\r\n<p>我们采用一种码量更少，复杂度更为优秀的 <span class=\"math inline\">\\(O(n \\log n)\\)</span> 算法，树上倍增来解决。</p>\r\n<p>记录倍增数组 <span class=\"math inline\">\\(\\text{fa}(u, k)\\)</span> 表示 <span class=\"math inline\">\\(u\\)</span> 的 <span class=\"math inline\">\\(2^k\\)</span> 级祖先。</p>\r\n<p>令标记 <span class=\"math inline\">\\(\\text{tag}(u, k)\\)</span> 表示从 <span class=\"math inline\">\\(u\\)</span> 到其 <span class=\"math inline\">\\(2^k\\)</span> 级祖先的链上被更新的延时标记。易知整个算法就是要回答 <span class=\"math inline\">\\(\\text{tag}(u, 0)\\)</span>。</p>\r\n<p>考虑倍增求 LCA 的过程，同样的，我们不断从 <span class=\"math inline\">\\(u&#39;, v&#39;\\)</span> 向上跳，直到相遇，同时打上标记即可。</p>\r\n<p>最后将标记下传，即</p>\r\n<p><span class=\"math display\">\\[\\text{tag}(u, i - 1) \\leftarrow \\min(\\text{tag}(u, i - 1), \\text{tag(u, i)})\\\\ \\]</span> <span class=\"math display\">\\[\\text{tag}(\\text{fa}(u, i - 1), i - 1) \\leftarrow \\min(\\text{tag}(\\text{fa}(u, i - 1), i - 1), \\text{tag}(u, i))\\]</span></p>\r\n<p>感性理解起来就是将 <span class=\"math inline\">\\(u\\)</span> 到 <span class=\"math inline\">\\(\\text{fa}(u, i)\\)</span> 的标记下传给上下两半。</p>\r\n<p>至此，对于删除树边 <span class=\"math inline\">\\(e(u, v, w)\\)</span>，其答案为:</p>\r\n<p><span class=\"math display\">\\[\r\n\\text{MST}_w - w + \\text{tag}(u, 0)\r\n\\]</span></p>\r\n<p>（这里我们假设 <span class=\"math inline\">\\(u\\)</span> 在 <span class=\"math inline\">\\(\\text{MST}\\)</span> 上的深度更深一点）。</p>\r\n<p>代码实现上有一些区别。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> upd(a, b) a = min(a, b)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">5e4</span> + <span class=\"number\">5</span>, MI = <span class=\"number\">1e6</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* Nc = <span class=\"string\">&quot;Not connected&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, q, cnt, mst, head[N], d[N], fa[N][<span class=\"number\">16</span>], tag[N][<span class=\"number\">16</span>], dwn[N*<span class=\"number\">2</span>], pr[N], w[N*<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v, w, id;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"keyword\">const</span> Edge&amp; b)<span class=\"keyword\">const</span> &#123; <span class=\"keyword\">return</span> w &lt; b.w; &#125;</span><br><span class=\"line\">&#125; E[N*<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge</span> &#123;</span> <span class=\"keyword\">int</span> v, nxt, id; &#125; e[N*<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123; <span class=\"keyword\">return</span> x == pr[x] ? x : pr[x] = <span class=\"built_in\">find</span>(pr[x]); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">    e[++cnt] = (edge)&#123; v, head[u], id &#125;;</span><br><span class=\"line\">    head[u] = cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123; <span class=\"comment\">// 求 d, fa, dwn 数组, dwn[i] 是第 i 条边的下端点 </span></span><br><span class=\"line\">    d[u] = d[fa[u][<span class=\"number\">0</span>]] + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">15</span>) fa[u][i] = fa[fa[u][i<span class=\"number\">-1</span>]][i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = head[u]; i; i = e[i].nxt) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = e[i].v;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v == fa[u][<span class=\"number\">0</span>]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        fa[dwn[e[i].id] = v][<span class=\"number\">0</span>] = u;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span> </span>&#123; <span class=\"comment\">// 倍增打标记 </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d[u] &lt; d[v]) <span class=\"built_in\">swap</span>(u, v);</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(j, <span class=\"number\">15</span>, <span class=\"number\">0</span>) <span class=\"keyword\">if</span>(d[u] - (<span class=\"number\">1</span> &lt;&lt; j) &gt;= d[v])</span><br><span class=\"line\">        <span class=\"built_in\">upd</span>(tag[u][j], w), u = fa[u][j];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u == v) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(j, <span class=\"number\">15</span>, <span class=\"number\">0</span>) <span class=\"keyword\">if</span>(fa[u][j] != fa[v][j]) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">upd</span>(tag[u][j], w), <span class=\"built_in\">upd</span>(tag[v][j], w);</span><br><span class=\"line\">        u = fa[u][j], v = fa[v][j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">upd</span>(tag[u][<span class=\"number\">0</span>], w); <span class=\"built_in\">upd</span>(tag[v][<span class=\"number\">0</span>], w);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u, v; <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w[i]);</span><br><span class=\"line\">        E[i] = (Edge)&#123; u, v, w[i], i &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(E + <span class=\"number\">1</span>, E + m + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) pr[i] = i;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> f1 = <span class=\"built_in\">find</span>(E[i].u), f2 = <span class=\"built_in\">find</span>(E[i].v);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f1 == f2) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        pr[f2] = f1; mst += E[i].w; </span><br><span class=\"line\">        <span class=\"built_in\">add</span>(E[i].u, E[i].v, E[i].id); <span class=\"built_in\">add</span>(E[i].v, E[i].u, E[i].id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;q);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cnt / <span class=\"number\">2</span> &lt; n - <span class=\"number\">1</span>) &#123; <span class=\"keyword\">while</span>(q--) <span class=\"built_in\">puts</span>(Nc); <span class=\"keyword\">return</span> <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(tag, <span class=\"number\">0x3f</span>, <span class=\"keyword\">sizeof</span> tag);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) <span class=\"keyword\">if</span>(!dwn[E[i].id]) <span class=\"built_in\">update</span>(E[i].u, E[i].v, E[i].w);</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, <span class=\"number\">15</span>, <span class=\"number\">1</span>) <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, n) &#123; <span class=\"comment\">// 标记下传到底 </span></span><br><span class=\"line\">        <span class=\"built_in\">upd</span>(tag[j][i<span class=\"number\">-1</span>], tag[j][i]);</span><br><span class=\"line\">        <span class=\"built_in\">upd</span>(tag[fa[j][i<span class=\"number\">-1</span>]][i<span class=\"number\">-1</span>], tag[j][i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> T; <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!dwn[T]) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, mst);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ans = tag[dwn[T]][<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ans == <span class=\"number\">0x3f3f3f3f</span>) <span class=\"built_in\">puts</span>(Nc);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, mst + ans - w[T]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":3400,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"https://darkbzoj.tk/problem/2238\">题目链接</a><br />\r\n给出 <span class=\"math inline\">\\(n\\)</span> 个点，<span class=\"math inline\">\\(m\\)</span> 条边的无向带权图，<span class=\"math inline\">\\(q\\)</span> 次询问，询问在图中删掉一条边后的 <span class=\"math inline\">\\(\\text{MST}\\)</span> 的边权和。询问独立。<br />\r\n<span class=\"math inline\">\\(n \\leq 5 \\times 10^4, m \\leq 10^5\\)</span>。</p>\r\n</blockquote>\r\n<p>记原图的 <span class=\"math inline\">\\(\\text{MST} = (E_{\\text{MST}}, V_{\\text{MST}})\\)</span>。</p>\r\n<p>对于 <span class=\"math inline\">\\(e(u, v, w) \\not \\in E_{\\text{MST}}\\)</span>（下文称为非树边），将它删去后显然不会对答案造成任何影响。</p>\r\n<p>对于 <span class=\"math inline\">\\(e(u, v, w) \\in E_{\\text{MST}}\\)</span>（下文称为树边），将它删去后，为了使得点 <span class=\"math inline\">\\(u, v\\)</span> 仍然连通，我们必须要找一条非树边代替之，且这条非树边 <span class=\"math inline\">\\(e&#39;(u&#39;, v&#39;, w&#39;)\\)</span> 所连接的顶点 <span class=\"math inline\">\\((u&#39;, v&#39;)\\)</span>，在 <span class=\"math inline\">\\(\\text{MST}\\)</span> 上的路径必定覆盖了 <span class=\"math inline\">\\((u, v)\\)</span>。</p>\r\n<p>自然的，我们想到枚举每一条非树边，并将其所连接的两个节点在 <span class=\"math inline\">\\(\\text{MST}\\)</span> 上的路径中的所有树边更新。</p>\r\n<p>更具体的，记 <span class=\"math inline\">\\(f_e\\)</span>（其中 <span class=\"math inline\">\\(e\\)</span> 为一条树边）为能代替 <span class=\"math inline\">\\(e\\)</span> 的非树边的最小权值。一开始 <span class=\"math inline\">\\(f_e = +\\infty\\)</span>。对于枚举到的非树边 <span class=\"math inline\">\\(e&#39;(u&#39;, v&#39;, w&#39;)\\)</span>，更新所有 <span class=\"math inline\">\\(e \\in E&#39;\\)</span>（其中 <span class=\"math inline\">\\(E&#39;\\)</span> 代表 <span class=\"math inline\">\\((u&#39;, v&#39;)\\)</span> 在 <span class=\"math inline\">\\(\\text{MST}\\)</span> 上的路径）的 <span class=\"math inline\">\\(f_e \\leftarrow \\min(f_e, w&#39;)\\)</span>。</p>\r\n<p>问题转化为如何维护这个过程。</p>\r\n<p>一个经典的解法是利用树链剖分与线段树，网络上大多数的题解也是如此。不过这样做的复杂度是 <span class=\"math inline\">\\(O(n \\log^2 n)\\)</span> 的，且代码长度较长。</p>\r\n<p>我们采用一种码量更少，复杂度更为优秀的 <span class=\"math inline\">\\(O(n \\log n)\\)</span> 算法，树上倍增来解决。</p>\r\n<p>记录倍增数组 <span class=\"math inline\">\\(\\text{fa}(u, k)\\)</span> 表示 <span class=\"math inline\">\\(u\\)</span> 的 <span class=\"math inline\">\\(2^k\\)</span> 级祖先。</p>\r\n<p>令标记 <span class=\"math inline\">\\(\\text{tag}(u, k)\\)</span> 表示从 <span class=\"math inline\">\\(u\\)</span> 到其 <span class=\"math inline\">\\(2^k\\)</span> 级祖先的链上被更新的延时标记。易知整个算法就是要回答 <span class=\"math inline\">\\(\\text{tag}(u, 0)\\)</span>。</p>\r\n<p>考虑倍增求 LCA 的过程，同样的，我们不断从 <span class=\"math inline\">\\(u&#39;, v&#39;\\)</span> 向上跳，直到相遇，同时打上标记即可。</p>\r\n<p>最后将标记下传，即</p>\r\n<p><span class=\"math display\">\\[\\text{tag}(u, i - 1) \\leftarrow \\min(\\text{tag}(u, i - 1), \\text{tag(u, i)})\\\\ \\]</span> <span class=\"math display\">\\[\\text{tag}(\\text{fa}(u, i - 1), i - 1) \\leftarrow \\min(\\text{tag}(\\text{fa}(u, i - 1), i - 1), \\text{tag}(u, i))\\]</span></p>\r\n<p>感性理解起来就是将 <span class=\"math inline\">\\(u\\)</span> 到 <span class=\"math inline\">\\(\\text{fa}(u, i)\\)</span> 的标记下传给上下两半。</p>\r\n<p>至此，对于删除树边 <span class=\"math inline\">\\(e(u, v, w)\\)</span>，其答案为:</p>\r\n<p><span class=\"math display\">\\[\r\n\\text{MST}_w - w + \\text{tag}(u, 0)\r\n\\]</span></p>\r\n<p>（这里我们假设 <span class=\"math inline\">\\(u\\)</span> 在 <span class=\"math inline\">\\(\\text{MST}\\)</span> 上的深度更深一点）。</p>\r\n<p>代码实现上有一些区别。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> upd(a, b) a = min(a, b)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">5e4</span> + <span class=\"number\">5</span>, MI = <span class=\"number\">1e6</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* Nc = <span class=\"string\">&quot;Not connected&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, q, cnt, mst, head[N], d[N], fa[N][<span class=\"number\">16</span>], tag[N][<span class=\"number\">16</span>], dwn[N*<span class=\"number\">2</span>], pr[N], w[N*<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v, w, id;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"keyword\">const</span> Edge&amp; b)<span class=\"keyword\">const</span> &#123; <span class=\"keyword\">return</span> w &lt; b.w; &#125;</span><br><span class=\"line\">&#125; E[N*<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge</span> &#123;</span> <span class=\"keyword\">int</span> v, nxt, id; &#125; e[N*<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123; <span class=\"keyword\">return</span> x == pr[x] ? x : pr[x] = <span class=\"built_in\">find</span>(pr[x]); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">    e[++cnt] = (edge)&#123; v, head[u], id &#125;;</span><br><span class=\"line\">    head[u] = cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123; <span class=\"comment\">// 求 d, fa, dwn 数组, dwn[i] 是第 i 条边的下端点 </span></span><br><span class=\"line\">    d[u] = d[fa[u][<span class=\"number\">0</span>]] + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">15</span>) fa[u][i] = fa[fa[u][i<span class=\"number\">-1</span>]][i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = head[u]; i; i = e[i].nxt) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = e[i].v;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v == fa[u][<span class=\"number\">0</span>]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        fa[dwn[e[i].id] = v][<span class=\"number\">0</span>] = u;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span> </span>&#123; <span class=\"comment\">// 倍增打标记 </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d[u] &lt; d[v]) <span class=\"built_in\">swap</span>(u, v);</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(j, <span class=\"number\">15</span>, <span class=\"number\">0</span>) <span class=\"keyword\">if</span>(d[u] - (<span class=\"number\">1</span> &lt;&lt; j) &gt;= d[v])</span><br><span class=\"line\">        <span class=\"built_in\">upd</span>(tag[u][j], w), u = fa[u][j];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u == v) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(j, <span class=\"number\">15</span>, <span class=\"number\">0</span>) <span class=\"keyword\">if</span>(fa[u][j] != fa[v][j]) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">upd</span>(tag[u][j], w), <span class=\"built_in\">upd</span>(tag[v][j], w);</span><br><span class=\"line\">        u = fa[u][j], v = fa[v][j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">upd</span>(tag[u][<span class=\"number\">0</span>], w); <span class=\"built_in\">upd</span>(tag[v][<span class=\"number\">0</span>], w);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u, v; <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w[i]);</span><br><span class=\"line\">        E[i] = (Edge)&#123; u, v, w[i], i &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(E + <span class=\"number\">1</span>, E + m + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) pr[i] = i;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> f1 = <span class=\"built_in\">find</span>(E[i].u), f2 = <span class=\"built_in\">find</span>(E[i].v);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f1 == f2) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        pr[f2] = f1; mst += E[i].w; </span><br><span class=\"line\">        <span class=\"built_in\">add</span>(E[i].u, E[i].v, E[i].id); <span class=\"built_in\">add</span>(E[i].v, E[i].u, E[i].id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;q);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cnt / <span class=\"number\">2</span> &lt; n - <span class=\"number\">1</span>) &#123; <span class=\"keyword\">while</span>(q--) <span class=\"built_in\">puts</span>(Nc); <span class=\"keyword\">return</span> <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(tag, <span class=\"number\">0x3f</span>, <span class=\"keyword\">sizeof</span> tag);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) <span class=\"keyword\">if</span>(!dwn[E[i].id]) <span class=\"built_in\">update</span>(E[i].u, E[i].v, E[i].w);</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, <span class=\"number\">15</span>, <span class=\"number\">1</span>) <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, n) &#123; <span class=\"comment\">// 标记下传到底 </span></span><br><span class=\"line\">        <span class=\"built_in\">upd</span>(tag[j][i<span class=\"number\">-1</span>], tag[j][i]);</span><br><span class=\"line\">        <span class=\"built_in\">upd</span>(tag[fa[j][i<span class=\"number\">-1</span>]][i<span class=\"number\">-1</span>], tag[j][i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> T; <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!dwn[T]) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, mst);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ans = tag[dwn[T]][<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ans == <span class=\"number\">0x3f3f3f3f</span>) <span class=\"built_in\">puts</span>(Nc);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, mst + ans - w[T]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"Kuroni and Antihype | Codeforces 1305G","date":"2021-04-06T06:23:35.000Z","updated":"2021-04-06T06:23:35.000Z","_content":"> [题目链接](https://codeforces.com/contest/1305/problem/G)\n>\n> 一张有 $n$ 个点的图，每个点的点权为 $a_i$。\n>\n> 点 $u$ 和点 $v$ 连边当且仅当 $a_u \\& a_v = 0$。\n>\n> 对于点 $u$，有两种操作：\n>\n> - 直接涂黑，无贡献。\n> - 找一个与 $u$ 相邻且已经涂黑的点 $v$，再涂黑 $u$，贡献为 $a_v$。\n>\n> 求涂黑所有点的最大贡献。\n>\n> $n \\le 2 \\cdot 10^5,a_i \\le 2 \\cdot 10^5$\n\n首先加入一个点权为 $0$ 的虚点，且初始为黑，则两种操作就可以统一成第二种。\n\n对于每次操作，就从 $u$ 向 $v$ 连一条有向边，得到一个以 $0$ 为根的有根树。\n\n设点 $u$ 的度数为 $degree_u$，则总贡献可以表示为\n$$\n\\sum_{u \\in V}a_u(degree_u-1)=\\sum_{u \\in V}a_udegree_u-\\sum_{u \\in V}a_u = \\sum_{(u,v) \\in E}a_u + a_v - \\sum_{u \\in V}a_u\n$$\n如果定义 $(u,v)$ 边权为 $a_u + a_v$，则前一部分为生成树权值，后一部分是定值。\n\n所以问题转化为求最大生成树。\n\n### 先考虑所有点的点权两两不同。\n\n根据枚举子集的经典结论，边的总数小于 $3^{18}$，但实际只有一半左右，即 $1.7 \\cdot 10^8$ 左右。\n\n考虑 ```Kruskal``` 算法，虽然并查集复杂度要乘一个 $\\alpha(n)$，但感觉卡不满。\n\n首先不可能存下所有边，更不可能排序，所以考虑从大到小枚举边权。\n\n注意到 $u,v$ 连边当且仅当 $a_u \\& a_v = 0$，而边权为 $a_u + a_v$。\n\n直接枚举边权的子集就可以得到两个端点。\n\n剩下的正常做  ```Kruskal``` 就行了。\n\n复杂度 $O(3^{18}\\alpha(n))$。\n\n### 点权相同时\n\n当枚举到 $a_u,a_v$ 时，$a_u$ 可能会对应很多的 $u$，设这些 $u$ 构成集合 $U$，$a_v$ 也会对应很多的 $a_v$，设这些 $v$ 构成集合 $V$。\n\n任何一个 $U$ 中的结点和任何一个 $V$ 中的结点都有权值相等的连边，边太多了。\n\n考虑一个等价的连边：\n\n在 $U$ 中选择一个代表元 $u_0$，同理选个 $v_0$，$u_0$ 和 $v_0$ 连边，$u_0$ 和 $U$ 中其他点连边，$v_0$ 和 $V$ 中其他点连边。\n\n对于后两种连边，每个集合只用在第一次访问到时进行，复杂度 $O(3^{18}\\alpha(n))$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define upd(a, b) (a = min(a, b))\n\nusing namespace std;\nconst int N = 1 << 18;\ntypedef long long ll;\nint n, a[N], fa[N], sz[N], vis[N];\nvector <int> nds[N];\nint find(int x) { return x == fa[x] ? x : fa[x] = find(fa[x]); }\nint main() {\n    cin >> n;\n    ll as = 0;\n    rep(i, 1, n) {\n        scanf(\"%d\", &a[i]), as -= a[i];\n        nds[a[i]].push_back(i);\n    }\n    nds[0].push_back(0);\n    rep(i, 0, n) fa[i] = i, sz[i] = 1;\n    per(S, N - 1, 1) for(int T = S; T > S / 2; --T &= S) {\n        if(nds[T].empty() || nds[S ^ T].empty()) continue;\n        auto mrg = [&](int u, int v) {\n            u = find(u), v = find(v);\n            if(u == v) return;\n            if(sz[u] < sz[v]) swap(u, v);\n            fa[v] = u, sz[u] += sz[v];\n            as += S;\n            if(sz[u] == n + 1) cout << as, exit(0);\n        };\n        mrg(nds[T][0], nds[S ^ T][0]);\n        if(!vis[T]) for(int u : nds[T]) mrg(u, nds[S ^ T][0]);\n        if(!vis[S ^ T]) for(int v : nds[S ^ T]) mrg(nds[T][0], v);\n        vis[T] = vis[S ^ T] = 1;\n    }\n    puts(\"0\");\n    return 0;\n}\n```","source":"_posts/CF1305G.md","raw":"---\ntitle: Kuroni and Antihype | Codeforces 1305G\ndate: 2021-04-06 14:23:35\nupdated: 2021-04-06 14:23:35\ntags: [图论,最小生成树]\ncategories: Codeforces\n---\n> [题目链接](https://codeforces.com/contest/1305/problem/G)\n>\n> 一张有 $n$ 个点的图，每个点的点权为 $a_i$。\n>\n> 点 $u$ 和点 $v$ 连边当且仅当 $a_u \\& a_v = 0$。\n>\n> 对于点 $u$，有两种操作：\n>\n> - 直接涂黑，无贡献。\n> - 找一个与 $u$ 相邻且已经涂黑的点 $v$，再涂黑 $u$，贡献为 $a_v$。\n>\n> 求涂黑所有点的最大贡献。\n>\n> $n \\le 2 \\cdot 10^5,a_i \\le 2 \\cdot 10^5$\n\n首先加入一个点权为 $0$ 的虚点，且初始为黑，则两种操作就可以统一成第二种。\n\n对于每次操作，就从 $u$ 向 $v$ 连一条有向边，得到一个以 $0$ 为根的有根树。\n\n设点 $u$ 的度数为 $degree_u$，则总贡献可以表示为\n$$\n\\sum_{u \\in V}a_u(degree_u-1)=\\sum_{u \\in V}a_udegree_u-\\sum_{u \\in V}a_u = \\sum_{(u,v) \\in E}a_u + a_v - \\sum_{u \\in V}a_u\n$$\n如果定义 $(u,v)$ 边权为 $a_u + a_v$，则前一部分为生成树权值，后一部分是定值。\n\n所以问题转化为求最大生成树。\n\n### 先考虑所有点的点权两两不同。\n\n根据枚举子集的经典结论，边的总数小于 $3^{18}$，但实际只有一半左右，即 $1.7 \\cdot 10^8$ 左右。\n\n考虑 ```Kruskal``` 算法，虽然并查集复杂度要乘一个 $\\alpha(n)$，但感觉卡不满。\n\n首先不可能存下所有边，更不可能排序，所以考虑从大到小枚举边权。\n\n注意到 $u,v$ 连边当且仅当 $a_u \\& a_v = 0$，而边权为 $a_u + a_v$。\n\n直接枚举边权的子集就可以得到两个端点。\n\n剩下的正常做  ```Kruskal``` 就行了。\n\n复杂度 $O(3^{18}\\alpha(n))$。\n\n### 点权相同时\n\n当枚举到 $a_u,a_v$ 时，$a_u$ 可能会对应很多的 $u$，设这些 $u$ 构成集合 $U$，$a_v$ 也会对应很多的 $a_v$，设这些 $v$ 构成集合 $V$。\n\n任何一个 $U$ 中的结点和任何一个 $V$ 中的结点都有权值相等的连边，边太多了。\n\n考虑一个等价的连边：\n\n在 $U$ 中选择一个代表元 $u_0$，同理选个 $v_0$，$u_0$ 和 $v_0$ 连边，$u_0$ 和 $U$ 中其他点连边，$v_0$ 和 $V$ 中其他点连边。\n\n对于后两种连边，每个集合只用在第一次访问到时进行，复杂度 $O(3^{18}\\alpha(n))$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define upd(a, b) (a = min(a, b))\n\nusing namespace std;\nconst int N = 1 << 18;\ntypedef long long ll;\nint n, a[N], fa[N], sz[N], vis[N];\nvector <int> nds[N];\nint find(int x) { return x == fa[x] ? x : fa[x] = find(fa[x]); }\nint main() {\n    cin >> n;\n    ll as = 0;\n    rep(i, 1, n) {\n        scanf(\"%d\", &a[i]), as -= a[i];\n        nds[a[i]].push_back(i);\n    }\n    nds[0].push_back(0);\n    rep(i, 0, n) fa[i] = i, sz[i] = 1;\n    per(S, N - 1, 1) for(int T = S; T > S / 2; --T &= S) {\n        if(nds[T].empty() || nds[S ^ T].empty()) continue;\n        auto mrg = [&](int u, int v) {\n            u = find(u), v = find(v);\n            if(u == v) return;\n            if(sz[u] < sz[v]) swap(u, v);\n            fa[v] = u, sz[u] += sz[v];\n            as += S;\n            if(sz[u] == n + 1) cout << as, exit(0);\n        };\n        mrg(nds[T][0], nds[S ^ T][0]);\n        if(!vis[T]) for(int u : nds[T]) mrg(u, nds[S ^ T][0]);\n        if(!vis[S ^ T]) for(int v : nds[S ^ T]) mrg(nds[T][0], v);\n        vis[T] = vis[S ^ T] = 1;\n    }\n    puts(\"0\");\n    return 0;\n}\n```","slug":"CF1305G","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxgzh0009ootnbl32fj1d","content":"<blockquote>\r\n<p><a href=\"https://codeforces.com/contest/1305/problem/G\">题目链接</a></p>\r\n<p>一张有 <span class=\"math inline\">\\(n\\)</span> 个点的图，每个点的点权为 <span class=\"math inline\">\\(a_i\\)</span>。</p>\r\n<p>点 <span class=\"math inline\">\\(u\\)</span> 和点 <span class=\"math inline\">\\(v\\)</span> 连边当且仅当 <span class=\"math inline\">\\(a_u \\&amp; a_v = 0\\)</span>。</p>\r\n<p>对于点 <span class=\"math inline\">\\(u\\)</span>，有两种操作：</p>\r\n<ul>\r\n<li>直接涂黑，无贡献。</li>\r\n<li>找一个与 <span class=\"math inline\">\\(u\\)</span> 相邻且已经涂黑的点 <span class=\"math inline\">\\(v\\)</span>，再涂黑 <span class=\"math inline\">\\(u\\)</span>，贡献为 <span class=\"math inline\">\\(a_v\\)</span>。</li>\r\n</ul>\r\n<p>求涂黑所有点的最大贡献。</p>\r\n<p><span class=\"math inline\">\\(n \\le 2 \\cdot 10^5,a_i \\le 2 \\cdot 10^5\\)</span></p>\r\n</blockquote>\r\n<p>首先加入一个点权为 <span class=\"math inline\">\\(0\\)</span> 的虚点，且初始为黑，则两种操作就可以统一成第二种。</p>\r\n<p>对于每次操作，就从 <span class=\"math inline\">\\(u\\)</span> 向 <span class=\"math inline\">\\(v\\)</span> 连一条有向边，得到一个以 <span class=\"math inline\">\\(0\\)</span> 为根的有根树。</p>\r\n<p>设点 <span class=\"math inline\">\\(u\\)</span> 的度数为 <span class=\"math inline\">\\(degree_u\\)</span>，则总贡献可以表示为 <span class=\"math display\">\\[\r\n\\sum_{u \\in V}a_u(degree_u-1)=\\sum_{u \\in V}a_udegree_u-\\sum_{u \\in V}a_u = \\sum_{(u,v) \\in E}a_u + a_v - \\sum_{u \\in V}a_u\r\n\\]</span> 如果定义 <span class=\"math inline\">\\((u,v)\\)</span> 边权为 <span class=\"math inline\">\\(a_u + a_v\\)</span>，则前一部分为生成树权值，后一部分是定值。</p>\r\n<p>所以问题转化为求最大生成树。</p>\r\n<h3 id=\"先考虑所有点的点权两两不同\">先考虑所有点的点权两两不同。</h3>\r\n<p>根据枚举子集的经典结论，边的总数小于 <span class=\"math inline\">\\(3^{18}\\)</span>，但实际只有一半左右，即 <span class=\"math inline\">\\(1.7 \\cdot 10^8\\)</span> 左右。</p>\r\n<p>考虑 <code>Kruskal</code> 算法，虽然并查集复杂度要乘一个 <span class=\"math inline\">\\(\\alpha(n)\\)</span>，但感觉卡不满。</p>\r\n<p>首先不可能存下所有边，更不可能排序，所以考虑从大到小枚举边权。</p>\r\n<p>注意到 <span class=\"math inline\">\\(u,v\\)</span> 连边当且仅当 <span class=\"math inline\">\\(a_u \\&amp; a_v = 0\\)</span>，而边权为 <span class=\"math inline\">\\(a_u + a_v\\)</span>。</p>\r\n<p>直接枚举边权的子集就可以得到两个端点。</p>\r\n<p>剩下的正常做 <code>Kruskal</code> 就行了。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(3^{18}\\alpha(n))\\)</span>。</p>\r\n<h3 id=\"点权相同时\">点权相同时</h3>\r\n<p>当枚举到 <span class=\"math inline\">\\(a_u,a_v\\)</span> 时，<span class=\"math inline\">\\(a_u\\)</span> 可能会对应很多的 <span class=\"math inline\">\\(u\\)</span>，设这些 <span class=\"math inline\">\\(u\\)</span> 构成集合 <span class=\"math inline\">\\(U\\)</span>，<span class=\"math inline\">\\(a_v\\)</span> 也会对应很多的 <span class=\"math inline\">\\(a_v\\)</span>，设这些 <span class=\"math inline\">\\(v\\)</span> 构成集合 <span class=\"math inline\">\\(V\\)</span>。</p>\r\n<p>任何一个 <span class=\"math inline\">\\(U\\)</span> 中的结点和任何一个 <span class=\"math inline\">\\(V\\)</span> 中的结点都有权值相等的连边，边太多了。</p>\r\n<p>考虑一个等价的连边：</p>\r\n<p>在 <span class=\"math inline\">\\(U\\)</span> 中选择一个代表元 <span class=\"math inline\">\\(u_0\\)</span>，同理选个 <span class=\"math inline\">\\(v_0\\)</span>，<span class=\"math inline\">\\(u_0\\)</span> 和 <span class=\"math inline\">\\(v_0\\)</span> 连边，<span class=\"math inline\">\\(u_0\\)</span> 和 <span class=\"math inline\">\\(U\\)</span> 中其他点连边，<span class=\"math inline\">\\(v_0\\)</span> 和 <span class=\"math inline\">\\(V\\)</span> 中其他点连边。</p>\r\n<p>对于后两种连边，每个集合只用在第一次访问到时进行，复杂度 <span class=\"math inline\">\\(O(3^{18}\\alpha(n))\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> upd(a, b) (a = min(a, b))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, a[N], fa[N], sz[N], vis[N];</span><br><span class=\"line\">vector &lt;<span class=\"keyword\">int</span>&gt; nds[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123; <span class=\"keyword\">return</span> x == fa[x] ? x : fa[x] = <span class=\"built_in\">find</span>(fa[x]); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    ll as = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]), as -= a[i];</span><br><span class=\"line\">        nds[a[i]].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nds[<span class=\"number\">0</span>].<span class=\"built_in\">push_back</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n) fa[i] = i, sz[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(S, N - <span class=\"number\">1</span>, <span class=\"number\">1</span>) <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> T = S; T &gt; S / <span class=\"number\">2</span>; --T &amp;= S) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nds[T].<span class=\"built_in\">empty</span>() || nds[S ^ T].<span class=\"built_in\">empty</span>()) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> mrg = [&amp;](<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v) &#123;</span><br><span class=\"line\">            u = <span class=\"built_in\">find</span>(u), v = <span class=\"built_in\">find</span>(v);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(u == v) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sz[u] &lt; sz[v]) <span class=\"built_in\">swap</span>(u, v);</span><br><span class=\"line\">            fa[v] = u, sz[u] += sz[v];</span><br><span class=\"line\">            as += S;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sz[u] == n + <span class=\"number\">1</span>) cout &lt;&lt; as, <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"built_in\">mrg</span>(nds[T][<span class=\"number\">0</span>], nds[S ^ T][<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[T]) <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> u : nds[T]) <span class=\"built_in\">mrg</span>(u, nds[S ^ T][<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[S ^ T]) <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : nds[S ^ T]) <span class=\"built_in\">mrg</span>(nds[T][<span class=\"number\">0</span>], v);</span><br><span class=\"line\">        vis[T] = vis[S ^ T] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":2114,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"https://codeforces.com/contest/1305/problem/G\">题目链接</a></p>\r\n<p>一张有 <span class=\"math inline\">\\(n\\)</span> 个点的图，每个点的点权为 <span class=\"math inline\">\\(a_i\\)</span>。</p>\r\n<p>点 <span class=\"math inline\">\\(u\\)</span> 和点 <span class=\"math inline\">\\(v\\)</span> 连边当且仅当 <span class=\"math inline\">\\(a_u \\&amp; a_v = 0\\)</span>。</p>\r\n<p>对于点 <span class=\"math inline\">\\(u\\)</span>，有两种操作：</p>\r\n<ul>\r\n<li>直接涂黑，无贡献。</li>\r\n<li>找一个与 <span class=\"math inline\">\\(u\\)</span> 相邻且已经涂黑的点 <span class=\"math inline\">\\(v\\)</span>，再涂黑 <span class=\"math inline\">\\(u\\)</span>，贡献为 <span class=\"math inline\">\\(a_v\\)</span>。</li>\r\n</ul>\r\n<p>求涂黑所有点的最大贡献。</p>\r\n<p><span class=\"math inline\">\\(n \\le 2 \\cdot 10^5,a_i \\le 2 \\cdot 10^5\\)</span></p>\r\n</blockquote>\r\n<p>首先加入一个点权为 <span class=\"math inline\">\\(0\\)</span> 的虚点，且初始为黑，则两种操作就可以统一成第二种。</p>\r\n<p>对于每次操作，就从 <span class=\"math inline\">\\(u\\)</span> 向 <span class=\"math inline\">\\(v\\)</span> 连一条有向边，得到一个以 <span class=\"math inline\">\\(0\\)</span> 为根的有根树。</p>\r\n<p>设点 <span class=\"math inline\">\\(u\\)</span> 的度数为 <span class=\"math inline\">\\(degree_u\\)</span>，则总贡献可以表示为 <span class=\"math display\">\\[\r\n\\sum_{u \\in V}a_u(degree_u-1)=\\sum_{u \\in V}a_udegree_u-\\sum_{u \\in V}a_u = \\sum_{(u,v) \\in E}a_u + a_v - \\sum_{u \\in V}a_u\r\n\\]</span> 如果定义 <span class=\"math inline\">\\((u,v)\\)</span> 边权为 <span class=\"math inline\">\\(a_u + a_v\\)</span>，则前一部分为生成树权值，后一部分是定值。</p>\r\n<p>所以问题转化为求最大生成树。</p>\r\n<h3 id=\"先考虑所有点的点权两两不同\">先考虑所有点的点权两两不同。</h3>\r\n<p>根据枚举子集的经典结论，边的总数小于 <span class=\"math inline\">\\(3^{18}\\)</span>，但实际只有一半左右，即 <span class=\"math inline\">\\(1.7 \\cdot 10^8\\)</span> 左右。</p>\r\n<p>考虑 <code>Kruskal</code> 算法，虽然并查集复杂度要乘一个 <span class=\"math inline\">\\(\\alpha(n)\\)</span>，但感觉卡不满。</p>\r\n<p>首先不可能存下所有边，更不可能排序，所以考虑从大到小枚举边权。</p>\r\n<p>注意到 <span class=\"math inline\">\\(u,v\\)</span> 连边当且仅当 <span class=\"math inline\">\\(a_u \\&amp; a_v = 0\\)</span>，而边权为 <span class=\"math inline\">\\(a_u + a_v\\)</span>。</p>\r\n<p>直接枚举边权的子集就可以得到两个端点。</p>\r\n<p>剩下的正常做 <code>Kruskal</code> 就行了。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(3^{18}\\alpha(n))\\)</span>。</p>\r\n<h3 id=\"点权相同时\">点权相同时</h3>\r\n<p>当枚举到 <span class=\"math inline\">\\(a_u,a_v\\)</span> 时，<span class=\"math inline\">\\(a_u\\)</span> 可能会对应很多的 <span class=\"math inline\">\\(u\\)</span>，设这些 <span class=\"math inline\">\\(u\\)</span> 构成集合 <span class=\"math inline\">\\(U\\)</span>，<span class=\"math inline\">\\(a_v\\)</span> 也会对应很多的 <span class=\"math inline\">\\(a_v\\)</span>，设这些 <span class=\"math inline\">\\(v\\)</span> 构成集合 <span class=\"math inline\">\\(V\\)</span>。</p>\r\n<p>任何一个 <span class=\"math inline\">\\(U\\)</span> 中的结点和任何一个 <span class=\"math inline\">\\(V\\)</span> 中的结点都有权值相等的连边，边太多了。</p>\r\n<p>考虑一个等价的连边：</p>\r\n<p>在 <span class=\"math inline\">\\(U\\)</span> 中选择一个代表元 <span class=\"math inline\">\\(u_0\\)</span>，同理选个 <span class=\"math inline\">\\(v_0\\)</span>，<span class=\"math inline\">\\(u_0\\)</span> 和 <span class=\"math inline\">\\(v_0\\)</span> 连边，<span class=\"math inline\">\\(u_0\\)</span> 和 <span class=\"math inline\">\\(U\\)</span> 中其他点连边，<span class=\"math inline\">\\(v_0\\)</span> 和 <span class=\"math inline\">\\(V\\)</span> 中其他点连边。</p>\r\n<p>对于后两种连边，每个集合只用在第一次访问到时进行，复杂度 <span class=\"math inline\">\\(O(3^{18}\\alpha(n))\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> upd(a, b) (a = min(a, b))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, a[N], fa[N], sz[N], vis[N];</span><br><span class=\"line\">vector &lt;<span class=\"keyword\">int</span>&gt; nds[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123; <span class=\"keyword\">return</span> x == fa[x] ? x : fa[x] = <span class=\"built_in\">find</span>(fa[x]); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    ll as = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]), as -= a[i];</span><br><span class=\"line\">        nds[a[i]].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nds[<span class=\"number\">0</span>].<span class=\"built_in\">push_back</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n) fa[i] = i, sz[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(S, N - <span class=\"number\">1</span>, <span class=\"number\">1</span>) <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> T = S; T &gt; S / <span class=\"number\">2</span>; --T &amp;= S) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nds[T].<span class=\"built_in\">empty</span>() || nds[S ^ T].<span class=\"built_in\">empty</span>()) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> mrg = [&amp;](<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v) &#123;</span><br><span class=\"line\">            u = <span class=\"built_in\">find</span>(u), v = <span class=\"built_in\">find</span>(v);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(u == v) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sz[u] &lt; sz[v]) <span class=\"built_in\">swap</span>(u, v);</span><br><span class=\"line\">            fa[v] = u, sz[u] += sz[v];</span><br><span class=\"line\">            as += S;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sz[u] == n + <span class=\"number\">1</span>) cout &lt;&lt; as, <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"built_in\">mrg</span>(nds[T][<span class=\"number\">0</span>], nds[S ^ T][<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[T]) <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> u : nds[T]) <span class=\"built_in\">mrg</span>(u, nds[S ^ T][<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[S ^ T]) <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : nds[S ^ T]) <span class=\"built_in\">mrg</span>(nds[T][<span class=\"number\">0</span>], v);</span><br><span class=\"line\">        vis[T] = vis[S ^ T] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"Bananas in a Microwave | Codeforces 1498D","date":"2021-03-31T01:03:29.000Z","updated":"2021-03-31T01:03:29.000Z","_content":"> [题目链接](https://codeforces.com/contest/1498/problem/D)\n>\n> 有一个变量 $k$ 初始为 $0$。\n>\n> 对于时刻 $i=1,2,3,\\cdots,n$，给定 $t_i,x_i,y_i$，且执行以下操作：\n>\n> - 若 $t_i=1$，选择 $a \\in [0,y_i]$，执行 $a$ 次 $k=\\lceil k + x_i \\rceil$。\n> - 若 $t_i=2$，选择 $a \\in [0,y_i]$，执行 $a$ 次 $k=\\lceil k \\cdot x_i \\rceil$。\n>\n> 其中 $x_i$ 是**实数**。\n>\n> 对于每个 $j \\in [1,m]$，求可能的最小时刻使得 $k=j$。\n>\n> $n \\le 200,y_i \\le m \\le 10^5$\n>\n> 对于 $t_i=1$，有 $0 < x_i \\le m$，对于 $t_i=2$，有 $1 < x_i \\le m$。\n\n对于每个时刻 $i$，维护数组 $ok_j$ 表示经过前 $i$ 个时刻能否使 $k=j$。\n\n设 $next_j=\\begin{cases}\\lceil j + x_i \\rceil&(t_i=1)\\\\\\lceil j \\cdot x_i \\rceil&(t_i=2)\\end{cases}$。\n\n因为 $\\forall j \\ne k,next_j \\ne next_k$，所以 $j \\rightarrow next_j$ 连边后形成若干条链。\n\n假设一条链上的结点分别为 $v_1,v_2,v_3,\\cdots,v_s$\n\n对于 $v_j$，如果 $\\exist k \\in [j-y_i,j)$，满足 $ok_k=1$，那么在第 $i$ 时刻 $k$ 可以等于 $v_j$。\n\n对每条链扫描一遍即可求出在第 $i$ 时刻 $k$ 可以等于哪些值。\n\n复杂度 $O(nm)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define upd(a, b) (a = min(a, b))\n\nusing namespace std;\ntypedef long long ll;\nconst int N = 1e5, M = N + 5;\nint n, m, f[M], nxt[M], vis[M], ok[M];\nint main() {\n    mem(f, -1);\n    int t, y; ll x;\n    cin >> n >> m;\n    f[0] = 0;\n    rep(k, 1, n) {\n        scanf(\"%d%lld%d\", &t, &x, &y);\n        if(t == 1) {\n            x = (x + N - 1) / N;\n            rep(i, 0, m) nxt[i] = min(i + x, m + 1ll);\n        } else {\n            nxt[0] = m + 1;\n            rep(i, 1, m) nxt[i] = min((i * x + N - 1) / N, m + 1ll);\n        }\n        mem(vis, 0);\n        rep(i, 0, m) if(!vis[i]) {\n            vector <int> v;\n            for(int j = i; j <= m; j = nxt[j]) vis[j] = 1, v.push_back(j);\n            int cnt = 0;\n            For(j, 0, v.size()) {\n                if(cnt) ok[v[j]] = 1;\n                cnt += f[v[j]] != -1;\n                if(j >= y) cnt -= f[v[j - y]] != -1;\n            }\n        }\n        rep(i, 0, m) if(!~f[i] && ok[i]) f[i] = k;\n    }\n    rep(i, 1, m) printf(\"%d \", f[i]);\n    return 0;\n}\n```","source":"_posts/CF1498D.md","raw":"---\ntitle: Bananas in a Microwave | Codeforces 1498D\ndate: 2021-03-31 09:03:29\nupdated: 2021-03-31 09:03:29\ntags: [动态规划]\ncategories: Codeforces\n---\n> [题目链接](https://codeforces.com/contest/1498/problem/D)\n>\n> 有一个变量 $k$ 初始为 $0$。\n>\n> 对于时刻 $i=1,2,3,\\cdots,n$，给定 $t_i,x_i,y_i$，且执行以下操作：\n>\n> - 若 $t_i=1$，选择 $a \\in [0,y_i]$，执行 $a$ 次 $k=\\lceil k + x_i \\rceil$。\n> - 若 $t_i=2$，选择 $a \\in [0,y_i]$，执行 $a$ 次 $k=\\lceil k \\cdot x_i \\rceil$。\n>\n> 其中 $x_i$ 是**实数**。\n>\n> 对于每个 $j \\in [1,m]$，求可能的最小时刻使得 $k=j$。\n>\n> $n \\le 200,y_i \\le m \\le 10^5$\n>\n> 对于 $t_i=1$，有 $0 < x_i \\le m$，对于 $t_i=2$，有 $1 < x_i \\le m$。\n\n对于每个时刻 $i$，维护数组 $ok_j$ 表示经过前 $i$ 个时刻能否使 $k=j$。\n\n设 $next_j=\\begin{cases}\\lceil j + x_i \\rceil&(t_i=1)\\\\\\lceil j \\cdot x_i \\rceil&(t_i=2)\\end{cases}$。\n\n因为 $\\forall j \\ne k,next_j \\ne next_k$，所以 $j \\rightarrow next_j$ 连边后形成若干条链。\n\n假设一条链上的结点分别为 $v_1,v_2,v_3,\\cdots,v_s$\n\n对于 $v_j$，如果 $\\exist k \\in [j-y_i,j)$，满足 $ok_k=1$，那么在第 $i$ 时刻 $k$ 可以等于 $v_j$。\n\n对每条链扫描一遍即可求出在第 $i$ 时刻 $k$ 可以等于哪些值。\n\n复杂度 $O(nm)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define upd(a, b) (a = min(a, b))\n\nusing namespace std;\ntypedef long long ll;\nconst int N = 1e5, M = N + 5;\nint n, m, f[M], nxt[M], vis[M], ok[M];\nint main() {\n    mem(f, -1);\n    int t, y; ll x;\n    cin >> n >> m;\n    f[0] = 0;\n    rep(k, 1, n) {\n        scanf(\"%d%lld%d\", &t, &x, &y);\n        if(t == 1) {\n            x = (x + N - 1) / N;\n            rep(i, 0, m) nxt[i] = min(i + x, m + 1ll);\n        } else {\n            nxt[0] = m + 1;\n            rep(i, 1, m) nxt[i] = min((i * x + N - 1) / N, m + 1ll);\n        }\n        mem(vis, 0);\n        rep(i, 0, m) if(!vis[i]) {\n            vector <int> v;\n            for(int j = i; j <= m; j = nxt[j]) vis[j] = 1, v.push_back(j);\n            int cnt = 0;\n            For(j, 0, v.size()) {\n                if(cnt) ok[v[j]] = 1;\n                cnt += f[v[j]] != -1;\n                if(j >= y) cnt -= f[v[j - y]] != -1;\n            }\n        }\n        rep(i, 0, m) if(!~f[i] && ok[i]) f[i] = k;\n    }\n    rep(i, 1, m) printf(\"%d \", f[i]);\n    return 0;\n}\n```","slug":"CF1498D","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxgzj000cootnhd6igolb","content":"<blockquote>\r\n<p><a href=\"https://codeforces.com/contest/1498/problem/D\">题目链接</a></p>\r\n<p>有一个变量 <span class=\"math inline\">\\(k\\)</span> 初始为 <span class=\"math inline\">\\(0\\)</span>。</p>\r\n<p>对于时刻 <span class=\"math inline\">\\(i=1,2,3,\\cdots,n\\)</span>，给定 <span class=\"math inline\">\\(t_i,x_i,y_i\\)</span>，且执行以下操作：</p>\r\n<ul>\r\n<li>若 <span class=\"math inline\">\\(t_i=1\\)</span>，选择 <span class=\"math inline\">\\(a \\in [0,y_i]\\)</span>，执行 <span class=\"math inline\">\\(a\\)</span> 次 <span class=\"math inline\">\\(k=\\lceil k + x_i \\rceil\\)</span>。</li>\r\n<li>若 <span class=\"math inline\">\\(t_i=2\\)</span>，选择 <span class=\"math inline\">\\(a \\in [0,y_i]\\)</span>，执行 <span class=\"math inline\">\\(a\\)</span> 次 <span class=\"math inline\">\\(k=\\lceil k \\cdot x_i \\rceil\\)</span>。</li>\r\n</ul>\r\n<p>其中 <span class=\"math inline\">\\(x_i\\)</span> 是<strong>实数</strong>。</p>\r\n<p>对于每个 <span class=\"math inline\">\\(j \\in [1,m]\\)</span>，求可能的最小时刻使得 <span class=\"math inline\">\\(k=j\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(n \\le 200,y_i \\le m \\le 10^5\\)</span></p>\r\n<p>对于 <span class=\"math inline\">\\(t_i=1\\)</span>，有 <span class=\"math inline\">\\(0 &lt; x_i \\le m\\)</span>，对于 <span class=\"math inline\">\\(t_i=2\\)</span>，有 <span class=\"math inline\">\\(1 &lt; x_i \\le m\\)</span>。</p>\r\n</blockquote>\r\n<p>对于每个时刻 <span class=\"math inline\">\\(i\\)</span>，维护数组 <span class=\"math inline\">\\(ok_j\\)</span> 表示经过前 <span class=\"math inline\">\\(i\\)</span> 个时刻能否使 <span class=\"math inline\">\\(k=j\\)</span>。</p>\r\n<p>设 <span class=\"math inline\">\\(next_j=\\begin{cases}\\lceil j + x_i \\rceil&amp;(t_i=1)\\\\\\lceil j \\cdot x_i \\rceil&amp;(t_i=2)\\end{cases}\\)</span>。</p>\r\n<p>因为 <span class=\"math inline\">\\(\\forall j \\ne k,next_j \\ne next_k\\)</span>，所以 <span class=\"math inline\">\\(j \\rightarrow next_j\\)</span> 连边后形成若干条链。</p>\r\n<p>假设一条链上的结点分别为 <span class=\"math inline\">\\(v_1,v_2,v_3,\\cdots,v_s\\)</span></p>\r\n<p>对于 <span class=\"math inline\">\\(v_j\\)</span>，如果 <span class=\"math inline\">\\(\\exist k \\in [j-y_i,j)\\)</span>，满足 <span class=\"math inline\">\\(ok_k=1\\)</span>，那么在第 <span class=\"math inline\">\\(i\\)</span> 时刻 <span class=\"math inline\">\\(k\\)</span> 可以等于 <span class=\"math inline\">\\(v_j\\)</span>。</p>\r\n<p>对每条链扫描一遍即可求出在第 <span class=\"math inline\">\\(i\\)</span> 时刻 <span class=\"math inline\">\\(k\\)</span> 可以等于哪些值。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(nm)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> upd(a, b) (a = min(a, b))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span>, M = N + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, f[M], nxt[M], vis[M], ok[M];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">mem</span>(f, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t, y; ll x;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    f[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(k, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%lld%d&quot;</span>, &amp;t, &amp;x, &amp;y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            x = (x + N - <span class=\"number\">1</span>) / N;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, m) nxt[i] = <span class=\"built_in\">min</span>(i + x, m + <span class=\"number\">1ll</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            nxt[<span class=\"number\">0</span>] = m + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) nxt[i] = <span class=\"built_in\">min</span>((i * x + N - <span class=\"number\">1</span>) / N, m + <span class=\"number\">1ll</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">mem</span>(vis, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, m) <span class=\"keyword\">if</span>(!vis[i]) &#123;</span><br><span class=\"line\">            vector &lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &lt;= m; j = nxt[j]) vis[j] = <span class=\"number\">1</span>, v.<span class=\"built_in\">push_back</span>(j);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"built_in\">For</span>(j, <span class=\"number\">0</span>, v.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(cnt) ok[v[j]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                cnt += f[v[j]] != <span class=\"number\">-1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j &gt;= y) cnt -= f[v[j - y]] != <span class=\"number\">-1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, m) <span class=\"keyword\">if</span>(!~f[i] &amp;&amp; ok[i]) f[i] = k;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, f[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":1689,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"https://codeforces.com/contest/1498/problem/D\">题目链接</a></p>\r\n<p>有一个变量 <span class=\"math inline\">\\(k\\)</span> 初始为 <span class=\"math inline\">\\(0\\)</span>。</p>\r\n<p>对于时刻 <span class=\"math inline\">\\(i=1,2,3,\\cdots,n\\)</span>，给定 <span class=\"math inline\">\\(t_i,x_i,y_i\\)</span>，且执行以下操作：</p>\r\n<ul>\r\n<li>若 <span class=\"math inline\">\\(t_i=1\\)</span>，选择 <span class=\"math inline\">\\(a \\in [0,y_i]\\)</span>，执行 <span class=\"math inline\">\\(a\\)</span> 次 <span class=\"math inline\">\\(k=\\lceil k + x_i \\rceil\\)</span>。</li>\r\n<li>若 <span class=\"math inline\">\\(t_i=2\\)</span>，选择 <span class=\"math inline\">\\(a \\in [0,y_i]\\)</span>，执行 <span class=\"math inline\">\\(a\\)</span> 次 <span class=\"math inline\">\\(k=\\lceil k \\cdot x_i \\rceil\\)</span>。</li>\r\n</ul>\r\n<p>其中 <span class=\"math inline\">\\(x_i\\)</span> 是<strong>实数</strong>。</p>\r\n<p>对于每个 <span class=\"math inline\">\\(j \\in [1,m]\\)</span>，求可能的最小时刻使得 <span class=\"math inline\">\\(k=j\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(n \\le 200,y_i \\le m \\le 10^5\\)</span></p>\r\n<p>对于 <span class=\"math inline\">\\(t_i=1\\)</span>，有 <span class=\"math inline\">\\(0 &lt; x_i \\le m\\)</span>，对于 <span class=\"math inline\">\\(t_i=2\\)</span>，有 <span class=\"math inline\">\\(1 &lt; x_i \\le m\\)</span>。</p>\r\n</blockquote>\r\n<p>对于每个时刻 <span class=\"math inline\">\\(i\\)</span>，维护数组 <span class=\"math inline\">\\(ok_j\\)</span> 表示经过前 <span class=\"math inline\">\\(i\\)</span> 个时刻能否使 <span class=\"math inline\">\\(k=j\\)</span>。</p>\r\n<p>设 <span class=\"math inline\">\\(next_j=\\begin{cases}\\lceil j + x_i \\rceil&amp;(t_i=1)\\\\\\lceil j \\cdot x_i \\rceil&amp;(t_i=2)\\end{cases}\\)</span>。</p>\r\n<p>因为 <span class=\"math inline\">\\(\\forall j \\ne k,next_j \\ne next_k\\)</span>，所以 <span class=\"math inline\">\\(j \\rightarrow next_j\\)</span> 连边后形成若干条链。</p>\r\n<p>假设一条链上的结点分别为 <span class=\"math inline\">\\(v_1,v_2,v_3,\\cdots,v_s\\)</span></p>\r\n<p>对于 <span class=\"math inline\">\\(v_j\\)</span>，如果 <span class=\"math inline\">\\(\\exist k \\in [j-y_i,j)\\)</span>，满足 <span class=\"math inline\">\\(ok_k=1\\)</span>，那么在第 <span class=\"math inline\">\\(i\\)</span> 时刻 <span class=\"math inline\">\\(k\\)</span> 可以等于 <span class=\"math inline\">\\(v_j\\)</span>。</p>\r\n<p>对每条链扫描一遍即可求出在第 <span class=\"math inline\">\\(i\\)</span> 时刻 <span class=\"math inline\">\\(k\\)</span> 可以等于哪些值。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(nm)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> upd(a, b) (a = min(a, b))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span>, M = N + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, f[M], nxt[M], vis[M], ok[M];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">mem</span>(f, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t, y; ll x;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    f[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(k, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%lld%d&quot;</span>, &amp;t, &amp;x, &amp;y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            x = (x + N - <span class=\"number\">1</span>) / N;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, m) nxt[i] = <span class=\"built_in\">min</span>(i + x, m + <span class=\"number\">1ll</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            nxt[<span class=\"number\">0</span>] = m + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) nxt[i] = <span class=\"built_in\">min</span>((i * x + N - <span class=\"number\">1</span>) / N, m + <span class=\"number\">1ll</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">mem</span>(vis, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, m) <span class=\"keyword\">if</span>(!vis[i]) &#123;</span><br><span class=\"line\">            vector &lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &lt;= m; j = nxt[j]) vis[j] = <span class=\"number\">1</span>, v.<span class=\"built_in\">push_back</span>(j);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"built_in\">For</span>(j, <span class=\"number\">0</span>, v.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(cnt) ok[v[j]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                cnt += f[v[j]] != <span class=\"number\">-1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j &gt;= y) cnt -= f[v[j - y]] != <span class=\"number\">-1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, m) <span class=\"keyword\">if</span>(!~f[i] &amp;&amp; ok[i]) f[i] = k;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, f[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"Two Houses | Codeforces 1498E","date":"2021-03-31T01:05:26.000Z","updated":"2021-03-21T01:05:26.000Z","_content":"> [题目链接](https://codeforces.com/contest/1498/problem/E)\n>\n> 有一张 $n$ 个点的竞赛图。\n>\n> 不会给这张竞赛图，但会给每个点的入度 $k_i$。\n>\n> 还可以**通过交互**询问从 $u$ 能否到达 $v$，但一旦回答了”是“，就不能再询问了。\n>\n> 定义一个点对 $(u,v)$ 的价值是 $|k_u-k_v|$。\n>\n> 求所有双向可达的点对中价值最大的一对，或者输出无解。如果有多对，输出任意一对。\n>\n> $n \\le 500$\n\n### 做法一\n\n考虑一对点 $(u,v)$，由于是竞赛图，$u,v$ 间有连边，不妨设 $u \\rightarrow v$。\n\n如果 $v$ 不能到达 $u$，$\\exists S,u \\in S \\land \\forall x \\in S, y \\not \\in S,x \\rightarrow y$，即集合 $S$ 内的点全部向 $S$ 外的点连边。\n\n$\\therefore k_v \\ge |S|,k_u < |S| \\Rightarrow k_u < k_v$\n\n得到一个结论：如果一对点不双向可达，那么入度大的一定无法到达入度小的。\n\n把所有点对按价值从大到小依次询问，每次询问入度大的能否到达入度小的，如果可以，就直接输出这一对。\n\n如果到最后都没有回答“是”，那么输出无解。\n\n复杂度 $O(n^2)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n\nusing namespace std;\nconst int N = 1000;\nchar ch[N];\nstruct Qry {\n    int x, y, v;\n    bool operator <(const Qry& b)const { return v > b.v; }\n} q[N * N];\nvector <int> v[N];\nint n, idx, k[N];\nint main() {\n    scanf(\"%d\", &n);\n    rep(i, 1, n) scanf(\"%d\", &k[i]);\n    rep(i, 1, n) rep(j, i + 1, n)\n        q[++idx] = k[i] < k[j] ? (Qry){ j, i, k[j] - k[i] } : (Qry){ i, j, k[i] - k[j] };\n    sort(q + 1, q + idx + 1);\n    rep(i, 1, idx) {\n        printf(\"? %d %d\\n\", q[i].x, q[i].y);\n        fflush(stdout);\n        scanf(\"%s\", ch);\n        if(ch[0] == 'Y') printf(\"! %d %d\\n\", q[i].x, q[i].y), fflush(stdout), exit(0);\n    }\n    puts(\"! 0 0\"), fflush(stdout);\n    return 0;\n}\n```\n\n### 做法二\n\n考虑拓扑序最小的几个**强连通分量**的并集 $S$，$S$ 内的点全部向 $S$ 外的点连边，所以 $S$ 内所有点的入度和等于 $\\binom {|S|}2$，**反之亦然**。\n\n把所有点按入度从小到大排序，如果前 $m$ 个节点的入度和等于 $\\binom m2$，那么前 $m$ 个点一定是拓扑序最小的几个强连通分量的并集，**并且不会漏掉**，这样就可以分离出所有的强连通分量，直接统计答案即可。\n\n复杂度 $O(n)$，因为排序可以桶排，**无需询问**。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define fi first\n#define se second\n#define mp make_pair\n\nusing namespace std;\nconst int N = 505;\ntypedef pair <int, int> P;\nint n; P a[N];\nint main() {\n    cin >> n;\n    rep(i, 1, n) scanf(\"%d\", &a[i].fi), a[i].se = i;\n    sort(a + 1, a + n + 1);\n    int su = 0; P mi(n, 0), ma(-1, 0);\n    pair <int, P> as;\n    rep(i, 1, n) {\n        su += a[i].fi;\n        mi = min(mi, a[i]), ma = max(ma, a[i]);\n        if(su == i * (i - 1) / 2) {\n            if(mi.se ^ ma.se) as = max(as, mp(ma.fi - mi.fi, mp(mi.se, ma.se)));\n            mi.fi = n, ma.fi = -1;\n        }\n    }\n    if(as.se.fi) printf(\"! %d %d\\n\", as.se.fi, as.se.se);\n    else puts(\"! 0 0\");\n    fflush(stdout);\n    return 0;\n}\n```","source":"_posts/CF1498E.md","raw":"---\ntitle: Two Houses | Codeforces 1498E\ndate: 2021-03-31 09:05:26\nupdated: 2021-03-21 09:05:26\ntags: [图论,强连通分量]\ncategories: Codeforces\n---\n> [题目链接](https://codeforces.com/contest/1498/problem/E)\n>\n> 有一张 $n$ 个点的竞赛图。\n>\n> 不会给这张竞赛图，但会给每个点的入度 $k_i$。\n>\n> 还可以**通过交互**询问从 $u$ 能否到达 $v$，但一旦回答了”是“，就不能再询问了。\n>\n> 定义一个点对 $(u,v)$ 的价值是 $|k_u-k_v|$。\n>\n> 求所有双向可达的点对中价值最大的一对，或者输出无解。如果有多对，输出任意一对。\n>\n> $n \\le 500$\n\n### 做法一\n\n考虑一对点 $(u,v)$，由于是竞赛图，$u,v$ 间有连边，不妨设 $u \\rightarrow v$。\n\n如果 $v$ 不能到达 $u$，$\\exists S,u \\in S \\land \\forall x \\in S, y \\not \\in S,x \\rightarrow y$，即集合 $S$ 内的点全部向 $S$ 外的点连边。\n\n$\\therefore k_v \\ge |S|,k_u < |S| \\Rightarrow k_u < k_v$\n\n得到一个结论：如果一对点不双向可达，那么入度大的一定无法到达入度小的。\n\n把所有点对按价值从大到小依次询问，每次询问入度大的能否到达入度小的，如果可以，就直接输出这一对。\n\n如果到最后都没有回答“是”，那么输出无解。\n\n复杂度 $O(n^2)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n\nusing namespace std;\nconst int N = 1000;\nchar ch[N];\nstruct Qry {\n    int x, y, v;\n    bool operator <(const Qry& b)const { return v > b.v; }\n} q[N * N];\nvector <int> v[N];\nint n, idx, k[N];\nint main() {\n    scanf(\"%d\", &n);\n    rep(i, 1, n) scanf(\"%d\", &k[i]);\n    rep(i, 1, n) rep(j, i + 1, n)\n        q[++idx] = k[i] < k[j] ? (Qry){ j, i, k[j] - k[i] } : (Qry){ i, j, k[i] - k[j] };\n    sort(q + 1, q + idx + 1);\n    rep(i, 1, idx) {\n        printf(\"? %d %d\\n\", q[i].x, q[i].y);\n        fflush(stdout);\n        scanf(\"%s\", ch);\n        if(ch[0] == 'Y') printf(\"! %d %d\\n\", q[i].x, q[i].y), fflush(stdout), exit(0);\n    }\n    puts(\"! 0 0\"), fflush(stdout);\n    return 0;\n}\n```\n\n### 做法二\n\n考虑拓扑序最小的几个**强连通分量**的并集 $S$，$S$ 内的点全部向 $S$ 外的点连边，所以 $S$ 内所有点的入度和等于 $\\binom {|S|}2$，**反之亦然**。\n\n把所有点按入度从小到大排序，如果前 $m$ 个节点的入度和等于 $\\binom m2$，那么前 $m$ 个点一定是拓扑序最小的几个强连通分量的并集，**并且不会漏掉**，这样就可以分离出所有的强连通分量，直接统计答案即可。\n\n复杂度 $O(n)$，因为排序可以桶排，**无需询问**。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define fi first\n#define se second\n#define mp make_pair\n\nusing namespace std;\nconst int N = 505;\ntypedef pair <int, int> P;\nint n; P a[N];\nint main() {\n    cin >> n;\n    rep(i, 1, n) scanf(\"%d\", &a[i].fi), a[i].se = i;\n    sort(a + 1, a + n + 1);\n    int su = 0; P mi(n, 0), ma(-1, 0);\n    pair <int, P> as;\n    rep(i, 1, n) {\n        su += a[i].fi;\n        mi = min(mi, a[i]), ma = max(ma, a[i]);\n        if(su == i * (i - 1) / 2) {\n            if(mi.se ^ ma.se) as = max(as, mp(ma.fi - mi.fi, mp(mi.se, ma.se)));\n            mi.fi = n, ma.fi = -1;\n        }\n    }\n    if(as.se.fi) printf(\"! %d %d\\n\", as.se.fi, as.se.se);\n    else puts(\"! 0 0\");\n    fflush(stdout);\n    return 0;\n}\n```","slug":"CF1498E","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxgzk000dootnaq1fdrze","content":"<blockquote>\r\n<p><a href=\"https://codeforces.com/contest/1498/problem/E\">题目链接</a></p>\r\n<p>有一张 <span class=\"math inline\">\\(n\\)</span> 个点的竞赛图。</p>\r\n<p>不会给这张竞赛图，但会给每个点的入度 <span class=\"math inline\">\\(k_i\\)</span>。</p>\r\n<p>还可以<strong>通过交互</strong>询问从 <span class=\"math inline\">\\(u\\)</span> 能否到达 <span class=\"math inline\">\\(v\\)</span>，但一旦回答了”是“，就不能再询问了。</p>\r\n<p>定义一个点对 <span class=\"math inline\">\\((u,v)\\)</span> 的价值是 <span class=\"math inline\">\\(|k_u-k_v|\\)</span>。</p>\r\n<p>求所有双向可达的点对中价值最大的一对，或者输出无解。如果有多对，输出任意一对。</p>\r\n<p><span class=\"math inline\">\\(n \\le 500\\)</span></p>\r\n</blockquote>\r\n<h3 id=\"做法一\">做法一</h3>\r\n<p>考虑一对点 <span class=\"math inline\">\\((u,v)\\)</span>，由于是竞赛图，<span class=\"math inline\">\\(u,v\\)</span> 间有连边，不妨设 <span class=\"math inline\">\\(u \\rightarrow v\\)</span>。</p>\r\n<p>如果 <span class=\"math inline\">\\(v\\)</span> 不能到达 <span class=\"math inline\">\\(u\\)</span>，<span class=\"math inline\">\\(\\exists S,u \\in S \\land \\forall x \\in S, y \\not \\in S,x \\rightarrow y\\)</span>，即集合 <span class=\"math inline\">\\(S\\)</span> 内的点全部向 <span class=\"math inline\">\\(S\\)</span> 外的点连边。</p>\r\n<p><span class=\"math inline\">\\(\\therefore k_v \\ge |S|,k_u &lt; |S| \\Rightarrow k_u &lt; k_v\\)</span></p>\r\n<p>得到一个结论：如果一对点不双向可达，那么入度大的一定无法到达入度小的。</p>\r\n<p>把所有点对按价值从大到小依次询问，每次询问入度大的能否到达入度小的，如果可以，就直接输出这一对。</p>\r\n<p>如果到最后都没有回答“是”，那么输出无解。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^2)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1000</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> ch[N];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Qry</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y, v;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"keyword\">const</span> Qry&amp; b)<span class=\"keyword\">const</span> &#123; <span class=\"keyword\">return</span> v &gt; b.v; &#125;</span><br><span class=\"line\">&#125; q[N * N];</span><br><span class=\"line\">vector &lt;<span class=\"keyword\">int</span>&gt; v[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, idx, k[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;k[i]);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">rep</span>(j, i + <span class=\"number\">1</span>, n)</span><br><span class=\"line\">        q[++idx] = k[i] &lt; k[j] ? (Qry)&#123; j, i, k[j] - k[i] &#125; : (Qry)&#123; i, j, k[i] - k[j] &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(q + <span class=\"number\">1</span>, q + idx + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, idx) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;? %d %d\\n&quot;</span>, q[i].x, q[i].y);</span><br><span class=\"line\">        <span class=\"built_in\">fflush</span>(stdout);</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, ch);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ch[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;Y&#x27;</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;! %d %d\\n&quot;</span>, q[i].x, q[i].y), <span class=\"built_in\">fflush</span>(stdout), <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;! 0 0&quot;</span>), <span class=\"built_in\">fflush</span>(stdout);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"做法二\">做法二</h3>\r\n<p>考虑拓扑序最小的几个<strong>强连通分量</strong>的并集 <span class=\"math inline\">\\(S\\)</span>，<span class=\"math inline\">\\(S\\)</span> 内的点全部向 <span class=\"math inline\">\\(S\\)</span> 外的点连边，所以 <span class=\"math inline\">\\(S\\)</span> 内所有点的入度和等于 <span class=\"math inline\">\\(\\binom {|S|}2\\)</span>，<strong>反之亦然</strong>。</p>\r\n<p>把所有点按入度从小到大排序，如果前 <span class=\"math inline\">\\(m\\)</span> 个节点的入度和等于 <span class=\"math inline\">\\(\\binom m2\\)</span>，那么前 <span class=\"math inline\">\\(m\\)</span> 个点一定是拓扑序最小的几个强连通分量的并集，<strong>并且不会漏掉</strong>，这样就可以分离出所有的强连通分量，直接统计答案即可。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n)\\)</span>，因为排序可以桶排，<strong>无需询问</strong>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mp make_pair</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">505</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair &lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; P;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n; P a[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i].fi), a[i].se = i;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(a + <span class=\"number\">1</span>, a + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> su = <span class=\"number\">0</span>; <span class=\"function\">P <span class=\"title\">mi</span><span class=\"params\">(n, <span class=\"number\">0</span>)</span>, <span class=\"title\">ma</span><span class=\"params\">(<span class=\"number\">-1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    pair &lt;<span class=\"keyword\">int</span>, P&gt; as;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        su += a[i].fi;</span><br><span class=\"line\">        mi = <span class=\"built_in\">min</span>(mi, a[i]), ma = <span class=\"built_in\">max</span>(ma, a[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(su == i * (i - <span class=\"number\">1</span>) / <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mi.se ^ ma.se) as = <span class=\"built_in\">max</span>(as, <span class=\"built_in\">mp</span>(ma.fi - mi.fi, <span class=\"built_in\">mp</span>(mi.se, ma.se)));</span><br><span class=\"line\">            mi.fi = n, ma.fi = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(as.se.fi) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;! %d %d\\n&quot;</span>, as.se.fi, as.se.se);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;! 0 0&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">fflush</span>(stdout);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":2427,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"https://codeforces.com/contest/1498/problem/E\">题目链接</a></p>\r\n<p>有一张 <span class=\"math inline\">\\(n\\)</span> 个点的竞赛图。</p>\r\n<p>不会给这张竞赛图，但会给每个点的入度 <span class=\"math inline\">\\(k_i\\)</span>。</p>\r\n<p>还可以<strong>通过交互</strong>询问从 <span class=\"math inline\">\\(u\\)</span> 能否到达 <span class=\"math inline\">\\(v\\)</span>，但一旦回答了”是“，就不能再询问了。</p>\r\n<p>定义一个点对 <span class=\"math inline\">\\((u,v)\\)</span> 的价值是 <span class=\"math inline\">\\(|k_u-k_v|\\)</span>。</p>\r\n<p>求所有双向可达的点对中价值最大的一对，或者输出无解。如果有多对，输出任意一对。</p>\r\n<p><span class=\"math inline\">\\(n \\le 500\\)</span></p>\r\n</blockquote>\r\n<h3 id=\"做法一\">做法一</h3>\r\n<p>考虑一对点 <span class=\"math inline\">\\((u,v)\\)</span>，由于是竞赛图，<span class=\"math inline\">\\(u,v\\)</span> 间有连边，不妨设 <span class=\"math inline\">\\(u \\rightarrow v\\)</span>。</p>\r\n<p>如果 <span class=\"math inline\">\\(v\\)</span> 不能到达 <span class=\"math inline\">\\(u\\)</span>，<span class=\"math inline\">\\(\\exists S,u \\in S \\land \\forall x \\in S, y \\not \\in S,x \\rightarrow y\\)</span>，即集合 <span class=\"math inline\">\\(S\\)</span> 内的点全部向 <span class=\"math inline\">\\(S\\)</span> 外的点连边。</p>\r\n<p><span class=\"math inline\">\\(\\therefore k_v \\ge |S|,k_u &lt; |S| \\Rightarrow k_u &lt; k_v\\)</span></p>\r\n<p>得到一个结论：如果一对点不双向可达，那么入度大的一定无法到达入度小的。</p>\r\n<p>把所有点对按价值从大到小依次询问，每次询问入度大的能否到达入度小的，如果可以，就直接输出这一对。</p>\r\n<p>如果到最后都没有回答“是”，那么输出无解。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^2)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1000</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> ch[N];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Qry</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y, v;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"keyword\">const</span> Qry&amp; b)<span class=\"keyword\">const</span> &#123; <span class=\"keyword\">return</span> v &gt; b.v; &#125;</span><br><span class=\"line\">&#125; q[N * N];</span><br><span class=\"line\">vector &lt;<span class=\"keyword\">int</span>&gt; v[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, idx, k[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;k[i]);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">rep</span>(j, i + <span class=\"number\">1</span>, n)</span><br><span class=\"line\">        q[++idx] = k[i] &lt; k[j] ? (Qry)&#123; j, i, k[j] - k[i] &#125; : (Qry)&#123; i, j, k[i] - k[j] &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(q + <span class=\"number\">1</span>, q + idx + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, idx) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;? %d %d\\n&quot;</span>, q[i].x, q[i].y);</span><br><span class=\"line\">        <span class=\"built_in\">fflush</span>(stdout);</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, ch);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ch[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;Y&#x27;</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;! %d %d\\n&quot;</span>, q[i].x, q[i].y), <span class=\"built_in\">fflush</span>(stdout), <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;! 0 0&quot;</span>), <span class=\"built_in\">fflush</span>(stdout);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"做法二\">做法二</h3>\r\n<p>考虑拓扑序最小的几个<strong>强连通分量</strong>的并集 <span class=\"math inline\">\\(S\\)</span>，<span class=\"math inline\">\\(S\\)</span> 内的点全部向 <span class=\"math inline\">\\(S\\)</span> 外的点连边，所以 <span class=\"math inline\">\\(S\\)</span> 内所有点的入度和等于 <span class=\"math inline\">\\(\\binom {|S|}2\\)</span>，<strong>反之亦然</strong>。</p>\r\n<p>把所有点按入度从小到大排序，如果前 <span class=\"math inline\">\\(m\\)</span> 个节点的入度和等于 <span class=\"math inline\">\\(\\binom m2\\)</span>，那么前 <span class=\"math inline\">\\(m\\)</span> 个点一定是拓扑序最小的几个强连通分量的并集，<strong>并且不会漏掉</strong>，这样就可以分离出所有的强连通分量，直接统计答案即可。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n)\\)</span>，因为排序可以桶排，<strong>无需询问</strong>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mp make_pair</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">505</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair &lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; P;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n; P a[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i].fi), a[i].se = i;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(a + <span class=\"number\">1</span>, a + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> su = <span class=\"number\">0</span>; <span class=\"function\">P <span class=\"title\">mi</span><span class=\"params\">(n, <span class=\"number\">0</span>)</span>, <span class=\"title\">ma</span><span class=\"params\">(<span class=\"number\">-1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    pair &lt;<span class=\"keyword\">int</span>, P&gt; as;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        su += a[i].fi;</span><br><span class=\"line\">        mi = <span class=\"built_in\">min</span>(mi, a[i]), ma = <span class=\"built_in\">max</span>(ma, a[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(su == i * (i - <span class=\"number\">1</span>) / <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mi.se ^ ma.se) as = <span class=\"built_in\">max</span>(as, <span class=\"built_in\">mp</span>(ma.fi - mi.fi, <span class=\"built_in\">mp</span>(mi.se, ma.se)));</span><br><span class=\"line\">            mi.fi = n, ma.fi = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(as.se.fi) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;! %d %d\\n&quot;</span>, as.se.fi, as.se.se);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;! 0 0&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">fflush</span>(stdout);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"Complete the MST | Codeforces 1508C","date":"2021-04-17T07:05:41.000Z","updated":"2021-04-17T07:05:41.000Z","_content":"> [题目链接](https://codeforces.com/contest/1508/problem/C)\n>\n> 有一张 $n$ 个点的无向完全图，其中 $m$ 条边的边权已给定。\n>\n> 你需要给剩下的边确定边权，使得**所有边的权值**异或和为 $0$。\n>\n> 求出所有方案中最小生成树权值的最小值。\n>\n> $n \\le 2 \\cdot 10^5,m \\le \\min\\{2 \\cdot 10^5,\\binom n2-1\\}$\n\n下面**原图**指给定的 $m$ 条边构成的图，**补图**指剩下的边构成的图，```MST``` 指最小生成树。\n\n> 引理：最优解中补图至多有一条权值非 $0$ 的边。\n>\n> 证明：考虑两条补图边 $e_1,e_2$，它们的权值 $w_1,w_2$ 都大于 $0$。\n>\n> - 如果它们都不在 ```MST``` 上，把 $e_1$ 权值变为 $0$，$e_2$ 权值异或上 $e_1$ 权值，新的  ```MST``` 不会变劣。\n> - 如果它们都在 ```MST``` 上，把 $e_1$ 权值变为 $0$，$e_2$ 权值异或上 $e_1$ 权值，因为 $w_1 \\oplus w_2 \\le w_1 + w_2$，所以新的  ```MST``` 不会变劣。\n> - 如果它们中的一条在 ```MST``` 上，一条不在，不妨设 $e_1$ 在 ```MST``` 上，把 $e_1$ 权值变为 $0$，$e_2$ 权值异或上 $e_1$ 权值，新的  ```MST``` 不会变劣。\n>\n> 综上，如果存在两条权值大于 $0$ 的边，把其中一条的权值变为 $0$，新的  ```MST``` 不会变劣。\n\n所以补图中有一条**特殊边**的权值恰好为给定的 $m$ 条边的权值异或和，其余边的权值均为 $0$。\n\n容易想到枚举一下特殊边在不在 ```MST``` 上。\n\n先用 ```DFS``` 求出补图的生成森林，用 ```set``` 优化枚举未访问的点可以做到 $O(m\\log n)$ 的复杂度。\n\n如果补图中存在环，那么补图中一定有边不在 ```MST``` 上，故特殊边一定不在 ```MST``` 上。把求出的生成森林加入原图后，答案即为该图的最小生成树，复杂度 $O(m\\log m)$。\n\n如果不存在环，那么 $n$ 就是 $O(\\sqrt m)$ 级别的，如果特殊边在 ```MST``` 上，直接用同样的做法；如果不在 ```MST``` 上，就需要枚举特殊边是哪一条，每次删去它再沿用以上做法，复杂度 $O(m \\log m + nm\\alpha(n))$。一个优化：用原图的最小生成树替代原图，复杂度降为 $O(m\\log m + n^2\\alpha(n))=O(m\\log m)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\nconst int N = 2e5 + 5;\ntypedef long long ll;\nint n, m, fa[N], xorsu, eid, tid;\nint find(int x) { return x ^ fa[x] ? fa[x] = find(fa[x]) : x; }\nint mrg(int u, int v) {\n    if((u = find(u)) ^ (v = find(v))) return fa[u] = v;\n    return 0;\n}\nvector <int> G[N];\nstruct edge {\n    int u, v, w;\n    bool operator <(const edge& b)const {\n        return w < b.w;\n    }\n} e[N], t[N];\nset <int> s;\nvoid dfs(int u) {\n    s.erase(u);\n    For(i, 0, G[u].size() - 1) {\n        int v = G[u][i], nxt = G[u][i + 1];\n        while(!s.empty() && *s.rbegin() > v) {\n            int vv = *s.upper_bound(v);\n            if(vv >= nxt) break;\n            t[++tid] = {u, vv}, dfs(vv);\n        }\n    }\n}\nint main() {\n    cin >> n >> m;\n    rep(i, 1, m) {\n        scanf(\"%d%d%d\", &e[i].u, &e[i].v, &e[i].w), xorsu ^= e[i].w;\n        G[e[i].u].pb(e[i].v), G[e[i].v].pb(e[i].u);\n    }\n    rep(i, 1, n) G[i].pb(0), G[i].pb(n + 1), sort(G[i].begin(), G[i].end()), s.insert(i);\n    while(!s.empty()) dfs(*s.begin());\n    sort(e + 1, e + m + 1);\n    rep(i, 1, n) fa[i] = i;\n    rep(i, 1, m) if(mrg(e[i].u, e[i].v)) e[++eid] = e[i];\n    if(tid < n * (n - 1ll) / 2 - m) {\n        rep(i, 1, n) fa[i] = i;\n        rep(i, 1, tid) mrg(t[i].u, t[i].v);\n        ll as = 0;\n        rep(i, 1, eid) if(mrg(e[i].u, e[i].v)) as += e[i].w;\n        cout << as;\n    } else {\n        ll as = 1e18;\n        rep(i, 0, tid) {\n            rep(j, 1, n) fa[j] = j;\n            rep(j, 1, tid) if(j ^ i) mrg(t[j].u, t[j].v);\n            ll su = i ? 0 : xorsu;\n            rep(j, 1, eid) if(mrg(e[j].u, e[j].v)) su += e[j].w;\n            as = min(as, su);\n        }\n        cout << as;\n    }\n    return 0;\n}\n```","source":"_posts/CF1508C.md","raw":"---\ntitle: Complete the MST | Codeforces 1508C\ndate: 2021-04-17 15:05:41\nupdated: 2021-04-17 15:05:41\ntags: [图论,最小生成树]\ncategories: Codeforces\n---\n> [题目链接](https://codeforces.com/contest/1508/problem/C)\n>\n> 有一张 $n$ 个点的无向完全图，其中 $m$ 条边的边权已给定。\n>\n> 你需要给剩下的边确定边权，使得**所有边的权值**异或和为 $0$。\n>\n> 求出所有方案中最小生成树权值的最小值。\n>\n> $n \\le 2 \\cdot 10^5,m \\le \\min\\{2 \\cdot 10^5,\\binom n2-1\\}$\n\n下面**原图**指给定的 $m$ 条边构成的图，**补图**指剩下的边构成的图，```MST``` 指最小生成树。\n\n> 引理：最优解中补图至多有一条权值非 $0$ 的边。\n>\n> 证明：考虑两条补图边 $e_1,e_2$，它们的权值 $w_1,w_2$ 都大于 $0$。\n>\n> - 如果它们都不在 ```MST``` 上，把 $e_1$ 权值变为 $0$，$e_2$ 权值异或上 $e_1$ 权值，新的  ```MST``` 不会变劣。\n> - 如果它们都在 ```MST``` 上，把 $e_1$ 权值变为 $0$，$e_2$ 权值异或上 $e_1$ 权值，因为 $w_1 \\oplus w_2 \\le w_1 + w_2$，所以新的  ```MST``` 不会变劣。\n> - 如果它们中的一条在 ```MST``` 上，一条不在，不妨设 $e_1$ 在 ```MST``` 上，把 $e_1$ 权值变为 $0$，$e_2$ 权值异或上 $e_1$ 权值，新的  ```MST``` 不会变劣。\n>\n> 综上，如果存在两条权值大于 $0$ 的边，把其中一条的权值变为 $0$，新的  ```MST``` 不会变劣。\n\n所以补图中有一条**特殊边**的权值恰好为给定的 $m$ 条边的权值异或和，其余边的权值均为 $0$。\n\n容易想到枚举一下特殊边在不在 ```MST``` 上。\n\n先用 ```DFS``` 求出补图的生成森林，用 ```set``` 优化枚举未访问的点可以做到 $O(m\\log n)$ 的复杂度。\n\n如果补图中存在环，那么补图中一定有边不在 ```MST``` 上，故特殊边一定不在 ```MST``` 上。把求出的生成森林加入原图后，答案即为该图的最小生成树，复杂度 $O(m\\log m)$。\n\n如果不存在环，那么 $n$ 就是 $O(\\sqrt m)$ 级别的，如果特殊边在 ```MST``` 上，直接用同样的做法；如果不在 ```MST``` 上，就需要枚举特殊边是哪一条，每次删去它再沿用以上做法，复杂度 $O(m \\log m + nm\\alpha(n))$。一个优化：用原图的最小生成树替代原图，复杂度降为 $O(m\\log m + n^2\\alpha(n))=O(m\\log m)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\nconst int N = 2e5 + 5;\ntypedef long long ll;\nint n, m, fa[N], xorsu, eid, tid;\nint find(int x) { return x ^ fa[x] ? fa[x] = find(fa[x]) : x; }\nint mrg(int u, int v) {\n    if((u = find(u)) ^ (v = find(v))) return fa[u] = v;\n    return 0;\n}\nvector <int> G[N];\nstruct edge {\n    int u, v, w;\n    bool operator <(const edge& b)const {\n        return w < b.w;\n    }\n} e[N], t[N];\nset <int> s;\nvoid dfs(int u) {\n    s.erase(u);\n    For(i, 0, G[u].size() - 1) {\n        int v = G[u][i], nxt = G[u][i + 1];\n        while(!s.empty() && *s.rbegin() > v) {\n            int vv = *s.upper_bound(v);\n            if(vv >= nxt) break;\n            t[++tid] = {u, vv}, dfs(vv);\n        }\n    }\n}\nint main() {\n    cin >> n >> m;\n    rep(i, 1, m) {\n        scanf(\"%d%d%d\", &e[i].u, &e[i].v, &e[i].w), xorsu ^= e[i].w;\n        G[e[i].u].pb(e[i].v), G[e[i].v].pb(e[i].u);\n    }\n    rep(i, 1, n) G[i].pb(0), G[i].pb(n + 1), sort(G[i].begin(), G[i].end()), s.insert(i);\n    while(!s.empty()) dfs(*s.begin());\n    sort(e + 1, e + m + 1);\n    rep(i, 1, n) fa[i] = i;\n    rep(i, 1, m) if(mrg(e[i].u, e[i].v)) e[++eid] = e[i];\n    if(tid < n * (n - 1ll) / 2 - m) {\n        rep(i, 1, n) fa[i] = i;\n        rep(i, 1, tid) mrg(t[i].u, t[i].v);\n        ll as = 0;\n        rep(i, 1, eid) if(mrg(e[i].u, e[i].v)) as += e[i].w;\n        cout << as;\n    } else {\n        ll as = 1e18;\n        rep(i, 0, tid) {\n            rep(j, 1, n) fa[j] = j;\n            rep(j, 1, tid) if(j ^ i) mrg(t[j].u, t[j].v);\n            ll su = i ? 0 : xorsu;\n            rep(j, 1, eid) if(mrg(e[j].u, e[j].v)) su += e[j].w;\n            as = min(as, su);\n        }\n        cout << as;\n    }\n    return 0;\n}\n```","slug":"CF1508C","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxgzm000hootn4b9l05sa","content":"<blockquote>\r\n<p><a href=\"https://codeforces.com/contest/1508/problem/C\">题目链接</a></p>\r\n<p>有一张 <span class=\"math inline\">\\(n\\)</span> 个点的无向完全图，其中 <span class=\"math inline\">\\(m\\)</span> 条边的边权已给定。</p>\r\n<p>你需要给剩下的边确定边权，使得<strong>所有边的权值</strong>异或和为 <span class=\"math inline\">\\(0\\)</span>。</p>\r\n<p>求出所有方案中最小生成树权值的最小值。</p>\r\n<p><span class=\"math inline\">\\(n \\le 2 \\cdot 10^5,m \\le \\min\\{2 \\cdot 10^5,\\binom n2-1\\}\\)</span></p>\r\n</blockquote>\r\n<p>下面<strong>原图</strong>指给定的 <span class=\"math inline\">\\(m\\)</span> 条边构成的图，<strong>补图</strong>指剩下的边构成的图，<code>MST</code> 指最小生成树。</p>\r\n<blockquote>\r\n<p>引理：最优解中补图至多有一条权值非 <span class=\"math inline\">\\(0\\)</span> 的边。</p>\r\n<p>证明：考虑两条补图边 <span class=\"math inline\">\\(e_1,e_2\\)</span>，它们的权值 <span class=\"math inline\">\\(w_1,w_2\\)</span> 都大于 <span class=\"math inline\">\\(0\\)</span>。</p>\r\n<ul>\r\n<li>如果它们都不在 <code>MST</code> 上，把 <span class=\"math inline\">\\(e_1\\)</span> 权值变为 <span class=\"math inline\">\\(0\\)</span>，<span class=\"math inline\">\\(e_2\\)</span> 权值异或上 <span class=\"math inline\">\\(e_1\\)</span> 权值，新的 <code>MST</code> 不会变劣。</li>\r\n<li>如果它们都在 <code>MST</code> 上，把 <span class=\"math inline\">\\(e_1\\)</span> 权值变为 <span class=\"math inline\">\\(0\\)</span>，<span class=\"math inline\">\\(e_2\\)</span> 权值异或上 <span class=\"math inline\">\\(e_1\\)</span> 权值，因为 <span class=\"math inline\">\\(w_1 \\oplus w_2 \\le w_1 + w_2\\)</span>，所以新的 <code>MST</code> 不会变劣。</li>\r\n<li>如果它们中的一条在 <code>MST</code> 上，一条不在，不妨设 <span class=\"math inline\">\\(e_1\\)</span> 在 <code>MST</code> 上，把 <span class=\"math inline\">\\(e_1\\)</span> 权值变为 <span class=\"math inline\">\\(0\\)</span>，<span class=\"math inline\">\\(e_2\\)</span> 权值异或上 <span class=\"math inline\">\\(e_1\\)</span> 权值，新的 <code>MST</code> 不会变劣。</li>\r\n</ul>\r\n<p>综上，如果存在两条权值大于 <span class=\"math inline\">\\(0\\)</span> 的边，把其中一条的权值变为 <span class=\"math inline\">\\(0\\)</span>，新的 <code>MST</code> 不会变劣。</p>\r\n</blockquote>\r\n<p>所以补图中有一条<strong>特殊边</strong>的权值恰好为给定的 <span class=\"math inline\">\\(m\\)</span> 条边的权值异或和，其余边的权值均为 <span class=\"math inline\">\\(0\\)</span>。</p>\r\n<p>容易想到枚举一下特殊边在不在 <code>MST</code> 上。</p>\r\n<p>先用 <code>DFS</code> 求出补图的生成森林，用 <code>set</code> 优化枚举未访问的点可以做到 <span class=\"math inline\">\\(O(m\\log n)\\)</span> 的复杂度。</p>\r\n<p>如果补图中存在环，那么补图中一定有边不在 <code>MST</code> 上，故特殊边一定不在 <code>MST</code> 上。把求出的生成森林加入原图后，答案即为该图的最小生成树，复杂度 <span class=\"math inline\">\\(O(m\\log m)\\)</span>。</p>\r\n<p>如果不存在环，那么 <span class=\"math inline\">\\(n\\)</span> 就是 <span class=\"math inline\">\\(O(\\sqrt m)\\)</span> 级别的，如果特殊边在 <code>MST</code> 上，直接用同样的做法；如果不在 <code>MST</code> 上，就需要枚举特殊边是哪一条，每次删去它再沿用以上做法，复杂度 <span class=\"math inline\">\\(O(m \\log m + nm\\alpha(n))\\)</span>。一个优化：用原图的最小生成树替代原图，复杂度降为 <span class=\"math inline\">\\(O(m\\log m + n^2\\alpha(n))=O(m\\log m)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, fa[N], xorsu, eid, tid;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123; <span class=\"keyword\">return</span> x ^ fa[x] ? fa[x] = <span class=\"built_in\">find</span>(fa[x]) : x; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mrg</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((u = <span class=\"built_in\">find</span>(u)) ^ (v = <span class=\"built_in\">find</span>(v))) <span class=\"keyword\">return</span> fa[u] = v;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vector &lt;<span class=\"keyword\">int</span>&gt; G[N];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v, w;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"keyword\">const</span> edge&amp; b)<span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> w &lt; b.w;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; e[N], t[N];</span><br><span class=\"line\">set &lt;<span class=\"keyword\">int</span>&gt; s;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">    s.<span class=\"built_in\">erase</span>(u);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, G[u].<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = G[u][i], nxt = G[u][i + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>() &amp;&amp; *s.<span class=\"built_in\">rbegin</span>() &gt; v) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> vv = *s.<span class=\"built_in\">upper_bound</span>(v);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(vv &gt;= nxt) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            t[++tid] = &#123;u, vv&#125;, <span class=\"built_in\">dfs</span>(vv);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;e[i].u, &amp;e[i].v, &amp;e[i].w), xorsu ^= e[i].w;</span><br><span class=\"line\">        G[e[i].u].<span class=\"built_in\">pb</span>(e[i].v), G[e[i].v].<span class=\"built_in\">pb</span>(e[i].u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) G[i].<span class=\"built_in\">pb</span>(<span class=\"number\">0</span>), G[i].<span class=\"built_in\">pb</span>(n + <span class=\"number\">1</span>), <span class=\"built_in\">sort</span>(G[i].<span class=\"built_in\">begin</span>(), G[i].<span class=\"built_in\">end</span>()), s.<span class=\"built_in\">insert</span>(i);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()) <span class=\"built_in\">dfs</span>(*s.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(e + <span class=\"number\">1</span>, e + m + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) fa[i] = i;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) <span class=\"keyword\">if</span>(<span class=\"built_in\">mrg</span>(e[i].u, e[i].v)) e[++eid] = e[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tid &lt; n * (n - <span class=\"number\">1ll</span>) / <span class=\"number\">2</span> - m) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) fa[i] = i;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, tid) <span class=\"built_in\">mrg</span>(t[i].u, t[i].v);</span><br><span class=\"line\">        ll as = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, eid) <span class=\"keyword\">if</span>(<span class=\"built_in\">mrg</span>(e[i].u, e[i].v)) as += e[i].w;</span><br><span class=\"line\">        cout &lt;&lt; as;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        ll as = <span class=\"number\">1e18</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, tid) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, n) fa[j] = j;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, tid) <span class=\"keyword\">if</span>(j ^ i) <span class=\"built_in\">mrg</span>(t[j].u, t[j].v);</span><br><span class=\"line\">            ll su = i ? <span class=\"number\">0</span> : xorsu;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, eid) <span class=\"keyword\">if</span>(<span class=\"built_in\">mrg</span>(e[j].u, e[j].v)) su += e[j].w;</span><br><span class=\"line\">            as = <span class=\"built_in\">min</span>(as, su);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; as;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":2579,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"https://codeforces.com/contest/1508/problem/C\">题目链接</a></p>\r\n<p>有一张 <span class=\"math inline\">\\(n\\)</span> 个点的无向完全图，其中 <span class=\"math inline\">\\(m\\)</span> 条边的边权已给定。</p>\r\n<p>你需要给剩下的边确定边权，使得<strong>所有边的权值</strong>异或和为 <span class=\"math inline\">\\(0\\)</span>。</p>\r\n<p>求出所有方案中最小生成树权值的最小值。</p>\r\n<p><span class=\"math inline\">\\(n \\le 2 \\cdot 10^5,m \\le \\min\\{2 \\cdot 10^5,\\binom n2-1\\}\\)</span></p>\r\n</blockquote>\r\n<p>下面<strong>原图</strong>指给定的 <span class=\"math inline\">\\(m\\)</span> 条边构成的图，<strong>补图</strong>指剩下的边构成的图，<code>MST</code> 指最小生成树。</p>\r\n<blockquote>\r\n<p>引理：最优解中补图至多有一条权值非 <span class=\"math inline\">\\(0\\)</span> 的边。</p>\r\n<p>证明：考虑两条补图边 <span class=\"math inline\">\\(e_1,e_2\\)</span>，它们的权值 <span class=\"math inline\">\\(w_1,w_2\\)</span> 都大于 <span class=\"math inline\">\\(0\\)</span>。</p>\r\n<ul>\r\n<li>如果它们都不在 <code>MST</code> 上，把 <span class=\"math inline\">\\(e_1\\)</span> 权值变为 <span class=\"math inline\">\\(0\\)</span>，<span class=\"math inline\">\\(e_2\\)</span> 权值异或上 <span class=\"math inline\">\\(e_1\\)</span> 权值，新的 <code>MST</code> 不会变劣。</li>\r\n<li>如果它们都在 <code>MST</code> 上，把 <span class=\"math inline\">\\(e_1\\)</span> 权值变为 <span class=\"math inline\">\\(0\\)</span>，<span class=\"math inline\">\\(e_2\\)</span> 权值异或上 <span class=\"math inline\">\\(e_1\\)</span> 权值，因为 <span class=\"math inline\">\\(w_1 \\oplus w_2 \\le w_1 + w_2\\)</span>，所以新的 <code>MST</code> 不会变劣。</li>\r\n<li>如果它们中的一条在 <code>MST</code> 上，一条不在，不妨设 <span class=\"math inline\">\\(e_1\\)</span> 在 <code>MST</code> 上，把 <span class=\"math inline\">\\(e_1\\)</span> 权值变为 <span class=\"math inline\">\\(0\\)</span>，<span class=\"math inline\">\\(e_2\\)</span> 权值异或上 <span class=\"math inline\">\\(e_1\\)</span> 权值，新的 <code>MST</code> 不会变劣。</li>\r\n</ul>\r\n<p>综上，如果存在两条权值大于 <span class=\"math inline\">\\(0\\)</span> 的边，把其中一条的权值变为 <span class=\"math inline\">\\(0\\)</span>，新的 <code>MST</code> 不会变劣。</p>\r\n</blockquote>\r\n<p>所以补图中有一条<strong>特殊边</strong>的权值恰好为给定的 <span class=\"math inline\">\\(m\\)</span> 条边的权值异或和，其余边的权值均为 <span class=\"math inline\">\\(0\\)</span>。</p>\r\n<p>容易想到枚举一下特殊边在不在 <code>MST</code> 上。</p>\r\n<p>先用 <code>DFS</code> 求出补图的生成森林，用 <code>set</code> 优化枚举未访问的点可以做到 <span class=\"math inline\">\\(O(m\\log n)\\)</span> 的复杂度。</p>\r\n<p>如果补图中存在环，那么补图中一定有边不在 <code>MST</code> 上，故特殊边一定不在 <code>MST</code> 上。把求出的生成森林加入原图后，答案即为该图的最小生成树，复杂度 <span class=\"math inline\">\\(O(m\\log m)\\)</span>。</p>\r\n<p>如果不存在环，那么 <span class=\"math inline\">\\(n\\)</span> 就是 <span class=\"math inline\">\\(O(\\sqrt m)\\)</span> 级别的，如果特殊边在 <code>MST</code> 上，直接用同样的做法；如果不在 <code>MST</code> 上，就需要枚举特殊边是哪一条，每次删去它再沿用以上做法，复杂度 <span class=\"math inline\">\\(O(m \\log m + nm\\alpha(n))\\)</span>。一个优化：用原图的最小生成树替代原图，复杂度降为 <span class=\"math inline\">\\(O(m\\log m + n^2\\alpha(n))=O(m\\log m)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, fa[N], xorsu, eid, tid;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123; <span class=\"keyword\">return</span> x ^ fa[x] ? fa[x] = <span class=\"built_in\">find</span>(fa[x]) : x; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mrg</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((u = <span class=\"built_in\">find</span>(u)) ^ (v = <span class=\"built_in\">find</span>(v))) <span class=\"keyword\">return</span> fa[u] = v;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vector &lt;<span class=\"keyword\">int</span>&gt; G[N];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v, w;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"keyword\">const</span> edge&amp; b)<span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> w &lt; b.w;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; e[N], t[N];</span><br><span class=\"line\">set &lt;<span class=\"keyword\">int</span>&gt; s;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">    s.<span class=\"built_in\">erase</span>(u);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, G[u].<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = G[u][i], nxt = G[u][i + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>() &amp;&amp; *s.<span class=\"built_in\">rbegin</span>() &gt; v) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> vv = *s.<span class=\"built_in\">upper_bound</span>(v);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(vv &gt;= nxt) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            t[++tid] = &#123;u, vv&#125;, <span class=\"built_in\">dfs</span>(vv);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;e[i].u, &amp;e[i].v, &amp;e[i].w), xorsu ^= e[i].w;</span><br><span class=\"line\">        G[e[i].u].<span class=\"built_in\">pb</span>(e[i].v), G[e[i].v].<span class=\"built_in\">pb</span>(e[i].u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) G[i].<span class=\"built_in\">pb</span>(<span class=\"number\">0</span>), G[i].<span class=\"built_in\">pb</span>(n + <span class=\"number\">1</span>), <span class=\"built_in\">sort</span>(G[i].<span class=\"built_in\">begin</span>(), G[i].<span class=\"built_in\">end</span>()), s.<span class=\"built_in\">insert</span>(i);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()) <span class=\"built_in\">dfs</span>(*s.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(e + <span class=\"number\">1</span>, e + m + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) fa[i] = i;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) <span class=\"keyword\">if</span>(<span class=\"built_in\">mrg</span>(e[i].u, e[i].v)) e[++eid] = e[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tid &lt; n * (n - <span class=\"number\">1ll</span>) / <span class=\"number\">2</span> - m) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) fa[i] = i;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, tid) <span class=\"built_in\">mrg</span>(t[i].u, t[i].v);</span><br><span class=\"line\">        ll as = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, eid) <span class=\"keyword\">if</span>(<span class=\"built_in\">mrg</span>(e[i].u, e[i].v)) as += e[i].w;</span><br><span class=\"line\">        cout &lt;&lt; as;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        ll as = <span class=\"number\">1e18</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, tid) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, n) fa[j] = j;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, tid) <span class=\"keyword\">if</span>(j ^ i) <span class=\"built_in\">mrg</span>(t[j].u, t[j].v);</span><br><span class=\"line\">            ll su = i ? <span class=\"number\">0</span> : xorsu;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, eid) <span class=\"keyword\">if</span>(<span class=\"built_in\">mrg</span>(e[j].u, e[j].v)) su += e[j].w;</span><br><span class=\"line\">            as = <span class=\"built_in\">min</span>(as, su);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; as;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"Christmas Game | Codeforces 1498F","date":"2021-03-31T03:27:23.000Z","updated":"2021-03-31T03:27:23.000Z","_content":"> [题目链接](https://codeforces.com/contest/1498/problem/F)\n>\n> 给定一棵 $n$ 个点的树和 $k$，每个结点上有 $a_i$ 个物品，```Alice``` 和 ```Bob``` 在上面玩游戏。\n>\n> 在确定根之后，两个玩家轮流选择任意一个存在 $k$ 级祖先的结点 $u$，然后把 $u$ 的任意个物品移到 $u$ 的 $k$ 级祖先上。\n>\n> 最后没有物品可取的人输。\n>\n> 问当每个结点作为根时，谁必胜。\n>\n> $n \\le 10^5, k \\le 20,a_i \\le 10^9$\n\n当 $k=1$ 时，它几乎是一个[阶梯 ```NIM``` 游戏](http://coding-pages-bucket-3532178-8430896-13917-522304-1305159063.cos-website.ap-hongkong.myqcloud.com/nim-you-xi-and-sg-ding-li/)。\n\n设根结点深度为 $0$，根据阶梯 ```NIM``` 游戏的结论，原问题等价于所有深度为奇数的结点做 ```NIM``` 游戏，即先手必胜当且仅当所有深度为奇数的结点的 $a_i$ 异或和不为 $0$。\n\n对于一般的情况，先手必胜当且仅当\n$$\n\\bigoplus_{\\big\\lfloor \\frac {depth_u}k \\big\\rfloor 为奇数}a_u \\ne 0\n$$\n设 $f_{u,i}$ 表示以 $u$ 为根的子树里，所有满足 $depth_v - depth_u \\equiv i \\pmod {2k}$ 的结点 $v$ 的点权异或和。\n\n然后换根 ```DP``` 一下即可。\n\n复杂度 $O(nk)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n\nusing namespace std;\ntypedef long long ll;\nconst int N = 1e5 + 5;\nint n, K, a[N];\nll f[N][40], ans[N];\nvector <int> G[N];\nvoid add(int u, int v) {\n    For(i, 0, K) f[u][(i + 1) % K] ^= f[v][i];\n}\nvoid dfs(int u, int fa) {\n    f[u][0] = a[u];\n    for(int v : G[u]) if(v ^ fa) dfs(v, u), add(u, v);\n}\nvoid Dfs(int u, int fa) {\n    For(i, K / 2, K) ans[u] ^= f[u][i];\n    for(int v : G[u]) if(v ^ fa) add(u, v), add(v, u), Dfs(v, u), add(v, u), add(u, v);\n}\nint main() {\n    cin >> n >> K, K *= 2;\n    int u, v;\n    rep(i, 2, n) {\n        scanf(\"%d%d\", &u, &v);\n        G[u].push_back(v), G[v].push_back(u);\n    }\n    rep(i, 1, n) scanf(\"%d\", &a[i]);\n    dfs(1, 0), Dfs(1, 0);\n    rep(i, 1, n) printf(\"%d \", ans[i] != 0);\n    return 0;\n}\n```","source":"_posts/CF1498F.md","raw":"---\ntitle: Christmas Game | Codeforces 1498F\ndate: 2021-03-31 11:27:23\nupdated: 2021-03-31 11:27:23\ntags: [博弈论,阶梯 NIM 游戏,动态规划]\ncategories: Codeforces\n---\n> [题目链接](https://codeforces.com/contest/1498/problem/F)\n>\n> 给定一棵 $n$ 个点的树和 $k$，每个结点上有 $a_i$ 个物品，```Alice``` 和 ```Bob``` 在上面玩游戏。\n>\n> 在确定根之后，两个玩家轮流选择任意一个存在 $k$ 级祖先的结点 $u$，然后把 $u$ 的任意个物品移到 $u$ 的 $k$ 级祖先上。\n>\n> 最后没有物品可取的人输。\n>\n> 问当每个结点作为根时，谁必胜。\n>\n> $n \\le 10^5, k \\le 20,a_i \\le 10^9$\n\n当 $k=1$ 时，它几乎是一个[阶梯 ```NIM``` 游戏](http://coding-pages-bucket-3532178-8430896-13917-522304-1305159063.cos-website.ap-hongkong.myqcloud.com/nim-you-xi-and-sg-ding-li/)。\n\n设根结点深度为 $0$，根据阶梯 ```NIM``` 游戏的结论，原问题等价于所有深度为奇数的结点做 ```NIM``` 游戏，即先手必胜当且仅当所有深度为奇数的结点的 $a_i$ 异或和不为 $0$。\n\n对于一般的情况，先手必胜当且仅当\n$$\n\\bigoplus_{\\big\\lfloor \\frac {depth_u}k \\big\\rfloor 为奇数}a_u \\ne 0\n$$\n设 $f_{u,i}$ 表示以 $u$ 为根的子树里，所有满足 $depth_v - depth_u \\equiv i \\pmod {2k}$ 的结点 $v$ 的点权异或和。\n\n然后换根 ```DP``` 一下即可。\n\n复杂度 $O(nk)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n\nusing namespace std;\ntypedef long long ll;\nconst int N = 1e5 + 5;\nint n, K, a[N];\nll f[N][40], ans[N];\nvector <int> G[N];\nvoid add(int u, int v) {\n    For(i, 0, K) f[u][(i + 1) % K] ^= f[v][i];\n}\nvoid dfs(int u, int fa) {\n    f[u][0] = a[u];\n    for(int v : G[u]) if(v ^ fa) dfs(v, u), add(u, v);\n}\nvoid Dfs(int u, int fa) {\n    For(i, K / 2, K) ans[u] ^= f[u][i];\n    for(int v : G[u]) if(v ^ fa) add(u, v), add(v, u), Dfs(v, u), add(v, u), add(u, v);\n}\nint main() {\n    cin >> n >> K, K *= 2;\n    int u, v;\n    rep(i, 2, n) {\n        scanf(\"%d%d\", &u, &v);\n        G[u].push_back(v), G[v].push_back(u);\n    }\n    rep(i, 1, n) scanf(\"%d\", &a[i]);\n    dfs(1, 0), Dfs(1, 0);\n    rep(i, 1, n) printf(\"%d \", ans[i] != 0);\n    return 0;\n}\n```","slug":"CF1498F","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxgzn000iootn8fks0s6f","content":"<blockquote>\r\n<p><a href=\"https://codeforces.com/contest/1498/problem/F\">题目链接</a></p>\r\n<p>给定一棵 <span class=\"math inline\">\\(n\\)</span> 个点的树和 <span class=\"math inline\">\\(k\\)</span>，每个结点上有 <span class=\"math inline\">\\(a_i\\)</span> 个物品，<code>Alice</code> 和 <code>Bob</code> 在上面玩游戏。</p>\r\n<p>在确定根之后，两个玩家轮流选择任意一个存在 <span class=\"math inline\">\\(k\\)</span> 级祖先的结点 <span class=\"math inline\">\\(u\\)</span>，然后把 <span class=\"math inline\">\\(u\\)</span> 的任意个物品移到 <span class=\"math inline\">\\(u\\)</span> 的 <span class=\"math inline\">\\(k\\)</span> 级祖先上。</p>\r\n<p>最后没有物品可取的人输。</p>\r\n<p>问当每个结点作为根时，谁必胜。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^5, k \\le 20,a_i \\le 10^9\\)</span></p>\r\n</blockquote>\r\n<p>当 <span class=\"math inline\">\\(k=1\\)</span> 时，它几乎是一个<a href=\"http://coding-pages-bucket-3532178-8430896-13917-522304-1305159063.cos-website.ap-hongkong.myqcloud.com/nim-you-xi-and-sg-ding-li/\">阶梯 <code>NIM</code> 游戏</a>。</p>\r\n<p>设根结点深度为 <span class=\"math inline\">\\(0\\)</span>，根据阶梯 <code>NIM</code> 游戏的结论，原问题等价于所有深度为奇数的结点做 <code>NIM</code> 游戏，即先手必胜当且仅当所有深度为奇数的结点的 <span class=\"math inline\">\\(a_i\\)</span> 异或和不为 <span class=\"math inline\">\\(0\\)</span>。</p>\r\n<p>对于一般的情况，先手必胜当且仅当 <span class=\"math display\">\\[\r\n\\bigoplus_{\\big\\lfloor \\frac {depth_u}k \\big\\rfloor 为奇数}a_u \\ne 0\r\n\\]</span> 设 <span class=\"math inline\">\\(f_{u,i}\\)</span> 表示以 <span class=\"math inline\">\\(u\\)</span> 为根的子树里，所有满足 <span class=\"math inline\">\\(depth_v - depth_u \\equiv i \\pmod {2k}\\)</span> 的结点 <span class=\"math inline\">\\(v\\)</span> 的点权异或和。</p>\r\n<p>然后换根 <code>DP</code> 一下即可。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(nk)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, K, a[N];</span><br><span class=\"line\">ll f[N][<span class=\"number\">40</span>], ans[N];</span><br><span class=\"line\">vector &lt;<span class=\"keyword\">int</span>&gt; G[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, K) f[u][(i + <span class=\"number\">1</span>) % K] ^= f[v][i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">    f[u][<span class=\"number\">0</span>] = a[u];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) <span class=\"keyword\">if</span>(v ^ fa) <span class=\"built_in\">dfs</span>(v, u), <span class=\"built_in\">add</span>(u, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, K / <span class=\"number\">2</span>, K) ans[u] ^= f[u][i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) <span class=\"keyword\">if</span>(v ^ fa) <span class=\"built_in\">add</span>(u, v), <span class=\"built_in\">add</span>(v, u), <span class=\"built_in\">Dfs</span>(v, u), <span class=\"built_in\">add</span>(v, u), <span class=\"built_in\">add</span>(u, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; K, K *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class=\"line\">        G[u].<span class=\"built_in\">push_back</span>(v), G[v].<span class=\"built_in\">push_back</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>), <span class=\"built_in\">Dfs</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, ans[i] != <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":1386,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"https://codeforces.com/contest/1498/problem/F\">题目链接</a></p>\r\n<p>给定一棵 <span class=\"math inline\">\\(n\\)</span> 个点的树和 <span class=\"math inline\">\\(k\\)</span>，每个结点上有 <span class=\"math inline\">\\(a_i\\)</span> 个物品，<code>Alice</code> 和 <code>Bob</code> 在上面玩游戏。</p>\r\n<p>在确定根之后，两个玩家轮流选择任意一个存在 <span class=\"math inline\">\\(k\\)</span> 级祖先的结点 <span class=\"math inline\">\\(u\\)</span>，然后把 <span class=\"math inline\">\\(u\\)</span> 的任意个物品移到 <span class=\"math inline\">\\(u\\)</span> 的 <span class=\"math inline\">\\(k\\)</span> 级祖先上。</p>\r\n<p>最后没有物品可取的人输。</p>\r\n<p>问当每个结点作为根时，谁必胜。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^5, k \\le 20,a_i \\le 10^9\\)</span></p>\r\n</blockquote>\r\n<p>当 <span class=\"math inline\">\\(k=1\\)</span> 时，它几乎是一个<a href=\"http://coding-pages-bucket-3532178-8430896-13917-522304-1305159063.cos-website.ap-hongkong.myqcloud.com/nim-you-xi-and-sg-ding-li/\">阶梯 <code>NIM</code> 游戏</a>。</p>\r\n<p>设根结点深度为 <span class=\"math inline\">\\(0\\)</span>，根据阶梯 <code>NIM</code> 游戏的结论，原问题等价于所有深度为奇数的结点做 <code>NIM</code> 游戏，即先手必胜当且仅当所有深度为奇数的结点的 <span class=\"math inline\">\\(a_i\\)</span> 异或和不为 <span class=\"math inline\">\\(0\\)</span>。</p>\r\n<p>对于一般的情况，先手必胜当且仅当 <span class=\"math display\">\\[\r\n\\bigoplus_{\\big\\lfloor \\frac {depth_u}k \\big\\rfloor 为奇数}a_u \\ne 0\r\n\\]</span> 设 <span class=\"math inline\">\\(f_{u,i}\\)</span> 表示以 <span class=\"math inline\">\\(u\\)</span> 为根的子树里，所有满足 <span class=\"math inline\">\\(depth_v - depth_u \\equiv i \\pmod {2k}\\)</span> 的结点 <span class=\"math inline\">\\(v\\)</span> 的点权异或和。</p>\r\n<p>然后换根 <code>DP</code> 一下即可。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(nk)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, K, a[N];</span><br><span class=\"line\">ll f[N][<span class=\"number\">40</span>], ans[N];</span><br><span class=\"line\">vector &lt;<span class=\"keyword\">int</span>&gt; G[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, K) f[u][(i + <span class=\"number\">1</span>) % K] ^= f[v][i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">    f[u][<span class=\"number\">0</span>] = a[u];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) <span class=\"keyword\">if</span>(v ^ fa) <span class=\"built_in\">dfs</span>(v, u), <span class=\"built_in\">add</span>(u, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, K / <span class=\"number\">2</span>, K) ans[u] ^= f[u][i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) <span class=\"keyword\">if</span>(v ^ fa) <span class=\"built_in\">add</span>(u, v), <span class=\"built_in\">add</span>(v, u), <span class=\"built_in\">Dfs</span>(v, u), <span class=\"built_in\">add</span>(v, u), <span class=\"built_in\">add</span>(u, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; K, K *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class=\"line\">        G[u].<span class=\"built_in\">push_back</span>(v), G[v].<span class=\"built_in\">push_back</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>), <span class=\"built_in\">Dfs</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, ans[i] != <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"Baby Ehab Plays with Permutations | Codeforces 1516E","date":"2021-05-02T12:35:00.000Z","updated":"2021-05-02T12:35:00.000Z","_content":">[题目链接](https://codeforces.com/problemset/problem/1516/E)\n>\n>给定 $n,k$，对于每个 $i \\in [1,k]$，你需要求出有多少个长度为 $n$ 的排列能通过恰好 $i$ 次交换操作变成 $\\{1,2,\\cdots,n\\}$。\n>\n>答案对 $10^9+7$ 取模。\n>\n>$n \\le 10^9,k \\le 200$\n\n先考虑这样一个问题：给定一个排列 $P$，最少交换几次才能变成 $\\{1,2,\\cdots,n\\}$。\n\n把排列 $P$ 理解成一个置换，并分解成循环，不难发现 $i$ 个元素的循环需要交换 $i-1$ 次。\n\n这样，如果 $P$ 的循环节为 $x$，则总的交换次数为 $n-x$。\n\n涉及到点数和循环数不难想到**第一类斯特林数**。\n\n$i$ 的答案即 ${n \\brack n-i}+{n \\brack n-i+2}+{n \\brack n-i+4} + \\cdots$。\n\n问题是 $n$ 太大了，不能递推求出第一类斯特林数。\n\n由于 $i$ 次交换最多影响 $2i$ 个元素，一个合法的排列 $P$ 至多有 $2i$ 个位置 $j$ 满足 $j \\ne P_j$。\n\n可以枚举有多少个 $j$ 满足 $j \\ne P_j$，如果有 $x$ 个，对答案的贡献为 $\\binom nxf_{x,x-i}$。\n\n其中 $f_{i,j}$ 表示有多少个长度为 $i$ 的**错排**循环节为 $j$，它可以通过第一类斯特林数容斥得到：\n$$\nf_{i,j}={i \\brack j}-\\sum_{k=1}^j\\binom ikf_{i-k,j-k}\n$$\n复杂度 $O(k^3)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define pb push_back\n\nusing namespace std;\n\ntypedef long long ll;\nconst int N = 205;\nconst ll P = 1e9 + 7;\n\nint n, K, C[N * 2][N * 2];\nll f[N * 2][N], as[N];\n\nll Pow(ll a, int n, ll r = 1) {\n    for(; n; n /= 2, a = a * a % P)\n    if(n & 1) r = r * a % P;\n    return r;\n}\nll calc(int x) {\n    ll a = 1, b = 1;\n    while(x) b = b * x-- % P, a = a * (n - x) % P;\n    return a * Pow(b, P - 2) % P;\n}\nint main() {\n    cin >> n >> K;\n    f[0][0] = 1;\n    rep(i, 1, K * 2) rep(j, 1, K)\n        f[i][j] = (f[i - 1][j - 1] + (i - 1) * f[i - 1][j]) % P;\n    rep(i, 0, K * 2) {\n        C[i][0] = 1;\n        rep(j, 1, i) C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]) % P;\n    }\n    rep(i, 1, K * 2) rep(j, 1, i) rep(k, 1, j)\n        (f[i][j] -= C[i][k] * f[i - k][j - k]) %= P;\n    rep(i, 0, K) {\n        rep(j, i, i * 2) (as[i] += f[j][j - i] * calc(j)) %= P;\n        if(i >= 2) (as[i] += as[i - 2]) %= P;\n        if(i) printf(\"%lld \", (as[i] + P) % P);\n    }\n    return 0;\n}\n```","source":"_posts/CF1515E.md","raw":"---\ntitle: Baby Ehab Plays with Permutations | Codeforces 1516E\ndate: 2021-05-02 20:35:00\nupdated: 2021-05-02 20:35:00\ntags: [组合计数,置换,容斥原理,动态规划]\ncategories: Codeforces\n---\n>[题目链接](https://codeforces.com/problemset/problem/1516/E)\n>\n>给定 $n,k$，对于每个 $i \\in [1,k]$，你需要求出有多少个长度为 $n$ 的排列能通过恰好 $i$ 次交换操作变成 $\\{1,2,\\cdots,n\\}$。\n>\n>答案对 $10^9+7$ 取模。\n>\n>$n \\le 10^9,k \\le 200$\n\n先考虑这样一个问题：给定一个排列 $P$，最少交换几次才能变成 $\\{1,2,\\cdots,n\\}$。\n\n把排列 $P$ 理解成一个置换，并分解成循环，不难发现 $i$ 个元素的循环需要交换 $i-1$ 次。\n\n这样，如果 $P$ 的循环节为 $x$，则总的交换次数为 $n-x$。\n\n涉及到点数和循环数不难想到**第一类斯特林数**。\n\n$i$ 的答案即 ${n \\brack n-i}+{n \\brack n-i+2}+{n \\brack n-i+4} + \\cdots$。\n\n问题是 $n$ 太大了，不能递推求出第一类斯特林数。\n\n由于 $i$ 次交换最多影响 $2i$ 个元素，一个合法的排列 $P$ 至多有 $2i$ 个位置 $j$ 满足 $j \\ne P_j$。\n\n可以枚举有多少个 $j$ 满足 $j \\ne P_j$，如果有 $x$ 个，对答案的贡献为 $\\binom nxf_{x,x-i}$。\n\n其中 $f_{i,j}$ 表示有多少个长度为 $i$ 的**错排**循环节为 $j$，它可以通过第一类斯特林数容斥得到：\n$$\nf_{i,j}={i \\brack j}-\\sum_{k=1}^j\\binom ikf_{i-k,j-k}\n$$\n复杂度 $O(k^3)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define pb push_back\n\nusing namespace std;\n\ntypedef long long ll;\nconst int N = 205;\nconst ll P = 1e9 + 7;\n\nint n, K, C[N * 2][N * 2];\nll f[N * 2][N], as[N];\n\nll Pow(ll a, int n, ll r = 1) {\n    for(; n; n /= 2, a = a * a % P)\n    if(n & 1) r = r * a % P;\n    return r;\n}\nll calc(int x) {\n    ll a = 1, b = 1;\n    while(x) b = b * x-- % P, a = a * (n - x) % P;\n    return a * Pow(b, P - 2) % P;\n}\nint main() {\n    cin >> n >> K;\n    f[0][0] = 1;\n    rep(i, 1, K * 2) rep(j, 1, K)\n        f[i][j] = (f[i - 1][j - 1] + (i - 1) * f[i - 1][j]) % P;\n    rep(i, 0, K * 2) {\n        C[i][0] = 1;\n        rep(j, 1, i) C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]) % P;\n    }\n    rep(i, 1, K * 2) rep(j, 1, i) rep(k, 1, j)\n        (f[i][j] -= C[i][k] * f[i - k][j - k]) %= P;\n    rep(i, 0, K) {\n        rep(j, i, i * 2) (as[i] += f[j][j - i] * calc(j)) %= P;\n        if(i >= 2) (as[i] += as[i - 2]) %= P;\n        if(i) printf(\"%lld \", (as[i] + P) % P);\n    }\n    return 0;\n}\n```","slug":"CF1515E","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxgzp000mootnaem74fd7","content":"<blockquote>\r\n<p><a href=\"https://codeforces.com/problemset/problem/1516/E\">题目链接</a></p>\r\n<p>给定 <span class=\"math inline\">\\(n,k\\)</span>，对于每个 <span class=\"math inline\">\\(i \\in [1,k]\\)</span>，你需要求出有多少个长度为 <span class=\"math inline\">\\(n\\)</span> 的排列能通过恰好 <span class=\"math inline\">\\(i\\)</span> 次交换操作变成 <span class=\"math inline\">\\(\\{1,2,\\cdots,n\\}\\)</span>。</p>\r\n<p>答案对 <span class=\"math inline\">\\(10^9+7\\)</span> 取模。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^9,k \\le 200\\)</span></p>\r\n</blockquote>\r\n<p>先考虑这样一个问题：给定一个排列 <span class=\"math inline\">\\(P\\)</span>，最少交换几次才能变成 <span class=\"math inline\">\\(\\{1,2,\\cdots,n\\}\\)</span>。</p>\r\n<p>把排列 <span class=\"math inline\">\\(P\\)</span> 理解成一个置换，并分解成循环，不难发现 <span class=\"math inline\">\\(i\\)</span> 个元素的循环需要交换 <span class=\"math inline\">\\(i-1\\)</span> 次。</p>\r\n<p>这样，如果 <span class=\"math inline\">\\(P\\)</span> 的循环节为 <span class=\"math inline\">\\(x\\)</span>，则总的交换次数为 <span class=\"math inline\">\\(n-x\\)</span>。</p>\r\n<p>涉及到点数和循环数不难想到<strong>第一类斯特林数</strong>。</p>\r\n<p><span class=\"math inline\">\\(i\\)</span> 的答案即 <span class=\"math inline\">\\({n \\brack n-i}+{n \\brack n-i+2}+{n \\brack n-i+4} + \\cdots\\)</span>。</p>\r\n<p>问题是 <span class=\"math inline\">\\(n\\)</span> 太大了，不能递推求出第一类斯特林数。</p>\r\n<p>由于 <span class=\"math inline\">\\(i\\)</span> 次交换最多影响 <span class=\"math inline\">\\(2i\\)</span> 个元素，一个合法的排列 <span class=\"math inline\">\\(P\\)</span> 至多有 <span class=\"math inline\">\\(2i\\)</span> 个位置 <span class=\"math inline\">\\(j\\)</span> 满足 <span class=\"math inline\">\\(j \\ne P_j\\)</span>。</p>\r\n<p>可以枚举有多少个 <span class=\"math inline\">\\(j\\)</span> 满足 <span class=\"math inline\">\\(j \\ne P_j\\)</span>，如果有 <span class=\"math inline\">\\(x\\)</span> 个，对答案的贡献为 <span class=\"math inline\">\\(\\binom nxf_{x,x-i}\\)</span>。</p>\r\n<p>其中 <span class=\"math inline\">\\(f_{i,j}\\)</span> 表示有多少个长度为 <span class=\"math inline\">\\(i\\)</span> 的<strong>错排</strong>循环节为 <span class=\"math inline\">\\(j\\)</span>，它可以通过第一类斯特林数容斥得到： <span class=\"math display\">\\[\r\nf_{i,j}={i \\brack j}-\\sum_{k=1}^j\\binom ikf_{i-k,j-k}\r\n\\]</span> 复杂度 <span class=\"math inline\">\\(O(k^3)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">205</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll P = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, K, C[N * <span class=\"number\">2</span>][N * <span class=\"number\">2</span>];</span><br><span class=\"line\">ll f[N * <span class=\"number\">2</span>][N], as[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">Pow</span><span class=\"params\">(ll a, <span class=\"keyword\">int</span> n, ll r = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; n; n /= <span class=\"number\">2</span>, a = a * a % P)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = r * a % P;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    ll a = <span class=\"number\">1</span>, b = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x) b = b * x-- % P, a = a * (n - x) % P;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a * <span class=\"built_in\">Pow</span>(b, P - <span class=\"number\">2</span>) % P;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; K;</span><br><span class=\"line\">    f[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, K * <span class=\"number\">2</span>) <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, K)</span><br><span class=\"line\">        f[i][j] = (f[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + (i - <span class=\"number\">1</span>) * f[i - <span class=\"number\">1</span>][j]) % P;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, K * <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        C[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, i) C[i][j] = (C[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + C[i - <span class=\"number\">1</span>][j]) % P;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, K * <span class=\"number\">2</span>) <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, i) <span class=\"built_in\">rep</span>(k, <span class=\"number\">1</span>, j)</span><br><span class=\"line\">        (f[i][j] -= C[i][k] * f[i - k][j - k]) %= P;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, K) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, i, i * <span class=\"number\">2</span>) (as[i] += f[j][j - i] * <span class=\"built_in\">calc</span>(j)) %= P;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &gt;= <span class=\"number\">2</span>) (as[i] += as[i - <span class=\"number\">2</span>]) %= P;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld &quot;</span>, (as[i] + P) % P);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":1555,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"https://codeforces.com/problemset/problem/1516/E\">题目链接</a></p>\r\n<p>给定 <span class=\"math inline\">\\(n,k\\)</span>，对于每个 <span class=\"math inline\">\\(i \\in [1,k]\\)</span>，你需要求出有多少个长度为 <span class=\"math inline\">\\(n\\)</span> 的排列能通过恰好 <span class=\"math inline\">\\(i\\)</span> 次交换操作变成 <span class=\"math inline\">\\(\\{1,2,\\cdots,n\\}\\)</span>。</p>\r\n<p>答案对 <span class=\"math inline\">\\(10^9+7\\)</span> 取模。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^9,k \\le 200\\)</span></p>\r\n</blockquote>\r\n<p>先考虑这样一个问题：给定一个排列 <span class=\"math inline\">\\(P\\)</span>，最少交换几次才能变成 <span class=\"math inline\">\\(\\{1,2,\\cdots,n\\}\\)</span>。</p>\r\n<p>把排列 <span class=\"math inline\">\\(P\\)</span> 理解成一个置换，并分解成循环，不难发现 <span class=\"math inline\">\\(i\\)</span> 个元素的循环需要交换 <span class=\"math inline\">\\(i-1\\)</span> 次。</p>\r\n<p>这样，如果 <span class=\"math inline\">\\(P\\)</span> 的循环节为 <span class=\"math inline\">\\(x\\)</span>，则总的交换次数为 <span class=\"math inline\">\\(n-x\\)</span>。</p>\r\n<p>涉及到点数和循环数不难想到<strong>第一类斯特林数</strong>。</p>\r\n<p><span class=\"math inline\">\\(i\\)</span> 的答案即 <span class=\"math inline\">\\({n \\brack n-i}+{n \\brack n-i+2}+{n \\brack n-i+4} + \\cdots\\)</span>。</p>\r\n<p>问题是 <span class=\"math inline\">\\(n\\)</span> 太大了，不能递推求出第一类斯特林数。</p>\r\n<p>由于 <span class=\"math inline\">\\(i\\)</span> 次交换最多影响 <span class=\"math inline\">\\(2i\\)</span> 个元素，一个合法的排列 <span class=\"math inline\">\\(P\\)</span> 至多有 <span class=\"math inline\">\\(2i\\)</span> 个位置 <span class=\"math inline\">\\(j\\)</span> 满足 <span class=\"math inline\">\\(j \\ne P_j\\)</span>。</p>\r\n<p>可以枚举有多少个 <span class=\"math inline\">\\(j\\)</span> 满足 <span class=\"math inline\">\\(j \\ne P_j\\)</span>，如果有 <span class=\"math inline\">\\(x\\)</span> 个，对答案的贡献为 <span class=\"math inline\">\\(\\binom nxf_{x,x-i}\\)</span>。</p>\r\n<p>其中 <span class=\"math inline\">\\(f_{i,j}\\)</span> 表示有多少个长度为 <span class=\"math inline\">\\(i\\)</span> 的<strong>错排</strong>循环节为 <span class=\"math inline\">\\(j\\)</span>，它可以通过第一类斯特林数容斥得到： <span class=\"math display\">\\[\r\nf_{i,j}={i \\brack j}-\\sum_{k=1}^j\\binom ikf_{i-k,j-k}\r\n\\]</span> 复杂度 <span class=\"math inline\">\\(O(k^3)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">205</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll P = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, K, C[N * <span class=\"number\">2</span>][N * <span class=\"number\">2</span>];</span><br><span class=\"line\">ll f[N * <span class=\"number\">2</span>][N], as[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">Pow</span><span class=\"params\">(ll a, <span class=\"keyword\">int</span> n, ll r = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; n; n /= <span class=\"number\">2</span>, a = a * a % P)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = r * a % P;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    ll a = <span class=\"number\">1</span>, b = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x) b = b * x-- % P, a = a * (n - x) % P;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a * <span class=\"built_in\">Pow</span>(b, P - <span class=\"number\">2</span>) % P;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; K;</span><br><span class=\"line\">    f[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, K * <span class=\"number\">2</span>) <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, K)</span><br><span class=\"line\">        f[i][j] = (f[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + (i - <span class=\"number\">1</span>) * f[i - <span class=\"number\">1</span>][j]) % P;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, K * <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        C[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, i) C[i][j] = (C[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + C[i - <span class=\"number\">1</span>][j]) % P;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, K * <span class=\"number\">2</span>) <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, i) <span class=\"built_in\">rep</span>(k, <span class=\"number\">1</span>, j)</span><br><span class=\"line\">        (f[i][j] -= C[i][k] * f[i - k][j - k]) %= P;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, K) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, i, i * <span class=\"number\">2</span>) (as[i] += f[j][j - i] * <span class=\"built_in\">calc</span>(j)) %= P;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &gt;= <span class=\"number\">2</span>) (as[i] += as[i - <span class=\"number\">2</span>]) %= P;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld &quot;</span>, (as[i] + P) % P);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"Phoenix and Earthquake | Codeforces 1515F","date":"2021-05-03T07:35:26.000Z","updated":"2021-05-03T07:35:26.000Z","_content":"> [题目链接](https://codeforces.com/problemset/problem/1515/F)\n>\n> 给定一张 $n$ 个点 $m$ 条边的无向连通图和正整数 $x$，点有非负权值 $a_i$。\n>\n> 如果一条边 $(u,v)$ 满足 $a_u+a_v \\ge x$，可以将 $u,v$ 缩起来，新点的点权为 $a_u+a_v-x$。\n>\n> 判断这张图是否可以缩成一个点并给出方案。\n>\n> $n,m \\le 3 \\cdot 10^5,x,a_i \\le 10^9$\n\n首先将每个点的点权减去 $x$，则合并条件变为 $a_u + a_v \\ge -x$，每次合并后新点的点权为 $a_u + a_v$。\n\n> 结论：这张图可以缩成一个点的充要条件是点权和大于等于 $-x$。\n\n必要性显然，充分性可以考虑这个构造：每次选择点权最大的点 $u$ 的任意一条边。\n\n构造的正确性可以考虑反证法，设这条边为 $(u,v)$，假设这条边不行，即 $a_u+a_v<-x$。\n\n进一步 $\\because a_v \\ge -x,\\therefore a_u < 0$\n\n由于 $a_u$ 是最大值，因此所有点的点权都是负数，那么 $a_u+a_v \\ge \\sum a_i \\ge -x$，推出矛盾！\n\n至此，已经得到一个做法。\n\n但还有更简单的做法，根据上面结论，任意求一棵生成树都有可行方案。\n\n先从叶子向根依次考虑每个结点，如果这个结点权值非负，则选择它和它父亲的连边，再从根向叶子依次考虑每个结点，如果它和它父亲的连边还没选，则选择这条边。\n\n证明考虑数学归纳法即可。\n\n在实现中不必 ```DFS``` 两遍，```DFS``` 过程中把没选的边压栈即可。\n\n复杂度 $O(n)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define eb emplace_back\n\nusing namespace std;\n\nconst int N = 3e5 + 5;\n\nint n, m, x, vis[N], as[N], L, R;\nlong long a[N], su;\nvector <pair <int, int>> G[N];\n\nvoid dfs(int u) {\n    vis[u] = 1;\n    for(auto [v, i] : G[u]) if(!vis[v])\n        dfs(v), a[v] >= 0 ? a[u] += a[v], as[L++] = i : as[R--] = i;\n}\nint main() {\n    cin >> n >> m >> x;\n    rep(i, 1, n) scanf(\"%lld\", &a[i]), su += a[i] -= x;\n    int u, v;\n    rep(i, 1, m) scanf(\"%d%d\", &u, &v), G[u].eb(v, i), G[v].eb(u, i);\n    if(su + x < 0) puts(\"NO\"), exit(0);\n    puts(\"YES\"), L = 2, R = n, dfs(1);\n    rep(i, 2, n) printf(\"%d\\n\", as[i]);\n    return 0;\n}\n```","source":"_posts/CF1515F.md","raw":"---\ntitle: Phoenix and Earthquake | Codeforces 1515F\ndate: 2021-05-03 15:35:26\nupdated: 2021-05-03 15:35:26\ntags: [图论,构造]\ncategories: Codeforces\n---\n> [题目链接](https://codeforces.com/problemset/problem/1515/F)\n>\n> 给定一张 $n$ 个点 $m$ 条边的无向连通图和正整数 $x$，点有非负权值 $a_i$。\n>\n> 如果一条边 $(u,v)$ 满足 $a_u+a_v \\ge x$，可以将 $u,v$ 缩起来，新点的点权为 $a_u+a_v-x$。\n>\n> 判断这张图是否可以缩成一个点并给出方案。\n>\n> $n,m \\le 3 \\cdot 10^5,x,a_i \\le 10^9$\n\n首先将每个点的点权减去 $x$，则合并条件变为 $a_u + a_v \\ge -x$，每次合并后新点的点权为 $a_u + a_v$。\n\n> 结论：这张图可以缩成一个点的充要条件是点权和大于等于 $-x$。\n\n必要性显然，充分性可以考虑这个构造：每次选择点权最大的点 $u$ 的任意一条边。\n\n构造的正确性可以考虑反证法，设这条边为 $(u,v)$，假设这条边不行，即 $a_u+a_v<-x$。\n\n进一步 $\\because a_v \\ge -x,\\therefore a_u < 0$\n\n由于 $a_u$ 是最大值，因此所有点的点权都是负数，那么 $a_u+a_v \\ge \\sum a_i \\ge -x$，推出矛盾！\n\n至此，已经得到一个做法。\n\n但还有更简单的做法，根据上面结论，任意求一棵生成树都有可行方案。\n\n先从叶子向根依次考虑每个结点，如果这个结点权值非负，则选择它和它父亲的连边，再从根向叶子依次考虑每个结点，如果它和它父亲的连边还没选，则选择这条边。\n\n证明考虑数学归纳法即可。\n\n在实现中不必 ```DFS``` 两遍，```DFS``` 过程中把没选的边压栈即可。\n\n复杂度 $O(n)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define eb emplace_back\n\nusing namespace std;\n\nconst int N = 3e5 + 5;\n\nint n, m, x, vis[N], as[N], L, R;\nlong long a[N], su;\nvector <pair <int, int>> G[N];\n\nvoid dfs(int u) {\n    vis[u] = 1;\n    for(auto [v, i] : G[u]) if(!vis[v])\n        dfs(v), a[v] >= 0 ? a[u] += a[v], as[L++] = i : as[R--] = i;\n}\nint main() {\n    cin >> n >> m >> x;\n    rep(i, 1, n) scanf(\"%lld\", &a[i]), su += a[i] -= x;\n    int u, v;\n    rep(i, 1, m) scanf(\"%d%d\", &u, &v), G[u].eb(v, i), G[v].eb(u, i);\n    if(su + x < 0) puts(\"NO\"), exit(0);\n    puts(\"YES\"), L = 2, R = n, dfs(1);\n    rep(i, 2, n) printf(\"%d\\n\", as[i]);\n    return 0;\n}\n```","slug":"CF1515F","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxgzp000oootnh031bevk","content":"<blockquote>\r\n<p><a href=\"https://codeforces.com/problemset/problem/1515/F\">题目链接</a></p>\r\n<p>给定一张 <span class=\"math inline\">\\(n\\)</span> 个点 <span class=\"math inline\">\\(m\\)</span> 条边的无向连通图和正整数 <span class=\"math inline\">\\(x\\)</span>，点有非负权值 <span class=\"math inline\">\\(a_i\\)</span>。</p>\r\n<p>如果一条边 <span class=\"math inline\">\\((u,v)\\)</span> 满足 <span class=\"math inline\">\\(a_u+a_v \\ge x\\)</span>，可以将 <span class=\"math inline\">\\(u,v\\)</span> 缩起来，新点的点权为 <span class=\"math inline\">\\(a_u+a_v-x\\)</span>。</p>\r\n<p>判断这张图是否可以缩成一个点并给出方案。</p>\r\n<p><span class=\"math inline\">\\(n,m \\le 3 \\cdot 10^5,x,a_i \\le 10^9\\)</span></p>\r\n</blockquote>\r\n<p>首先将每个点的点权减去 <span class=\"math inline\">\\(x\\)</span>，则合并条件变为 <span class=\"math inline\">\\(a_u + a_v \\ge -x\\)</span>，每次合并后新点的点权为 <span class=\"math inline\">\\(a_u + a_v\\)</span>。</p>\r\n<blockquote>\r\n<p>结论：这张图可以缩成一个点的充要条件是点权和大于等于 <span class=\"math inline\">\\(-x\\)</span>。</p>\r\n</blockquote>\r\n<p>必要性显然，充分性可以考虑这个构造：每次选择点权最大的点 <span class=\"math inline\">\\(u\\)</span> 的任意一条边。</p>\r\n<p>构造的正确性可以考虑反证法，设这条边为 <span class=\"math inline\">\\((u,v)\\)</span>，假设这条边不行，即 <span class=\"math inline\">\\(a_u+a_v&lt;-x\\)</span>。</p>\r\n<p>进一步 <span class=\"math inline\">\\(\\because a_v \\ge -x,\\therefore a_u &lt; 0\\)</span></p>\r\n<p>由于 <span class=\"math inline\">\\(a_u\\)</span> 是最大值，因此所有点的点权都是负数，那么 <span class=\"math inline\">\\(a_u+a_v \\ge \\sum a_i \\ge -x\\)</span>，推出矛盾！</p>\r\n<p>至此，已经得到一个做法。</p>\r\n<p>但还有更简单的做法，根据上面结论，任意求一棵生成树都有可行方案。</p>\r\n<p>先从叶子向根依次考虑每个结点，如果这个结点权值非负，则选择它和它父亲的连边，再从根向叶子依次考虑每个结点，如果它和它父亲的连边还没选，则选择这条边。</p>\r\n<p>证明考虑数学归纳法即可。</p>\r\n<p>在实现中不必 <code>DFS</code> 两遍，<code>DFS</code> 过程中把没选的边压栈即可。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eb emplace_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">3e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, x, vis[N], as[N], L, R;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a[N], su;</span><br><span class=\"line\">vector &lt;pair &lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; G[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">    vis[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [v, i] : G[u]) <span class=\"keyword\">if</span>(!vis[v])</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v), a[v] &gt;= <span class=\"number\">0</span> ? a[u] += a[v], as[L++] = i : as[R--] = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>, &amp;a[i]), su += a[i] -= x;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;u, &amp;v), G[u].<span class=\"built_in\">eb</span>(v, i), G[v].<span class=\"built_in\">eb</span>(u, i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(su + x &lt; <span class=\"number\">0</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;NO&quot;</span>), <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;YES&quot;</span>), L = <span class=\"number\">2</span>, R = n, <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, n) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, as[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":1323,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"https://codeforces.com/problemset/problem/1515/F\">题目链接</a></p>\r\n<p>给定一张 <span class=\"math inline\">\\(n\\)</span> 个点 <span class=\"math inline\">\\(m\\)</span> 条边的无向连通图和正整数 <span class=\"math inline\">\\(x\\)</span>，点有非负权值 <span class=\"math inline\">\\(a_i\\)</span>。</p>\r\n<p>如果一条边 <span class=\"math inline\">\\((u,v)\\)</span> 满足 <span class=\"math inline\">\\(a_u+a_v \\ge x\\)</span>，可以将 <span class=\"math inline\">\\(u,v\\)</span> 缩起来，新点的点权为 <span class=\"math inline\">\\(a_u+a_v-x\\)</span>。</p>\r\n<p>判断这张图是否可以缩成一个点并给出方案。</p>\r\n<p><span class=\"math inline\">\\(n,m \\le 3 \\cdot 10^5,x,a_i \\le 10^9\\)</span></p>\r\n</blockquote>\r\n<p>首先将每个点的点权减去 <span class=\"math inline\">\\(x\\)</span>，则合并条件变为 <span class=\"math inline\">\\(a_u + a_v \\ge -x\\)</span>，每次合并后新点的点权为 <span class=\"math inline\">\\(a_u + a_v\\)</span>。</p>\r\n<blockquote>\r\n<p>结论：这张图可以缩成一个点的充要条件是点权和大于等于 <span class=\"math inline\">\\(-x\\)</span>。</p>\r\n</blockquote>\r\n<p>必要性显然，充分性可以考虑这个构造：每次选择点权最大的点 <span class=\"math inline\">\\(u\\)</span> 的任意一条边。</p>\r\n<p>构造的正确性可以考虑反证法，设这条边为 <span class=\"math inline\">\\((u,v)\\)</span>，假设这条边不行，即 <span class=\"math inline\">\\(a_u+a_v&lt;-x\\)</span>。</p>\r\n<p>进一步 <span class=\"math inline\">\\(\\because a_v \\ge -x,\\therefore a_u &lt; 0\\)</span></p>\r\n<p>由于 <span class=\"math inline\">\\(a_u\\)</span> 是最大值，因此所有点的点权都是负数，那么 <span class=\"math inline\">\\(a_u+a_v \\ge \\sum a_i \\ge -x\\)</span>，推出矛盾！</p>\r\n<p>至此，已经得到一个做法。</p>\r\n<p>但还有更简单的做法，根据上面结论，任意求一棵生成树都有可行方案。</p>\r\n<p>先从叶子向根依次考虑每个结点，如果这个结点权值非负，则选择它和它父亲的连边，再从根向叶子依次考虑每个结点，如果它和它父亲的连边还没选，则选择这条边。</p>\r\n<p>证明考虑数学归纳法即可。</p>\r\n<p>在实现中不必 <code>DFS</code> 两遍，<code>DFS</code> 过程中把没选的边压栈即可。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eb emplace_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">3e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, x, vis[N], as[N], L, R;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a[N], su;</span><br><span class=\"line\">vector &lt;pair &lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; G[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">    vis[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [v, i] : G[u]) <span class=\"keyword\">if</span>(!vis[v])</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v), a[v] &gt;= <span class=\"number\">0</span> ? a[u] += a[v], as[L++] = i : as[R--] = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>, &amp;a[i]), su += a[i] -= x;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;u, &amp;v), G[u].<span class=\"built_in\">eb</span>(v, i), G[v].<span class=\"built_in\">eb</span>(u, i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(su + x &lt; <span class=\"number\">0</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;NO&quot;</span>), <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;YES&quot;</span>), L = <span class=\"number\">2</span>, R = n, <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, n) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, as[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"Phoenix and Odometers | Codeforces 1515G","date":"2021-05-03T13:26:42.000Z","updated":"2021-05-03T13:26:42.000Z","_content":"> [题目链接](https://codeforces.com/problemset/problem/1515/G)\n>\n> 给定一张 $n$ 个点 $m$ 条边的带权有向图。\n>\n> 有 $q$ 次询问，每次给定 $v,s,t$，问是否存在一条起点终点都为 $v$ 的路径满足 $t | (s+l)$，其中 $l$ 是路径的总长。\n>\n> $n, m,q \\le 2 \\cdot 10^5,s<t\\le 10^9$，边权均不超过 $10^9$。\n\n首先这条路径只能在 $v$ 所在强连通分量的内部。\n\n以下所有的路径长度都是在模 $t$ 意义下的。\n\n> 引理：在同一个强连通分量，如果 $u\\rightarrow v$ 存在一条长度为 $l$ 的路径，那么 $v\\rightarrow u$ 存在一条长度为 $-l$ 的路径。\n\n构造：假设 $v\\rightarrow u$ 存在一条长度为 $w$ 的路径，先走 $v\\rightarrow u$，长度为 $w$，再走 $t-1$ 次 $u\\rightarrow v\\rightarrow u$，长度为 $(t-1)(l+w)$，总长度 $-w$。\n\n在强连通分量的内部，对于一个长度为 $w$ 的环，从环上一个点 $u$ 出发绕若干圈再回到 $u$，所有可能的路径长度为 $\\gcd(w,t)$ 的倍数。根据引理，$v\\rightarrow u$ 有一条长度为 $w$ 的路径，$u\\rightarrow v$ 有一条长度为 $-w$ 的路径，先走 $v\\rightarrow u$，再绕若干圈，最后走 $u\\rightarrow v$，就可以凑出所有长度为 $\\gcd(w,t)$ 倍数的环。\n\n以 $r$ 为根建出 `DFS` 树，设 $\\phi(u)$ 表示从 $r$ 沿着树边走到 $u$ 的路径长度，对于每条非树边 $(u,v,w)$，意味着存在一个长度为 $\\phi(u)+w-\\phi(v)$ 的环。设 $x=\\gcd_{(u,v,w)}\\phi(u)+w-\\phi(v)$，那么所有的可能环长分别为 $0,x,2x,3x,\\cdots$。这些环长显然能取到，也可以归纳证明对于任何 $r\\rightarrow u$ 的路径，都有长度 $\\equiv \\phi(u)\\pmod x$。结论：存在合法路径当且仅当 $x|s$。\n\n复杂度 $O(n+m)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n#define upd(a, b) (a = min(a, b))\n\nusing namespace std;\n\ntypedef long long ll;\nconst int N = 2e5 + 5;\n\nint n, m, q;\nvector<pair<int, int>> G[N];\nint idx, dfn[N], scc[N], stk[N], tp, sid;\nll g[N], d[N], gg[N];\n\nint dfs(int u) {\n    int low = dfn[u] = ++idx; stk[++tp] = u;\n    for(auto [v, w] : G[u]) if(!dfn[v]) d[v] = d[u] + w, upd(low, dfs(v));\n    else if(!scc[v]) upd(low, dfn[v]), g[u] = gcd(g[u], d[u] - d[v] + w);\n    if(low == dfn[u]) for(int v = (sid++, 0); v ^ u;)\n        v = stk[tp--], scc[v] = sid, gg[sid] = gcd(gg[sid], g[v]);\n    return low;\n}\nint main() {\n    cin >> n >> m;\n    int u, v, w;\n    rep(i, 1, m) scanf(\"%d%d%d\", &u, &v, &w), G[u].emplace_back(v, w);\n    rep(i, 1, n) if(!dfn[i]) dfs(i);\n    for(cin >> q; q--; puts(v % gcd(gg[scc[u]], (ll)w) ? \"NO\" : \"YES\"))\n        scanf(\"%d%d%d\", &u, &v, &w);\n}\n```","source":"_posts/CF1515G.md","raw":"---\ntitle: Phoenix and Odometers | Codeforces 1515G\ndate: 2021-05-03 21:26:42\nupdated: 2021-05-03 21:26:42\ntags: [图论,数论,强连通分量]\ncategories: Codeforces\n---\n> [题目链接](https://codeforces.com/problemset/problem/1515/G)\n>\n> 给定一张 $n$ 个点 $m$ 条边的带权有向图。\n>\n> 有 $q$ 次询问，每次给定 $v,s,t$，问是否存在一条起点终点都为 $v$ 的路径满足 $t | (s+l)$，其中 $l$ 是路径的总长。\n>\n> $n, m,q \\le 2 \\cdot 10^5,s<t\\le 10^9$，边权均不超过 $10^9$。\n\n首先这条路径只能在 $v$ 所在强连通分量的内部。\n\n以下所有的路径长度都是在模 $t$ 意义下的。\n\n> 引理：在同一个强连通分量，如果 $u\\rightarrow v$ 存在一条长度为 $l$ 的路径，那么 $v\\rightarrow u$ 存在一条长度为 $-l$ 的路径。\n\n构造：假设 $v\\rightarrow u$ 存在一条长度为 $w$ 的路径，先走 $v\\rightarrow u$，长度为 $w$，再走 $t-1$ 次 $u\\rightarrow v\\rightarrow u$，长度为 $(t-1)(l+w)$，总长度 $-w$。\n\n在强连通分量的内部，对于一个长度为 $w$ 的环，从环上一个点 $u$ 出发绕若干圈再回到 $u$，所有可能的路径长度为 $\\gcd(w,t)$ 的倍数。根据引理，$v\\rightarrow u$ 有一条长度为 $w$ 的路径，$u\\rightarrow v$ 有一条长度为 $-w$ 的路径，先走 $v\\rightarrow u$，再绕若干圈，最后走 $u\\rightarrow v$，就可以凑出所有长度为 $\\gcd(w,t)$ 倍数的环。\n\n以 $r$ 为根建出 `DFS` 树，设 $\\phi(u)$ 表示从 $r$ 沿着树边走到 $u$ 的路径长度，对于每条非树边 $(u,v,w)$，意味着存在一个长度为 $\\phi(u)+w-\\phi(v)$ 的环。设 $x=\\gcd_{(u,v,w)}\\phi(u)+w-\\phi(v)$，那么所有的可能环长分别为 $0,x,2x,3x,\\cdots$。这些环长显然能取到，也可以归纳证明对于任何 $r\\rightarrow u$ 的路径，都有长度 $\\equiv \\phi(u)\\pmod x$。结论：存在合法路径当且仅当 $x|s$。\n\n复杂度 $O(n+m)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n#define upd(a, b) (a = min(a, b))\n\nusing namespace std;\n\ntypedef long long ll;\nconst int N = 2e5 + 5;\n\nint n, m, q;\nvector<pair<int, int>> G[N];\nint idx, dfn[N], scc[N], stk[N], tp, sid;\nll g[N], d[N], gg[N];\n\nint dfs(int u) {\n    int low = dfn[u] = ++idx; stk[++tp] = u;\n    for(auto [v, w] : G[u]) if(!dfn[v]) d[v] = d[u] + w, upd(low, dfs(v));\n    else if(!scc[v]) upd(low, dfn[v]), g[u] = gcd(g[u], d[u] - d[v] + w);\n    if(low == dfn[u]) for(int v = (sid++, 0); v ^ u;)\n        v = stk[tp--], scc[v] = sid, gg[sid] = gcd(gg[sid], g[v]);\n    return low;\n}\nint main() {\n    cin >> n >> m;\n    int u, v, w;\n    rep(i, 1, m) scanf(\"%d%d%d\", &u, &v, &w), G[u].emplace_back(v, w);\n    rep(i, 1, n) if(!dfn[i]) dfs(i);\n    for(cin >> q; q--; puts(v % gcd(gg[scc[u]], (ll)w) ? \"NO\" : \"YES\"))\n        scanf(\"%d%d%d\", &u, &v, &w);\n}\n```","slug":"CF1515G","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxgzr000sootn1ui68khy","content":"<blockquote>\r\n<p><a href=\"https://codeforces.com/problemset/problem/1515/G\">题目链接</a></p>\r\n<p>给定一张 <span class=\"math inline\">\\(n\\)</span> 个点 <span class=\"math inline\">\\(m\\)</span> 条边的带权有向图。</p>\r\n<p>有 <span class=\"math inline\">\\(q\\)</span> 次询问，每次给定 <span class=\"math inline\">\\(v,s,t\\)</span>，问是否存在一条起点终点都为 <span class=\"math inline\">\\(v\\)</span> 的路径满足 <span class=\"math inline\">\\(t | (s+l)\\)</span>，其中 <span class=\"math inline\">\\(l\\)</span> 是路径的总长。</p>\r\n<p><span class=\"math inline\">\\(n, m,q \\le 2 \\cdot 10^5,s&lt;t\\le 10^9\\)</span>，边权均不超过 <span class=\"math inline\">\\(10^9\\)</span>。</p>\r\n</blockquote>\r\n<p>首先这条路径只能在 <span class=\"math inline\">\\(v\\)</span> 所在强连通分量的内部。</p>\r\n<p>以下所有的路径长度都是在模 <span class=\"math inline\">\\(t\\)</span> 意义下的。</p>\r\n<blockquote>\r\n<p>引理：在同一个强连通分量，如果 <span class=\"math inline\">\\(u\\rightarrow v\\)</span> 存在一条长度为 <span class=\"math inline\">\\(l\\)</span> 的路径，那么 <span class=\"math inline\">\\(v\\rightarrow u\\)</span> 存在一条长度为 <span class=\"math inline\">\\(-l\\)</span> 的路径。</p>\r\n</blockquote>\r\n<p>构造：假设 <span class=\"math inline\">\\(v\\rightarrow u\\)</span> 存在一条长度为 <span class=\"math inline\">\\(w\\)</span> 的路径，先走 <span class=\"math inline\">\\(v\\rightarrow u\\)</span>，长度为 <span class=\"math inline\">\\(w\\)</span>，再走 <span class=\"math inline\">\\(t-1\\)</span> 次 <span class=\"math inline\">\\(u\\rightarrow v\\rightarrow u\\)</span>，长度为 <span class=\"math inline\">\\((t-1)(l+w)\\)</span>，总长度 <span class=\"math inline\">\\(-w\\)</span>。</p>\r\n<p>在强连通分量的内部，对于一个长度为 <span class=\"math inline\">\\(w\\)</span> 的环，从环上一个点 <span class=\"math inline\">\\(u\\)</span> 出发绕若干圈再回到 <span class=\"math inline\">\\(u\\)</span>，所有可能的路径长度为 <span class=\"math inline\">\\(\\gcd(w,t)\\)</span> 的倍数。根据引理，<span class=\"math inline\">\\(v\\rightarrow u\\)</span> 有一条长度为 <span class=\"math inline\">\\(w\\)</span> 的路径，<span class=\"math inline\">\\(u\\rightarrow v\\)</span> 有一条长度为 <span class=\"math inline\">\\(-w\\)</span> 的路径，先走 <span class=\"math inline\">\\(v\\rightarrow u\\)</span>，再绕若干圈，最后走 <span class=\"math inline\">\\(u\\rightarrow v\\)</span>，就可以凑出所有长度为 <span class=\"math inline\">\\(\\gcd(w,t)\\)</span> 倍数的环。</p>\r\n<p>以 <span class=\"math inline\">\\(r\\)</span> 为根建出 <code>DFS</code> 树，设 <span class=\"math inline\">\\(\\phi(u)\\)</span> 表示从 <span class=\"math inline\">\\(r\\)</span> 沿着树边走到 <span class=\"math inline\">\\(u\\)</span> 的路径长度，对于每条非树边 <span class=\"math inline\">\\((u,v,w)\\)</span>，意味着存在一个长度为 <span class=\"math inline\">\\(\\phi(u)+w-\\phi(v)\\)</span> 的环。设 <span class=\"math inline\">\\(x=\\gcd_{(u,v,w)}\\phi(u)+w-\\phi(v)\\)</span>，那么所有的可能环长分别为 <span class=\"math inline\">\\(0,x,2x,3x,\\cdots\\)</span>。这些环长显然能取到，也可以归纳证明对于任何 <span class=\"math inline\">\\(r\\rightarrow u\\)</span> 的路径，都有长度 <span class=\"math inline\">\\(\\equiv \\phi(u)\\pmod x\\)</span>。结论：存在合法路径当且仅当 <span class=\"math inline\">\\(x|s\\)</span>。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n+m)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> upd(a, b) (a = min(a, b))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, q;</span><br><span class=\"line\">vector&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; G[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> idx, dfn[N], scc[N], stk[N], tp, sid;</span><br><span class=\"line\">ll g[N], d[N], gg[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> low = dfn[u] = ++idx; stk[++tp] = u;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [v, w] : G[u]) <span class=\"keyword\">if</span>(!dfn[v]) d[v] = d[u] + w, <span class=\"built_in\">upd</span>(low, <span class=\"built_in\">dfs</span>(v));</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!scc[v]) <span class=\"built_in\">upd</span>(low, dfn[v]), g[u] = <span class=\"built_in\">gcd</span>(g[u], d[u] - d[v] + w);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(low == dfn[u]) <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v = (sid++, <span class=\"number\">0</span>); v ^ u;)</span><br><span class=\"line\">        v = stk[tp--], scc[v] = sid, gg[sid] = <span class=\"built_in\">gcd</span>(gg[sid], g[v]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> low;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v, w;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w), G[u].<span class=\"built_in\">emplace_back</span>(v, w);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"keyword\">if</span>(!dfn[i]) <span class=\"built_in\">dfs</span>(i);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(cin &gt;&gt; q; q--; <span class=\"built_in\">puts</span>(v % <span class=\"built_in\">gcd</span>(gg[scc[u]], (ll)w) ? <span class=\"string\">&quot;NO&quot;</span> : <span class=\"string\">&quot;YES&quot;</span>))</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":1948,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"https://codeforces.com/problemset/problem/1515/G\">题目链接</a></p>\r\n<p>给定一张 <span class=\"math inline\">\\(n\\)</span> 个点 <span class=\"math inline\">\\(m\\)</span> 条边的带权有向图。</p>\r\n<p>有 <span class=\"math inline\">\\(q\\)</span> 次询问，每次给定 <span class=\"math inline\">\\(v,s,t\\)</span>，问是否存在一条起点终点都为 <span class=\"math inline\">\\(v\\)</span> 的路径满足 <span class=\"math inline\">\\(t | (s+l)\\)</span>，其中 <span class=\"math inline\">\\(l\\)</span> 是路径的总长。</p>\r\n<p><span class=\"math inline\">\\(n, m,q \\le 2 \\cdot 10^5,s&lt;t\\le 10^9\\)</span>，边权均不超过 <span class=\"math inline\">\\(10^9\\)</span>。</p>\r\n</blockquote>\r\n<p>首先这条路径只能在 <span class=\"math inline\">\\(v\\)</span> 所在强连通分量的内部。</p>\r\n<p>以下所有的路径长度都是在模 <span class=\"math inline\">\\(t\\)</span> 意义下的。</p>\r\n<blockquote>\r\n<p>引理：在同一个强连通分量，如果 <span class=\"math inline\">\\(u\\rightarrow v\\)</span> 存在一条长度为 <span class=\"math inline\">\\(l\\)</span> 的路径，那么 <span class=\"math inline\">\\(v\\rightarrow u\\)</span> 存在一条长度为 <span class=\"math inline\">\\(-l\\)</span> 的路径。</p>\r\n</blockquote>\r\n<p>构造：假设 <span class=\"math inline\">\\(v\\rightarrow u\\)</span> 存在一条长度为 <span class=\"math inline\">\\(w\\)</span> 的路径，先走 <span class=\"math inline\">\\(v\\rightarrow u\\)</span>，长度为 <span class=\"math inline\">\\(w\\)</span>，再走 <span class=\"math inline\">\\(t-1\\)</span> 次 <span class=\"math inline\">\\(u\\rightarrow v\\rightarrow u\\)</span>，长度为 <span class=\"math inline\">\\((t-1)(l+w)\\)</span>，总长度 <span class=\"math inline\">\\(-w\\)</span>。</p>\r\n<p>在强连通分量的内部，对于一个长度为 <span class=\"math inline\">\\(w\\)</span> 的环，从环上一个点 <span class=\"math inline\">\\(u\\)</span> 出发绕若干圈再回到 <span class=\"math inline\">\\(u\\)</span>，所有可能的路径长度为 <span class=\"math inline\">\\(\\gcd(w,t)\\)</span> 的倍数。根据引理，<span class=\"math inline\">\\(v\\rightarrow u\\)</span> 有一条长度为 <span class=\"math inline\">\\(w\\)</span> 的路径，<span class=\"math inline\">\\(u\\rightarrow v\\)</span> 有一条长度为 <span class=\"math inline\">\\(-w\\)</span> 的路径，先走 <span class=\"math inline\">\\(v\\rightarrow u\\)</span>，再绕若干圈，最后走 <span class=\"math inline\">\\(u\\rightarrow v\\)</span>，就可以凑出所有长度为 <span class=\"math inline\">\\(\\gcd(w,t)\\)</span> 倍数的环。</p>\r\n<p>以 <span class=\"math inline\">\\(r\\)</span> 为根建出 <code>DFS</code> 树，设 <span class=\"math inline\">\\(\\phi(u)\\)</span> 表示从 <span class=\"math inline\">\\(r\\)</span> 沿着树边走到 <span class=\"math inline\">\\(u\\)</span> 的路径长度，对于每条非树边 <span class=\"math inline\">\\((u,v,w)\\)</span>，意味着存在一个长度为 <span class=\"math inline\">\\(\\phi(u)+w-\\phi(v)\\)</span> 的环。设 <span class=\"math inline\">\\(x=\\gcd_{(u,v,w)}\\phi(u)+w-\\phi(v)\\)</span>，那么所有的可能环长分别为 <span class=\"math inline\">\\(0,x,2x,3x,\\cdots\\)</span>。这些环长显然能取到，也可以归纳证明对于任何 <span class=\"math inline\">\\(r\\rightarrow u\\)</span> 的路径，都有长度 <span class=\"math inline\">\\(\\equiv \\phi(u)\\pmod x\\)</span>。结论：存在合法路径当且仅当 <span class=\"math inline\">\\(x|s\\)</span>。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n+m)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> upd(a, b) (a = min(a, b))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, q;</span><br><span class=\"line\">vector&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; G[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> idx, dfn[N], scc[N], stk[N], tp, sid;</span><br><span class=\"line\">ll g[N], d[N], gg[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> low = dfn[u] = ++idx; stk[++tp] = u;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [v, w] : G[u]) <span class=\"keyword\">if</span>(!dfn[v]) d[v] = d[u] + w, <span class=\"built_in\">upd</span>(low, <span class=\"built_in\">dfs</span>(v));</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!scc[v]) <span class=\"built_in\">upd</span>(low, dfn[v]), g[u] = <span class=\"built_in\">gcd</span>(g[u], d[u] - d[v] + w);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(low == dfn[u]) <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v = (sid++, <span class=\"number\">0</span>); v ^ u;)</span><br><span class=\"line\">        v = stk[tp--], scc[v] = sid, gg[sid] = <span class=\"built_in\">gcd</span>(gg[sid], g[v]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> low;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v, w;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w), G[u].<span class=\"built_in\">emplace_back</span>(v, w);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"keyword\">if</span>(!dfn[i]) <span class=\"built_in\">dfs</span>(i);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(cin &gt;&gt; q; q--; <span class=\"built_in\">puts</span>(v % <span class=\"built_in\">gcd</span>(gg[scc[u]], (ll)w) ? <span class=\"string\">&quot;NO&quot;</span> : <span class=\"string\">&quot;YES&quot;</span>))</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"Off by One | Codeforces 1519E","date":"2021-04-30T15:23:24.000Z","updated":"2021-04-30T15:23:24.000Z","_content":"> [题目链接](https://codeforces.com/problemset/problem/1519/E)\n>\n> 给定平面上的 $n$ 个点 $(\\frac {a_i}{b_i},\\frac {c_i}{d_i})$，定义一个点 $(x,y)$ 的**派生点**为点 $(x+1,y)$ 和点 $(x,y+1)$。\n>\n> 两个点 $A,B$ 能够匹配当且仅当 $A$ 的一个派生点和 $B$ 的一个派生点在同一条过原点的直线上。\n>\n> 求出最大匹配的大小和任意一种方案。\n>\n> $n \\le 2 \\cdot 10^5,1 \\le a_i,b_i,c_i,d_i \\le 10^9$\n\n两个第一象限的点在同一条过原点的直线上等价于两个点的横纵坐标之比相等。\n\n定义一个点 $(x,y)$ 的**派生值**为 $\\frac {x+1}y$ 和 $\\frac x{y+1}$。\n\n两个点 $A,B$ 能够匹配即拥有同一个派生值。\n\n把所有的派生值抽象成点，给定的点抽象成边，匹配条件进一步转化为**两条边拥有公共顶点**。\n\n> 引理：一个**连通**无向图能够给每条边定向使得每个点入度为偶数当且仅当边数为偶数。\n>\n> 证明：边数为奇数显然不行，下面给出边数为偶数时的构造：\n>\n> 先建树 ```DFS``` 树，所有反向边都向上，如果两个端点都在点 $u$ 子树内的边的数量为偶数，则 $u$ 与其父亲的连边（如果存在）向上，否则向下。\n\n通过引理不难推出一个边数为 $m$ 的连通图的答案为 $\\lfloor \\frac m2 \\rfloor$，求方案可以先给每条边定向，再把每个点的所有入边两两配对。\n\n只需要对每个连通块做一遍即可。\n\n最后一个问题：派生值是分子分母都是 $10^{18}$ 级别的分数，离散化时需要排序，但如何比较。\n\n一种方法是转 ```__int128``` 交叉相乘比较大小。其实不一定要按分数值排序，双关键字排序同样能实现离散化，先约分，再以分子、分母为两关键字比较则是另一种更快的方法。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n#define eb emplace_back\n\nusing namespace std;\nconst int N = 4e5 + 5;\ntypedef long long ll;\nll K1[N], K2[N];\nint n, ord[N], id[N];\nvector <pair <int, int>> G[N];\nvector <pair <int, int>> as;\nint idx, dfn[N], sz[N];\nvoid add(int u, int v, int i) {\n    G[u].eb(v, i), G[v].eb(u, i);\n}\nvoid dfs(int u, int f) {\n    dfn[u] = ++idx;\n    int lst = 0;\n    auto ins = [&](int x) {\n        if(lst) as.eb(lst, x), lst = 0;\n        else lst = x;\n    };\n    for(auto [v, w] : G[u]) if(!dfn[v]) {\n        dfs(v, w), sz[u] += sz[v];\n        if(~sz[v] & 1) ins(w);\n    } else if(dfn[v] > dfn[u]) ins(w);\n    else sz[v]++;\n    if(lst && f) as.eb(lst, f);\n}\nint main() {\n    cin >> n;\n    int a, b, c, d;\n    rep(i, 1, n) {\n        scanf(\"%d%d%d%d\", &a, &b, &c, &d);\n        K1[i * 2 - 1] = ll(a + b) * d, K1[i * 2] = (ll)a * d;\n        K2[i * 2 - 1] = (ll)b * c, K2[i * 2] = b * ll(c + d);\n    }\n    n *= 2;\n    rep(i, 1, n) {\n        ord[i] = i;\n        ll g = __gcd(K1[i], K2[i]);\n        K1[i] /= g, K2[i] /= g;\n    }\n    auto cmp = [](int x, int y) {\n        return K1[x] ^ K1[y] ? K1[x] < K1[y] : K2[x] < K2[y];\n    };\n    sort(ord + 1, ord + n + 1, cmp);\n    rep(i, 1, n) id[i] = lower_bound(ord + 1, ord + n + 1, i, cmp) - ord;\n    rep(i, 1, n / 2) add(id[i * 2 - 1], id[i * 2], i);\n    rep(i, 1, n) dfs(i, 0);\n    cout << as.size() << endl;\n    for(auto [u, v] : as) printf(\"%d %d\\n\", u, v);\n    return 0;\n}\n```","source":"_posts/CF1519E.md","raw":"---\ntitle: Off by One | Codeforces 1519E\ndate: 2021-04-30 23:23:24\nupdated: 2021-04-30 23:23:24\ntags: [图论,构造]\ncategories: Codeforces\n---\n> [题目链接](https://codeforces.com/problemset/problem/1519/E)\n>\n> 给定平面上的 $n$ 个点 $(\\frac {a_i}{b_i},\\frac {c_i}{d_i})$，定义一个点 $(x,y)$ 的**派生点**为点 $(x+1,y)$ 和点 $(x,y+1)$。\n>\n> 两个点 $A,B$ 能够匹配当且仅当 $A$ 的一个派生点和 $B$ 的一个派生点在同一条过原点的直线上。\n>\n> 求出最大匹配的大小和任意一种方案。\n>\n> $n \\le 2 \\cdot 10^5,1 \\le a_i,b_i,c_i,d_i \\le 10^9$\n\n两个第一象限的点在同一条过原点的直线上等价于两个点的横纵坐标之比相等。\n\n定义一个点 $(x,y)$ 的**派生值**为 $\\frac {x+1}y$ 和 $\\frac x{y+1}$。\n\n两个点 $A,B$ 能够匹配即拥有同一个派生值。\n\n把所有的派生值抽象成点，给定的点抽象成边，匹配条件进一步转化为**两条边拥有公共顶点**。\n\n> 引理：一个**连通**无向图能够给每条边定向使得每个点入度为偶数当且仅当边数为偶数。\n>\n> 证明：边数为奇数显然不行，下面给出边数为偶数时的构造：\n>\n> 先建树 ```DFS``` 树，所有反向边都向上，如果两个端点都在点 $u$ 子树内的边的数量为偶数，则 $u$ 与其父亲的连边（如果存在）向上，否则向下。\n\n通过引理不难推出一个边数为 $m$ 的连通图的答案为 $\\lfloor \\frac m2 \\rfloor$，求方案可以先给每条边定向，再把每个点的所有入边两两配对。\n\n只需要对每个连通块做一遍即可。\n\n最后一个问题：派生值是分子分母都是 $10^{18}$ 级别的分数，离散化时需要排序，但如何比较。\n\n一种方法是转 ```__int128``` 交叉相乘比较大小。其实不一定要按分数值排序，双关键字排序同样能实现离散化，先约分，再以分子、分母为两关键字比较则是另一种更快的方法。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n#define eb emplace_back\n\nusing namespace std;\nconst int N = 4e5 + 5;\ntypedef long long ll;\nll K1[N], K2[N];\nint n, ord[N], id[N];\nvector <pair <int, int>> G[N];\nvector <pair <int, int>> as;\nint idx, dfn[N], sz[N];\nvoid add(int u, int v, int i) {\n    G[u].eb(v, i), G[v].eb(u, i);\n}\nvoid dfs(int u, int f) {\n    dfn[u] = ++idx;\n    int lst = 0;\n    auto ins = [&](int x) {\n        if(lst) as.eb(lst, x), lst = 0;\n        else lst = x;\n    };\n    for(auto [v, w] : G[u]) if(!dfn[v]) {\n        dfs(v, w), sz[u] += sz[v];\n        if(~sz[v] & 1) ins(w);\n    } else if(dfn[v] > dfn[u]) ins(w);\n    else sz[v]++;\n    if(lst && f) as.eb(lst, f);\n}\nint main() {\n    cin >> n;\n    int a, b, c, d;\n    rep(i, 1, n) {\n        scanf(\"%d%d%d%d\", &a, &b, &c, &d);\n        K1[i * 2 - 1] = ll(a + b) * d, K1[i * 2] = (ll)a * d;\n        K2[i * 2 - 1] = (ll)b * c, K2[i * 2] = b * ll(c + d);\n    }\n    n *= 2;\n    rep(i, 1, n) {\n        ord[i] = i;\n        ll g = __gcd(K1[i], K2[i]);\n        K1[i] /= g, K2[i] /= g;\n    }\n    auto cmp = [](int x, int y) {\n        return K1[x] ^ K1[y] ? K1[x] < K1[y] : K2[x] < K2[y];\n    };\n    sort(ord + 1, ord + n + 1, cmp);\n    rep(i, 1, n) id[i] = lower_bound(ord + 1, ord + n + 1, i, cmp) - ord;\n    rep(i, 1, n / 2) add(id[i * 2 - 1], id[i * 2], i);\n    rep(i, 1, n) dfs(i, 0);\n    cout << as.size() << endl;\n    for(auto [u, v] : as) printf(\"%d %d\\n\", u, v);\n    return 0;\n}\n```","slug":"CF1519E","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxgzs000vootn7ij97f6n","content":"<blockquote>\r\n<p><a href=\"https://codeforces.com/problemset/problem/1519/E\">题目链接</a></p>\r\n<p>给定平面上的 <span class=\"math inline\">\\(n\\)</span> 个点 <span class=\"math inline\">\\((\\frac {a_i}{b_i},\\frac {c_i}{d_i})\\)</span>，定义一个点 <span class=\"math inline\">\\((x,y)\\)</span> 的<strong>派生点</strong>为点 <span class=\"math inline\">\\((x+1,y)\\)</span> 和点 <span class=\"math inline\">\\((x,y+1)\\)</span>。</p>\r\n<p>两个点 <span class=\"math inline\">\\(A,B\\)</span> 能够匹配当且仅当 <span class=\"math inline\">\\(A\\)</span> 的一个派生点和 <span class=\"math inline\">\\(B\\)</span> 的一个派生点在同一条过原点的直线上。</p>\r\n<p>求出最大匹配的大小和任意一种方案。</p>\r\n<p><span class=\"math inline\">\\(n \\le 2 \\cdot 10^5,1 \\le a_i,b_i,c_i,d_i \\le 10^9\\)</span></p>\r\n</blockquote>\r\n<p>两个第一象限的点在同一条过原点的直线上等价于两个点的横纵坐标之比相等。</p>\r\n<p>定义一个点 <span class=\"math inline\">\\((x,y)\\)</span> 的<strong>派生值</strong>为 <span class=\"math inline\">\\(\\frac {x+1}y\\)</span> 和 <span class=\"math inline\">\\(\\frac x{y+1}\\)</span>。</p>\r\n<p>两个点 <span class=\"math inline\">\\(A,B\\)</span> 能够匹配即拥有同一个派生值。</p>\r\n<p>把所有的派生值抽象成点，给定的点抽象成边，匹配条件进一步转化为<strong>两条边拥有公共顶点</strong>。</p>\r\n<blockquote>\r\n<p>引理：一个<strong>连通</strong>无向图能够给每条边定向使得每个点入度为偶数当且仅当边数为偶数。</p>\r\n<p>证明：边数为奇数显然不行，下面给出边数为偶数时的构造：</p>\r\n<p>先建树 <code>DFS</code> 树，所有反向边都向上，如果两个端点都在点 <span class=\"math inline\">\\(u\\)</span> 子树内的边的数量为偶数，则 <span class=\"math inline\">\\(u\\)</span> 与其父亲的连边（如果存在）向上，否则向下。</p>\r\n</blockquote>\r\n<p>通过引理不难推出一个边数为 <span class=\"math inline\">\\(m\\)</span> 的连通图的答案为 <span class=\"math inline\">\\(\\lfloor \\frac m2 \\rfloor\\)</span>，求方案可以先给每条边定向，再把每个点的所有入边两两配对。</p>\r\n<p>只需要对每个连通块做一遍即可。</p>\r\n<p>最后一个问题：派生值是分子分母都是 <span class=\"math inline\">\\(10^{18}\\)</span> 级别的分数，离散化时需要排序，但如何比较。</p>\r\n<p>一种方法是转 <code>__int128</code> 交叉相乘比较大小。其实不一定要按分数值排序，双关键字排序同样能实现离散化，先约分，再以分子、分母为两关键字比较则是另一种更快的方法。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eb emplace_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">4e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\">ll K1[N], K2[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, ord[N], id[N];</span><br><span class=\"line\">vector &lt;pair &lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; G[N];</span><br><span class=\"line\">vector &lt;pair &lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; as;</span><br><span class=\"line\"><span class=\"keyword\">int</span> idx, dfn[N], sz[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    G[u].<span class=\"built_in\">eb</span>(v, i), G[v].<span class=\"built_in\">eb</span>(u, i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> f)</span> </span>&#123;</span><br><span class=\"line\">    dfn[u] = ++idx;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lst = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> ins = [&amp;](<span class=\"keyword\">int</span> x) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(lst) as.<span class=\"built_in\">eb</span>(lst, x), lst = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> lst = x;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [v, w] : G[u]) <span class=\"keyword\">if</span>(!dfn[v]) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v, w), sz[u] += sz[v];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(~sz[v] &amp; <span class=\"number\">1</span>) <span class=\"built_in\">ins</span>(w);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dfn[v] &gt; dfn[u]) <span class=\"built_in\">ins</span>(w);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> sz[v]++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lst &amp;&amp; f) as.<span class=\"built_in\">eb</span>(lst, f);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b, c, d;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class=\"line\">        K1[i * <span class=\"number\">2</span> - <span class=\"number\">1</span>] = <span class=\"built_in\">ll</span>(a + b) * d, K1[i * <span class=\"number\">2</span>] = (ll)a * d;</span><br><span class=\"line\">        K2[i * <span class=\"number\">2</span> - <span class=\"number\">1</span>] = (ll)b * c, K2[i * <span class=\"number\">2</span>] = b * <span class=\"built_in\">ll</span>(c + d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    n *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        ord[i] = i;</span><br><span class=\"line\">        ll g = __gcd(K1[i], K2[i]);</span><br><span class=\"line\">        K1[i] /= g, K2[i] /= g;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> cmp = [](<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> K1[x] ^ K1[y] ? K1[x] &lt; K1[y] : K2[x] &lt; K2[y];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(ord + <span class=\"number\">1</span>, ord + n + <span class=\"number\">1</span>, cmp);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) id[i] = <span class=\"built_in\">lower_bound</span>(ord + <span class=\"number\">1</span>, ord + n + <span class=\"number\">1</span>, i, cmp) - ord;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n / <span class=\"number\">2</span>) <span class=\"built_in\">add</span>(id[i * <span class=\"number\">2</span> - <span class=\"number\">1</span>], id[i * <span class=\"number\">2</span>], i);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">dfs</span>(i, <span class=\"number\">0</span>);</span><br><span class=\"line\">    cout &lt;&lt; as.<span class=\"built_in\">size</span>() &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [u, v] : as) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d\\n&quot;</span>, u, v);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":2177,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"https://codeforces.com/problemset/problem/1519/E\">题目链接</a></p>\r\n<p>给定平面上的 <span class=\"math inline\">\\(n\\)</span> 个点 <span class=\"math inline\">\\((\\frac {a_i}{b_i},\\frac {c_i}{d_i})\\)</span>，定义一个点 <span class=\"math inline\">\\((x,y)\\)</span> 的<strong>派生点</strong>为点 <span class=\"math inline\">\\((x+1,y)\\)</span> 和点 <span class=\"math inline\">\\((x,y+1)\\)</span>。</p>\r\n<p>两个点 <span class=\"math inline\">\\(A,B\\)</span> 能够匹配当且仅当 <span class=\"math inline\">\\(A\\)</span> 的一个派生点和 <span class=\"math inline\">\\(B\\)</span> 的一个派生点在同一条过原点的直线上。</p>\r\n<p>求出最大匹配的大小和任意一种方案。</p>\r\n<p><span class=\"math inline\">\\(n \\le 2 \\cdot 10^5,1 \\le a_i,b_i,c_i,d_i \\le 10^9\\)</span></p>\r\n</blockquote>\r\n<p>两个第一象限的点在同一条过原点的直线上等价于两个点的横纵坐标之比相等。</p>\r\n<p>定义一个点 <span class=\"math inline\">\\((x,y)\\)</span> 的<strong>派生值</strong>为 <span class=\"math inline\">\\(\\frac {x+1}y\\)</span> 和 <span class=\"math inline\">\\(\\frac x{y+1}\\)</span>。</p>\r\n<p>两个点 <span class=\"math inline\">\\(A,B\\)</span> 能够匹配即拥有同一个派生值。</p>\r\n<p>把所有的派生值抽象成点，给定的点抽象成边，匹配条件进一步转化为<strong>两条边拥有公共顶点</strong>。</p>\r\n<blockquote>\r\n<p>引理：一个<strong>连通</strong>无向图能够给每条边定向使得每个点入度为偶数当且仅当边数为偶数。</p>\r\n<p>证明：边数为奇数显然不行，下面给出边数为偶数时的构造：</p>\r\n<p>先建树 <code>DFS</code> 树，所有反向边都向上，如果两个端点都在点 <span class=\"math inline\">\\(u\\)</span> 子树内的边的数量为偶数，则 <span class=\"math inline\">\\(u\\)</span> 与其父亲的连边（如果存在）向上，否则向下。</p>\r\n</blockquote>\r\n<p>通过引理不难推出一个边数为 <span class=\"math inline\">\\(m\\)</span> 的连通图的答案为 <span class=\"math inline\">\\(\\lfloor \\frac m2 \\rfloor\\)</span>，求方案可以先给每条边定向，再把每个点的所有入边两两配对。</p>\r\n<p>只需要对每个连通块做一遍即可。</p>\r\n<p>最后一个问题：派生值是分子分母都是 <span class=\"math inline\">\\(10^{18}\\)</span> 级别的分数，离散化时需要排序，但如何比较。</p>\r\n<p>一种方法是转 <code>__int128</code> 交叉相乘比较大小。其实不一定要按分数值排序，双关键字排序同样能实现离散化，先约分，再以分子、分母为两关键字比较则是另一种更快的方法。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eb emplace_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">4e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\">ll K1[N], K2[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, ord[N], id[N];</span><br><span class=\"line\">vector &lt;pair &lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; G[N];</span><br><span class=\"line\">vector &lt;pair &lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; as;</span><br><span class=\"line\"><span class=\"keyword\">int</span> idx, dfn[N], sz[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    G[u].<span class=\"built_in\">eb</span>(v, i), G[v].<span class=\"built_in\">eb</span>(u, i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> f)</span> </span>&#123;</span><br><span class=\"line\">    dfn[u] = ++idx;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lst = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> ins = [&amp;](<span class=\"keyword\">int</span> x) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(lst) as.<span class=\"built_in\">eb</span>(lst, x), lst = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> lst = x;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [v, w] : G[u]) <span class=\"keyword\">if</span>(!dfn[v]) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v, w), sz[u] += sz[v];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(~sz[v] &amp; <span class=\"number\">1</span>) <span class=\"built_in\">ins</span>(w);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dfn[v] &gt; dfn[u]) <span class=\"built_in\">ins</span>(w);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> sz[v]++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lst &amp;&amp; f) as.<span class=\"built_in\">eb</span>(lst, f);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b, c, d;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class=\"line\">        K1[i * <span class=\"number\">2</span> - <span class=\"number\">1</span>] = <span class=\"built_in\">ll</span>(a + b) * d, K1[i * <span class=\"number\">2</span>] = (ll)a * d;</span><br><span class=\"line\">        K2[i * <span class=\"number\">2</span> - <span class=\"number\">1</span>] = (ll)b * c, K2[i * <span class=\"number\">2</span>] = b * <span class=\"built_in\">ll</span>(c + d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    n *= <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        ord[i] = i;</span><br><span class=\"line\">        ll g = __gcd(K1[i], K2[i]);</span><br><span class=\"line\">        K1[i] /= g, K2[i] /= g;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> cmp = [](<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> K1[x] ^ K1[y] ? K1[x] &lt; K1[y] : K2[x] &lt; K2[y];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(ord + <span class=\"number\">1</span>, ord + n + <span class=\"number\">1</span>, cmp);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) id[i] = <span class=\"built_in\">lower_bound</span>(ord + <span class=\"number\">1</span>, ord + n + <span class=\"number\">1</span>, i, cmp) - ord;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n / <span class=\"number\">2</span>) <span class=\"built_in\">add</span>(id[i * <span class=\"number\">2</span> - <span class=\"number\">1</span>], id[i * <span class=\"number\">2</span>], i);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">dfs</span>(i, <span class=\"number\">0</span>);</span><br><span class=\"line\">    cout &lt;&lt; as.<span class=\"built_in\">size</span>() &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [u, v] : as) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d\\n&quot;</span>, u, v);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"Vasya and Polynomial | Codeforeces 493E","date":"2021-03-13T14:27:00.000Z","updated":"2021-03-13T14:27:00.000Z","_content":"> [题目链接](https://codeforces.com/contest/493/problem/E)\n>\n> 原题题意：给你三个正整数 $a$，$b$，$c$，问多少个**非负整系数**多项式 $F$, 满足 $F(a)=b \\land F(b)=c$\n>\n> $1 \\le a, b, c \\le 10^{18}$\n\n若 $a=1,b=1$ 答案显然。\n\n否则因为**非负整系数**的限制，多项式系数是 $\\log$ 级别的。\n\n我们考虑一个更一般的问题：问多少个**非负整系数**多项式 $F$, 满足\n$$\nF(a)=x \\land F(b)=y \\land x \\le b\n$$\n设 $F$ 的常数项为 $V$。\n\n根据 $F(a)=x$ 和 $F(b)=y$ 知道 $V \\le x, V \\equiv y\\ (mod\\ b)$。\n\n分两种情况。\n\n1. 当 $x=b \\land b\\ |\\ y$ 时，则 $V=0 \\lor V=x$，\n\n   若 $V=x$，因为 $F(a)=x$, 所以 $F$ 只能是常函数 $F(x)=V$，当 $x \\ne y$ 时无解。\n\n   另一种情况，因为 $F(a)-V=x-V$，所以 $a$ 要能整除 $x-V$，如果不整除就无解。\n\n   否则令 $G(x)=\\dfrac{F(x)-V}x$，有 $G(a)=\\dfrac{x-V}a，G(b)=\\dfrac{y-V}b$。\n\n   显然 $\\dfrac{x-V}a \\le x \\le b$，因此就转化为了一个子问题。\n\n2. 当 $x < b \\lor b \\not |\\ y$ 时，显然 $V=y \\mod b$，可以转化为子问题。\n\n边界条件是 $xy=0$, 这意味着无解（$F(x)=0$ 不算合法）。\n\n然后就可以求出多项式的数量了。\n\n```c\ntypedef long long ll;\nll a, b, c; \nfind(ll x, ll y) {\n    if(!x || !y) return 0; ll v = y % b;\n    return ((x - v) % a ? 0 : find((x - v) / a, (y - v) / b)) + (x == y);\n}\nmain() {\n    scanf(\"%lld%lld%lld\", &a, &b, &c);\n    if(a == 1 && b == 1) puts(c > 1 ? \"0\" : \"inf\");\n    else printf(\"%d\", find(b, c));\n}\n```\n\n如何求**次数最高的前提下字典序最小**的多项式？\n\n分析递归过程，每个次数的合法多项式**最多一个**，递归时优先选择次数高的就行了。\n\n```c\ntypedef long long ll;\ncnt, ans; ll a, b, c, A[100];\nfind(ll x, ll y, int d) {\n    if(!x || !y) return;\n    ll v = A[d] = y % b;\n    if((x - v) % a == 0) find((x - v) / a, (y - v) / b, d + 1);\n    if(x == y) { if(!ans) A[cnt = d] = x; ans++; }\n}\nmain(T) {\n    for(scanf(\"%d\", &T); T--; puts(\"\")) {\n        scanf(\"%d%d%d\", &a, &b, &c);\n        if(a == 1 && b == 1) puts(c > 1 ? \"0\" : \"-1\");\n        else {\n            ans = 0, find(b, c, 0);\n            printf(\"%d\", ans);\n            if(ans) for(printf(\"\\n%d \", cnt); ~cnt; printf(\"%lld \", A[cnt--]));\n        }\n    }\n}\n```","source":"_posts/CF493E.md","raw":"---\ntitle: Vasya and Polynomial | Codeforeces 493E\ndate: 2021-03-13 22:27:00\nupdated: 2021-03-13 22:27:00\ntags: [数论,构造]\ncategories: Codeforces\n---\n> [题目链接](https://codeforces.com/contest/493/problem/E)\n>\n> 原题题意：给你三个正整数 $a$，$b$，$c$，问多少个**非负整系数**多项式 $F$, 满足 $F(a)=b \\land F(b)=c$\n>\n> $1 \\le a, b, c \\le 10^{18}$\n\n若 $a=1,b=1$ 答案显然。\n\n否则因为**非负整系数**的限制，多项式系数是 $\\log$ 级别的。\n\n我们考虑一个更一般的问题：问多少个**非负整系数**多项式 $F$, 满足\n$$\nF(a)=x \\land F(b)=y \\land x \\le b\n$$\n设 $F$ 的常数项为 $V$。\n\n根据 $F(a)=x$ 和 $F(b)=y$ 知道 $V \\le x, V \\equiv y\\ (mod\\ b)$。\n\n分两种情况。\n\n1. 当 $x=b \\land b\\ |\\ y$ 时，则 $V=0 \\lor V=x$，\n\n   若 $V=x$，因为 $F(a)=x$, 所以 $F$ 只能是常函数 $F(x)=V$，当 $x \\ne y$ 时无解。\n\n   另一种情况，因为 $F(a)-V=x-V$，所以 $a$ 要能整除 $x-V$，如果不整除就无解。\n\n   否则令 $G(x)=\\dfrac{F(x)-V}x$，有 $G(a)=\\dfrac{x-V}a，G(b)=\\dfrac{y-V}b$。\n\n   显然 $\\dfrac{x-V}a \\le x \\le b$，因此就转化为了一个子问题。\n\n2. 当 $x < b \\lor b \\not |\\ y$ 时，显然 $V=y \\mod b$，可以转化为子问题。\n\n边界条件是 $xy=0$, 这意味着无解（$F(x)=0$ 不算合法）。\n\n然后就可以求出多项式的数量了。\n\n```c\ntypedef long long ll;\nll a, b, c; \nfind(ll x, ll y) {\n    if(!x || !y) return 0; ll v = y % b;\n    return ((x - v) % a ? 0 : find((x - v) / a, (y - v) / b)) + (x == y);\n}\nmain() {\n    scanf(\"%lld%lld%lld\", &a, &b, &c);\n    if(a == 1 && b == 1) puts(c > 1 ? \"0\" : \"inf\");\n    else printf(\"%d\", find(b, c));\n}\n```\n\n如何求**次数最高的前提下字典序最小**的多项式？\n\n分析递归过程，每个次数的合法多项式**最多一个**，递归时优先选择次数高的就行了。\n\n```c\ntypedef long long ll;\ncnt, ans; ll a, b, c, A[100];\nfind(ll x, ll y, int d) {\n    if(!x || !y) return;\n    ll v = A[d] = y % b;\n    if((x - v) % a == 0) find((x - v) / a, (y - v) / b, d + 1);\n    if(x == y) { if(!ans) A[cnt = d] = x; ans++; }\n}\nmain(T) {\n    for(scanf(\"%d\", &T); T--; puts(\"\")) {\n        scanf(\"%d%d%d\", &a, &b, &c);\n        if(a == 1 && b == 1) puts(c > 1 ? \"0\" : \"-1\");\n        else {\n            ans = 0, find(b, c, 0);\n            printf(\"%d\", ans);\n            if(ans) for(printf(\"\\n%d \", cnt); ~cnt; printf(\"%lld \", A[cnt--]));\n        }\n    }\n}\n```","slug":"CF493E","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxgzt000yootn2z3oc7bs","content":"<blockquote>\r\n<p><a href=\"https://codeforces.com/contest/493/problem/E\">题目链接</a></p>\r\n<p>原题题意：给你三个正整数 <span class=\"math inline\">\\(a\\)</span>，<span class=\"math inline\">\\(b\\)</span>，<span class=\"math inline\">\\(c\\)</span>，问多少个<strong>非负整系数</strong>多项式 <span class=\"math inline\">\\(F\\)</span>, 满足 <span class=\"math inline\">\\(F(a)=b \\land F(b)=c\\)</span></p>\r\n<p><span class=\"math inline\">\\(1 \\le a, b, c \\le 10^{18}\\)</span></p>\r\n</blockquote>\r\n<p>若 <span class=\"math inline\">\\(a=1,b=1\\)</span> 答案显然。</p>\r\n<p>否则因为<strong>非负整系数</strong>的限制，多项式系数是 <span class=\"math inline\">\\(\\log\\)</span> 级别的。</p>\r\n<p>我们考虑一个更一般的问题：问多少个<strong>非负整系数</strong>多项式 <span class=\"math inline\">\\(F\\)</span>, 满足 <span class=\"math display\">\\[\r\nF(a)=x \\land F(b)=y \\land x \\le b\r\n\\]</span> 设 <span class=\"math inline\">\\(F\\)</span> 的常数项为 <span class=\"math inline\">\\(V\\)</span>。</p>\r\n<p>根据 <span class=\"math inline\">\\(F(a)=x\\)</span> 和 <span class=\"math inline\">\\(F(b)=y\\)</span> 知道 <span class=\"math inline\">\\(V \\le x, V \\equiv y\\ (mod\\ b)\\)</span>。</p>\r\n<p>分两种情况。</p>\r\n<ol type=\"1\">\r\n<li><p>当 <span class=\"math inline\">\\(x=b \\land b\\ |\\ y\\)</span> 时，则 <span class=\"math inline\">\\(V=0 \\lor V=x\\)</span>，</p>\r\n<p>若 <span class=\"math inline\">\\(V=x\\)</span>，因为 <span class=\"math inline\">\\(F(a)=x\\)</span>, 所以 <span class=\"math inline\">\\(F\\)</span> 只能是常函数 <span class=\"math inline\">\\(F(x)=V\\)</span>，当 <span class=\"math inline\">\\(x \\ne y\\)</span> 时无解。</p>\r\n<p>另一种情况，因为 <span class=\"math inline\">\\(F(a)-V=x-V\\)</span>，所以 <span class=\"math inline\">\\(a\\)</span> 要能整除 <span class=\"math inline\">\\(x-V\\)</span>，如果不整除就无解。</p>\r\n<p>否则令 <span class=\"math inline\">\\(G(x)=\\dfrac{F(x)-V}x\\)</span>，有 <span class=\"math inline\">\\(G(a)=\\dfrac{x-V}a，G(b)=\\dfrac{y-V}b\\)</span>。</p>\r\n<p>显然 <span class=\"math inline\">\\(\\dfrac{x-V}a \\le x \\le b\\)</span>，因此就转化为了一个子问题。</p></li>\r\n<li><p>当 <span class=\"math inline\">\\(x &lt; b \\lor b \\not |\\ y\\)</span> 时，显然 <span class=\"math inline\">\\(V=y \\mod b\\)</span>，可以转化为子问题。</p></li>\r\n</ol>\r\n<p>边界条件是 <span class=\"math inline\">\\(xy=0\\)</span>, 这意味着无解（<span class=\"math inline\">\\(F(x)=0\\)</span> 不算合法）。</p>\r\n<p>然后就可以求出多项式的数量了。</p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\">ll a, b, c; </span><br><span class=\"line\">find(ll x, ll y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!x || !y) <span class=\"keyword\">return</span> <span class=\"number\">0</span>; ll v = y % b;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((x - v) % a ? <span class=\"number\">0</span> : find((x - v) / a, (y - v) / b)) + (x == y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%lld%lld&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a == <span class=\"number\">1</span> &amp;&amp; b == <span class=\"number\">1</span>) <span class=\"built_in\">puts</span>(c &gt; <span class=\"number\">1</span> ? <span class=\"string\">&quot;0&quot;</span> : <span class=\"string\">&quot;inf&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, find(b, c));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>如何求<strong>次数最高的前提下字典序最小</strong>的多项式？</p>\r\n<p>分析递归过程，每个次数的合法多项式<strong>最多一个</strong>，递归时优先选择次数高的就行了。</p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\">cnt, ans; ll a, b, c, A[<span class=\"number\">100</span>];</span><br><span class=\"line\">find(ll x, ll y, <span class=\"keyword\">int</span> d) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!x || !y) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    ll v = A[d] = y % b;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((x - v) % a == <span class=\"number\">0</span>) find((x - v) / a, (y - v) / b, d + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x == y) &#123; <span class=\"keyword\">if</span>(!ans) A[cnt = d] = x; ans++; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">main(T) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T); T--; <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a == <span class=\"number\">1</span> &amp;&amp; b == <span class=\"number\">1</span>) <span class=\"built_in\">puts</span>(c &gt; <span class=\"number\">1</span> ? <span class=\"string\">&quot;0&quot;</span> : <span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ans = <span class=\"number\">0</span>, find(b, c, <span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, ans);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ans) <span class=\"keyword\">for</span>(<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n%d &quot;</span>, cnt); ~cnt; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld &quot;</span>, A[cnt--]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":1564,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"https://codeforces.com/contest/493/problem/E\">题目链接</a></p>\r\n<p>原题题意：给你三个正整数 <span class=\"math inline\">\\(a\\)</span>，<span class=\"math inline\">\\(b\\)</span>，<span class=\"math inline\">\\(c\\)</span>，问多少个<strong>非负整系数</strong>多项式 <span class=\"math inline\">\\(F\\)</span>, 满足 <span class=\"math inline\">\\(F(a)=b \\land F(b)=c\\)</span></p>\r\n<p><span class=\"math inline\">\\(1 \\le a, b, c \\le 10^{18}\\)</span></p>\r\n</blockquote>\r\n<p>若 <span class=\"math inline\">\\(a=1,b=1\\)</span> 答案显然。</p>\r\n<p>否则因为<strong>非负整系数</strong>的限制，多项式系数是 <span class=\"math inline\">\\(\\log\\)</span> 级别的。</p>\r\n<p>我们考虑一个更一般的问题：问多少个<strong>非负整系数</strong>多项式 <span class=\"math inline\">\\(F\\)</span>, 满足 <span class=\"math display\">\\[\r\nF(a)=x \\land F(b)=y \\land x \\le b\r\n\\]</span> 设 <span class=\"math inline\">\\(F\\)</span> 的常数项为 <span class=\"math inline\">\\(V\\)</span>。</p>\r\n<p>根据 <span class=\"math inline\">\\(F(a)=x\\)</span> 和 <span class=\"math inline\">\\(F(b)=y\\)</span> 知道 <span class=\"math inline\">\\(V \\le x, V \\equiv y\\ (mod\\ b)\\)</span>。</p>\r\n<p>分两种情况。</p>\r\n<ol type=\"1\">\r\n<li><p>当 <span class=\"math inline\">\\(x=b \\land b\\ |\\ y\\)</span> 时，则 <span class=\"math inline\">\\(V=0 \\lor V=x\\)</span>，</p>\r\n<p>若 <span class=\"math inline\">\\(V=x\\)</span>，因为 <span class=\"math inline\">\\(F(a)=x\\)</span>, 所以 <span class=\"math inline\">\\(F\\)</span> 只能是常函数 <span class=\"math inline\">\\(F(x)=V\\)</span>，当 <span class=\"math inline\">\\(x \\ne y\\)</span> 时无解。</p>\r\n<p>另一种情况，因为 <span class=\"math inline\">\\(F(a)-V=x-V\\)</span>，所以 <span class=\"math inline\">\\(a\\)</span> 要能整除 <span class=\"math inline\">\\(x-V\\)</span>，如果不整除就无解。</p>\r\n<p>否则令 <span class=\"math inline\">\\(G(x)=\\dfrac{F(x)-V}x\\)</span>，有 <span class=\"math inline\">\\(G(a)=\\dfrac{x-V}a，G(b)=\\dfrac{y-V}b\\)</span>。</p>\r\n<p>显然 <span class=\"math inline\">\\(\\dfrac{x-V}a \\le x \\le b\\)</span>，因此就转化为了一个子问题。</p></li>\r\n<li><p>当 <span class=\"math inline\">\\(x &lt; b \\lor b \\not |\\ y\\)</span> 时，显然 <span class=\"math inline\">\\(V=y \\mod b\\)</span>，可以转化为子问题。</p></li>\r\n</ol>\r\n<p>边界条件是 <span class=\"math inline\">\\(xy=0\\)</span>, 这意味着无解（<span class=\"math inline\">\\(F(x)=0\\)</span> 不算合法）。</p>\r\n<p>然后就可以求出多项式的数量了。</p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\">ll a, b, c; </span><br><span class=\"line\">find(ll x, ll y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!x || !y) <span class=\"keyword\">return</span> <span class=\"number\">0</span>; ll v = y % b;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((x - v) % a ? <span class=\"number\">0</span> : find((x - v) / a, (y - v) / b)) + (x == y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%lld%lld&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a == <span class=\"number\">1</span> &amp;&amp; b == <span class=\"number\">1</span>) <span class=\"built_in\">puts</span>(c &gt; <span class=\"number\">1</span> ? <span class=\"string\">&quot;0&quot;</span> : <span class=\"string\">&quot;inf&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, find(b, c));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>如何求<strong>次数最高的前提下字典序最小</strong>的多项式？</p>\r\n<p>分析递归过程，每个次数的合法多项式<strong>最多一个</strong>，递归时优先选择次数高的就行了。</p>\r\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\">cnt, ans; ll a, b, c, A[<span class=\"number\">100</span>];</span><br><span class=\"line\">find(ll x, ll y, <span class=\"keyword\">int</span> d) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!x || !y) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    ll v = A[d] = y % b;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((x - v) % a == <span class=\"number\">0</span>) find((x - v) / a, (y - v) / b, d + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x == y) &#123; <span class=\"keyword\">if</span>(!ans) A[cnt = d] = x; ans++; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">main(T) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T); T--; <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a == <span class=\"number\">1</span> &amp;&amp; b == <span class=\"number\">1</span>) <span class=\"built_in\">puts</span>(c &gt; <span class=\"number\">1</span> ? <span class=\"string\">&quot;0&quot;</span> : <span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ans = <span class=\"number\">0</span>, find(b, c, <span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, ans);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ans) <span class=\"keyword\">for</span>(<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n%d &quot;</span>, cnt); ~cnt; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld &quot;</span>, A[cnt--]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"Cycling City | Codeforces 521E","date":"2021-04-03T14:09:35.000Z","updated":"2021-04-03T14:09:35.000Z","_content":"> [题目链接](https://codeforces.com/contest/521/problem/E)\n>\n> 给定一张 $n$ 个点 $m$ 条边的简单无向图。\n>\n> 问在图中能否找到两个点，满足这两个点之间有至少三条点不相交的简单路径，有解要打印三条路径。\n>\n> $n,m \\le 2 \\cdot 10^5$ 不保证图连通。\n\n考虑 $u \\rightarrow v$ 有三条点不相交的路径会是什么样子，发现有两个环相交了。\n\n![](https://i.loli.net/2021/04/03/k3PV8WRYS4Uqmon.png)\n\n反过来，如果任意两个环都不相交，即仙人掌，那就无解。\n\n至此，得到了有解的充要条件：不是仙人掌。\n\n但为了便于打印路径，采用另一种方法。\n\n设 $low_u$ 为 ```tarjan``` 算法中的定义，$Low_u$ 表示次小值。\n\n如果 $Low_u = dfn_u$，则子树内的一个点到子树外的一个点至多有两条点不相交的简单路径。\n\n于是存在满足 $Low_u < dfn_u$ 的点 $u$ 是有解的必要条件。\n\n观察这张图，如果 $lca(v,V)=u$，那么 $u \\rightarrow Low$，$u \\rightarrow v \\rightarrow low \\rightarrow Low$ 和 $u \\rightarrow V \\rightarrow Low$ 是三条点不相交的简单路径。\n\n![](https://i.loli.net/2021/04/03/tQCALX5ah47RU9f.png)\n\n只要以 $u$ 为根的子树中只有 $u$ 一个点满足 $Low_u < dfn_u$，则 $lca(v, V) = u$。\n\n在 ```dfs``` 过程中第一次找到满足 $Low_u < dfn_u$ 的点 $u$ 即符合上一行的条件，因为它是子树中最后判定的点。\n\n复杂度 $O(n)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\nconst int N = 2e5 + 5;\ntypedef vector <int> vi;\nint n, m; vi G[N];\nint idx, dfn[N], fa[N], ma;\nstruct node {\n    int u, fa, U, Fa;\n    node(int uu) { u = fa = U = Fa = uu; }\n    void upd(int uu, int ffa) {\n        if(dfn[ffa] < dfn[fa]) U = u, Fa = fa, u = uu, fa = ffa;\n        else if(dfn[ffa] < dfn[Fa]) U = uu, Fa = ffa;\n    }\n} as(0);\nnode dfs(int u) {\n    dfn[u] = ++idx; node lowu(u);\n    for(int v : G[u]) if(!dfn[v]) {\n        fa[v] = u;\n        node lowv = dfs(v);\n        lowu.upd(lowv.u, lowv.fa), lowu.upd(lowv.U, lowv.Fa);\n    } else if(dfn[v] < dfn[u] && v ^ fa[u]) lowu.upd(u, v);\n    if(!ma && dfn[lowu.Fa] < dfn[u]) as = lowu, ma = u;\n    return lowu;\n}\nvi find(int s, int t) {\n    vi p;\n    while(s ^ t) p.pb(s), s = fa[s];\n    p.pb(t);\n    return p;\n}\nvi p;\nvoid print() {\n    printf(\"%llu \", p.size());\n    for(int u : p) printf(\"%d \", u);\n    puts(\"\");\n}\nint main() {\n    cin >> n >> m;\n    int u, v;\n    rep(i, 1, m) scanf(\"%d%d\", &u, &v), G[u].pb(v), G[v].pb(u);\n    rep(i, 1, n) if(!ma && !dfn[i]) dfs(i);\n    if(ma) {\n        puts(\"YES\");\n        p = find(ma, as.Fa), print();\n        p = find(as.U, ma), reverse(p.begin(), p.end());\n        p.pb(as.Fa), print();\n        p = find(as.Fa, as.fa); vi t = find(as.u, ma);\n        p.insert(p.end(), t.begin(), t.end());\n        reverse(p.begin(), p.end()), print();\n    } else puts(\"NO\");\n    return 0;\n}\n```","source":"_posts/CF521E.md","raw":"---\ntitle: Cycling City | Codeforces 521E\ndate: 2021-04-03 22:09:35\nupdated: 2021-04-03 22:09:35\ntags: [图论,构造]\ncategories: Codeforces\n---\n> [题目链接](https://codeforces.com/contest/521/problem/E)\n>\n> 给定一张 $n$ 个点 $m$ 条边的简单无向图。\n>\n> 问在图中能否找到两个点，满足这两个点之间有至少三条点不相交的简单路径，有解要打印三条路径。\n>\n> $n,m \\le 2 \\cdot 10^5$ 不保证图连通。\n\n考虑 $u \\rightarrow v$ 有三条点不相交的路径会是什么样子，发现有两个环相交了。\n\n![](https://i.loli.net/2021/04/03/k3PV8WRYS4Uqmon.png)\n\n反过来，如果任意两个环都不相交，即仙人掌，那就无解。\n\n至此，得到了有解的充要条件：不是仙人掌。\n\n但为了便于打印路径，采用另一种方法。\n\n设 $low_u$ 为 ```tarjan``` 算法中的定义，$Low_u$ 表示次小值。\n\n如果 $Low_u = dfn_u$，则子树内的一个点到子树外的一个点至多有两条点不相交的简单路径。\n\n于是存在满足 $Low_u < dfn_u$ 的点 $u$ 是有解的必要条件。\n\n观察这张图，如果 $lca(v,V)=u$，那么 $u \\rightarrow Low$，$u \\rightarrow v \\rightarrow low \\rightarrow Low$ 和 $u \\rightarrow V \\rightarrow Low$ 是三条点不相交的简单路径。\n\n![](https://i.loli.net/2021/04/03/tQCALX5ah47RU9f.png)\n\n只要以 $u$ 为根的子树中只有 $u$ 一个点满足 $Low_u < dfn_u$，则 $lca(v, V) = u$。\n\n在 ```dfs``` 过程中第一次找到满足 $Low_u < dfn_u$ 的点 $u$ 即符合上一行的条件，因为它是子树中最后判定的点。\n\n复杂度 $O(n)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\nconst int N = 2e5 + 5;\ntypedef vector <int> vi;\nint n, m; vi G[N];\nint idx, dfn[N], fa[N], ma;\nstruct node {\n    int u, fa, U, Fa;\n    node(int uu) { u = fa = U = Fa = uu; }\n    void upd(int uu, int ffa) {\n        if(dfn[ffa] < dfn[fa]) U = u, Fa = fa, u = uu, fa = ffa;\n        else if(dfn[ffa] < dfn[Fa]) U = uu, Fa = ffa;\n    }\n} as(0);\nnode dfs(int u) {\n    dfn[u] = ++idx; node lowu(u);\n    for(int v : G[u]) if(!dfn[v]) {\n        fa[v] = u;\n        node lowv = dfs(v);\n        lowu.upd(lowv.u, lowv.fa), lowu.upd(lowv.U, lowv.Fa);\n    } else if(dfn[v] < dfn[u] && v ^ fa[u]) lowu.upd(u, v);\n    if(!ma && dfn[lowu.Fa] < dfn[u]) as = lowu, ma = u;\n    return lowu;\n}\nvi find(int s, int t) {\n    vi p;\n    while(s ^ t) p.pb(s), s = fa[s];\n    p.pb(t);\n    return p;\n}\nvi p;\nvoid print() {\n    printf(\"%llu \", p.size());\n    for(int u : p) printf(\"%d \", u);\n    puts(\"\");\n}\nint main() {\n    cin >> n >> m;\n    int u, v;\n    rep(i, 1, m) scanf(\"%d%d\", &u, &v), G[u].pb(v), G[v].pb(u);\n    rep(i, 1, n) if(!ma && !dfn[i]) dfs(i);\n    if(ma) {\n        puts(\"YES\");\n        p = find(ma, as.Fa), print();\n        p = find(as.U, ma), reverse(p.begin(), p.end());\n        p.pb(as.Fa), print();\n        p = find(as.Fa, as.fa); vi t = find(as.u, ma);\n        p.insert(p.end(), t.begin(), t.end());\n        reverse(p.begin(), p.end()), print();\n    } else puts(\"NO\");\n    return 0;\n}\n```","slug":"CF521E","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxgzu0012ootncu3t3xus","content":"<blockquote>\r\n<p><a href=\"https://codeforces.com/contest/521/problem/E\">题目链接</a></p>\r\n<p>给定一张 <span class=\"math inline\">\\(n\\)</span> 个点 <span class=\"math inline\">\\(m\\)</span> 条边的简单无向图。</p>\r\n<p>问在图中能否找到两个点，满足这两个点之间有至少三条点不相交的简单路径，有解要打印三条路径。</p>\r\n<p><span class=\"math inline\">\\(n,m \\le 2 \\cdot 10^5\\)</span> 不保证图连通。</p>\r\n</blockquote>\r\n<p>考虑 <span class=\"math inline\">\\(u \\rightarrow v\\)</span> 有三条点不相交的路径会是什么样子，发现有两个环相交了。</p>\r\n<p><img src=\"https://i.loli.net/2021/04/03/k3PV8WRYS4Uqmon.png\" /></p>\r\n<p>反过来，如果任意两个环都不相交，即仙人掌，那就无解。</p>\r\n<p>至此，得到了有解的充要条件：不是仙人掌。</p>\r\n<p>但为了便于打印路径，采用另一种方法。</p>\r\n<p>设 <span class=\"math inline\">\\(low_u\\)</span> 为 <code>tarjan</code> 算法中的定义，<span class=\"math inline\">\\(Low_u\\)</span> 表示次小值。</p>\r\n<p>如果 <span class=\"math inline\">\\(Low_u = dfn_u\\)</span>，则子树内的一个点到子树外的一个点至多有两条点不相交的简单路径。</p>\r\n<p>于是存在满足 <span class=\"math inline\">\\(Low_u &lt; dfn_u\\)</span> 的点 <span class=\"math inline\">\\(u\\)</span> 是有解的必要条件。</p>\r\n<p>观察这张图，如果 <span class=\"math inline\">\\(lca(v,V)=u\\)</span>，那么 <span class=\"math inline\">\\(u \\rightarrow Low\\)</span>，<span class=\"math inline\">\\(u \\rightarrow v \\rightarrow low \\rightarrow Low\\)</span> 和 <span class=\"math inline\">\\(u \\rightarrow V \\rightarrow Low\\)</span> 是三条点不相交的简单路径。</p>\r\n<p><img src=\"https://i.loli.net/2021/04/03/tQCALX5ah47RU9f.png\" /></p>\r\n<p>只要以 <span class=\"math inline\">\\(u\\)</span> 为根的子树中只有 <span class=\"math inline\">\\(u\\)</span> 一个点满足 <span class=\"math inline\">\\(Low_u &lt; dfn_u\\)</span>，则 <span class=\"math inline\">\\(lca(v, V) = u\\)</span>。</p>\r\n<p>在 <code>dfs</code> 过程中第一次找到满足 <span class=\"math inline\">\\(Low_u &lt; dfn_u\\)</span> 的点 <span class=\"math inline\">\\(u\\)</span> 即符合上一行的条件，因为它是子树中最后判定的点。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> vector &lt;<span class=\"keyword\">int</span>&gt; vi;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m; vi G[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> idx, dfn[N], fa[N], ma;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, fa, U, Fa;</span><br><span class=\"line\">    <span class=\"built_in\">node</span>(<span class=\"keyword\">int</span> uu) &#123; u = fa = U = Fa = uu; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">upd</span><span class=\"params\">(<span class=\"keyword\">int</span> uu, <span class=\"keyword\">int</span> ffa)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dfn[ffa] &lt; dfn[fa]) U = u, Fa = fa, u = uu, fa = ffa;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dfn[ffa] &lt; dfn[Fa]) U = uu, Fa = ffa;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"built_in\">as</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"function\">node <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">    dfn[u] = ++idx; <span class=\"function\">node <span class=\"title\">lowu</span><span class=\"params\">(u)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) <span class=\"keyword\">if</span>(!dfn[v]) &#123;</span><br><span class=\"line\">        fa[v] = u;</span><br><span class=\"line\">        node lowv = <span class=\"built_in\">dfs</span>(v);</span><br><span class=\"line\">        lowu.<span class=\"built_in\">upd</span>(lowv.u, lowv.fa), lowu.<span class=\"built_in\">upd</span>(lowv.U, lowv.Fa);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dfn[v] &lt; dfn[u] &amp;&amp; v ^ fa[u]) lowu.<span class=\"built_in\">upd</span>(u, v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!ma &amp;&amp; dfn[lowu.Fa] &lt; dfn[u]) as = lowu, ma = u;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lowu;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">vi <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> s, <span class=\"keyword\">int</span> t)</span> </span>&#123;</span><br><span class=\"line\">    vi p;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(s ^ t) p.<span class=\"built_in\">pb</span>(s), s = fa[s];</span><br><span class=\"line\">    p.<span class=\"built_in\">pb</span>(t);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vi p;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%llu &quot;</span>, p.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> u : p) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, u);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;u, &amp;v), G[u].<span class=\"built_in\">pb</span>(v), G[v].<span class=\"built_in\">pb</span>(u);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"keyword\">if</span>(!ma &amp;&amp; !dfn[i]) <span class=\"built_in\">dfs</span>(i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ma) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;YES&quot;</span>);</span><br><span class=\"line\">        p = <span class=\"built_in\">find</span>(ma, as.Fa), <span class=\"built_in\">print</span>();</span><br><span class=\"line\">        p = <span class=\"built_in\">find</span>(as.U, ma), <span class=\"built_in\">reverse</span>(p.<span class=\"built_in\">begin</span>(), p.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        p.<span class=\"built_in\">pb</span>(as.Fa), <span class=\"built_in\">print</span>();</span><br><span class=\"line\">        p = <span class=\"built_in\">find</span>(as.Fa, as.fa); vi t = <span class=\"built_in\">find</span>(as.u, ma);</span><br><span class=\"line\">        p.<span class=\"built_in\">insert</span>(p.<span class=\"built_in\">end</span>(), t.<span class=\"built_in\">begin</span>(), t.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"built_in\">reverse</span>(p.<span class=\"built_in\">begin</span>(), p.<span class=\"built_in\">end</span>()), <span class=\"built_in\">print</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;NO&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":2135,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"https://codeforces.com/contest/521/problem/E\">题目链接</a></p>\r\n<p>给定一张 <span class=\"math inline\">\\(n\\)</span> 个点 <span class=\"math inline\">\\(m\\)</span> 条边的简单无向图。</p>\r\n<p>问在图中能否找到两个点，满足这两个点之间有至少三条点不相交的简单路径，有解要打印三条路径。</p>\r\n<p><span class=\"math inline\">\\(n,m \\le 2 \\cdot 10^5\\)</span> 不保证图连通。</p>\r\n</blockquote>\r\n<p>考虑 <span class=\"math inline\">\\(u \\rightarrow v\\)</span> 有三条点不相交的路径会是什么样子，发现有两个环相交了。</p>\r\n<p><img src=\"https://i.loli.net/2021/04/03/k3PV8WRYS4Uqmon.png\" /></p>\r\n<p>反过来，如果任意两个环都不相交，即仙人掌，那就无解。</p>\r\n<p>至此，得到了有解的充要条件：不是仙人掌。</p>\r\n<p>但为了便于打印路径，采用另一种方法。</p>\r\n<p>设 <span class=\"math inline\">\\(low_u\\)</span> 为 <code>tarjan</code> 算法中的定义，<span class=\"math inline\">\\(Low_u\\)</span> 表示次小值。</p>\r\n<p>如果 <span class=\"math inline\">\\(Low_u = dfn_u\\)</span>，则子树内的一个点到子树外的一个点至多有两条点不相交的简单路径。</p>\r\n<p>于是存在满足 <span class=\"math inline\">\\(Low_u &lt; dfn_u\\)</span> 的点 <span class=\"math inline\">\\(u\\)</span> 是有解的必要条件。</p>\r\n<p>观察这张图，如果 <span class=\"math inline\">\\(lca(v,V)=u\\)</span>，那么 <span class=\"math inline\">\\(u \\rightarrow Low\\)</span>，<span class=\"math inline\">\\(u \\rightarrow v \\rightarrow low \\rightarrow Low\\)</span> 和 <span class=\"math inline\">\\(u \\rightarrow V \\rightarrow Low\\)</span> 是三条点不相交的简单路径。</p>\r\n<p><img src=\"https://i.loli.net/2021/04/03/tQCALX5ah47RU9f.png\" /></p>\r\n<p>只要以 <span class=\"math inline\">\\(u\\)</span> 为根的子树中只有 <span class=\"math inline\">\\(u\\)</span> 一个点满足 <span class=\"math inline\">\\(Low_u &lt; dfn_u\\)</span>，则 <span class=\"math inline\">\\(lca(v, V) = u\\)</span>。</p>\r\n<p>在 <code>dfs</code> 过程中第一次找到满足 <span class=\"math inline\">\\(Low_u &lt; dfn_u\\)</span> 的点 <span class=\"math inline\">\\(u\\)</span> 即符合上一行的条件，因为它是子树中最后判定的点。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> vector &lt;<span class=\"keyword\">int</span>&gt; vi;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m; vi G[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> idx, dfn[N], fa[N], ma;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, fa, U, Fa;</span><br><span class=\"line\">    <span class=\"built_in\">node</span>(<span class=\"keyword\">int</span> uu) &#123; u = fa = U = Fa = uu; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">upd</span><span class=\"params\">(<span class=\"keyword\">int</span> uu, <span class=\"keyword\">int</span> ffa)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dfn[ffa] &lt; dfn[fa]) U = u, Fa = fa, u = uu, fa = ffa;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dfn[ffa] &lt; dfn[Fa]) U = uu, Fa = ffa;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"built_in\">as</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"function\">node <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">    dfn[u] = ++idx; <span class=\"function\">node <span class=\"title\">lowu</span><span class=\"params\">(u)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) <span class=\"keyword\">if</span>(!dfn[v]) &#123;</span><br><span class=\"line\">        fa[v] = u;</span><br><span class=\"line\">        node lowv = <span class=\"built_in\">dfs</span>(v);</span><br><span class=\"line\">        lowu.<span class=\"built_in\">upd</span>(lowv.u, lowv.fa), lowu.<span class=\"built_in\">upd</span>(lowv.U, lowv.Fa);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dfn[v] &lt; dfn[u] &amp;&amp; v ^ fa[u]) lowu.<span class=\"built_in\">upd</span>(u, v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!ma &amp;&amp; dfn[lowu.Fa] &lt; dfn[u]) as = lowu, ma = u;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lowu;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">vi <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> s, <span class=\"keyword\">int</span> t)</span> </span>&#123;</span><br><span class=\"line\">    vi p;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(s ^ t) p.<span class=\"built_in\">pb</span>(s), s = fa[s];</span><br><span class=\"line\">    p.<span class=\"built_in\">pb</span>(t);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vi p;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%llu &quot;</span>, p.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> u : p) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, u);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;u, &amp;v), G[u].<span class=\"built_in\">pb</span>(v), G[v].<span class=\"built_in\">pb</span>(u);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"keyword\">if</span>(!ma &amp;&amp; !dfn[i]) <span class=\"built_in\">dfs</span>(i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ma) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;YES&quot;</span>);</span><br><span class=\"line\">        p = <span class=\"built_in\">find</span>(ma, as.Fa), <span class=\"built_in\">print</span>();</span><br><span class=\"line\">        p = <span class=\"built_in\">find</span>(as.U, ma), <span class=\"built_in\">reverse</span>(p.<span class=\"built_in\">begin</span>(), p.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        p.<span class=\"built_in\">pb</span>(as.Fa), <span class=\"built_in\">print</span>();</span><br><span class=\"line\">        p = <span class=\"built_in\">find</span>(as.Fa, as.fa); vi t = <span class=\"built_in\">find</span>(as.u, ma);</span><br><span class=\"line\">        p.<span class=\"built_in\">insert</span>(p.<span class=\"built_in\">end</span>(), t.<span class=\"built_in\">begin</span>(), t.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"built_in\">reverse</span>(p.<span class=\"built_in\">begin</span>(), p.<span class=\"built_in\">end</span>()), <span class=\"built_in\">print</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;NO&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"Guards In The Storehouse | Codeforces 845F","date":"2021-03-26T06:52:36.000Z","updated":"2021-03-26T06:52:36.000Z","_content":"> [题目链接](http://codeforces.com/problemset/problem/845/F)\n>\n> 给定一个 $n \\times m$ 的网格，有些位置是障碍，其他是空地。\n>\n> 在一个空地放灯可以照亮这个灯向右，向下第一个障碍前的所有方格。\n>\n> 求有多少种在空地上放灯的方案，使得最多 $1$ 个空地没有被照亮，对 $10^9+7$ 取模。\n>\n> $nm \\le 250$\n\n$\\land$ 是逻辑与，$\\lor$ 是逻辑或。\n\n首先 $nm \\le 250 \\Rightarrow \\min\\{n,m\\} \\le 15$。\n\n如果 $n < m$，就可以将行列转置，问题不变，但 $m \\le 15$ 了。\n\n容易想到对每一行状压，状压一行中每个格子向上第一个障碍前是否有灯（即这个格子是否有向下的光）。\n\n这样时间复杂度过高，感觉行不通，于是考虑压轮廓线，按照从上到下，从左到右的顺序放灯。\n\n设 $f_{i\\,a,b,S}$ 表示目前**将要**决定格子 $i=(x,y)$ 放不放灯，$a$ 表示从 $i$ 向左第一个障碍前是（$1$）否（$0$）有灯（即 $i$ 左边是否有向右的光），$b$ 表示有几个目前**已决定**有没有放灯的空地没有被照亮，而 $S$ 是压的是第 $x$ 行前 $y-1$ 个格子和第 $x-1$ 行后 $m-y+1$ 个格子上是（$1$）否（$0$）有向下的光。\n\n图中的情况 $a = 0, b = 1, S = \\{0,0,1,0,1\\}$。\n\n![](https://i.loli.net/2021/03/26/3JZXsTfOdn2GyAe.png)\n\n转移就三种情况（先不考虑从一行最后一个格子转移到下一行第一个格子的情况）：\n\n- 格子 $i$ 是障碍，那么它会挡住向右和向下的光，形式化地：\n  $$\n  a \\rightarrow 0,S \\rightarrow S \\setminus \\{y\\}\\\\\n  $$\n  ```f[i][a][b][S]``` 转移到 ```f[nxt][0][b][~(~S | 1 << y)]```。\n\n- 格子 $i$ 是空地，在格子 $i$ 放灯，那么它会产生向右和向下的光。\n  $$\n  a \\rightarrow 1,S \\rightarrow S \\cup \\{y\\}\n  $$\n  ```f[i][a][b][S]``` 转移到 ```f[nxt][1][b][S | 1 << y]```\n\n- 格子 $i$ 是空地，不在格子 $i$ 放灯，那么还要考虑 $i$ 会不会被照亮。\n\n  如果 $a=1 \\lor y \\in S$，那么 $i$ 会被照亮，$a,b$ 和 $S$  都不变，否则 $i$ 不会被照亮， $b$ 必须为 0，转移后变为 $1$，$a$ 和 $S$ 不变。\n\n当 $i$ 是一行最后一个格子时，唯一区别是转移后 $a$ 变为 $0$，因此在代码里无需单独讨论。\n\n答案就是格子 $(n+1,1)$ 的所有 ```f``` 值之和，因为状态的定义是目前**将要**决定这个格子放不放灯。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n\nusing namespace std;\ntypedef long long ll;\nconst ll P = 1e9 + 7;\nint n, m, f[255][2][2][1 << 15]; char s[255][255];\n\nint main() {\n    cin >> n >> m;\n    For(i, 0, n) scanf(\"%s\", s[i]);\n    if(n < m) {\n        For(i, 0, n) For(j, i + 1, m) swap(s[i][j], s[j][i]);\n        swap(n, m);\n    }\n    f[0][0][0][0] = 1;\n    For(i, 0, n) For(j, 0, m) rep(a, 0, 1) rep(b, 0, 1) For(S, 0, 1 << m) {\n        int x = f[i * m + j][a][b][S], nxt = i * m + j + 1;\n        if(!x) continue;\n        if(s[i][j] == 'x') (f[nxt][0][b][~(~S | 1 << j)] += x) %= P;\n        else {\n            (f[nxt][j < m - 1][b][S | 1 << j] += x) %= P;\n            if(a | (S >> j & 1)) (f[nxt][a & (j < m - 1)][b][S] += x) %= P;\n            else if(!b) (f[nxt][0][1][S] += x) %= P;\n        }\n    }\n    int as = 0;\n    rep(b, 0, 1) For(S, 0, 1 << m) (as += f[n * m][0][b][S]) %= P;\n    cout << as;\n    return 0;\n}\n```","source":"_posts/CF845F.md","raw":"---\ntitle: Guards In The Storehouse | Codeforces 845F\ndate: 2021-03-26 14:52:36\nupdated: 2021-03-26 14:52:36\ntags: [动态规划,状压动态规划]\ncategories: Codeforces\n---\n> [题目链接](http://codeforces.com/problemset/problem/845/F)\n>\n> 给定一个 $n \\times m$ 的网格，有些位置是障碍，其他是空地。\n>\n> 在一个空地放灯可以照亮这个灯向右，向下第一个障碍前的所有方格。\n>\n> 求有多少种在空地上放灯的方案，使得最多 $1$ 个空地没有被照亮，对 $10^9+7$ 取模。\n>\n> $nm \\le 250$\n\n$\\land$ 是逻辑与，$\\lor$ 是逻辑或。\n\n首先 $nm \\le 250 \\Rightarrow \\min\\{n,m\\} \\le 15$。\n\n如果 $n < m$，就可以将行列转置，问题不变，但 $m \\le 15$ 了。\n\n容易想到对每一行状压，状压一行中每个格子向上第一个障碍前是否有灯（即这个格子是否有向下的光）。\n\n这样时间复杂度过高，感觉行不通，于是考虑压轮廓线，按照从上到下，从左到右的顺序放灯。\n\n设 $f_{i\\,a,b,S}$ 表示目前**将要**决定格子 $i=(x,y)$ 放不放灯，$a$ 表示从 $i$ 向左第一个障碍前是（$1$）否（$0$）有灯（即 $i$ 左边是否有向右的光），$b$ 表示有几个目前**已决定**有没有放灯的空地没有被照亮，而 $S$ 是压的是第 $x$ 行前 $y-1$ 个格子和第 $x-1$ 行后 $m-y+1$ 个格子上是（$1$）否（$0$）有向下的光。\n\n图中的情况 $a = 0, b = 1, S = \\{0,0,1,0,1\\}$。\n\n![](https://i.loli.net/2021/03/26/3JZXsTfOdn2GyAe.png)\n\n转移就三种情况（先不考虑从一行最后一个格子转移到下一行第一个格子的情况）：\n\n- 格子 $i$ 是障碍，那么它会挡住向右和向下的光，形式化地：\n  $$\n  a \\rightarrow 0,S \\rightarrow S \\setminus \\{y\\}\\\\\n  $$\n  ```f[i][a][b][S]``` 转移到 ```f[nxt][0][b][~(~S | 1 << y)]```。\n\n- 格子 $i$ 是空地，在格子 $i$ 放灯，那么它会产生向右和向下的光。\n  $$\n  a \\rightarrow 1,S \\rightarrow S \\cup \\{y\\}\n  $$\n  ```f[i][a][b][S]``` 转移到 ```f[nxt][1][b][S | 1 << y]```\n\n- 格子 $i$ 是空地，不在格子 $i$ 放灯，那么还要考虑 $i$ 会不会被照亮。\n\n  如果 $a=1 \\lor y \\in S$，那么 $i$ 会被照亮，$a,b$ 和 $S$  都不变，否则 $i$ 不会被照亮， $b$ 必须为 0，转移后变为 $1$，$a$ 和 $S$ 不变。\n\n当 $i$ 是一行最后一个格子时，唯一区别是转移后 $a$ 变为 $0$，因此在代码里无需单独讨论。\n\n答案就是格子 $(n+1,1)$ 的所有 ```f``` 值之和，因为状态的定义是目前**将要**决定这个格子放不放灯。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n\nusing namespace std;\ntypedef long long ll;\nconst ll P = 1e9 + 7;\nint n, m, f[255][2][2][1 << 15]; char s[255][255];\n\nint main() {\n    cin >> n >> m;\n    For(i, 0, n) scanf(\"%s\", s[i]);\n    if(n < m) {\n        For(i, 0, n) For(j, i + 1, m) swap(s[i][j], s[j][i]);\n        swap(n, m);\n    }\n    f[0][0][0][0] = 1;\n    For(i, 0, n) For(j, 0, m) rep(a, 0, 1) rep(b, 0, 1) For(S, 0, 1 << m) {\n        int x = f[i * m + j][a][b][S], nxt = i * m + j + 1;\n        if(!x) continue;\n        if(s[i][j] == 'x') (f[nxt][0][b][~(~S | 1 << j)] += x) %= P;\n        else {\n            (f[nxt][j < m - 1][b][S | 1 << j] += x) %= P;\n            if(a | (S >> j & 1)) (f[nxt][a & (j < m - 1)][b][S] += x) %= P;\n            else if(!b) (f[nxt][0][1][S] += x) %= P;\n        }\n    }\n    int as = 0;\n    rep(b, 0, 1) For(S, 0, 1 << m) (as += f[n * m][0][b][S]) %= P;\n    cout << as;\n    return 0;\n}\n```","slug":"CF845F","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxgzv0015ootn4pqv90ir","content":"<blockquote>\r\n<p><a href=\"http://codeforces.com/problemset/problem/845/F\">题目链接</a></p>\r\n<p>给定一个 <span class=\"math inline\">\\(n \\times m\\)</span> 的网格，有些位置是障碍，其他是空地。</p>\r\n<p>在一个空地放灯可以照亮这个灯向右，向下第一个障碍前的所有方格。</p>\r\n<p>求有多少种在空地上放灯的方案，使得最多 <span class=\"math inline\">\\(1\\)</span> 个空地没有被照亮，对 <span class=\"math inline\">\\(10^9+7\\)</span> 取模。</p>\r\n<p><span class=\"math inline\">\\(nm \\le 250\\)</span></p>\r\n</blockquote>\r\n<p><span class=\"math inline\">\\(\\land\\)</span> 是逻辑与，<span class=\"math inline\">\\(\\lor\\)</span> 是逻辑或。</p>\r\n<p>首先 <span class=\"math inline\">\\(nm \\le 250 \\Rightarrow \\min\\{n,m\\} \\le 15\\)</span>。</p>\r\n<p>如果 <span class=\"math inline\">\\(n &lt; m\\)</span>，就可以将行列转置，问题不变，但 <span class=\"math inline\">\\(m \\le 15\\)</span> 了。</p>\r\n<p>容易想到对每一行状压，状压一行中每个格子向上第一个障碍前是否有灯（即这个格子是否有向下的光）。</p>\r\n<p>这样时间复杂度过高，感觉行不通，于是考虑压轮廓线，按照从上到下，从左到右的顺序放灯。</p>\r\n<p>设 <span class=\"math inline\">\\(f_{i\\,a,b,S}\\)</span> 表示目前<strong>将要</strong>决定格子 <span class=\"math inline\">\\(i=(x,y)\\)</span> 放不放灯，<span class=\"math inline\">\\(a\\)</span> 表示从 <span class=\"math inline\">\\(i\\)</span> 向左第一个障碍前是（<span class=\"math inline\">\\(1\\)</span>）否（<span class=\"math inline\">\\(0\\)</span>）有灯（即 <span class=\"math inline\">\\(i\\)</span> 左边是否有向右的光），<span class=\"math inline\">\\(b\\)</span> 表示有几个目前<strong>已决定</strong>有没有放灯的空地没有被照亮，而 <span class=\"math inline\">\\(S\\)</span> 是压的是第 <span class=\"math inline\">\\(x\\)</span> 行前 <span class=\"math inline\">\\(y-1\\)</span> 个格子和第 <span class=\"math inline\">\\(x-1\\)</span> 行后 <span class=\"math inline\">\\(m-y+1\\)</span> 个格子上是（<span class=\"math inline\">\\(1\\)</span>）否（<span class=\"math inline\">\\(0\\)</span>）有向下的光。</p>\r\n<p>图中的情况 <span class=\"math inline\">\\(a = 0, b = 1, S = \\{0,0,1,0,1\\}\\)</span>。</p>\r\n<p><img src=\"https://i.loli.net/2021/03/26/3JZXsTfOdn2GyAe.png\" /></p>\r\n<p>转移就三种情况（先不考虑从一行最后一个格子转移到下一行第一个格子的情况）：</p>\r\n<ul>\r\n<li>格子 <span class=\"math inline\">\\(i\\)</span> 是障碍，那么它会挡住向右和向下的光，形式化地： <span class=\"math display\">\\[\r\na \\rightarrow 0,S \\rightarrow S \\setminus \\{y\\}\\\\\r\n\\]</span> <figure class=\"highlight plaintext\"><figcaption><span>转移到 ```f[nxt][0][b][~(~S | 1 << y)]```。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 格子 $i$ 是空地，在格子 $i$ 放灯，那么它会产生向右和向下的光。</span><br><span class=\"line\">  $$</span><br><span class=\"line\">  a \\rightarrow 1,S \\rightarrow S \\cup \\&#123;y\\&#125;</span><br><span class=\"line\">  $$</span><br><span class=\"line\">  ```f[i][a][b][S]``` 转移到 ```f[nxt][1][b][S | 1 &lt;&lt; y]```</span><br><span class=\"line\"></span><br><span class=\"line\">- 格子 $i$ 是空地，不在格子 $i$ 放灯，那么还要考虑 $i$ 会不会被照亮。</span><br><span class=\"line\"></span><br><span class=\"line\">  如果 $a=1 \\lor y \\in S$，那么 $i$ 会被照亮，$a,b$ 和 $S$  都不变，否则 $i$ 不会被照亮， $b$ 必须为 0，转移后变为 $1$，$a$ 和 $S$ 不变。</span><br><span class=\"line\"></span><br><span class=\"line\">当 $i$ 是一行最后一个格子时，唯一区别是转移后 $a$ 变为 $0$，因此在代码里无需单独讨论。</span><br><span class=\"line\"></span><br><span class=\"line\">答案就是格子 $(n+1,1)$ 的所有 ```f``` 值之和，因为状态的定义是目前**将要**决定这个格子放不放灯。</span><br><span class=\"line\"></span><br><span class=\"line\">代码：</span><br><span class=\"line\"></span><br><span class=\"line\">```cpp</span><br><span class=\"line\">#include &lt;bits/stdc++.h&gt;</span><br><span class=\"line\">#define rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span><br><span class=\"line\">#define per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span><br><span class=\"line\">#define mem(a, b) memset(a, b, sizeof a)</span><br><span class=\"line\">#define For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">typedef long long ll;</span><br><span class=\"line\">const ll P = 1e9 + 7;</span><br><span class=\"line\">int n, m, f[255][2][2][1 &lt;&lt; 15]; char s[255][255];</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    For(i, 0, n) scanf(&quot;%s&quot;, s[i]);</span><br><span class=\"line\">    if(n &lt; m) &#123;</span><br><span class=\"line\">        For(i, 0, n) For(j, i + 1, m) swap(s[i][j], s[j][i]);</span><br><span class=\"line\">        swap(n, m);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f[0][0][0][0] = 1;</span><br><span class=\"line\">    For(i, 0, n) For(j, 0, m) rep(a, 0, 1) rep(b, 0, 1) For(S, 0, 1 &lt;&lt; m) &#123;</span><br><span class=\"line\">        int x = f[i * m + j][a][b][S], nxt = i * m + j + 1;</span><br><span class=\"line\">        if(!x) continue;</span><br><span class=\"line\">        if(s[i][j] == &#x27;x&#x27;) (f[nxt][0][b][~(~S | 1 &lt;&lt; j)] += x) %= P;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            (f[nxt][j &lt; m - 1][b][S | 1 &lt;&lt; j] += x) %= P;</span><br><span class=\"line\">            if(a | (S &gt;&gt; j &amp; 1)) (f[nxt][a &amp; (j &lt; m - 1)][b][S] += x) %= P;</span><br><span class=\"line\">            else if(!b) (f[nxt][0][1][S] += x) %= P;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int as = 0;</span><br><span class=\"line\">    rep(b, 0, 1) For(S, 0, 1 &lt;&lt; m) (as += f[n * m][0][b][S]) %= P;</span><br><span class=\"line\">    cout &lt;&lt; as;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\r\n</ul>\r\n","site":{"data":{}},"length":709,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"http://codeforces.com/problemset/problem/845/F\">题目链接</a></p>\r\n<p>给定一个 <span class=\"math inline\">\\(n \\times m\\)</span> 的网格，有些位置是障碍，其他是空地。</p>\r\n<p>在一个空地放灯可以照亮这个灯向右，向下第一个障碍前的所有方格。</p>\r\n<p>求有多少种在空地上放灯的方案，使得最多 <span class=\"math inline\">\\(1\\)</span> 个空地没有被照亮，对 <span class=\"math inline\">\\(10^9+7\\)</span> 取模。</p>\r\n<p><span class=\"math inline\">\\(nm \\le 250\\)</span></p>\r\n</blockquote>\r\n<p><span class=\"math inline\">\\(\\land\\)</span> 是逻辑与，<span class=\"math inline\">\\(\\lor\\)</span> 是逻辑或。</p>\r\n<p>首先 <span class=\"math inline\">\\(nm \\le 250 \\Rightarrow \\min\\{n,m\\} \\le 15\\)</span>。</p>\r\n<p>如果 <span class=\"math inline\">\\(n &lt; m\\)</span>，就可以将行列转置，问题不变，但 <span class=\"math inline\">\\(m \\le 15\\)</span> 了。</p>\r\n<p>容易想到对每一行状压，状压一行中每个格子向上第一个障碍前是否有灯（即这个格子是否有向下的光）。</p>\r\n<p>这样时间复杂度过高，感觉行不通，于是考虑压轮廓线，按照从上到下，从左到右的顺序放灯。</p>\r\n<p>设 <span class=\"math inline\">\\(f_{i\\,a,b,S}\\)</span> 表示目前<strong>将要</strong>决定格子 <span class=\"math inline\">\\(i=(x,y)\\)</span> 放不放灯，<span class=\"math inline\">\\(a\\)</span> 表示从 <span class=\"math inline\">\\(i\\)</span> 向左第一个障碍前是（<span class=\"math inline\">\\(1\\)</span>）否（<span class=\"math inline\">\\(0\\)</span>）有灯（即 <span class=\"math inline\">\\(i\\)</span> 左边是否有向右的光），<span class=\"math inline\">\\(b\\)</span> 表示有几个目前<strong>已决定</strong>有没有放灯的空地没有被照亮，而 <span class=\"math inline\">\\(S\\)</span> 是压的是第 <span class=\"math inline\">\\(x\\)</span> 行前 <span class=\"math inline\">\\(y-1\\)</span> 个格子和第 <span class=\"math inline\">\\(x-1\\)</span> 行后 <span class=\"math inline\">\\(m-y+1\\)</span> 个格子上是（<span class=\"math inline\">\\(1\\)</span>）否（<span class=\"math inline\">\\(0\\)</span>）有向下的光。</p>\r\n<p>图中的情况 <span class=\"math inline\">\\(a = 0, b = 1, S = \\{0,0,1,0,1\\}\\)</span>。</p>\r\n<p><img src=\"https://i.loli.net/2021/03/26/3JZXsTfOdn2GyAe.png\" /></p>\r\n<p>转移就三种情况（先不考虑从一行最后一个格子转移到下一行第一个格子的情况）：</p>\r\n<ul>\r\n<li>格子 <span class=\"math inline\">\\(i\\)</span> 是障碍，那么它会挡住向右和向下的光，形式化地： <span class=\"math display\">\\[\r\na \\rightarrow 0,S \\rightarrow S \\setminus \\{y\\}\\\\\r\n\\]</span> <figure class=\"highlight plaintext\"><figcaption><span>转移到 ```f[nxt][0][b][~(~S | 1 << y)]```。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 格子 $i$ 是空地，在格子 $i$ 放灯，那么它会产生向右和向下的光。</span><br><span class=\"line\">  $$</span><br><span class=\"line\">  a \\rightarrow 1,S \\rightarrow S \\cup \\&#123;y\\&#125;</span><br><span class=\"line\">  $$</span><br><span class=\"line\">  ```f[i][a][b][S]``` 转移到 ```f[nxt][1][b][S | 1 &lt;&lt; y]```</span><br><span class=\"line\"></span><br><span class=\"line\">- 格子 $i$ 是空地，不在格子 $i$ 放灯，那么还要考虑 $i$ 会不会被照亮。</span><br><span class=\"line\"></span><br><span class=\"line\">  如果 $a=1 \\lor y \\in S$，那么 $i$ 会被照亮，$a,b$ 和 $S$  都不变，否则 $i$ 不会被照亮， $b$ 必须为 0，转移后变为 $1$，$a$ 和 $S$ 不变。</span><br><span class=\"line\"></span><br><span class=\"line\">当 $i$ 是一行最后一个格子时，唯一区别是转移后 $a$ 变为 $0$，因此在代码里无需单独讨论。</span><br><span class=\"line\"></span><br><span class=\"line\">答案就是格子 $(n+1,1)$ 的所有 ```f``` 值之和，因为状态的定义是目前**将要**决定这个格子放不放灯。</span><br><span class=\"line\"></span><br><span class=\"line\">代码：</span><br><span class=\"line\"></span><br><span class=\"line\">```cpp</span><br><span class=\"line\">#include &lt;bits/stdc++.h&gt;</span><br><span class=\"line\">#define rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span><br><span class=\"line\">#define per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span><br><span class=\"line\">#define mem(a, b) memset(a, b, sizeof a)</span><br><span class=\"line\">#define For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">typedef long long ll;</span><br><span class=\"line\">const ll P = 1e9 + 7;</span><br><span class=\"line\">int n, m, f[255][2][2][1 &lt;&lt; 15]; char s[255][255];</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    For(i, 0, n) scanf(&quot;%s&quot;, s[i]);</span><br><span class=\"line\">    if(n &lt; m) &#123;</span><br><span class=\"line\">        For(i, 0, n) For(j, i + 1, m) swap(s[i][j], s[j][i]);</span><br><span class=\"line\">        swap(n, m);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f[0][0][0][0] = 1;</span><br><span class=\"line\">    For(i, 0, n) For(j, 0, m) rep(a, 0, 1) rep(b, 0, 1) For(S, 0, 1 &lt;&lt; m) &#123;</span><br><span class=\"line\">        int x = f[i * m + j][a][b][S], nxt = i * m + j + 1;</span><br><span class=\"line\">        if(!x) continue;</span><br><span class=\"line\">        if(s[i][j] == &#x27;x&#x27;) (f[nxt][0][b][~(~S | 1 &lt;&lt; j)] += x) %= P;</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            (f[nxt][j &lt; m - 1][b][S | 1 &lt;&lt; j] += x) %= P;</span><br><span class=\"line\">            if(a | (S &gt;&gt; j &amp; 1)) (f[nxt][a &amp; (j &lt; m - 1)][b][S] += x) %= P;</span><br><span class=\"line\">            else if(!b) (f[nxt][0][1][S] += x) %= P;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int as = 0;</span><br><span class=\"line\">    rep(b, 0, 1) For(S, 0, 1 &lt;&lt; m) (as += f[n * m][0][b][S]) %= P;</span><br><span class=\"line\">    cout &lt;&lt; as;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\r\n</ul>\r\n"},{"title":"Yura and Developers | Codeforces 549F","date":"2021-04-23T00:22:10.000Z","updated":"2021-04-23T00:22:10.000Z","_content":"> [题目链接](https://codeforces.com/contest/549/problem/F)\n>\n> 给定一个长度为 $n$ 的序列和数 $k$，求有多少长度大于 $1$ 的区间满足和减最大值是 $k$ 的倍数。\n>\n> $n \\le 3 \\cdot 10^5,k \\le 10^6,a_i \\le 10^9$\n\n先求出前缀和数组 $pre$。\n\n则条件可以写成 $pre_r \\equiv pre_{l-1} + \\max \\pmod k$。\n\n把 $i$ 插入 $\\text{vector}[pre_i \\bmod k]$，通过二分可以快速查询区间中有多少前缀和模 $k$ 余 $x$。\n\n求出整个序列的最大值的位置为 $x$。\n\n然后枚举 $x$ 左边的前缀和，查询 $x$ 右边有多少个前缀和与之配对。\n\n因为 $x$ 的位置不确定，所以这样是 $O(n^2\\log n)$。\n\n但如果每次枚举左右中较短的一段，则复杂度可降为 $O(n \\log^2 n)$。\n\n其实不用真的分治，只需要单调栈求出每个位置作为最大值的极大区间即可。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\ntypedef long long ll;\nconst int N = 3e5 + 5;\nint n, K, a[N], L[N], R[N], su[N];\nvector <int> v[1000000];\nint main() {\n    cin >> n >> K;\n    rep(i, 1, n) scanf(\"%d\", &a[i]);\n    v[0].pb(0);\n    rep(i, 1, n) su[i] = (su[i - 1] + a[i]) % K, v[su[i]].pb(i);\n    rep(i, 1, n) for(int& j = L[i] = i - 1; j && a[j] <= a[i]; j = L[j]);\n    per(i, n, 1) for(int& j = R[i] = i + 1; j <= n && a[j] < a[i]; j = R[j]);\n    long long as = 0;\n    rep(i, 1, n) if(i - L[i] < R[i] - i) For(j, L[i], i) {\n        int t = (su[j] + a[i]) % K;\n        #define lb lower_bound\n        #define all v[t].begin(), v[t].end()\n        as += lb(all, R[i]) - lb(all, i);\n    } else For(j, i, R[i]) {\n        int t = ((su[j] - a[i]) % K + K) % K;\n        as += lb(all, i) - lb(all, L[i]);\n    }\n    cout << as - n;    \n    return 0;\n}\n```","source":"_posts/CF549F.md","raw":"---\ntitle: Yura and Developers | Codeforces 549F\ndate: 2021-04-23 08:22:10\nupdated: 2021-04-23 08:22:10\ntags: [分治]\ncategories: Codeforces\n---\n> [题目链接](https://codeforces.com/contest/549/problem/F)\n>\n> 给定一个长度为 $n$ 的序列和数 $k$，求有多少长度大于 $1$ 的区间满足和减最大值是 $k$ 的倍数。\n>\n> $n \\le 3 \\cdot 10^5,k \\le 10^6,a_i \\le 10^9$\n\n先求出前缀和数组 $pre$。\n\n则条件可以写成 $pre_r \\equiv pre_{l-1} + \\max \\pmod k$。\n\n把 $i$ 插入 $\\text{vector}[pre_i \\bmod k]$，通过二分可以快速查询区间中有多少前缀和模 $k$ 余 $x$。\n\n求出整个序列的最大值的位置为 $x$。\n\n然后枚举 $x$ 左边的前缀和，查询 $x$ 右边有多少个前缀和与之配对。\n\n因为 $x$ 的位置不确定，所以这样是 $O(n^2\\log n)$。\n\n但如果每次枚举左右中较短的一段，则复杂度可降为 $O(n \\log^2 n)$。\n\n其实不用真的分治，只需要单调栈求出每个位置作为最大值的极大区间即可。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\ntypedef long long ll;\nconst int N = 3e5 + 5;\nint n, K, a[N], L[N], R[N], su[N];\nvector <int> v[1000000];\nint main() {\n    cin >> n >> K;\n    rep(i, 1, n) scanf(\"%d\", &a[i]);\n    v[0].pb(0);\n    rep(i, 1, n) su[i] = (su[i - 1] + a[i]) % K, v[su[i]].pb(i);\n    rep(i, 1, n) for(int& j = L[i] = i - 1; j && a[j] <= a[i]; j = L[j]);\n    per(i, n, 1) for(int& j = R[i] = i + 1; j <= n && a[j] < a[i]; j = R[j]);\n    long long as = 0;\n    rep(i, 1, n) if(i - L[i] < R[i] - i) For(j, L[i], i) {\n        int t = (su[j] + a[i]) % K;\n        #define lb lower_bound\n        #define all v[t].begin(), v[t].end()\n        as += lb(all, R[i]) - lb(all, i);\n    } else For(j, i, R[i]) {\n        int t = ((su[j] - a[i]) % K + K) % K;\n        as += lb(all, i) - lb(all, L[i]);\n    }\n    cout << as - n;    \n    return 0;\n}\n```","slug":"CF549F","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxgzw0019ootn9cet8kv2","content":"<blockquote>\r\n<p><a href=\"https://codeforces.com/contest/549/problem/F\">题目链接</a></p>\r\n<p>给定一个长度为 <span class=\"math inline\">\\(n\\)</span> 的序列和数 <span class=\"math inline\">\\(k\\)</span>，求有多少长度大于 <span class=\"math inline\">\\(1\\)</span> 的区间满足和减最大值是 <span class=\"math inline\">\\(k\\)</span> 的倍数。</p>\r\n<p><span class=\"math inline\">\\(n \\le 3 \\cdot 10^5,k \\le 10^6,a_i \\le 10^9\\)</span></p>\r\n</blockquote>\r\n<p>先求出前缀和数组 <span class=\"math inline\">\\(pre\\)</span>。</p>\r\n<p>则条件可以写成 <span class=\"math inline\">\\(pre_r \\equiv pre_{l-1} + \\max \\pmod k\\)</span>。</p>\r\n<p>把 <span class=\"math inline\">\\(i\\)</span> 插入 <span class=\"math inline\">\\(\\text{vector}[pre_i \\bmod k]\\)</span>，通过二分可以快速查询区间中有多少前缀和模 <span class=\"math inline\">\\(k\\)</span> 余 <span class=\"math inline\">\\(x\\)</span>。</p>\r\n<p>求出整个序列的最大值的位置为 <span class=\"math inline\">\\(x\\)</span>。</p>\r\n<p>然后枚举 <span class=\"math inline\">\\(x\\)</span> 左边的前缀和，查询 <span class=\"math inline\">\\(x\\)</span> 右边有多少个前缀和与之配对。</p>\r\n<p>因为 <span class=\"math inline\">\\(x\\)</span> 的位置不确定，所以这样是 <span class=\"math inline\">\\(O(n^2\\log n)\\)</span>。</p>\r\n<p>但如果每次枚举左右中较短的一段，则复杂度可降为 <span class=\"math inline\">\\(O(n \\log^2 n)\\)</span>。</p>\r\n<p>其实不用真的分治，只需要单调栈求出每个位置作为最大值的极大区间即可。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">3e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, K, a[N], L[N], R[N], su[N];</span><br><span class=\"line\">vector &lt;<span class=\"keyword\">int</span>&gt; v[<span class=\"number\">1000000</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; K;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">    v[<span class=\"number\">0</span>].<span class=\"built_in\">pb</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) su[i] = (su[i - <span class=\"number\">1</span>] + a[i]) % K, v[su[i]].<span class=\"built_in\">pb</span>(i);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>&amp; j = L[i] = i - <span class=\"number\">1</span>; j &amp;&amp; a[j] &lt;= a[i]; j = L[j]);</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, n, <span class=\"number\">1</span>) <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>&amp; j = R[i] = i + <span class=\"number\">1</span>; j &lt;= n &amp;&amp; a[j] &lt; a[i]; j = R[j]);</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> as = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"keyword\">if</span>(i - L[i] &lt; R[i] - i) <span class=\"built_in\">For</span>(j, L[i], i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> t = (su[j] + a[i]) % K;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">define</span> lb lower_bound</span></span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">define</span> all v[t].begin(), v[t].end()</span></span><br><span class=\"line\">        as += <span class=\"built_in\">lb</span>(all, R[i]) - <span class=\"built_in\">lb</span>(all, i);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"built_in\">For</span>(j, i, R[i]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> t = ((su[j] - a[i]) % K + K) % K;</span><br><span class=\"line\">        as += <span class=\"built_in\">lb</span>(all, i) - <span class=\"built_in\">lb</span>(all, L[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; as - n;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":1337,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"https://codeforces.com/contest/549/problem/F\">题目链接</a></p>\r\n<p>给定一个长度为 <span class=\"math inline\">\\(n\\)</span> 的序列和数 <span class=\"math inline\">\\(k\\)</span>，求有多少长度大于 <span class=\"math inline\">\\(1\\)</span> 的区间满足和减最大值是 <span class=\"math inline\">\\(k\\)</span> 的倍数。</p>\r\n<p><span class=\"math inline\">\\(n \\le 3 \\cdot 10^5,k \\le 10^6,a_i \\le 10^9\\)</span></p>\r\n</blockquote>\r\n<p>先求出前缀和数组 <span class=\"math inline\">\\(pre\\)</span>。</p>\r\n<p>则条件可以写成 <span class=\"math inline\">\\(pre_r \\equiv pre_{l-1} + \\max \\pmod k\\)</span>。</p>\r\n<p>把 <span class=\"math inline\">\\(i\\)</span> 插入 <span class=\"math inline\">\\(\\text{vector}[pre_i \\bmod k]\\)</span>，通过二分可以快速查询区间中有多少前缀和模 <span class=\"math inline\">\\(k\\)</span> 余 <span class=\"math inline\">\\(x\\)</span>。</p>\r\n<p>求出整个序列的最大值的位置为 <span class=\"math inline\">\\(x\\)</span>。</p>\r\n<p>然后枚举 <span class=\"math inline\">\\(x\\)</span> 左边的前缀和，查询 <span class=\"math inline\">\\(x\\)</span> 右边有多少个前缀和与之配对。</p>\r\n<p>因为 <span class=\"math inline\">\\(x\\)</span> 的位置不确定，所以这样是 <span class=\"math inline\">\\(O(n^2\\log n)\\)</span>。</p>\r\n<p>但如果每次枚举左右中较短的一段，则复杂度可降为 <span class=\"math inline\">\\(O(n \\log^2 n)\\)</span>。</p>\r\n<p>其实不用真的分治，只需要单调栈求出每个位置作为最大值的极大区间即可。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">3e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, K, a[N], L[N], R[N], su[N];</span><br><span class=\"line\">vector &lt;<span class=\"keyword\">int</span>&gt; v[<span class=\"number\">1000000</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; K;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">    v[<span class=\"number\">0</span>].<span class=\"built_in\">pb</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) su[i] = (su[i - <span class=\"number\">1</span>] + a[i]) % K, v[su[i]].<span class=\"built_in\">pb</span>(i);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>&amp; j = L[i] = i - <span class=\"number\">1</span>; j &amp;&amp; a[j] &lt;= a[i]; j = L[j]);</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, n, <span class=\"number\">1</span>) <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>&amp; j = R[i] = i + <span class=\"number\">1</span>; j &lt;= n &amp;&amp; a[j] &lt; a[i]; j = R[j]);</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> as = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"keyword\">if</span>(i - L[i] &lt; R[i] - i) <span class=\"built_in\">For</span>(j, L[i], i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> t = (su[j] + a[i]) % K;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">define</span> lb lower_bound</span></span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">define</span> all v[t].begin(), v[t].end()</span></span><br><span class=\"line\">        as += <span class=\"built_in\">lb</span>(all, R[i]) - <span class=\"built_in\">lb</span>(all, i);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"built_in\">For</span>(j, i, R[i]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> t = ((su[j] - a[i]) % K + K) % K;</span><br><span class=\"line\">        as += <span class=\"built_in\">lb</span>(all, i) - <span class=\"built_in\">lb</span>(all, L[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; as - n;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"Case of Computer Network | Codeforces 555E","date":"2021-04-03T13:15:06.000Z","updated":"2021-04-03T13:15:06.000Z","_content":"> [题目链接](https://codeforces.com/contest/555/problem/E)\n>\n> 给定一张 $n$ 个点 $m$ 条边的无向图和 $q$ 组有序点对 $(s_i,t_i)$。\n>\n> 询问是否可以给每条边定向，使得所有的 $s_i$ 都能到达 $t_i$。\n>\n> $n,m,q \\le 2 \\cdot 10^5$ 不保证图连通，可能有重边。\n\n先假设有解，尝试求出一组解，再判定这组解合不合法。\n\n### 构造解\n\n一个经典结论：\n\n> 一个**边双连通分量**存在一种给每条边定向的方案，使之成为**强连通分量**。\n>\n> 一个**强连通分量**把有向边变成无向边后成为**边双连通分量**。\n\n对于前者直接让树边向下，反向边向上即可。\n\n对于后者考虑一条有向边的两个端点可以相互到达，推出这条边在一个简单环上。\n\n把图中的边双全部定向成强连通分量，接下来只需要给所有**桥**定向，以使 $s_i$ 所在的边双能到达 $t_i$ 所在的边双。\n\n其实无需求边双，只需求出哪些边是桥即可，**由于此题有重边，```tarjan``` 算法应当记录上一条边而不是父亲**。 \n\n建出 ```dfs``` 树，对于每组 $(s_i,t_i)$，要求 $s_i$ 到 $t_i$ 路径上的桥由 $s_i$ 指向 $t_i$。\n\n让 $s_i \\rightarrow lca$ 上的边 $+1$，$lca \\rightarrow t_i$ 上的边 $-1$，树上差分转换为 $s_i$ 处 $+1$，$t_i$ 处 $-1$，$lca$ 处不变。\n\n![](https://i.loli.net/2021/04/03/t6zWCK1xuaEgcb5.png)\n\n一条边的最终权值如果为正，则必须向上，为负则必须向下，为 $0$ 则都可以。\n\n### 判定\n\n检验 $s_i \\rightarrow lca$ 上的边是否全部为正，$lca \\rightarrow t_i$ 上的边是否全部为负。\n\n记 $up_u$ 表示从 $u$ 开始只经过非桥边和权值为**正**的桥边能到达的深度最小的结点。\n\n$down_u$ 表示从 $u$ 开始只经过非桥边和权值为**负**的桥边能到达的深度最小的结点。\n\n如果 $up_{s_i}$ 和 $down_{t_i}$ 中深度较大者是 $s_i$ 和 $t_i$ 的公共祖先 $(s_i,t_i)$ 就合法，使用 ```dfs``` 序可判定。\n\n复杂度 $O(n)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n\nusing namespace std;\nconst int N = 2e5 + 5;\nint n, m, q, idx, dfn[N], suf[N], cut[N];\nvector <pair <int, int>> G[N];\nint vis[N], sz[N], s[N], t[N], up[N], down[N];\nint dfs(int u, int lst) {\n    int lowu = dfn[u] = ++idx;\n    for(auto [v, w] : G[u]) if(!dfn[v]) {\n        int lowv = dfs(v, w);\n        lowu = min(lowu, lowv), cut[v] = lowv > dfn[u];\n    } else if(w ^ lst && dfn[v] < dfn[u]) lowu = min(lowu, dfn[v]);\n    suf[u] = idx;\n    return lowu;\n}\nvoid Dfs(int u) {\n    vis[u] = 1;\n    for(auto [v, w] : G[u]) if(!vis[v]) Dfs(v), sz[u] += sz[v];\n}\nvoid DFs(int u, int fa) {\n    vis[u] = 1, up[u] = up[fa], down[u] = down[fa];\n    if(!fa || (cut[u] && sz[u] <= 0)) up[u] = u;\n    if(!fa || (cut[u] && sz[u] >= 0)) down[u] = u;\n    for(auto [v, w] : G[u]) if(!vis[v]) DFs(v, u);\n}\nint main() {\n    cin >> n >> m >> q; \n    int u, v;\n    rep(i, 1, m) {\n        scanf(\"%d%d\", &u, &v);\n        G[u].push_back({v, ++idx}), G[v].push_back({u, idx});\n    }\n    idx = 0;\n    rep(i, 1, n) if(!dfn[i]) dfs(i, 0);\n    rep(i, 1, q) scanf(\"%d%d\", &s[i], &t[i]), sz[s[i]]++, sz[t[i]]--;\n    rep(i, 1, n) if(!vis[i]) Dfs(i);\n    mem(vis, 0);\n    rep(i, 1, n) if(!vis[i]) DFs(i, 0);\n    rep(i, 1, q) {\n        int lca = dfn[up[s[i]]] > dfn[down[t[i]]] ? up[s[i]] : down[t[i]];\n        if(dfn[s[i]] > dfn[t[i]]) swap(s[i], t[i]);\n        if(dfn[s[i]] < dfn[lca] || dfn[t[i]] > suf[lca]) puts(\"No\"), exit(0);\n    }\n    puts(\"Yes\");\n    return 0;\n}\n```","source":"_posts/CF555E.md","raw":"---\ntitle: Case of Computer Network | Codeforces 555E\ndate: 2021-04-03 21:15:06\nupdated: 2021-04-03 21:15:06\ntags: [图论,边双连通分量,树上差分]\ncategories: Codeforces\n---\n> [题目链接](https://codeforces.com/contest/555/problem/E)\n>\n> 给定一张 $n$ 个点 $m$ 条边的无向图和 $q$ 组有序点对 $(s_i,t_i)$。\n>\n> 询问是否可以给每条边定向，使得所有的 $s_i$ 都能到达 $t_i$。\n>\n> $n,m,q \\le 2 \\cdot 10^5$ 不保证图连通，可能有重边。\n\n先假设有解，尝试求出一组解，再判定这组解合不合法。\n\n### 构造解\n\n一个经典结论：\n\n> 一个**边双连通分量**存在一种给每条边定向的方案，使之成为**强连通分量**。\n>\n> 一个**强连通分量**把有向边变成无向边后成为**边双连通分量**。\n\n对于前者直接让树边向下，反向边向上即可。\n\n对于后者考虑一条有向边的两个端点可以相互到达，推出这条边在一个简单环上。\n\n把图中的边双全部定向成强连通分量，接下来只需要给所有**桥**定向，以使 $s_i$ 所在的边双能到达 $t_i$ 所在的边双。\n\n其实无需求边双，只需求出哪些边是桥即可，**由于此题有重边，```tarjan``` 算法应当记录上一条边而不是父亲**。 \n\n建出 ```dfs``` 树，对于每组 $(s_i,t_i)$，要求 $s_i$ 到 $t_i$ 路径上的桥由 $s_i$ 指向 $t_i$。\n\n让 $s_i \\rightarrow lca$ 上的边 $+1$，$lca \\rightarrow t_i$ 上的边 $-1$，树上差分转换为 $s_i$ 处 $+1$，$t_i$ 处 $-1$，$lca$ 处不变。\n\n![](https://i.loli.net/2021/04/03/t6zWCK1xuaEgcb5.png)\n\n一条边的最终权值如果为正，则必须向上，为负则必须向下，为 $0$ 则都可以。\n\n### 判定\n\n检验 $s_i \\rightarrow lca$ 上的边是否全部为正，$lca \\rightarrow t_i$ 上的边是否全部为负。\n\n记 $up_u$ 表示从 $u$ 开始只经过非桥边和权值为**正**的桥边能到达的深度最小的结点。\n\n$down_u$ 表示从 $u$ 开始只经过非桥边和权值为**负**的桥边能到达的深度最小的结点。\n\n如果 $up_{s_i}$ 和 $down_{t_i}$ 中深度较大者是 $s_i$ 和 $t_i$ 的公共祖先 $(s_i,t_i)$ 就合法，使用 ```dfs``` 序可判定。\n\n复杂度 $O(n)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n\nusing namespace std;\nconst int N = 2e5 + 5;\nint n, m, q, idx, dfn[N], suf[N], cut[N];\nvector <pair <int, int>> G[N];\nint vis[N], sz[N], s[N], t[N], up[N], down[N];\nint dfs(int u, int lst) {\n    int lowu = dfn[u] = ++idx;\n    for(auto [v, w] : G[u]) if(!dfn[v]) {\n        int lowv = dfs(v, w);\n        lowu = min(lowu, lowv), cut[v] = lowv > dfn[u];\n    } else if(w ^ lst && dfn[v] < dfn[u]) lowu = min(lowu, dfn[v]);\n    suf[u] = idx;\n    return lowu;\n}\nvoid Dfs(int u) {\n    vis[u] = 1;\n    for(auto [v, w] : G[u]) if(!vis[v]) Dfs(v), sz[u] += sz[v];\n}\nvoid DFs(int u, int fa) {\n    vis[u] = 1, up[u] = up[fa], down[u] = down[fa];\n    if(!fa || (cut[u] && sz[u] <= 0)) up[u] = u;\n    if(!fa || (cut[u] && sz[u] >= 0)) down[u] = u;\n    for(auto [v, w] : G[u]) if(!vis[v]) DFs(v, u);\n}\nint main() {\n    cin >> n >> m >> q; \n    int u, v;\n    rep(i, 1, m) {\n        scanf(\"%d%d\", &u, &v);\n        G[u].push_back({v, ++idx}), G[v].push_back({u, idx});\n    }\n    idx = 0;\n    rep(i, 1, n) if(!dfn[i]) dfs(i, 0);\n    rep(i, 1, q) scanf(\"%d%d\", &s[i], &t[i]), sz[s[i]]++, sz[t[i]]--;\n    rep(i, 1, n) if(!vis[i]) Dfs(i);\n    mem(vis, 0);\n    rep(i, 1, n) if(!vis[i]) DFs(i, 0);\n    rep(i, 1, q) {\n        int lca = dfn[up[s[i]]] > dfn[down[t[i]]] ? up[s[i]] : down[t[i]];\n        if(dfn[s[i]] > dfn[t[i]]) swap(s[i], t[i]);\n        if(dfn[s[i]] < dfn[lca] || dfn[t[i]] > suf[lca]) puts(\"No\"), exit(0);\n    }\n    puts(\"Yes\");\n    return 0;\n}\n```","slug":"CF555E","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxgzx001bootn9hy4h0le","content":"<blockquote>\r\n<p><a href=\"https://codeforces.com/contest/555/problem/E\">题目链接</a></p>\r\n<p>给定一张 <span class=\"math inline\">\\(n\\)</span> 个点 <span class=\"math inline\">\\(m\\)</span> 条边的无向图和 <span class=\"math inline\">\\(q\\)</span> 组有序点对 <span class=\"math inline\">\\((s_i,t_i)\\)</span>。</p>\r\n<p>询问是否可以给每条边定向，使得所有的 <span class=\"math inline\">\\(s_i\\)</span> 都能到达 <span class=\"math inline\">\\(t_i\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(n,m,q \\le 2 \\cdot 10^5\\)</span> 不保证图连通，可能有重边。</p>\r\n</blockquote>\r\n<p>先假设有解，尝试求出一组解，再判定这组解合不合法。</p>\r\n<h3 id=\"构造解\">构造解</h3>\r\n<p>一个经典结论：</p>\r\n<blockquote>\r\n<p>一个<strong>边双连通分量</strong>存在一种给每条边定向的方案，使之成为<strong>强连通分量</strong>。</p>\r\n<p>一个<strong>强连通分量</strong>把有向边变成无向边后成为<strong>边双连通分量</strong>。</p>\r\n</blockquote>\r\n<p>对于前者直接让树边向下，反向边向上即可。</p>\r\n<p>对于后者考虑一条有向边的两个端点可以相互到达，推出这条边在一个简单环上。</p>\r\n<p>把图中的边双全部定向成强连通分量，接下来只需要给所有<strong>桥</strong>定向，以使 <span class=\"math inline\">\\(s_i\\)</span> 所在的边双能到达 <span class=\"math inline\">\\(t_i\\)</span> 所在的边双。</p>\r\n<p>其实无需求边双，只需求出哪些边是桥即可，<strong>由于此题有重边，<code>tarjan</code> 算法应当记录上一条边而不是父亲</strong>。</p>\r\n<p>建出 <code>dfs</code> 树，对于每组 <span class=\"math inline\">\\((s_i,t_i)\\)</span>，要求 <span class=\"math inline\">\\(s_i\\)</span> 到 <span class=\"math inline\">\\(t_i\\)</span> 路径上的桥由 <span class=\"math inline\">\\(s_i\\)</span> 指向 <span class=\"math inline\">\\(t_i\\)</span>。</p>\r\n<p>让 <span class=\"math inline\">\\(s_i \\rightarrow lca\\)</span> 上的边 <span class=\"math inline\">\\(+1\\)</span>，<span class=\"math inline\">\\(lca \\rightarrow t_i\\)</span> 上的边 <span class=\"math inline\">\\(-1\\)</span>，树上差分转换为 <span class=\"math inline\">\\(s_i\\)</span> 处 <span class=\"math inline\">\\(+1\\)</span>，<span class=\"math inline\">\\(t_i\\)</span> 处 <span class=\"math inline\">\\(-1\\)</span>，<span class=\"math inline\">\\(lca\\)</span> 处不变。</p>\r\n<p><img src=\"https://i.loli.net/2021/04/03/t6zWCK1xuaEgcb5.png\" /></p>\r\n<p>一条边的最终权值如果为正，则必须向上，为负则必须向下，为 <span class=\"math inline\">\\(0\\)</span> 则都可以。</p>\r\n<h3 id=\"判定\">判定</h3>\r\n<p>检验 <span class=\"math inline\">\\(s_i \\rightarrow lca\\)</span> 上的边是否全部为正，<span class=\"math inline\">\\(lca \\rightarrow t_i\\)</span> 上的边是否全部为负。</p>\r\n<p>记 <span class=\"math inline\">\\(up_u\\)</span> 表示从 <span class=\"math inline\">\\(u\\)</span> 开始只经过非桥边和权值为<strong>正</strong>的桥边能到达的深度最小的结点。</p>\r\n<p><span class=\"math inline\">\\(down_u\\)</span> 表示从 <span class=\"math inline\">\\(u\\)</span> 开始只经过非桥边和权值为<strong>负</strong>的桥边能到达的深度最小的结点。</p>\r\n<p>如果 <span class=\"math inline\">\\(up_{s_i}\\)</span> 和 <span class=\"math inline\">\\(down_{t_i}\\)</span> 中深度较大者是 <span class=\"math inline\">\\(s_i\\)</span> 和 <span class=\"math inline\">\\(t_i\\)</span> 的公共祖先 <span class=\"math inline\">\\((s_i,t_i)\\)</span> 就合法，使用 <code>dfs</code> 序可判定。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, q, idx, dfn[N], suf[N], cut[N];</span><br><span class=\"line\">vector &lt;pair &lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; G[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> vis[N], sz[N], s[N], t[N], up[N], down[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> lst)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lowu = dfn[u] = ++idx;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [v, w] : G[u]) <span class=\"keyword\">if</span>(!dfn[v]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lowv = <span class=\"built_in\">dfs</span>(v, w);</span><br><span class=\"line\">        lowu = <span class=\"built_in\">min</span>(lowu, lowv), cut[v] = lowv &gt; dfn[u];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(w ^ lst &amp;&amp; dfn[v] &lt; dfn[u]) lowu = <span class=\"built_in\">min</span>(lowu, dfn[v]);</span><br><span class=\"line\">    suf[u] = idx;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lowu;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">    vis[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [v, w] : G[u]) <span class=\"keyword\">if</span>(!vis[v]) <span class=\"built_in\">Dfs</span>(v), sz[u] += sz[v];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DFs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">    vis[u] = <span class=\"number\">1</span>, up[u] = up[fa], down[u] = down[fa];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!fa || (cut[u] &amp;&amp; sz[u] &lt;= <span class=\"number\">0</span>)) up[u] = u;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!fa || (cut[u] &amp;&amp; sz[u] &gt;= <span class=\"number\">0</span>)) down[u] = u;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [v, w] : G[u]) <span class=\"keyword\">if</span>(!vis[v]) <span class=\"built_in\">DFs</span>(v, u);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q; </span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class=\"line\">        G[u].<span class=\"built_in\">push_back</span>(&#123;v, ++idx&#125;), G[v].<span class=\"built_in\">push_back</span>(&#123;u, idx&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"keyword\">if</span>(!dfn[i]) <span class=\"built_in\">dfs</span>(i, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, q) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;s[i], &amp;t[i]), sz[s[i]]++, sz[t[i]]--;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"keyword\">if</span>(!vis[i]) <span class=\"built_in\">Dfs</span>(i);</span><br><span class=\"line\">    <span class=\"built_in\">mem</span>(vis, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"keyword\">if</span>(!vis[i]) <span class=\"built_in\">DFs</span>(i, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, q) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lca = dfn[up[s[i]]] &gt; dfn[down[t[i]]] ? up[s[i]] : down[t[i]];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dfn[s[i]] &gt; dfn[t[i]]) <span class=\"built_in\">swap</span>(s[i], t[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dfn[s[i]] &lt; dfn[lca] || dfn[t[i]] &gt; suf[lca]) <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;No&quot;</span>), <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Yes&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":2418,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"https://codeforces.com/contest/555/problem/E\">题目链接</a></p>\r\n<p>给定一张 <span class=\"math inline\">\\(n\\)</span> 个点 <span class=\"math inline\">\\(m\\)</span> 条边的无向图和 <span class=\"math inline\">\\(q\\)</span> 组有序点对 <span class=\"math inline\">\\((s_i,t_i)\\)</span>。</p>\r\n<p>询问是否可以给每条边定向，使得所有的 <span class=\"math inline\">\\(s_i\\)</span> 都能到达 <span class=\"math inline\">\\(t_i\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(n,m,q \\le 2 \\cdot 10^5\\)</span> 不保证图连通，可能有重边。</p>\r\n</blockquote>\r\n<p>先假设有解，尝试求出一组解，再判定这组解合不合法。</p>\r\n<h3 id=\"构造解\">构造解</h3>\r\n<p>一个经典结论：</p>\r\n<blockquote>\r\n<p>一个<strong>边双连通分量</strong>存在一种给每条边定向的方案，使之成为<strong>强连通分量</strong>。</p>\r\n<p>一个<strong>强连通分量</strong>把有向边变成无向边后成为<strong>边双连通分量</strong>。</p>\r\n</blockquote>\r\n<p>对于前者直接让树边向下，反向边向上即可。</p>\r\n<p>对于后者考虑一条有向边的两个端点可以相互到达，推出这条边在一个简单环上。</p>\r\n<p>把图中的边双全部定向成强连通分量，接下来只需要给所有<strong>桥</strong>定向，以使 <span class=\"math inline\">\\(s_i\\)</span> 所在的边双能到达 <span class=\"math inline\">\\(t_i\\)</span> 所在的边双。</p>\r\n<p>其实无需求边双，只需求出哪些边是桥即可，<strong>由于此题有重边，<code>tarjan</code> 算法应当记录上一条边而不是父亲</strong>。</p>\r\n<p>建出 <code>dfs</code> 树，对于每组 <span class=\"math inline\">\\((s_i,t_i)\\)</span>，要求 <span class=\"math inline\">\\(s_i\\)</span> 到 <span class=\"math inline\">\\(t_i\\)</span> 路径上的桥由 <span class=\"math inline\">\\(s_i\\)</span> 指向 <span class=\"math inline\">\\(t_i\\)</span>。</p>\r\n<p>让 <span class=\"math inline\">\\(s_i \\rightarrow lca\\)</span> 上的边 <span class=\"math inline\">\\(+1\\)</span>，<span class=\"math inline\">\\(lca \\rightarrow t_i\\)</span> 上的边 <span class=\"math inline\">\\(-1\\)</span>，树上差分转换为 <span class=\"math inline\">\\(s_i\\)</span> 处 <span class=\"math inline\">\\(+1\\)</span>，<span class=\"math inline\">\\(t_i\\)</span> 处 <span class=\"math inline\">\\(-1\\)</span>，<span class=\"math inline\">\\(lca\\)</span> 处不变。</p>\r\n<p><img src=\"https://i.loli.net/2021/04/03/t6zWCK1xuaEgcb5.png\" /></p>\r\n<p>一条边的最终权值如果为正，则必须向上，为负则必须向下，为 <span class=\"math inline\">\\(0\\)</span> 则都可以。</p>\r\n<h3 id=\"判定\">判定</h3>\r\n<p>检验 <span class=\"math inline\">\\(s_i \\rightarrow lca\\)</span> 上的边是否全部为正，<span class=\"math inline\">\\(lca \\rightarrow t_i\\)</span> 上的边是否全部为负。</p>\r\n<p>记 <span class=\"math inline\">\\(up_u\\)</span> 表示从 <span class=\"math inline\">\\(u\\)</span> 开始只经过非桥边和权值为<strong>正</strong>的桥边能到达的深度最小的结点。</p>\r\n<p><span class=\"math inline\">\\(down_u\\)</span> 表示从 <span class=\"math inline\">\\(u\\)</span> 开始只经过非桥边和权值为<strong>负</strong>的桥边能到达的深度最小的结点。</p>\r\n<p>如果 <span class=\"math inline\">\\(up_{s_i}\\)</span> 和 <span class=\"math inline\">\\(down_{t_i}\\)</span> 中深度较大者是 <span class=\"math inline\">\\(s_i\\)</span> 和 <span class=\"math inline\">\\(t_i\\)</span> 的公共祖先 <span class=\"math inline\">\\((s_i,t_i)\\)</span> 就合法，使用 <code>dfs</code> 序可判定。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, q, idx, dfn[N], suf[N], cut[N];</span><br><span class=\"line\">vector &lt;pair &lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; G[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> vis[N], sz[N], s[N], t[N], up[N], down[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> lst)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lowu = dfn[u] = ++idx;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [v, w] : G[u]) <span class=\"keyword\">if</span>(!dfn[v]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lowv = <span class=\"built_in\">dfs</span>(v, w);</span><br><span class=\"line\">        lowu = <span class=\"built_in\">min</span>(lowu, lowv), cut[v] = lowv &gt; dfn[u];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(w ^ lst &amp;&amp; dfn[v] &lt; dfn[u]) lowu = <span class=\"built_in\">min</span>(lowu, dfn[v]);</span><br><span class=\"line\">    suf[u] = idx;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lowu;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">    vis[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [v, w] : G[u]) <span class=\"keyword\">if</span>(!vis[v]) <span class=\"built_in\">Dfs</span>(v), sz[u] += sz[v];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DFs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">    vis[u] = <span class=\"number\">1</span>, up[u] = up[fa], down[u] = down[fa];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!fa || (cut[u] &amp;&amp; sz[u] &lt;= <span class=\"number\">0</span>)) up[u] = u;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!fa || (cut[u] &amp;&amp; sz[u] &gt;= <span class=\"number\">0</span>)) down[u] = u;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [v, w] : G[u]) <span class=\"keyword\">if</span>(!vis[v]) <span class=\"built_in\">DFs</span>(v, u);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q; </span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class=\"line\">        G[u].<span class=\"built_in\">push_back</span>(&#123;v, ++idx&#125;), G[v].<span class=\"built_in\">push_back</span>(&#123;u, idx&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"keyword\">if</span>(!dfn[i]) <span class=\"built_in\">dfs</span>(i, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, q) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;s[i], &amp;t[i]), sz[s[i]]++, sz[t[i]]--;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"keyword\">if</span>(!vis[i]) <span class=\"built_in\">Dfs</span>(i);</span><br><span class=\"line\">    <span class=\"built_in\">mem</span>(vis, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"keyword\">if</span>(!vis[i]) <span class=\"built_in\">DFs</span>(i, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, q) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lca = dfn[up[s[i]]] &gt; dfn[down[t[i]]] ? up[s[i]] : down[t[i]];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dfn[s[i]] &gt; dfn[t[i]]) <span class=\"built_in\">swap</span>(s[i], t[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dfn[s[i]] &lt; dfn[lca] || dfn[t[i]] &gt; suf[lca]) <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;No&quot;</span>), <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Yes&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"Policeman and a Tree | Codeforces 868E","date":"2021-03-18T08:10:31.000Z","updated":"2021-03-18T08:10:31.000Z","_content":"> [题目链接](http://codeforces.com/problemset/problem/868/E)\n>\n> 一棵 $n$ 个结点的边带权树，有一个警察初始在 $s$ 点，速度为 $1$，树上分布有 $m$ 个罪犯，速度为任意大，如果罪犯和警察在同一个结点就会被干掉，警察希望干掉所有罪犯的时间尽量短，而罪犯希望最大化这个时间，假设每个人都以最优策略行动，求这个时间。\n>\n> $1 \\le n, m, w_i \\le 50$，$w_i$ 为边权。\n>\n> 所有罪犯初始不在 $s$ 点，一个结点可能会有多个罪犯。\n\n### 状态设计\n\n考虑这个过程是怎样的。\n\n当警察在结点 $1$ 时，由于罪犯速度任意大，但不能经过警察，所以罪犯分布在被结点 $1$ 隔开的三个部分中，并且可以在所属部分的任意位置上，**不妨假设**罪犯全部分布在所有与结点 $1$ 相邻的结点 $2,3,4$ 上。\n\n图上的红数字表示该结点上有多少名罪犯。\n\n![](https://i.loli.net/2021/03/18/A4Zpd72bkRMeINU.png)\n\n当警察从结点 $1$ 走到结点 $4$ 时，结点 $4$ 上的两名罪犯就需要走到结点 $5,6$ ，同时结点 $2,3$ 上的两名罪犯可以一起走到结点 $1$。\n\n![](https://i.loli.net/2021/03/18/gtTQYLueC21mlZW.png)\n\n容易想到用警察所在的结点 $u$ 和所有与结点 $u$ 相邻的结点上分别有多少名罪犯来表示一个状态。  \n但一个结点的度数是  $O(n)$ 级别的，因此状态数爆炸。\n\n另一个描述状态的想法是警察当前在哪条边上，这条边的两端分别有多少名罪犯。  \n然后状态数就减少成了 $O(n^3)$，非常少。\n\n因此我们用 $f_{i,j,k}$ 表示当前总共还剩 $i$ 名罪犯，警察**刚走上** $j = u \\rightarrow v$ 这条**有向边**（警察和 $u$ 的距离忽略不计），结点 $v$ 上有 $k$ 名罪犯。\n\n### 转移\n\n假设当前总共还剩  $i$ 名罪犯，警察在**有向边** $j = u \\rightarrow v$ 上，边权为 $w$，结点 $v$ 上有 $k$ 名罪犯。\n\n如果结点 $v$ 是叶子结点，显然\n$$\nf_{i,j,k}=f_{i-k,\\bar j,i-k} + w\n$$\n其中 $\\bar j$ 是 $j$ 的反向边。\n\n另一种情况：\n\n![](https://i.loli.net/2021/03/18/Vsnf9c6hIvYkCRd.png)\n\n结点 $4$ 上的 $k$ 名罪犯必须要分为两波，其中 $a$ 名跑到了结点 $5$，$b$ 名跑到了结点 $6$。  \n警察会下一步会在 $4 \\rightarrow 5$ 和 $4 \\rightarrow 6$ 中选择较优的一条有向边。\n\n罪犯为了最大化时间：\n$$\nf_{i,1 \\rightarrow 4,k} = \\max_{a+b=k}\\min \\lbrace f_{i,4 \\rightarrow 5,a},f_{i,4 \\rightarrow 6,b}\\rbrace + w\n$$\n一般地，设结点 $v$ 除 $u$ 以外的相邻点分别为 $a_1,a_2,a_3,\\cdots,a_d$，则转移方程为：\n$$\nf_{i,j,k}=\\max_{c_1+c_2+\\cdots+c_d=k}\\min_{s=1}^df_{i,v \\rightarrow a_s,c_s} + w\n$$\n下面给出一种复杂度比较优秀的贪心算法实现第二种转移：\n\n>引理：若求 $f_{i,j,k}$ 时的**决策**为 $c_1,c_2,\\cdots,c_d$。  \n>那么求 $f_{i,j,k+1}$ 时的决策 $\\bar c_1,\\bar c_2,\\cdots,\\bar c_d$ 一定是在 $c_1,c_2,\\cdots,c_d$ 中的某个数 $+1$ 得到的。  \n>并且 $+1$ 的这个 $c_x$ 满足\n>$$\n>f_{i,v \\rightarrow a_x,c_x+1}=\\max_{s=1}^df_{i,v \\rightarrow a_s,c_s+1}\n>$$\n>证明：首先在总人数和位置相同的情况下，警察追的人越多，剩下的时间就越短。  \n>故 $f_{i,j,0} \\ge f_{i,j,1} \\ge f_{i,j,2} \\ge \\cdots \\ge f_{i,j,i}$。\n>\n>考虑\n>$$\n>\\forall x \\le f_{i,j,k}\\exists c_1,c_2,\\cdots,c_d,\\\\f_{i,v \\rightarrow a_1,c_1} \\ge x\\\\f_{i,v \\rightarrow a_2,c_2} \\ge x\\\\\\cdots\\\\f_{i,v \\rightarrow a_d,c_d} \\ge x\n>$$\n>由二分答案算法的 ```check``` 函数可知：若 $m_i$ 是 $f_{i,v \\rightarrow a_i}$ 数列中最后一个大于等于 $x$ 的位置，  \n>则 $m_1+m_2+\\cdots+m_d \\ge k$。\n>\n>而以这种决策的构造方式，一定有 $c_1 \\le m_1,c_2 \\le m_2, \\cdots, c_d \\le m_d$，因此通过该决策得到的值一定不劣于 $x$。\n>\n\n因此可以用一个大根堆维护那个 $x$，可以在 $O(n\\log n)$ 的时间同时求出 $f_{i,j,0},f_{i,j,1},\\cdots,f_{i,j,i}$。\n\n复杂度 $O(n^3\\log n)$，标算的复杂度是 $O(n^5)$ 的。\n\n然而由于常数巨大，最小的点要 $15$ ```ms```，最大的点要 $30$ ```ms```。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n\nusing namespace std;\nconst int N = 55, Inf = 1e9;\nint n, s, m, ev[N * 2], ew[N * 2], cnt[N], deg[N];\nvector <int> G[N];\nint f[N][N * 2][N];\nvoid solve(int, int);\nint dp(int i, int j, int k) {\n    if(!f[i][j][k]) solve(i, j);\n    return f[i][j][k];\n}\nstruct node {\n    int i, e, c;\n    int val()const { return c < i ? dp(i, e, c + 1) : 0; }\n    bool operator <(const node& b)const { return val() < b.val(); }\n};\nvoid solve(int i, int j) {\n    f[i][j][0] = Inf;\n    if(deg[ev[j]] == 1)\n        rep(k, 1, i) f[i][j][k] = k < i ? dp(i - k, j ^ 1, i - k) + ew[j] : ew[j];\n    else {\n        priority_queue <node> q;\n        for(int e : G[ev[j]]) if(e ^ j ^ 1) q.push({ i, e, 0 });\n        rep(k, 1, i) {\n            node x = q.top(); q.pop();\n            f[i][j][k] = min(f[i][j][k - 1], x.val() + ew[j]);\n            x.c++, q.push(x);\n        }\n    }\n}\nint dfs(int u, int fa) {\n    int res = cnt[u];\n    for(int e : G[u]) if(ev[e] ^ fa) res += dfs(ev[e], u);\n    return res;\n}\nint main() {\n    ios::sync_with_stdio(0), cin.tie(0);\n    cin >> n;\n    int u, v, w;\n    rep(i, 2, n) {\n        int a = i * 2, b = a + 1;\n        cin >> u >> v >> w, deg[ev[a] = v]++, deg[ev[b] = u]++, ew[a] = ew[b] = w;\n        G[u].push_back(a), G[v].push_back(b);\n    }\n    cin >> s >> m;\n    rep(i, 1, m) cin >> u, cnt[u]++;\n    int ans = Inf;\n    for(int e : G[s]) ans = min(ans, dp(m, e, dfs(ev[e], s)));\n    cout << ans;\n    return 0;\n}\n```","source":"_posts/CF868E.md","raw":"---\ntitle: Policeman and a Tree | Codeforces 868E\ndate: 2021-03-18 16:10:31\nupdated: 2021-03-18 16:10:31\ntags: [动态规划,贪心]\ncategories: Codeforces\n---\n> [题目链接](http://codeforces.com/problemset/problem/868/E)\n>\n> 一棵 $n$ 个结点的边带权树，有一个警察初始在 $s$ 点，速度为 $1$，树上分布有 $m$ 个罪犯，速度为任意大，如果罪犯和警察在同一个结点就会被干掉，警察希望干掉所有罪犯的时间尽量短，而罪犯希望最大化这个时间，假设每个人都以最优策略行动，求这个时间。\n>\n> $1 \\le n, m, w_i \\le 50$，$w_i$ 为边权。\n>\n> 所有罪犯初始不在 $s$ 点，一个结点可能会有多个罪犯。\n\n### 状态设计\n\n考虑这个过程是怎样的。\n\n当警察在结点 $1$ 时，由于罪犯速度任意大，但不能经过警察，所以罪犯分布在被结点 $1$ 隔开的三个部分中，并且可以在所属部分的任意位置上，**不妨假设**罪犯全部分布在所有与结点 $1$ 相邻的结点 $2,3,4$ 上。\n\n图上的红数字表示该结点上有多少名罪犯。\n\n![](https://i.loli.net/2021/03/18/A4Zpd72bkRMeINU.png)\n\n当警察从结点 $1$ 走到结点 $4$ 时，结点 $4$ 上的两名罪犯就需要走到结点 $5,6$ ，同时结点 $2,3$ 上的两名罪犯可以一起走到结点 $1$。\n\n![](https://i.loli.net/2021/03/18/gtTQYLueC21mlZW.png)\n\n容易想到用警察所在的结点 $u$ 和所有与结点 $u$ 相邻的结点上分别有多少名罪犯来表示一个状态。  \n但一个结点的度数是  $O(n)$ 级别的，因此状态数爆炸。\n\n另一个描述状态的想法是警察当前在哪条边上，这条边的两端分别有多少名罪犯。  \n然后状态数就减少成了 $O(n^3)$，非常少。\n\n因此我们用 $f_{i,j,k}$ 表示当前总共还剩 $i$ 名罪犯，警察**刚走上** $j = u \\rightarrow v$ 这条**有向边**（警察和 $u$ 的距离忽略不计），结点 $v$ 上有 $k$ 名罪犯。\n\n### 转移\n\n假设当前总共还剩  $i$ 名罪犯，警察在**有向边** $j = u \\rightarrow v$ 上，边权为 $w$，结点 $v$ 上有 $k$ 名罪犯。\n\n如果结点 $v$ 是叶子结点，显然\n$$\nf_{i,j,k}=f_{i-k,\\bar j,i-k} + w\n$$\n其中 $\\bar j$ 是 $j$ 的反向边。\n\n另一种情况：\n\n![](https://i.loli.net/2021/03/18/Vsnf9c6hIvYkCRd.png)\n\n结点 $4$ 上的 $k$ 名罪犯必须要分为两波，其中 $a$ 名跑到了结点 $5$，$b$ 名跑到了结点 $6$。  \n警察会下一步会在 $4 \\rightarrow 5$ 和 $4 \\rightarrow 6$ 中选择较优的一条有向边。\n\n罪犯为了最大化时间：\n$$\nf_{i,1 \\rightarrow 4,k} = \\max_{a+b=k}\\min \\lbrace f_{i,4 \\rightarrow 5,a},f_{i,4 \\rightarrow 6,b}\\rbrace + w\n$$\n一般地，设结点 $v$ 除 $u$ 以外的相邻点分别为 $a_1,a_2,a_3,\\cdots,a_d$，则转移方程为：\n$$\nf_{i,j,k}=\\max_{c_1+c_2+\\cdots+c_d=k}\\min_{s=1}^df_{i,v \\rightarrow a_s,c_s} + w\n$$\n下面给出一种复杂度比较优秀的贪心算法实现第二种转移：\n\n>引理：若求 $f_{i,j,k}$ 时的**决策**为 $c_1,c_2,\\cdots,c_d$。  \n>那么求 $f_{i,j,k+1}$ 时的决策 $\\bar c_1,\\bar c_2,\\cdots,\\bar c_d$ 一定是在 $c_1,c_2,\\cdots,c_d$ 中的某个数 $+1$ 得到的。  \n>并且 $+1$ 的这个 $c_x$ 满足\n>$$\n>f_{i,v \\rightarrow a_x,c_x+1}=\\max_{s=1}^df_{i,v \\rightarrow a_s,c_s+1}\n>$$\n>证明：首先在总人数和位置相同的情况下，警察追的人越多，剩下的时间就越短。  \n>故 $f_{i,j,0} \\ge f_{i,j,1} \\ge f_{i,j,2} \\ge \\cdots \\ge f_{i,j,i}$。\n>\n>考虑\n>$$\n>\\forall x \\le f_{i,j,k}\\exists c_1,c_2,\\cdots,c_d,\\\\f_{i,v \\rightarrow a_1,c_1} \\ge x\\\\f_{i,v \\rightarrow a_2,c_2} \\ge x\\\\\\cdots\\\\f_{i,v \\rightarrow a_d,c_d} \\ge x\n>$$\n>由二分答案算法的 ```check``` 函数可知：若 $m_i$ 是 $f_{i,v \\rightarrow a_i}$ 数列中最后一个大于等于 $x$ 的位置，  \n>则 $m_1+m_2+\\cdots+m_d \\ge k$。\n>\n>而以这种决策的构造方式，一定有 $c_1 \\le m_1,c_2 \\le m_2, \\cdots, c_d \\le m_d$，因此通过该决策得到的值一定不劣于 $x$。\n>\n\n因此可以用一个大根堆维护那个 $x$，可以在 $O(n\\log n)$ 的时间同时求出 $f_{i,j,0},f_{i,j,1},\\cdots,f_{i,j,i}$。\n\n复杂度 $O(n^3\\log n)$，标算的复杂度是 $O(n^5)$ 的。\n\n然而由于常数巨大，最小的点要 $15$ ```ms```，最大的点要 $30$ ```ms```。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n\nusing namespace std;\nconst int N = 55, Inf = 1e9;\nint n, s, m, ev[N * 2], ew[N * 2], cnt[N], deg[N];\nvector <int> G[N];\nint f[N][N * 2][N];\nvoid solve(int, int);\nint dp(int i, int j, int k) {\n    if(!f[i][j][k]) solve(i, j);\n    return f[i][j][k];\n}\nstruct node {\n    int i, e, c;\n    int val()const { return c < i ? dp(i, e, c + 1) : 0; }\n    bool operator <(const node& b)const { return val() < b.val(); }\n};\nvoid solve(int i, int j) {\n    f[i][j][0] = Inf;\n    if(deg[ev[j]] == 1)\n        rep(k, 1, i) f[i][j][k] = k < i ? dp(i - k, j ^ 1, i - k) + ew[j] : ew[j];\n    else {\n        priority_queue <node> q;\n        for(int e : G[ev[j]]) if(e ^ j ^ 1) q.push({ i, e, 0 });\n        rep(k, 1, i) {\n            node x = q.top(); q.pop();\n            f[i][j][k] = min(f[i][j][k - 1], x.val() + ew[j]);\n            x.c++, q.push(x);\n        }\n    }\n}\nint dfs(int u, int fa) {\n    int res = cnt[u];\n    for(int e : G[u]) if(ev[e] ^ fa) res += dfs(ev[e], u);\n    return res;\n}\nint main() {\n    ios::sync_with_stdio(0), cin.tie(0);\n    cin >> n;\n    int u, v, w;\n    rep(i, 2, n) {\n        int a = i * 2, b = a + 1;\n        cin >> u >> v >> w, deg[ev[a] = v]++, deg[ev[b] = u]++, ew[a] = ew[b] = w;\n        G[u].push_back(a), G[v].push_back(b);\n    }\n    cin >> s >> m;\n    rep(i, 1, m) cin >> u, cnt[u]++;\n    int ans = Inf;\n    for(int e : G[s]) ans = min(ans, dp(m, e, dfs(ev[e], s)));\n    cout << ans;\n    return 0;\n}\n```","slug":"CF868E","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxgzy001eootnctq0fpr7","content":"<blockquote>\r\n<p><a href=\"http://codeforces.com/problemset/problem/868/E\">题目链接</a></p>\r\n<p>一棵 <span class=\"math inline\">\\(n\\)</span> 个结点的边带权树，有一个警察初始在 <span class=\"math inline\">\\(s\\)</span> 点，速度为 <span class=\"math inline\">\\(1\\)</span>，树上分布有 <span class=\"math inline\">\\(m\\)</span> 个罪犯，速度为任意大，如果罪犯和警察在同一个结点就会被干掉，警察希望干掉所有罪犯的时间尽量短，而罪犯希望最大化这个时间，假设每个人都以最优策略行动，求这个时间。</p>\r\n<p><span class=\"math inline\">\\(1 \\le n, m, w_i \\le 50\\)</span>，<span class=\"math inline\">\\(w_i\\)</span> 为边权。</p>\r\n<p>所有罪犯初始不在 <span class=\"math inline\">\\(s\\)</span> 点，一个结点可能会有多个罪犯。</p>\r\n</blockquote>\r\n<h3 id=\"状态设计\">状态设计</h3>\r\n<p>考虑这个过程是怎样的。</p>\r\n<p>当警察在结点 <span class=\"math inline\">\\(1\\)</span> 时，由于罪犯速度任意大，但不能经过警察，所以罪犯分布在被结点 <span class=\"math inline\">\\(1\\)</span> 隔开的三个部分中，并且可以在所属部分的任意位置上，<strong>不妨假设</strong>罪犯全部分布在所有与结点 <span class=\"math inline\">\\(1\\)</span> 相邻的结点 <span class=\"math inline\">\\(2,3,4\\)</span> 上。</p>\r\n<p>图上的红数字表示该结点上有多少名罪犯。</p>\r\n<p><img src=\"https://i.loli.net/2021/03/18/A4Zpd72bkRMeINU.png\" /></p>\r\n<p>当警察从结点 <span class=\"math inline\">\\(1\\)</span> 走到结点 <span class=\"math inline\">\\(4\\)</span> 时，结点 <span class=\"math inline\">\\(4\\)</span> 上的两名罪犯就需要走到结点 <span class=\"math inline\">\\(5,6\\)</span> ，同时结点 <span class=\"math inline\">\\(2,3\\)</span> 上的两名罪犯可以一起走到结点 <span class=\"math inline\">\\(1\\)</span>。</p>\r\n<p><img src=\"https://i.loli.net/2021/03/18/gtTQYLueC21mlZW.png\" /></p>\r\n<p>容易想到用警察所在的结点 <span class=\"math inline\">\\(u\\)</span> 和所有与结点 <span class=\"math inline\">\\(u\\)</span> 相邻的结点上分别有多少名罪犯来表示一个状态。<br />\r\n但一个结点的度数是 <span class=\"math inline\">\\(O(n)\\)</span> 级别的，因此状态数爆炸。</p>\r\n<p>另一个描述状态的想法是警察当前在哪条边上，这条边的两端分别有多少名罪犯。<br />\r\n然后状态数就减少成了 <span class=\"math inline\">\\(O(n^3)\\)</span>，非常少。</p>\r\n<p>因此我们用 <span class=\"math inline\">\\(f_{i,j,k}\\)</span> 表示当前总共还剩 <span class=\"math inline\">\\(i\\)</span> 名罪犯，警察<strong>刚走上</strong> <span class=\"math inline\">\\(j = u \\rightarrow v\\)</span> 这条<strong>有向边</strong>（警察和 <span class=\"math inline\">\\(u\\)</span> 的距离忽略不计），结点 <span class=\"math inline\">\\(v\\)</span> 上有 <span class=\"math inline\">\\(k\\)</span> 名罪犯。</p>\r\n<h3 id=\"转移\">转移</h3>\r\n<p>假设当前总共还剩 <span class=\"math inline\">\\(i\\)</span> 名罪犯，警察在<strong>有向边</strong> <span class=\"math inline\">\\(j = u \\rightarrow v\\)</span> 上，边权为 <span class=\"math inline\">\\(w\\)</span>，结点 <span class=\"math inline\">\\(v\\)</span> 上有 <span class=\"math inline\">\\(k\\)</span> 名罪犯。</p>\r\n<p>如果结点 <span class=\"math inline\">\\(v\\)</span> 是叶子结点，显然 <span class=\"math display\">\\[\r\nf_{i,j,k}=f_{i-k,\\bar j,i-k} + w\r\n\\]</span> 其中 <span class=\"math inline\">\\(\\bar j\\)</span> 是 <span class=\"math inline\">\\(j\\)</span> 的反向边。</p>\r\n<p>另一种情况：</p>\r\n<p><img src=\"https://i.loli.net/2021/03/18/Vsnf9c6hIvYkCRd.png\" /></p>\r\n<p>结点 <span class=\"math inline\">\\(4\\)</span> 上的 <span class=\"math inline\">\\(k\\)</span> 名罪犯必须要分为两波，其中 <span class=\"math inline\">\\(a\\)</span> 名跑到了结点 <span class=\"math inline\">\\(5\\)</span>，<span class=\"math inline\">\\(b\\)</span> 名跑到了结点 <span class=\"math inline\">\\(6\\)</span>。<br />\r\n警察会下一步会在 <span class=\"math inline\">\\(4 \\rightarrow 5\\)</span> 和 <span class=\"math inline\">\\(4 \\rightarrow 6\\)</span> 中选择较优的一条有向边。</p>\r\n<p>罪犯为了最大化时间： <span class=\"math display\">\\[\r\nf_{i,1 \\rightarrow 4,k} = \\max_{a+b=k}\\min \\lbrace f_{i,4 \\rightarrow 5,a},f_{i,4 \\rightarrow 6,b}\\rbrace + w\r\n\\]</span> 一般地，设结点 <span class=\"math inline\">\\(v\\)</span> 除 <span class=\"math inline\">\\(u\\)</span> 以外的相邻点分别为 <span class=\"math inline\">\\(a_1,a_2,a_3,\\cdots,a_d\\)</span>，则转移方程为： <span class=\"math display\">\\[\r\nf_{i,j,k}=\\max_{c_1+c_2+\\cdots+c_d=k}\\min_{s=1}^df_{i,v \\rightarrow a_s,c_s} + w\r\n\\]</span> 下面给出一种复杂度比较优秀的贪心算法实现第二种转移：</p>\r\n<blockquote>\r\n<p>引理：若求 <span class=\"math inline\">\\(f_{i,j,k}\\)</span> 时的<strong>决策</strong>为 <span class=\"math inline\">\\(c_1,c_2,\\cdots,c_d\\)</span>。<br />\r\n那么求 <span class=\"math inline\">\\(f_{i,j,k+1}\\)</span> 时的决策 <span class=\"math inline\">\\(\\bar c_1,\\bar c_2,\\cdots,\\bar c_d\\)</span> 一定是在 <span class=\"math inline\">\\(c_1,c_2,\\cdots,c_d\\)</span> 中的某个数 <span class=\"math inline\">\\(+1\\)</span> 得到的。<br />\r\n并且 <span class=\"math inline\">\\(+1\\)</span> 的这个 <span class=\"math inline\">\\(c_x\\)</span> 满足 <span class=\"math display\">\\[\r\nf_{i,v \\rightarrow a_x,c_x+1}=\\max_{s=1}^df_{i,v \\rightarrow a_s,c_s+1}\r\n\\]</span> 证明：首先在总人数和位置相同的情况下，警察追的人越多，剩下的时间就越短。<br />\r\n故 <span class=\"math inline\">\\(f_{i,j,0} \\ge f_{i,j,1} \\ge f_{i,j,2} \\ge \\cdots \\ge f_{i,j,i}\\)</span>。</p>\r\n<p>考虑 <span class=\"math display\">\\[\r\n\\forall x \\le f_{i,j,k}\\exists c_1,c_2,\\cdots,c_d,\\\\f_{i,v \\rightarrow a_1,c_1} \\ge x\\\\f_{i,v \\rightarrow a_2,c_2} \\ge x\\\\\\cdots\\\\f_{i,v \\rightarrow a_d,c_d} \\ge x\r\n\\]</span> 由二分答案算法的 <code>check</code> 函数可知：若 <span class=\"math inline\">\\(m_i\\)</span> 是 <span class=\"math inline\">\\(f_{i,v \\rightarrow a_i}\\)</span> 数列中最后一个大于等于 <span class=\"math inline\">\\(x\\)</span> 的位置，<br />\r\n则 <span class=\"math inline\">\\(m_1+m_2+\\cdots+m_d \\ge k\\)</span>。</p>\r\n<p>而以这种决策的构造方式，一定有 <span class=\"math inline\">\\(c_1 \\le m_1,c_2 \\le m_2, \\cdots, c_d \\le m_d\\)</span>，因此通过该决策得到的值一定不劣于 <span class=\"math inline\">\\(x\\)</span>。</p>\r\n</blockquote>\r\n<p>因此可以用一个大根堆维护那个 <span class=\"math inline\">\\(x\\)</span>，可以在 <span class=\"math inline\">\\(O(n\\log n)\\)</span> 的时间同时求出 <span class=\"math inline\">\\(f_{i,j,0},f_{i,j,1},\\cdots,f_{i,j,i}\\)</span>。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^3\\log n)\\)</span>，标算的复杂度是 <span class=\"math inline\">\\(O(n^5)\\)</span> 的。</p>\r\n<p>然而由于常数巨大，最小的点要 <span class=\"math inline\">\\(15\\)</span> <code>ms</code>，最大的点要 <span class=\"math inline\">\\(30\\)</span> <code>ms</code>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">55</span>, Inf = <span class=\"number\">1e9</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, s, m, ev[N * <span class=\"number\">2</span>], ew[N * <span class=\"number\">2</span>], cnt[N], deg[N];</span><br><span class=\"line\">vector &lt;<span class=\"keyword\">int</span>&gt; G[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[N][N * <span class=\"number\">2</span>][N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dp</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!f[i][j][k]) <span class=\"built_in\">solve</span>(i, j);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[i][j][k];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, e, c;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">val</span><span class=\"params\">()</span><span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> c &lt; i ? <span class=\"built_in\">dp</span>(i, e, c + <span class=\"number\">1</span>) : <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"keyword\">const</span> node&amp; b)<span class=\"keyword\">const</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">val</span>() &lt; b.<span class=\"built_in\">val</span>(); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">    f[i][j][<span class=\"number\">0</span>] = Inf;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(deg[ev[j]] == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(k, <span class=\"number\">1</span>, i) f[i][j][k] = k &lt; i ? <span class=\"built_in\">dp</span>(i - k, j ^ <span class=\"number\">1</span>, i - k) + ew[j] : ew[j];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        priority_queue &lt;node&gt; q;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e : G[ev[j]]) <span class=\"keyword\">if</span>(e ^ j ^ <span class=\"number\">1</span>) q.<span class=\"built_in\">push</span>(&#123; i, e, <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(k, <span class=\"number\">1</span>, i) &#123;</span><br><span class=\"line\">            node x = q.<span class=\"built_in\">top</span>(); q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            f[i][j][k] = <span class=\"built_in\">min</span>(f[i][j][k - <span class=\"number\">1</span>], x.<span class=\"built_in\">val</span>() + ew[j]);</span><br><span class=\"line\">            x.c++, q.<span class=\"built_in\">push</span>(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = cnt[u];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e : G[u]) <span class=\"keyword\">if</span>(ev[e] ^ fa) res += <span class=\"built_in\">dfs</span>(ev[e], u);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v, w;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = i * <span class=\"number\">2</span>, b = a + <span class=\"number\">1</span>;</span><br><span class=\"line\">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w, deg[ev[a] = v]++, deg[ev[b] = u]++, ew[a] = ew[b] = w;</span><br><span class=\"line\">        G[u].<span class=\"built_in\">push_back</span>(a), G[v].<span class=\"built_in\">push_back</span>(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cin &gt;&gt; s &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) cin &gt;&gt; u, cnt[u]++;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = Inf;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e : G[s]) ans = <span class=\"built_in\">min</span>(ans, <span class=\"built_in\">dp</span>(m, e, <span class=\"built_in\">dfs</span>(ev[e], s)));</span><br><span class=\"line\">    cout &lt;&lt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":3481,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"http://codeforces.com/problemset/problem/868/E\">题目链接</a></p>\r\n<p>一棵 <span class=\"math inline\">\\(n\\)</span> 个结点的边带权树，有一个警察初始在 <span class=\"math inline\">\\(s\\)</span> 点，速度为 <span class=\"math inline\">\\(1\\)</span>，树上分布有 <span class=\"math inline\">\\(m\\)</span> 个罪犯，速度为任意大，如果罪犯和警察在同一个结点就会被干掉，警察希望干掉所有罪犯的时间尽量短，而罪犯希望最大化这个时间，假设每个人都以最优策略行动，求这个时间。</p>\r\n<p><span class=\"math inline\">\\(1 \\le n, m, w_i \\le 50\\)</span>，<span class=\"math inline\">\\(w_i\\)</span> 为边权。</p>\r\n<p>所有罪犯初始不在 <span class=\"math inline\">\\(s\\)</span> 点，一个结点可能会有多个罪犯。</p>\r\n</blockquote>\r\n<h3 id=\"状态设计\">状态设计</h3>\r\n<p>考虑这个过程是怎样的。</p>\r\n<p>当警察在结点 <span class=\"math inline\">\\(1\\)</span> 时，由于罪犯速度任意大，但不能经过警察，所以罪犯分布在被结点 <span class=\"math inline\">\\(1\\)</span> 隔开的三个部分中，并且可以在所属部分的任意位置上，<strong>不妨假设</strong>罪犯全部分布在所有与结点 <span class=\"math inline\">\\(1\\)</span> 相邻的结点 <span class=\"math inline\">\\(2,3,4\\)</span> 上。</p>\r\n<p>图上的红数字表示该结点上有多少名罪犯。</p>\r\n<p><img src=\"https://i.loli.net/2021/03/18/A4Zpd72bkRMeINU.png\" /></p>\r\n<p>当警察从结点 <span class=\"math inline\">\\(1\\)</span> 走到结点 <span class=\"math inline\">\\(4\\)</span> 时，结点 <span class=\"math inline\">\\(4\\)</span> 上的两名罪犯就需要走到结点 <span class=\"math inline\">\\(5,6\\)</span> ，同时结点 <span class=\"math inline\">\\(2,3\\)</span> 上的两名罪犯可以一起走到结点 <span class=\"math inline\">\\(1\\)</span>。</p>\r\n<p><img src=\"https://i.loli.net/2021/03/18/gtTQYLueC21mlZW.png\" /></p>\r\n<p>容易想到用警察所在的结点 <span class=\"math inline\">\\(u\\)</span> 和所有与结点 <span class=\"math inline\">\\(u\\)</span> 相邻的结点上分别有多少名罪犯来表示一个状态。<br />\r\n但一个结点的度数是 <span class=\"math inline\">\\(O(n)\\)</span> 级别的，因此状态数爆炸。</p>\r\n<p>另一个描述状态的想法是警察当前在哪条边上，这条边的两端分别有多少名罪犯。<br />\r\n然后状态数就减少成了 <span class=\"math inline\">\\(O(n^3)\\)</span>，非常少。</p>\r\n<p>因此我们用 <span class=\"math inline\">\\(f_{i,j,k}\\)</span> 表示当前总共还剩 <span class=\"math inline\">\\(i\\)</span> 名罪犯，警察<strong>刚走上</strong> <span class=\"math inline\">\\(j = u \\rightarrow v\\)</span> 这条<strong>有向边</strong>（警察和 <span class=\"math inline\">\\(u\\)</span> 的距离忽略不计），结点 <span class=\"math inline\">\\(v\\)</span> 上有 <span class=\"math inline\">\\(k\\)</span> 名罪犯。</p>\r\n<h3 id=\"转移\">转移</h3>\r\n<p>假设当前总共还剩 <span class=\"math inline\">\\(i\\)</span> 名罪犯，警察在<strong>有向边</strong> <span class=\"math inline\">\\(j = u \\rightarrow v\\)</span> 上，边权为 <span class=\"math inline\">\\(w\\)</span>，结点 <span class=\"math inline\">\\(v\\)</span> 上有 <span class=\"math inline\">\\(k\\)</span> 名罪犯。</p>\r\n<p>如果结点 <span class=\"math inline\">\\(v\\)</span> 是叶子结点，显然 <span class=\"math display\">\\[\r\nf_{i,j,k}=f_{i-k,\\bar j,i-k} + w\r\n\\]</span> 其中 <span class=\"math inline\">\\(\\bar j\\)</span> 是 <span class=\"math inline\">\\(j\\)</span> 的反向边。</p>\r\n<p>另一种情况：</p>\r\n<p><img src=\"https://i.loli.net/2021/03/18/Vsnf9c6hIvYkCRd.png\" /></p>\r\n<p>结点 <span class=\"math inline\">\\(4\\)</span> 上的 <span class=\"math inline\">\\(k\\)</span> 名罪犯必须要分为两波，其中 <span class=\"math inline\">\\(a\\)</span> 名跑到了结点 <span class=\"math inline\">\\(5\\)</span>，<span class=\"math inline\">\\(b\\)</span> 名跑到了结点 <span class=\"math inline\">\\(6\\)</span>。<br />\r\n警察会下一步会在 <span class=\"math inline\">\\(4 \\rightarrow 5\\)</span> 和 <span class=\"math inline\">\\(4 \\rightarrow 6\\)</span> 中选择较优的一条有向边。</p>\r\n<p>罪犯为了最大化时间： <span class=\"math display\">\\[\r\nf_{i,1 \\rightarrow 4,k} = \\max_{a+b=k}\\min \\lbrace f_{i,4 \\rightarrow 5,a},f_{i,4 \\rightarrow 6,b}\\rbrace + w\r\n\\]</span> 一般地，设结点 <span class=\"math inline\">\\(v\\)</span> 除 <span class=\"math inline\">\\(u\\)</span> 以外的相邻点分别为 <span class=\"math inline\">\\(a_1,a_2,a_3,\\cdots,a_d\\)</span>，则转移方程为： <span class=\"math display\">\\[\r\nf_{i,j,k}=\\max_{c_1+c_2+\\cdots+c_d=k}\\min_{s=1}^df_{i,v \\rightarrow a_s,c_s} + w\r\n\\]</span> 下面给出一种复杂度比较优秀的贪心算法实现第二种转移：</p>\r\n<blockquote>\r\n<p>引理：若求 <span class=\"math inline\">\\(f_{i,j,k}\\)</span> 时的<strong>决策</strong>为 <span class=\"math inline\">\\(c_1,c_2,\\cdots,c_d\\)</span>。<br />\r\n那么求 <span class=\"math inline\">\\(f_{i,j,k+1}\\)</span> 时的决策 <span class=\"math inline\">\\(\\bar c_1,\\bar c_2,\\cdots,\\bar c_d\\)</span> 一定是在 <span class=\"math inline\">\\(c_1,c_2,\\cdots,c_d\\)</span> 中的某个数 <span class=\"math inline\">\\(+1\\)</span> 得到的。<br />\r\n并且 <span class=\"math inline\">\\(+1\\)</span> 的这个 <span class=\"math inline\">\\(c_x\\)</span> 满足 <span class=\"math display\">\\[\r\nf_{i,v \\rightarrow a_x,c_x+1}=\\max_{s=1}^df_{i,v \\rightarrow a_s,c_s+1}\r\n\\]</span> 证明：首先在总人数和位置相同的情况下，警察追的人越多，剩下的时间就越短。<br />\r\n故 <span class=\"math inline\">\\(f_{i,j,0} \\ge f_{i,j,1} \\ge f_{i,j,2} \\ge \\cdots \\ge f_{i,j,i}\\)</span>。</p>\r\n<p>考虑 <span class=\"math display\">\\[\r\n\\forall x \\le f_{i,j,k}\\exists c_1,c_2,\\cdots,c_d,\\\\f_{i,v \\rightarrow a_1,c_1} \\ge x\\\\f_{i,v \\rightarrow a_2,c_2} \\ge x\\\\\\cdots\\\\f_{i,v \\rightarrow a_d,c_d} \\ge x\r\n\\]</span> 由二分答案算法的 <code>check</code> 函数可知：若 <span class=\"math inline\">\\(m_i\\)</span> 是 <span class=\"math inline\">\\(f_{i,v \\rightarrow a_i}\\)</span> 数列中最后一个大于等于 <span class=\"math inline\">\\(x\\)</span> 的位置，<br />\r\n则 <span class=\"math inline\">\\(m_1+m_2+\\cdots+m_d \\ge k\\)</span>。</p>\r\n<p>而以这种决策的构造方式，一定有 <span class=\"math inline\">\\(c_1 \\le m_1,c_2 \\le m_2, \\cdots, c_d \\le m_d\\)</span>，因此通过该决策得到的值一定不劣于 <span class=\"math inline\">\\(x\\)</span>。</p>\r\n</blockquote>\r\n<p>因此可以用一个大根堆维护那个 <span class=\"math inline\">\\(x\\)</span>，可以在 <span class=\"math inline\">\\(O(n\\log n)\\)</span> 的时间同时求出 <span class=\"math inline\">\\(f_{i,j,0},f_{i,j,1},\\cdots,f_{i,j,i}\\)</span>。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^3\\log n)\\)</span>，标算的复杂度是 <span class=\"math inline\">\\(O(n^5)\\)</span> 的。</p>\r\n<p>然而由于常数巨大，最小的点要 <span class=\"math inline\">\\(15\\)</span> <code>ms</code>，最大的点要 <span class=\"math inline\">\\(30\\)</span> <code>ms</code>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">55</span>, Inf = <span class=\"number\">1e9</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, s, m, ev[N * <span class=\"number\">2</span>], ew[N * <span class=\"number\">2</span>], cnt[N], deg[N];</span><br><span class=\"line\">vector &lt;<span class=\"keyword\">int</span>&gt; G[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[N][N * <span class=\"number\">2</span>][N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dp</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!f[i][j][k]) <span class=\"built_in\">solve</span>(i, j);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[i][j][k];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, e, c;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">val</span><span class=\"params\">()</span><span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> c &lt; i ? <span class=\"built_in\">dp</span>(i, e, c + <span class=\"number\">1</span>) : <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"keyword\">const</span> node&amp; b)<span class=\"keyword\">const</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">val</span>() &lt; b.<span class=\"built_in\">val</span>(); &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">    f[i][j][<span class=\"number\">0</span>] = Inf;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(deg[ev[j]] == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(k, <span class=\"number\">1</span>, i) f[i][j][k] = k &lt; i ? <span class=\"built_in\">dp</span>(i - k, j ^ <span class=\"number\">1</span>, i - k) + ew[j] : ew[j];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        priority_queue &lt;node&gt; q;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e : G[ev[j]]) <span class=\"keyword\">if</span>(e ^ j ^ <span class=\"number\">1</span>) q.<span class=\"built_in\">push</span>(&#123; i, e, <span class=\"number\">0</span> &#125;);</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(k, <span class=\"number\">1</span>, i) &#123;</span><br><span class=\"line\">            node x = q.<span class=\"built_in\">top</span>(); q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            f[i][j][k] = <span class=\"built_in\">min</span>(f[i][j][k - <span class=\"number\">1</span>], x.<span class=\"built_in\">val</span>() + ew[j]);</span><br><span class=\"line\">            x.c++, q.<span class=\"built_in\">push</span>(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = cnt[u];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e : G[u]) <span class=\"keyword\">if</span>(ev[e] ^ fa) res += <span class=\"built_in\">dfs</span>(ev[e], u);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v, w;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = i * <span class=\"number\">2</span>, b = a + <span class=\"number\">1</span>;</span><br><span class=\"line\">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w, deg[ev[a] = v]++, deg[ev[b] = u]++, ew[a] = ew[b] = w;</span><br><span class=\"line\">        G[u].<span class=\"built_in\">push_back</span>(a), G[v].<span class=\"built_in\">push_back</span>(b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cin &gt;&gt; s &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) cin &gt;&gt; u, cnt[u]++;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = Inf;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e : G[s]) ans = <span class=\"built_in\">min</span>(ans, <span class=\"built_in\">dp</span>(m, e, <span class=\"built_in\">dfs</span>(ev[e], s)));</span><br><span class=\"line\">    cout &lt;&lt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"New Year and Original Order | Codeforces 908G","date":"2021-03-26T12:19:09.000Z","updated":"2021-03-26T12:19:09.000Z","_content":"> [题目链接](https://codeforces.com/problemset/problem/908/G)\n>\n> 定义 $S(x)$ 表示把 $x$ 各数位上的数排序后得到的新数，$S(353594)=334559$。\n>\n> 给定 $n$，求 $\\sum\\limits_{i=1}^nS(i) \\bmod 10^9+7$。\n>\n> $n \\le 10^{700}$\n\n设 $n$ 总共 $m$ 位，$h_{x,i}$ 表示 $x$ 有多少个数位上的数大于等于 $i$。  \n\n<!-- more -->\n\n然后发现 $S(x) = \\sum\\limits_{i=1}^9 \\underbrace{111\\cdots 1}=\\frac 19\\sum\\limits_{i=1}^910^{h_{x,i}}-1=\\frac 19\\sum\\limits_{i=1}^9\\sum\\limits_{j=0}^{m}(10^j-1)\\sum\\limits_{k=1}^n[h_{k,i}=j]$  \n_________________________$h_{x,i}$ 个 $1$\n\n因此对每个 $i,j$ 求出 $\\sum\\limits_{k=1}^n[h_{k,i}=j]$ 即可求得答案。\n\n数位 ```DP``` 即可，复杂度 $O(100m^2)$。\n\n也可以组合计数：\n\n先让 ```n++```，问题变成求 $\\sum_{x < n}S(x)$。\n\n定义第 $i$ 位是从最高位开始的第 $i$ 位，$a_i$ 表示 $n$ 的第 $i$ 位。\n\n先枚举数 $x$ 和 $n$ 的 ```LCP``` $i \\in [0,m)$，再枚举 $x$ 在第 $i+1$ 位上的值 $j \\in [0,a_{i+1})$，则所有 $x$ 的贡献为：\n\n这里 $k$ 表示低 $m-i-1$ 位中有多少位大于等于 $d$。\n$$\n\\frac 19\\sum_{d=1}^9\\sum_{k=0}^{m-i-1}\\binom {m-i-1}k(10-d)^kd^{m-i-1-k}(10^{\\sum_{s=1}^i[a_s \\ge d]+[j \\ge d]+k}-1)\n$$\n故答案为：\n$$\n\\begin{aligned}\n&\\frac 19\\sum_{i=0}^{m-1}\\sum_{j=0}^{a_{i+1}-1}\\sum_{d=1}^9\\sum_{k=0}^{m-i-1}\\binom {m-i-1}k(10-d)^kd^{m-i-1-k}(10^{\\sum_{s=1}^i[a_s \\ge d]+[j \\ge d]+k}-1)\\\\\n&=\\frac 19\\sum_{i=0}^{m-1}\\sum_{j=0}^{a_{i+1}-1}\\sum_{d=1}^9\\left(\\left(10^{\\sum_{s=1}^i[a_s \\ge d]+[j \\ge d]}\\sum_{k=0}^{m-i-1}\\binom {m-i-1}k(100-10d)^kd^{m-i-1-k}\\right)-10^{m-i-1}\\right)\\\\\n&=\\frac 19\\sum_{i=0}^{m-1}\\sum_{j=0}^{a_{i+1}-1}\\sum_{d=1}^9\\left(10^{\\sum_{s=1}^i[a_s \\ge d]+[j \\ge d]}(100-9d)^{m-i-1}-10^{m-i-1}\\right)\\\\\n&=\\frac 19\\sum_{i=0}^{m-1}\\sum_{d=1}^9\\left(10^{\\sum_{s=1}^i[a_s \\ge d]}(10\\max\\{a_{i+1}-d,0\\}+\\min\\{a_{i+1},d\\})(100-9d)^{m-i-1}-a_{i+1}10^{m-i-1}\\right)\\\\\n&=\\frac 19\\sum_{i=1}^m\\sum_{j=1}^9\\left(10^{\\sum_{s=1}^{i-1}[a_s \\ge j]}(100-9j)^{m-i}(10\\max\\{a_i-j,0\\}+\\min\\{a_i,j\\})-a_i10^{m-i}\\right)\n\\end{aligned}\n$$\n$\\sum_{s=1}^i[a_s \\ge d],(100-9d)^{m-i-1},10^{m-i-1}$ 可以枚举 $i$ 时顺便维护。\n\n复杂度 $O(10m)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n\nusing namespace std;\ntypedef long long ll;\nconst ll P = 1e9 + 7;\nint n, a[705]; char s[705];\nll Pow[705][11];\nint main() {\n    cin >> s, n = strlen(s);\n    rep(i, 1, n) a[i] = s[n - i] - 48;\n    int i = 1;\n    while(a[i] == 9) a[i++] = 0;\n    a[i]++;\n    if(i > n) n++;\n    reverse(a + 1, a + n + 1);\n    rep(i, 1, 10) Pow[0][i] = 1;\n    rep(i, 1, n) rep(j, 1, 10) Pow[i][j] = Pow[i - 1][j] * (100 - 9 * j) % P;\n    int idx[11] = {};\n    ll as = 0;\n    rep(i, 1, n) rep(j, 1, 9) {\n        (as += Pow[idx[j]][10] * Pow[n - i][j] % P * (10 * max(a[i] - j, 0) + min(a[i], j)) - a[i] * Pow[n - i][10]) %= P;\n        idx[j] += a[i] >= j;\n    }\n    cout << (as * 111111112 % P + P) % P;\n    return 0;\n}\n```","source":"_posts/CF908G.md","raw":"---\ntitle: New Year and Original Order | Codeforces 908G\ndate: 2021-03-26 20:19:09\nupdated: 2021-03-26 20:19:09\ntags: [动态规划,组合计数,数位动态规划]\ncategories: Codeforces\n---\n> [题目链接](https://codeforces.com/problemset/problem/908/G)\n>\n> 定义 $S(x)$ 表示把 $x$ 各数位上的数排序后得到的新数，$S(353594)=334559$。\n>\n> 给定 $n$，求 $\\sum\\limits_{i=1}^nS(i) \\bmod 10^9+7$。\n>\n> $n \\le 10^{700}$\n\n设 $n$ 总共 $m$ 位，$h_{x,i}$ 表示 $x$ 有多少个数位上的数大于等于 $i$。  \n\n<!-- more -->\n\n然后发现 $S(x) = \\sum\\limits_{i=1}^9 \\underbrace{111\\cdots 1}=\\frac 19\\sum\\limits_{i=1}^910^{h_{x,i}}-1=\\frac 19\\sum\\limits_{i=1}^9\\sum\\limits_{j=0}^{m}(10^j-1)\\sum\\limits_{k=1}^n[h_{k,i}=j]$  \n_________________________$h_{x,i}$ 个 $1$\n\n因此对每个 $i,j$ 求出 $\\sum\\limits_{k=1}^n[h_{k,i}=j]$ 即可求得答案。\n\n数位 ```DP``` 即可，复杂度 $O(100m^2)$。\n\n也可以组合计数：\n\n先让 ```n++```，问题变成求 $\\sum_{x < n}S(x)$。\n\n定义第 $i$ 位是从最高位开始的第 $i$ 位，$a_i$ 表示 $n$ 的第 $i$ 位。\n\n先枚举数 $x$ 和 $n$ 的 ```LCP``` $i \\in [0,m)$，再枚举 $x$ 在第 $i+1$ 位上的值 $j \\in [0,a_{i+1})$，则所有 $x$ 的贡献为：\n\n这里 $k$ 表示低 $m-i-1$ 位中有多少位大于等于 $d$。\n$$\n\\frac 19\\sum_{d=1}^9\\sum_{k=0}^{m-i-1}\\binom {m-i-1}k(10-d)^kd^{m-i-1-k}(10^{\\sum_{s=1}^i[a_s \\ge d]+[j \\ge d]+k}-1)\n$$\n故答案为：\n$$\n\\begin{aligned}\n&\\frac 19\\sum_{i=0}^{m-1}\\sum_{j=0}^{a_{i+1}-1}\\sum_{d=1}^9\\sum_{k=0}^{m-i-1}\\binom {m-i-1}k(10-d)^kd^{m-i-1-k}(10^{\\sum_{s=1}^i[a_s \\ge d]+[j \\ge d]+k}-1)\\\\\n&=\\frac 19\\sum_{i=0}^{m-1}\\sum_{j=0}^{a_{i+1}-1}\\sum_{d=1}^9\\left(\\left(10^{\\sum_{s=1}^i[a_s \\ge d]+[j \\ge d]}\\sum_{k=0}^{m-i-1}\\binom {m-i-1}k(100-10d)^kd^{m-i-1-k}\\right)-10^{m-i-1}\\right)\\\\\n&=\\frac 19\\sum_{i=0}^{m-1}\\sum_{j=0}^{a_{i+1}-1}\\sum_{d=1}^9\\left(10^{\\sum_{s=1}^i[a_s \\ge d]+[j \\ge d]}(100-9d)^{m-i-1}-10^{m-i-1}\\right)\\\\\n&=\\frac 19\\sum_{i=0}^{m-1}\\sum_{d=1}^9\\left(10^{\\sum_{s=1}^i[a_s \\ge d]}(10\\max\\{a_{i+1}-d,0\\}+\\min\\{a_{i+1},d\\})(100-9d)^{m-i-1}-a_{i+1}10^{m-i-1}\\right)\\\\\n&=\\frac 19\\sum_{i=1}^m\\sum_{j=1}^9\\left(10^{\\sum_{s=1}^{i-1}[a_s \\ge j]}(100-9j)^{m-i}(10\\max\\{a_i-j,0\\}+\\min\\{a_i,j\\})-a_i10^{m-i}\\right)\n\\end{aligned}\n$$\n$\\sum_{s=1}^i[a_s \\ge d],(100-9d)^{m-i-1},10^{m-i-1}$ 可以枚举 $i$ 时顺便维护。\n\n复杂度 $O(10m)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n\nusing namespace std;\ntypedef long long ll;\nconst ll P = 1e9 + 7;\nint n, a[705]; char s[705];\nll Pow[705][11];\nint main() {\n    cin >> s, n = strlen(s);\n    rep(i, 1, n) a[i] = s[n - i] - 48;\n    int i = 1;\n    while(a[i] == 9) a[i++] = 0;\n    a[i]++;\n    if(i > n) n++;\n    reverse(a + 1, a + n + 1);\n    rep(i, 1, 10) Pow[0][i] = 1;\n    rep(i, 1, n) rep(j, 1, 10) Pow[i][j] = Pow[i - 1][j] * (100 - 9 * j) % P;\n    int idx[11] = {};\n    ll as = 0;\n    rep(i, 1, n) rep(j, 1, 9) {\n        (as += Pow[idx[j]][10] * Pow[n - i][j] % P * (10 * max(a[i] - j, 0) + min(a[i], j)) - a[i] * Pow[n - i][10]) %= P;\n        idx[j] += a[i] >= j;\n    }\n    cout << (as * 111111112 % P + P) % P;\n    return 0;\n}\n```","slug":"CF908G","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxgzz001hootnfqcqgs66","content":"<blockquote>\r\n<p><a href=\"https://codeforces.com/problemset/problem/908/G\">题目链接</a></p>\r\n<p>定义 <span class=\"math inline\">\\(S(x)\\)</span> 表示把 <span class=\"math inline\">\\(x\\)</span> 各数位上的数排序后得到的新数，<span class=\"math inline\">\\(S(353594)=334559\\)</span>。</p>\r\n<p>给定 <span class=\"math inline\">\\(n\\)</span>，求 <span class=\"math inline\">\\(\\sum\\limits_{i=1}^nS(i) \\bmod 10^9+7\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^{700}\\)</span></p>\r\n</blockquote>\r\n<p>设 <span class=\"math inline\">\\(n\\)</span> 总共 <span class=\"math inline\">\\(m\\)</span> 位，<span class=\"math inline\">\\(h_{x,i}\\)</span> 表示 <span class=\"math inline\">\\(x\\)</span> 有多少个数位上的数大于等于 <span class=\"math inline\">\\(i\\)</span>。</p>\r\n<span id=\"more\"></span>\r\n<p>然后发现 <span class=\"math inline\">\\(S(x) = \\sum\\limits_{i=1}^9 \\underbrace{111\\cdots 1}=\\frac 19\\sum\\limits_{i=1}^910^{h_{x,i}}-1=\\frac 19\\sum\\limits_{i=1}^9\\sum\\limits_{j=0}^{m}(10^j-1)\\sum\\limits_{k=1}^n[h_{k,i}=j]\\)</span><br />\r\n_________________________<span class=\"math inline\">\\(h_{x,i}\\)</span> 个 <span class=\"math inline\">\\(1\\)</span></p>\r\n<p>因此对每个 <span class=\"math inline\">\\(i,j\\)</span> 求出 <span class=\"math inline\">\\(\\sum\\limits_{k=1}^n[h_{k,i}=j]\\)</span> 即可求得答案。</p>\r\n<p>数位 <code>DP</code> 即可，复杂度 <span class=\"math inline\">\\(O(100m^2)\\)</span>。</p>\r\n<p>也可以组合计数：</p>\r\n<p>先让 <code>n++</code>，问题变成求 <span class=\"math inline\">\\(\\sum_{x &lt; n}S(x)\\)</span>。</p>\r\n<p>定义第 <span class=\"math inline\">\\(i\\)</span> 位是从最高位开始的第 <span class=\"math inline\">\\(i\\)</span> 位，<span class=\"math inline\">\\(a_i\\)</span> 表示 <span class=\"math inline\">\\(n\\)</span> 的第 <span class=\"math inline\">\\(i\\)</span> 位。</p>\r\n<p>先枚举数 <span class=\"math inline\">\\(x\\)</span> 和 <span class=\"math inline\">\\(n\\)</span> 的 <code>LCP</code> <span class=\"math inline\">\\(i \\in [0,m)\\)</span>，再枚举 <span class=\"math inline\">\\(x\\)</span> 在第 <span class=\"math inline\">\\(i+1\\)</span> 位上的值 <span class=\"math inline\">\\(j \\in [0,a_{i+1})\\)</span>，则所有 <span class=\"math inline\">\\(x\\)</span> 的贡献为：</p>\r\n<p>这里 <span class=\"math inline\">\\(k\\)</span> 表示低 <span class=\"math inline\">\\(m-i-1\\)</span> 位中有多少位大于等于 <span class=\"math inline\">\\(d\\)</span>。 <span class=\"math display\">\\[\r\n\\frac 19\\sum_{d=1}^9\\sum_{k=0}^{m-i-1}\\binom {m-i-1}k(10-d)^kd^{m-i-1-k}(10^{\\sum_{s=1}^i[a_s \\ge d]+[j \\ge d]+k}-1)\r\n\\]</span> 故答案为： <span class=\"math display\">\\[\r\n\\begin{aligned}\r\n&amp;\\frac 19\\sum_{i=0}^{m-1}\\sum_{j=0}^{a_{i+1}-1}\\sum_{d=1}^9\\sum_{k=0}^{m-i-1}\\binom {m-i-1}k(10-d)^kd^{m-i-1-k}(10^{\\sum_{s=1}^i[a_s \\ge d]+[j \\ge d]+k}-1)\\\\\r\n&amp;=\\frac 19\\sum_{i=0}^{m-1}\\sum_{j=0}^{a_{i+1}-1}\\sum_{d=1}^9\\left(\\left(10^{\\sum_{s=1}^i[a_s \\ge d]+[j \\ge d]}\\sum_{k=0}^{m-i-1}\\binom {m-i-1}k(100-10d)^kd^{m-i-1-k}\\right)-10^{m-i-1}\\right)\\\\\r\n&amp;=\\frac 19\\sum_{i=0}^{m-1}\\sum_{j=0}^{a_{i+1}-1}\\sum_{d=1}^9\\left(10^{\\sum_{s=1}^i[a_s \\ge d]+[j \\ge d]}(100-9d)^{m-i-1}-10^{m-i-1}\\right)\\\\\r\n&amp;=\\frac 19\\sum_{i=0}^{m-1}\\sum_{d=1}^9\\left(10^{\\sum_{s=1}^i[a_s \\ge d]}(10\\max\\{a_{i+1}-d,0\\}+\\min\\{a_{i+1},d\\})(100-9d)^{m-i-1}-a_{i+1}10^{m-i-1}\\right)\\\\\r\n&amp;=\\frac 19\\sum_{i=1}^m\\sum_{j=1}^9\\left(10^{\\sum_{s=1}^{i-1}[a_s \\ge j]}(100-9j)^{m-i}(10\\max\\{a_i-j,0\\}+\\min\\{a_i,j\\})-a_i10^{m-i}\\right)\r\n\\end{aligned}\r\n\\]</span> <span class=\"math inline\">\\(\\sum_{s=1}^i[a_s \\ge d],(100-9d)^{m-i-1},10^{m-i-1}\\)</span> 可以枚举 <span class=\"math inline\">\\(i\\)</span> 时顺便维护。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(10m)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll P = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, a[<span class=\"number\">705</span>]; <span class=\"keyword\">char</span> s[<span class=\"number\">705</span>];</span><br><span class=\"line\">ll Pow[<span class=\"number\">705</span>][<span class=\"number\">11</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; s, n = <span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) a[i] = s[n - i] - <span class=\"number\">48</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(a[i] == <span class=\"number\">9</span>) a[i++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    a[i]++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &gt; n) n++;</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(a + <span class=\"number\">1</span>, a + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">10</span>) Pow[<span class=\"number\">0</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, <span class=\"number\">10</span>) Pow[i][j] = Pow[i - <span class=\"number\">1</span>][j] * (<span class=\"number\">100</span> - <span class=\"number\">9</span> * j) % P;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> idx[<span class=\"number\">11</span>] = &#123;&#125;;</span><br><span class=\"line\">    ll as = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, <span class=\"number\">9</span>) &#123;</span><br><span class=\"line\">        (as += Pow[idx[j]][<span class=\"number\">10</span>] * Pow[n - i][j] % P * (<span class=\"number\">10</span> * <span class=\"built_in\">max</span>(a[i] - j, <span class=\"number\">0</span>) + <span class=\"built_in\">min</span>(a[i], j)) - a[i] * Pow[n - i][<span class=\"number\">10</span>]) %= P;</span><br><span class=\"line\">        idx[j] += a[i] &gt;= j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; (as * <span class=\"number\">111111112</span> % P + P) % P;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":2478,"excerpt":"<blockquote>\r\n<p><a href=\"https://codeforces.com/problemset/problem/908/G\">题目链接</a></p>\r\n<p>定义 <span class=\"math inline\">\\(S(x)\\)</span> 表示把 <span class=\"math inline\">\\(x\\)</span> 各数位上的数排序后得到的新数，<span class=\"math inline\">\\(S(353594)=334559\\)</span>。</p>\r\n<p>给定 <span class=\"math inline\">\\(n\\)</span>，求 <span class=\"math inline\">\\(\\sum\\limits_{i=1}^nS(i) \\bmod 10^9+7\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^{700}\\)</span></p>\r\n</blockquote>\r\n<p>设 <span class=\"math inline\">\\(n\\)</span> 总共 <span class=\"math inline\">\\(m\\)</span> 位，<span class=\"math inline\">\\(h_{x,i}\\)</span> 表示 <span class=\"math inline\">\\(x\\)</span> 有多少个数位上的数大于等于 <span class=\"math inline\">\\(i\\)</span>。</p>","more":"<p>然后发现 <span class=\"math inline\">\\(S(x) = \\sum\\limits_{i=1}^9 \\underbrace{111\\cdots 1}=\\frac 19\\sum\\limits_{i=1}^910^{h_{x,i}}-1=\\frac 19\\sum\\limits_{i=1}^9\\sum\\limits_{j=0}^{m}(10^j-1)\\sum\\limits_{k=1}^n[h_{k,i}=j]\\)</span><br />\r\n_________________________<span class=\"math inline\">\\(h_{x,i}\\)</span> 个 <span class=\"math inline\">\\(1\\)</span></p>\r\n<p>因此对每个 <span class=\"math inline\">\\(i,j\\)</span> 求出 <span class=\"math inline\">\\(\\sum\\limits_{k=1}^n[h_{k,i}=j]\\)</span> 即可求得答案。</p>\r\n<p>数位 <code>DP</code> 即可，复杂度 <span class=\"math inline\">\\(O(100m^2)\\)</span>。</p>\r\n<p>也可以组合计数：</p>\r\n<p>先让 <code>n++</code>，问题变成求 <span class=\"math inline\">\\(\\sum_{x &lt; n}S(x)\\)</span>。</p>\r\n<p>定义第 <span class=\"math inline\">\\(i\\)</span> 位是从最高位开始的第 <span class=\"math inline\">\\(i\\)</span> 位，<span class=\"math inline\">\\(a_i\\)</span> 表示 <span class=\"math inline\">\\(n\\)</span> 的第 <span class=\"math inline\">\\(i\\)</span> 位。</p>\r\n<p>先枚举数 <span class=\"math inline\">\\(x\\)</span> 和 <span class=\"math inline\">\\(n\\)</span> 的 <code>LCP</code> <span class=\"math inline\">\\(i \\in [0,m)\\)</span>，再枚举 <span class=\"math inline\">\\(x\\)</span> 在第 <span class=\"math inline\">\\(i+1\\)</span> 位上的值 <span class=\"math inline\">\\(j \\in [0,a_{i+1})\\)</span>，则所有 <span class=\"math inline\">\\(x\\)</span> 的贡献为：</p>\r\n<p>这里 <span class=\"math inline\">\\(k\\)</span> 表示低 <span class=\"math inline\">\\(m-i-1\\)</span> 位中有多少位大于等于 <span class=\"math inline\">\\(d\\)</span>。 <span class=\"math display\">\\[\r\n\\frac 19\\sum_{d=1}^9\\sum_{k=0}^{m-i-1}\\binom {m-i-1}k(10-d)^kd^{m-i-1-k}(10^{\\sum_{s=1}^i[a_s \\ge d]+[j \\ge d]+k}-1)\r\n\\]</span> 故答案为： <span class=\"math display\">\\[\r\n\\begin{aligned}\r\n&amp;\\frac 19\\sum_{i=0}^{m-1}\\sum_{j=0}^{a_{i+1}-1}\\sum_{d=1}^9\\sum_{k=0}^{m-i-1}\\binom {m-i-1}k(10-d)^kd^{m-i-1-k}(10^{\\sum_{s=1}^i[a_s \\ge d]+[j \\ge d]+k}-1)\\\\\r\n&amp;=\\frac 19\\sum_{i=0}^{m-1}\\sum_{j=0}^{a_{i+1}-1}\\sum_{d=1}^9\\left(\\left(10^{\\sum_{s=1}^i[a_s \\ge d]+[j \\ge d]}\\sum_{k=0}^{m-i-1}\\binom {m-i-1}k(100-10d)^kd^{m-i-1-k}\\right)-10^{m-i-1}\\right)\\\\\r\n&amp;=\\frac 19\\sum_{i=0}^{m-1}\\sum_{j=0}^{a_{i+1}-1}\\sum_{d=1}^9\\left(10^{\\sum_{s=1}^i[a_s \\ge d]+[j \\ge d]}(100-9d)^{m-i-1}-10^{m-i-1}\\right)\\\\\r\n&amp;=\\frac 19\\sum_{i=0}^{m-1}\\sum_{d=1}^9\\left(10^{\\sum_{s=1}^i[a_s \\ge d]}(10\\max\\{a_{i+1}-d,0\\}+\\min\\{a_{i+1},d\\})(100-9d)^{m-i-1}-a_{i+1}10^{m-i-1}\\right)\\\\\r\n&amp;=\\frac 19\\sum_{i=1}^m\\sum_{j=1}^9\\left(10^{\\sum_{s=1}^{i-1}[a_s \\ge j]}(100-9j)^{m-i}(10\\max\\{a_i-j,0\\}+\\min\\{a_i,j\\})-a_i10^{m-i}\\right)\r\n\\end{aligned}\r\n\\]</span> <span class=\"math inline\">\\(\\sum_{s=1}^i[a_s \\ge d],(100-9d)^{m-i-1},10^{m-i-1}\\)</span> 可以枚举 <span class=\"math inline\">\\(i\\)</span> 时顺便维护。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(10m)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll P = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, a[<span class=\"number\">705</span>]; <span class=\"keyword\">char</span> s[<span class=\"number\">705</span>];</span><br><span class=\"line\">ll Pow[<span class=\"number\">705</span>][<span class=\"number\">11</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; s, n = <span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) a[i] = s[n - i] - <span class=\"number\">48</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(a[i] == <span class=\"number\">9</span>) a[i++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    a[i]++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &gt; n) n++;</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(a + <span class=\"number\">1</span>, a + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">10</span>) Pow[<span class=\"number\">0</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, <span class=\"number\">10</span>) Pow[i][j] = Pow[i - <span class=\"number\">1</span>][j] * (<span class=\"number\">100</span> - <span class=\"number\">9</span> * j) % P;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> idx[<span class=\"number\">11</span>] = &#123;&#125;;</span><br><span class=\"line\">    ll as = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, <span class=\"number\">9</span>) &#123;</span><br><span class=\"line\">        (as += Pow[idx[j]][<span class=\"number\">10</span>] * Pow[n - i][j] % P * (<span class=\"number\">10</span> * <span class=\"built_in\">max</span>(a[i] - j, <span class=\"number\">0</span>) + <span class=\"built_in\">min</span>(a[i], j)) - a[i] * Pow[n - i][<span class=\"number\">10</span>]) %= P;</span><br><span class=\"line\">        idx[j] += a[i] &gt;= j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; (as * <span class=\"number\">111111112</span> % P + P) % P;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Dictionary | Gym 100958B","date":"2021-03-13T14:49:04.000Z","updated":"2021-03-13T14:49:04.000Z","_content":"> [题目链接](http://codeforces.com/gym/100958/problem/B)\n>\n> 有 $n$ 由**小写字母和 ```?``` 组成**的字符串，问有多少种替换 ```?``` 的方案，使得最终的字符串 $S_1,S_2,\\cdots,S_n$ 满足字典序递增。\n>\n> $n \\le 50, |S_i| \\le 20$\n\n###### 我的解法：\n\n在每个字符串的第一个字符被确定后发现第一个字符不同的串之间字典是关系已经确定，关系还未确定的（第一个字符相同）的串组成若干区间。\n\n由于区间之间是独立的，将删掉所有串第一个字符后所有区间内部的合法方案数乘起来就是总方案数，而“删掉所有串第一个字符后所有区间内部的合法方案”是一个数量不多的子问题，考虑把“前多少个字符已经删掉”和“区间”作为 ```DP``` 的状态。\n\n我们有一个状态的定义：$f_{i,l,r}$ 表示只从每个串的第 $i$ 个字符开始考虑，替换第 $l$ 个到 $r$ 个串中的 ```?``` ，使得 $S_l,S_{l+1},\\cdots,S_r$ 满足字典序递增的方案数。\n\n然后发现这个状态虽然描述清楚了子问题，但没有很显然的转移。为了实现高效的转移，每次转移时还需要做一个横向 ```DP```，有点麻烦。\n\n所有给这个状态在添加一维 $k$ 表示第 $l$ 个到 $r$ 个串中第 $i$ 个字符都必须大于等于 $k$，然后就有很简单的递推：\n\n枚举最小的 $j \\in [l,r]$，使得 $S_{j}[i] > k$，也就是说 $\\forall x \\in [l,j-1]$，有 $S_x[i] = k$，$\\forall x \\in [j,r]$，有 $S_x[i] \\ge k + 1$。\n$$\nf_{i,l,r,k}=\\sum\\limits_{j=l}^{r+1}f_{i+1,l,j-1,'a'}\\cdot f_{i,j,r,k+1}\n$$\n为了处理较短的串提前结束而出现空字符的问题，记 $k=-1$ 表示允许空字符出现。如果 $S_l[i]$ 是空字符，那么它就等于 $f_{i,l+1,r,'a'}$，否则是 $f_{i,l,r,'a'}$，如果 $k \\ne -1$，那么 $S_l[i]$ 就不能是空字符。\n\n最后是边界条件：当 $l > r$ 时值为 $1$，当 $l \\le r \\land k > 'z'$ 时值为 $0$。\n\n代码如下：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n\nusing namespace std;\nconst int P = 1e9 + 7;\ntypedef long long ll;\nint n;\nchar S[55][25];\nll f[25][55][55][26];\nll dp(int i, int l, int r, int k) {\n    if(l > r) return 1; if(k > 25) return 0;\n    if(k == -1) return S[l][i] ? dp(i, l, r, 0) : dp(i, l + 1, r, 0);\n    if(!S[l][i]) return 0;\n    ll& res = f[i][l][r][k];\n    if(~res) return res; res = 0;\n    rep(j, l, r + 1) {\n        res = (res + dp(i + 1, l, j - 1, -1) * dp(i, j, r, k + 1)) % P;\n        if(S[j][i] != '?' && S[j][i] != 'a' + k) break;\n    }\n    return res;\n}\nint main() {\n    cin >> n;\n    rep(i, 1, n) cin >> (S[i] + 1);\n    mem(f, -1);\n    cout << dp(1, 1, n, 0);\n    return 0;\n}\n```\n\n###### 其他的解法：\n\n1. 第一篇代码状态设定和转移和我的解法相同，但对于空字符的处理是**把它当做一个比“a\"小**的字符，然后将所有串的长度全部补成 $20$，把 $k='z'+1$ 和 $i=21$ 作为边界情况，同时限制 ```?``` 不能变成空字符。但转移时需要特判没有字符 $k$ 和全部是字符 $k$ 的情况。\n\n2. 第二篇代码是把 $f_{i,l,r}$ 作为状态，转移时作一个横向 DP，设 $T_{i,j}$ 表示当前已经填了字符\"a\"-$i$（不一定用过），填好第 $l$ 到第 $i$ 个串的方案数。\n\n   我不太清楚这样做的复杂度。\n\n3. 第三篇和第一篇的唯一区别是把空区间作为边界条件，转移时无需特判。","source":"_posts/Gym100958B.md","raw":"---\ntitle: Dictionary | Gym 100958B\ndate: 2021-03-13 22:49:04\nupdated: 2021-03-13 22:49:04\ntags: [动态规划,区间动态规划]\ncategories: Codeforces\n---\n> [题目链接](http://codeforces.com/gym/100958/problem/B)\n>\n> 有 $n$ 由**小写字母和 ```?``` 组成**的字符串，问有多少种替换 ```?``` 的方案，使得最终的字符串 $S_1,S_2,\\cdots,S_n$ 满足字典序递增。\n>\n> $n \\le 50, |S_i| \\le 20$\n\n###### 我的解法：\n\n在每个字符串的第一个字符被确定后发现第一个字符不同的串之间字典是关系已经确定，关系还未确定的（第一个字符相同）的串组成若干区间。\n\n由于区间之间是独立的，将删掉所有串第一个字符后所有区间内部的合法方案数乘起来就是总方案数，而“删掉所有串第一个字符后所有区间内部的合法方案”是一个数量不多的子问题，考虑把“前多少个字符已经删掉”和“区间”作为 ```DP``` 的状态。\n\n我们有一个状态的定义：$f_{i,l,r}$ 表示只从每个串的第 $i$ 个字符开始考虑，替换第 $l$ 个到 $r$ 个串中的 ```?``` ，使得 $S_l,S_{l+1},\\cdots,S_r$ 满足字典序递增的方案数。\n\n然后发现这个状态虽然描述清楚了子问题，但没有很显然的转移。为了实现高效的转移，每次转移时还需要做一个横向 ```DP```，有点麻烦。\n\n所有给这个状态在添加一维 $k$ 表示第 $l$ 个到 $r$ 个串中第 $i$ 个字符都必须大于等于 $k$，然后就有很简单的递推：\n\n枚举最小的 $j \\in [l,r]$，使得 $S_{j}[i] > k$，也就是说 $\\forall x \\in [l,j-1]$，有 $S_x[i] = k$，$\\forall x \\in [j,r]$，有 $S_x[i] \\ge k + 1$。\n$$\nf_{i,l,r,k}=\\sum\\limits_{j=l}^{r+1}f_{i+1,l,j-1,'a'}\\cdot f_{i,j,r,k+1}\n$$\n为了处理较短的串提前结束而出现空字符的问题，记 $k=-1$ 表示允许空字符出现。如果 $S_l[i]$ 是空字符，那么它就等于 $f_{i,l+1,r,'a'}$，否则是 $f_{i,l,r,'a'}$，如果 $k \\ne -1$，那么 $S_l[i]$ 就不能是空字符。\n\n最后是边界条件：当 $l > r$ 时值为 $1$，当 $l \\le r \\land k > 'z'$ 时值为 $0$。\n\n代码如下：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n\nusing namespace std;\nconst int P = 1e9 + 7;\ntypedef long long ll;\nint n;\nchar S[55][25];\nll f[25][55][55][26];\nll dp(int i, int l, int r, int k) {\n    if(l > r) return 1; if(k > 25) return 0;\n    if(k == -1) return S[l][i] ? dp(i, l, r, 0) : dp(i, l + 1, r, 0);\n    if(!S[l][i]) return 0;\n    ll& res = f[i][l][r][k];\n    if(~res) return res; res = 0;\n    rep(j, l, r + 1) {\n        res = (res + dp(i + 1, l, j - 1, -1) * dp(i, j, r, k + 1)) % P;\n        if(S[j][i] != '?' && S[j][i] != 'a' + k) break;\n    }\n    return res;\n}\nint main() {\n    cin >> n;\n    rep(i, 1, n) cin >> (S[i] + 1);\n    mem(f, -1);\n    cout << dp(1, 1, n, 0);\n    return 0;\n}\n```\n\n###### 其他的解法：\n\n1. 第一篇代码状态设定和转移和我的解法相同，但对于空字符的处理是**把它当做一个比“a\"小**的字符，然后将所有串的长度全部补成 $20$，把 $k='z'+1$ 和 $i=21$ 作为边界情况，同时限制 ```?``` 不能变成空字符。但转移时需要特判没有字符 $k$ 和全部是字符 $k$ 的情况。\n\n2. 第二篇代码是把 $f_{i,l,r}$ 作为状态，转移时作一个横向 DP，设 $T_{i,j}$ 表示当前已经填了字符\"a\"-$i$（不一定用过），填好第 $l$ 到第 $i$ 个串的方案数。\n\n   我不太清楚这样做的复杂度。\n\n3. 第三篇和第一篇的唯一区别是把空区间作为边界条件，转移时无需特判。","slug":"Gym100958B","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh00001lootn0ruo852i","content":"<blockquote>\r\n<p><a href=\"http://codeforces.com/gym/100958/problem/B\">题目链接</a></p>\r\n<p>有 <span class=\"math inline\">\\(n\\)</span> 由<strong>小写字母和 <code>?</code> 组成</strong>的字符串，问有多少种替换 <code>?</code> 的方案，使得最终的字符串 <span class=\"math inline\">\\(S_1,S_2,\\cdots,S_n\\)</span> 满足字典序递增。</p>\r\n<p><span class=\"math inline\">\\(n \\le 50, |S_i| \\le 20\\)</span></p>\r\n</blockquote>\r\n<h6 id=\"我的解法\">我的解法：</h6>\r\n<p>在每个字符串的第一个字符被确定后发现第一个字符不同的串之间字典是关系已经确定，关系还未确定的（第一个字符相同）的串组成若干区间。</p>\r\n<p>由于区间之间是独立的，将删掉所有串第一个字符后所有区间内部的合法方案数乘起来就是总方案数，而“删掉所有串第一个字符后所有区间内部的合法方案”是一个数量不多的子问题，考虑把“前多少个字符已经删掉”和“区间”作为 <code>DP</code> 的状态。</p>\r\n<p>我们有一个状态的定义：<span class=\"math inline\">\\(f_{i,l,r}\\)</span> 表示只从每个串的第 <span class=\"math inline\">\\(i\\)</span> 个字符开始考虑，替换第 <span class=\"math inline\">\\(l\\)</span> 个到 <span class=\"math inline\">\\(r\\)</span> 个串中的 <code>?</code> ，使得 <span class=\"math inline\">\\(S_l,S_{l+1},\\cdots,S_r\\)</span> 满足字典序递增的方案数。</p>\r\n<p>然后发现这个状态虽然描述清楚了子问题，但没有很显然的转移。为了实现高效的转移，每次转移时还需要做一个横向 <code>DP</code>，有点麻烦。</p>\r\n<p>所有给这个状态在添加一维 <span class=\"math inline\">\\(k\\)</span> 表示第 <span class=\"math inline\">\\(l\\)</span> 个到 <span class=\"math inline\">\\(r\\)</span> 个串中第 <span class=\"math inline\">\\(i\\)</span> 个字符都必须大于等于 <span class=\"math inline\">\\(k\\)</span>，然后就有很简单的递推：</p>\r\n<p>枚举最小的 <span class=\"math inline\">\\(j \\in [l,r]\\)</span>，使得 <span class=\"math inline\">\\(S_{j}[i] &gt; k\\)</span>，也就是说 <span class=\"math inline\">\\(\\forall x \\in [l,j-1]\\)</span>，有 <span class=\"math inline\">\\(S_x[i] = k\\)</span>，<span class=\"math inline\">\\(\\forall x \\in [j,r]\\)</span>，有 <span class=\"math inline\">\\(S_x[i] \\ge k + 1\\)</span>。 <span class=\"math display\">\\[\r\nf_{i,l,r,k}=\\sum\\limits_{j=l}^{r+1}f_{i+1,l,j-1,&#39;a&#39;}\\cdot f_{i,j,r,k+1}\r\n\\]</span> 为了处理较短的串提前结束而出现空字符的问题，记 <span class=\"math inline\">\\(k=-1\\)</span> 表示允许空字符出现。如果 <span class=\"math inline\">\\(S_l[i]\\)</span> 是空字符，那么它就等于 <span class=\"math inline\">\\(f_{i,l+1,r,&#39;a&#39;}\\)</span>，否则是 <span class=\"math inline\">\\(f_{i,l,r,&#39;a&#39;}\\)</span>，如果 <span class=\"math inline\">\\(k \\ne -1\\)</span>，那么 <span class=\"math inline\">\\(S_l[i]\\)</span> 就不能是空字符。</p>\r\n<p>最后是边界条件：当 <span class=\"math inline\">\\(l &gt; r\\)</span> 时值为 <span class=\"math inline\">\\(1\\)</span>，当 <span class=\"math inline\">\\(l \\le r \\land k &gt; &#39;z&#39;\\)</span> 时值为 <span class=\"math inline\">\\(0\\)</span>。</p>\r\n<p>代码如下：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> P = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">char</span> S[<span class=\"number\">55</span>][<span class=\"number\">25</span>];</span><br><span class=\"line\">ll f[<span class=\"number\">25</span>][<span class=\"number\">55</span>][<span class=\"number\">55</span>][<span class=\"number\">26</span>];</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dp</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt; r) <span class=\"keyword\">return</span> <span class=\"number\">1</span>; <span class=\"keyword\">if</span>(k &gt; <span class=\"number\">25</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> S[l][i] ? <span class=\"built_in\">dp</span>(i, l, r, <span class=\"number\">0</span>) : <span class=\"built_in\">dp</span>(i, l + <span class=\"number\">1</span>, r, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!S[l][i]) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    ll&amp; res = f[i][l][r][k];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(~res) <span class=\"keyword\">return</span> res; res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(j, l, r + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        res = (res + <span class=\"built_in\">dp</span>(i + <span class=\"number\">1</span>, l, j - <span class=\"number\">1</span>, <span class=\"number\">-1</span>) * <span class=\"built_in\">dp</span>(i, j, r, k + <span class=\"number\">1</span>)) % P;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S[j][i] != <span class=\"string\">&#x27;?&#x27;</span> &amp;&amp; S[j][i] != <span class=\"string\">&#x27;a&#x27;</span> + k) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) cin &gt;&gt; (S[i] + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">mem</span>(f, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">dp</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h6 id=\"其他的解法\">其他的解法：</h6>\r\n<ol type=\"1\">\r\n<li><p>第一篇代码状态设定和转移和我的解法相同，但对于空字符的处理是<strong>把它当做一个比“a\"小</strong>的字符，然后将所有串的长度全部补成 <span class=\"math inline\">\\(20\\)</span>，把 <span class=\"math inline\">\\(k=&#39;z&#39;+1\\)</span> 和 <span class=\"math inline\">\\(i=21\\)</span> 作为边界情况，同时限制 <code>?</code> 不能变成空字符。但转移时需要特判没有字符 <span class=\"math inline\">\\(k\\)</span> 和全部是字符 <span class=\"math inline\">\\(k\\)</span> 的情况。</p></li>\r\n<li><p>第二篇代码是把 <span class=\"math inline\">\\(f_{i,l,r}\\)</span> 作为状态，转移时作一个横向 DP，设 <span class=\"math inline\">\\(T_{i,j}\\)</span> 表示当前已经填了字符\"a\"-<span class=\"math inline\">\\(i\\)</span>（不一定用过），填好第 <span class=\"math inline\">\\(l\\)</span> 到第 <span class=\"math inline\">\\(i\\)</span> 个串的方案数。</p>\r\n<p>我不太清楚这样做的复杂度。</p></li>\r\n<li><p>第三篇和第一篇的唯一区别是把空区间作为边界条件，转移时无需特判。</p></li>\r\n</ol>\r\n","site":{"data":{}},"length":1965,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"http://codeforces.com/gym/100958/problem/B\">题目链接</a></p>\r\n<p>有 <span class=\"math inline\">\\(n\\)</span> 由<strong>小写字母和 <code>?</code> 组成</strong>的字符串，问有多少种替换 <code>?</code> 的方案，使得最终的字符串 <span class=\"math inline\">\\(S_1,S_2,\\cdots,S_n\\)</span> 满足字典序递增。</p>\r\n<p><span class=\"math inline\">\\(n \\le 50, |S_i| \\le 20\\)</span></p>\r\n</blockquote>\r\n<h6 id=\"我的解法\">我的解法：</h6>\r\n<p>在每个字符串的第一个字符被确定后发现第一个字符不同的串之间字典是关系已经确定，关系还未确定的（第一个字符相同）的串组成若干区间。</p>\r\n<p>由于区间之间是独立的，将删掉所有串第一个字符后所有区间内部的合法方案数乘起来就是总方案数，而“删掉所有串第一个字符后所有区间内部的合法方案”是一个数量不多的子问题，考虑把“前多少个字符已经删掉”和“区间”作为 <code>DP</code> 的状态。</p>\r\n<p>我们有一个状态的定义：<span class=\"math inline\">\\(f_{i,l,r}\\)</span> 表示只从每个串的第 <span class=\"math inline\">\\(i\\)</span> 个字符开始考虑，替换第 <span class=\"math inline\">\\(l\\)</span> 个到 <span class=\"math inline\">\\(r\\)</span> 个串中的 <code>?</code> ，使得 <span class=\"math inline\">\\(S_l,S_{l+1},\\cdots,S_r\\)</span> 满足字典序递增的方案数。</p>\r\n<p>然后发现这个状态虽然描述清楚了子问题，但没有很显然的转移。为了实现高效的转移，每次转移时还需要做一个横向 <code>DP</code>，有点麻烦。</p>\r\n<p>所有给这个状态在添加一维 <span class=\"math inline\">\\(k\\)</span> 表示第 <span class=\"math inline\">\\(l\\)</span> 个到 <span class=\"math inline\">\\(r\\)</span> 个串中第 <span class=\"math inline\">\\(i\\)</span> 个字符都必须大于等于 <span class=\"math inline\">\\(k\\)</span>，然后就有很简单的递推：</p>\r\n<p>枚举最小的 <span class=\"math inline\">\\(j \\in [l,r]\\)</span>，使得 <span class=\"math inline\">\\(S_{j}[i] &gt; k\\)</span>，也就是说 <span class=\"math inline\">\\(\\forall x \\in [l,j-1]\\)</span>，有 <span class=\"math inline\">\\(S_x[i] = k\\)</span>，<span class=\"math inline\">\\(\\forall x \\in [j,r]\\)</span>，有 <span class=\"math inline\">\\(S_x[i] \\ge k + 1\\)</span>。 <span class=\"math display\">\\[\r\nf_{i,l,r,k}=\\sum\\limits_{j=l}^{r+1}f_{i+1,l,j-1,&#39;a&#39;}\\cdot f_{i,j,r,k+1}\r\n\\]</span> 为了处理较短的串提前结束而出现空字符的问题，记 <span class=\"math inline\">\\(k=-1\\)</span> 表示允许空字符出现。如果 <span class=\"math inline\">\\(S_l[i]\\)</span> 是空字符，那么它就等于 <span class=\"math inline\">\\(f_{i,l+1,r,&#39;a&#39;}\\)</span>，否则是 <span class=\"math inline\">\\(f_{i,l,r,&#39;a&#39;}\\)</span>，如果 <span class=\"math inline\">\\(k \\ne -1\\)</span>，那么 <span class=\"math inline\">\\(S_l[i]\\)</span> 就不能是空字符。</p>\r\n<p>最后是边界条件：当 <span class=\"math inline\">\\(l &gt; r\\)</span> 时值为 <span class=\"math inline\">\\(1\\)</span>，当 <span class=\"math inline\">\\(l \\le r \\land k &gt; &#39;z&#39;\\)</span> 时值为 <span class=\"math inline\">\\(0\\)</span>。</p>\r\n<p>代码如下：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> P = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">char</span> S[<span class=\"number\">55</span>][<span class=\"number\">25</span>];</span><br><span class=\"line\">ll f[<span class=\"number\">25</span>][<span class=\"number\">55</span>][<span class=\"number\">55</span>][<span class=\"number\">26</span>];</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dp</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt; r) <span class=\"keyword\">return</span> <span class=\"number\">1</span>; <span class=\"keyword\">if</span>(k &gt; <span class=\"number\">25</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> S[l][i] ? <span class=\"built_in\">dp</span>(i, l, r, <span class=\"number\">0</span>) : <span class=\"built_in\">dp</span>(i, l + <span class=\"number\">1</span>, r, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!S[l][i]) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    ll&amp; res = f[i][l][r][k];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(~res) <span class=\"keyword\">return</span> res; res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(j, l, r + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        res = (res + <span class=\"built_in\">dp</span>(i + <span class=\"number\">1</span>, l, j - <span class=\"number\">1</span>, <span class=\"number\">-1</span>) * <span class=\"built_in\">dp</span>(i, j, r, k + <span class=\"number\">1</span>)) % P;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(S[j][i] != <span class=\"string\">&#x27;?&#x27;</span> &amp;&amp; S[j][i] != <span class=\"string\">&#x27;a&#x27;</span> + k) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) cin &gt;&gt; (S[i] + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">mem</span>(f, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">dp</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h6 id=\"其他的解法\">其他的解法：</h6>\r\n<ol type=\"1\">\r\n<li><p>第一篇代码状态设定和转移和我的解法相同，但对于空字符的处理是<strong>把它当做一个比“a\"小</strong>的字符，然后将所有串的长度全部补成 <span class=\"math inline\">\\(20\\)</span>，把 <span class=\"math inline\">\\(k=&#39;z&#39;+1\\)</span> 和 <span class=\"math inline\">\\(i=21\\)</span> 作为边界情况，同时限制 <code>?</code> 不能变成空字符。但转移时需要特判没有字符 <span class=\"math inline\">\\(k\\)</span> 和全部是字符 <span class=\"math inline\">\\(k\\)</span> 的情况。</p></li>\r\n<li><p>第二篇代码是把 <span class=\"math inline\">\\(f_{i,l,r}\\)</span> 作为状态，转移时作一个横向 DP，设 <span class=\"math inline\">\\(T_{i,j}\\)</span> 表示当前已经填了字符\"a\"-<span class=\"math inline\">\\(i\\)</span>（不一定用过），填好第 <span class=\"math inline\">\\(l\\)</span> 到第 <span class=\"math inline\">\\(i\\)</span> 个串的方案数。</p>\r\n<p>我不太清楚这样做的复杂度。</p></li>\r\n<li><p>第三篇和第一篇的唯一区别是把空区间作为边界条件，转移时无需特判。</p></li>\r\n</ol>\r\n"},{"title":"Hello World!","date":"2021-03-13T13:06:21.000Z","updated":"2021-03-13T13:06:21.000Z","top":255,"_content":"![](https://ipcounter.ihcr.top/?mode=2&mail=(2465478971qq@gmail.com)&qq=(2465478971)&gh=(song-jx)&lg=(plate_let))\n在无数久的 🐦咕咕咕 后一个博客它建成了！\n\n一些有用的网站：\n\n- [uDebug](https://www.udebug.com/)\n- [Codeforces Official](https://t.me/codeforces_official)\n- [Codeforces m2](http://m2.codeforces.com)\n- [LaTeX 各种命令，符号](https://blog.csdn.net/garfielder007/article/details/51646604)\n- [graph editor](https://csacademy.com/app/graph_editor/)\n\n关于我：\n\n- QQ: 2465478971\n- E-Mail: 2465478971qq@gmail.com\n- Codeforces ID：songjiaxing platelets\n- Atcoder ID：songjiaxing platelets\n- 洛谷 ID：plate_let\n\n```cpp\n  _|_|                              _|  _|    _|  \n_|    _|  _|  _|_|  _|_|_|_|        _|  _|  _|    \n_|    _|  _|_|          _|          _|  _|_|      \n_|    _|  _|          _|      _|    _|  _|  _|    \n  _|_|    _|        _|_|_|_|    _|_|    _|    _|\n```","source":"_posts/Hello-world.md","raw":"---\ntitle: 'Hello World!'\ndate: 2021-03-13 21:06:21\nupdated: 2021-03-13 21:06:21\ntop: 255\n---\n![](https://ipcounter.ihcr.top/?mode=2&mail=(2465478971qq@gmail.com)&qq=(2465478971)&gh=(song-jx)&lg=(plate_let))\n在无数久的 🐦咕咕咕 后一个博客它建成了！\n\n一些有用的网站：\n\n- [uDebug](https://www.udebug.com/)\n- [Codeforces Official](https://t.me/codeforces_official)\n- [Codeforces m2](http://m2.codeforces.com)\n- [LaTeX 各种命令，符号](https://blog.csdn.net/garfielder007/article/details/51646604)\n- [graph editor](https://csacademy.com/app/graph_editor/)\n\n关于我：\n\n- QQ: 2465478971\n- E-Mail: 2465478971qq@gmail.com\n- Codeforces ID：songjiaxing platelets\n- Atcoder ID：songjiaxing platelets\n- 洛谷 ID：plate_let\n\n```cpp\n  _|_|                              _|  _|    _|  \n_|    _|  _|  _|_|  _|_|_|_|        _|  _|  _|    \n_|    _|  _|_|          _|          _|  _|_|      \n_|    _|  _|          _|      _|    _|  _|  _|    \n  _|_|    _|        _|_|_|_|    _|_|    _|    _|\n```","slug":"Hello-world","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh01001oootncdlg737z","content":"<p><img src=\"https://ipcounter.ihcr.top/?mode=2&amp;mail=(2465478971qq@gmail.com)&amp;qq=(2465478971)&amp;gh=(song-jx)&amp;lg=(plate_let)\" /> 在无数久的 🐦咕咕咕 后一个博客它建成了！</p>\r\n<p>一些有用的网站：</p>\r\n<ul>\r\n<li><a href=\"https://www.udebug.com/\">uDebug</a></li>\r\n<li><a href=\"https://t.me/codeforces_official\">Codeforces Official</a></li>\r\n<li><a href=\"http://m2.codeforces.com\">Codeforces m2</a></li>\r\n<li><a href=\"https://blog.csdn.net/garfielder007/article/details/51646604\">LaTeX 各种命令，符号</a></li>\r\n<li><a href=\"https://csacademy.com/app/graph_editor/\">graph editor</a></li>\r\n</ul>\r\n<p>关于我：</p>\r\n<ul>\r\n<li>QQ: 2465478971</li>\r\n<li>E-Mail: 2465478971qq@gmail.com</li>\r\n<li>Codeforces ID：songjiaxing platelets</li>\r\n<li>Atcoder ID：songjiaxing platelets</li>\r\n<li>洛谷 ID：plate_let</li>\r\n</ul>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  _|_|                              _|  _|    _|  </span><br><span class=\"line\">_|    _|  _|  _|_|  _|_|_|_|        _|  _|  _|    </span><br><span class=\"line\">_|    _|  _|_|          _|          _|  _|_|      </span><br><span class=\"line\">_|    _|  _|          _|      _|    _|  _|  _|    </span><br><span class=\"line\">  _|_|    _|        _|_|_|_|    _|_|    _|    _|</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":303,"excerpt":"","more":"<p><img src=\"https://ipcounter.ihcr.top/?mode=2&amp;mail=(2465478971qq@gmail.com)&amp;qq=(2465478971)&amp;gh=(song-jx)&amp;lg=(plate_let)\" /> 在无数久的 🐦咕咕咕 后一个博客它建成了！</p>\r\n<p>一些有用的网站：</p>\r\n<ul>\r\n<li><a href=\"https://www.udebug.com/\">uDebug</a></li>\r\n<li><a href=\"https://t.me/codeforces_official\">Codeforces Official</a></li>\r\n<li><a href=\"http://m2.codeforces.com\">Codeforces m2</a></li>\r\n<li><a href=\"https://blog.csdn.net/garfielder007/article/details/51646604\">LaTeX 各种命令，符号</a></li>\r\n<li><a href=\"https://csacademy.com/app/graph_editor/\">graph editor</a></li>\r\n</ul>\r\n<p>关于我：</p>\r\n<ul>\r\n<li>QQ: 2465478971</li>\r\n<li>E-Mail: 2465478971qq@gmail.com</li>\r\n<li>Codeforces ID：songjiaxing platelets</li>\r\n<li>Atcoder ID：songjiaxing platelets</li>\r\n<li>洛谷 ID：plate_let</li>\r\n</ul>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  _|_|                              _|  _|    _|  </span><br><span class=\"line\">_|    _|  _|  _|_|  _|_|_|_|        _|  _|  _|    </span><br><span class=\"line\">_|    _|  _|_|          _|          _|  _|_|      </span><br><span class=\"line\">_|    _|  _|          _|      _|    _|  _|  _|    </span><br><span class=\"line\">  _|_|    _|        _|_|_|_|    _|_|    _|    _|</span><br></pre></td></tr></table></figure>\r\n"},{"title":"salesman | IOI2009","date":"2021-05-02T13:25:00.000Z","updated":"2021-05-02T13:25:00.000Z","_content":"> 坐标轴上有 $N$ 场展览会，每场展览会有一个举行时间 $T_i$ ，举行地点 $L_i$ 和获利 $M_i$。\n>\n> 坐标向大移动 $1$ 的代价是 $D$，向小移动 $1$ 的代价是 $U$，速度为任意大。\n>\n> 每场展览会只能参加一次，问从 $S$ 出发最后再回到 $S$ 的最大获利。\n>\n> $N,T_i \\le 5 \\cdot 10^5,L_i \\le 5 \\cdot 10^5+1$\n\n先考虑一个弱化版的问题：$T_i$ 互不相同。\n\n设 $f_i$表示刚参加第 $i$ 场展览会后的最大获利。\n\n有转移方程 $f_i = \\max\\limits_{T_j < T_i}f_j-cost(j,i)$。\n\n其中\n$$\ncost(i,j)=\\begin{cases}\nD(L_j-L_i) &(L_i<L_j)\\\\\nU(L_i-L_j) &(L_i>L_j)\n\\end{cases}\n$$\n两种情况分别用树状数组维护前缀（后缀）最大值即可实现 $O(\\log n)$ 转移。\n\n再考虑同一天的多场展览会怎么处理。\n\n记 $f_{i,0/1}$ 表示从左/右到达第 $i$ 场展览会后的最大获利。\n\n然后正反两遍 ```DP```，每次用临时变量存由同一天的展览会转移来最优解，和树状数组中的最优解取个较优，计算出 ```DP``` 值后再把这一天所有展览会插入树状数组。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define upd(a, b) (a = max(a, b))\n#define pb push_back\n\nusing namespace std;\nconst int N = 5e5 + 5;\nint read() {\n    int c = getchar(), r = 0;\n    while(c < 48) c = getchar();\n    while(c > 47) r = r * 10 + c - 48, c = getchar();\n    return r;\n}\nint n, U, D, s, L[N], M[N], f[N][2];\nvector <int> id[N];\nstruct BIT {\n    int c[N];\n    BIT() { rep(i, 1, N - 4) c[i] = INT_MIN; }\n    void ins(int i, int v) { for(; i <= N - 4; i += i & -i) upd(c[i], v); }\n    int qry(int i, int r = INT_MIN) { for(; i; i &= i - 1) upd(r, c[i]); return r; }\n} Td, Tu;\nvoid ins(int i, int v) {\n    Td.ins(i, v - (N - i) * D), Tu.ins(N - 3 - i, v - i * U);\n}\nint qry(int i) {\n    return max(Td.qry(i) + (N - i) * D, Tu.qry(N - 3 - i) + i * U);\n}\nint main() {\n    cin >> n >> U >> D >> s;\n    rep(i, 1, n) id[read()].pb(i), L[i] = read(), M[i] = read();\n    ins(s, 0);\n    rep(i, 1, N - 5) {\n        sort(id[i].begin(), id[i].end(), [](int a, int b) { return L[a] < L[b]; });\n        int pre = INT_MIN, suf = INT_MIN;\n        for(int j : id[i])\n            upd(pre, (f[j][0] = max(qry(L[j]), pre + (N - L[j]) * D) + M[j]) - (N - L[j]) * D);\n        for(auto j = id[i].rbegin(); j != id[i].rend(); j++)\n            upd(suf, (f[*j][1] = max(qry(L[*j]), suf + L[*j] * U) + M[*j]) - L[*j] * U);\n        for(int j : id[i]) ins(L[j], max(f[j][0], f[j][1]));\n    }\n    cout << qry(s);\n    return 0;\n}\n```","source":"_posts/IOI2009.md","raw":"---\ntitle: salesman | IOI2009\ndate: 2021-05-02 21:25:00\nupdated: 2021-05-02 21:25:00\ntags: [动态规划,数据结构]\ncategories: Codeforces\n---\n> 坐标轴上有 $N$ 场展览会，每场展览会有一个举行时间 $T_i$ ，举行地点 $L_i$ 和获利 $M_i$。\n>\n> 坐标向大移动 $1$ 的代价是 $D$，向小移动 $1$ 的代价是 $U$，速度为任意大。\n>\n> 每场展览会只能参加一次，问从 $S$ 出发最后再回到 $S$ 的最大获利。\n>\n> $N,T_i \\le 5 \\cdot 10^5,L_i \\le 5 \\cdot 10^5+1$\n\n先考虑一个弱化版的问题：$T_i$ 互不相同。\n\n设 $f_i$表示刚参加第 $i$ 场展览会后的最大获利。\n\n有转移方程 $f_i = \\max\\limits_{T_j < T_i}f_j-cost(j,i)$。\n\n其中\n$$\ncost(i,j)=\\begin{cases}\nD(L_j-L_i) &(L_i<L_j)\\\\\nU(L_i-L_j) &(L_i>L_j)\n\\end{cases}\n$$\n两种情况分别用树状数组维护前缀（后缀）最大值即可实现 $O(\\log n)$ 转移。\n\n再考虑同一天的多场展览会怎么处理。\n\n记 $f_{i,0/1}$ 表示从左/右到达第 $i$ 场展览会后的最大获利。\n\n然后正反两遍 ```DP```，每次用临时变量存由同一天的展览会转移来最优解，和树状数组中的最优解取个较优，计算出 ```DP``` 值后再把这一天所有展览会插入树状数组。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define upd(a, b) (a = max(a, b))\n#define pb push_back\n\nusing namespace std;\nconst int N = 5e5 + 5;\nint read() {\n    int c = getchar(), r = 0;\n    while(c < 48) c = getchar();\n    while(c > 47) r = r * 10 + c - 48, c = getchar();\n    return r;\n}\nint n, U, D, s, L[N], M[N], f[N][2];\nvector <int> id[N];\nstruct BIT {\n    int c[N];\n    BIT() { rep(i, 1, N - 4) c[i] = INT_MIN; }\n    void ins(int i, int v) { for(; i <= N - 4; i += i & -i) upd(c[i], v); }\n    int qry(int i, int r = INT_MIN) { for(; i; i &= i - 1) upd(r, c[i]); return r; }\n} Td, Tu;\nvoid ins(int i, int v) {\n    Td.ins(i, v - (N - i) * D), Tu.ins(N - 3 - i, v - i * U);\n}\nint qry(int i) {\n    return max(Td.qry(i) + (N - i) * D, Tu.qry(N - 3 - i) + i * U);\n}\nint main() {\n    cin >> n >> U >> D >> s;\n    rep(i, 1, n) id[read()].pb(i), L[i] = read(), M[i] = read();\n    ins(s, 0);\n    rep(i, 1, N - 5) {\n        sort(id[i].begin(), id[i].end(), [](int a, int b) { return L[a] < L[b]; });\n        int pre = INT_MIN, suf = INT_MIN;\n        for(int j : id[i])\n            upd(pre, (f[j][0] = max(qry(L[j]), pre + (N - L[j]) * D) + M[j]) - (N - L[j]) * D);\n        for(auto j = id[i].rbegin(); j != id[i].rend(); j++)\n            upd(suf, (f[*j][1] = max(qry(L[*j]), suf + L[*j] * U) + M[*j]) - L[*j] * U);\n        for(int j : id[i]) ins(L[j], max(f[j][0], f[j][1]));\n    }\n    cout << qry(s);\n    return 0;\n}\n```","slug":"IOI2009","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh02001sootn8y17gs97","content":"<blockquote>\r\n<p>坐标轴上有 <span class=\"math inline\">\\(N\\)</span> 场展览会，每场展览会有一个举行时间 <span class=\"math inline\">\\(T_i\\)</span> ，举行地点 <span class=\"math inline\">\\(L_i\\)</span> 和获利 <span class=\"math inline\">\\(M_i\\)</span>。</p>\r\n<p>坐标向大移动 <span class=\"math inline\">\\(1\\)</span> 的代价是 <span class=\"math inline\">\\(D\\)</span>，向小移动 <span class=\"math inline\">\\(1\\)</span> 的代价是 <span class=\"math inline\">\\(U\\)</span>，速度为任意大。</p>\r\n<p>每场展览会只能参加一次，问从 <span class=\"math inline\">\\(S\\)</span> 出发最后再回到 <span class=\"math inline\">\\(S\\)</span> 的最大获利。</p>\r\n<p><span class=\"math inline\">\\(N,T_i \\le 5 \\cdot 10^5,L_i \\le 5 \\cdot 10^5+1\\)</span></p>\r\n</blockquote>\r\n<p>先考虑一个弱化版的问题：<span class=\"math inline\">\\(T_i\\)</span> 互不相同。</p>\r\n<p>设 <span class=\"math inline\">\\(f_i\\)</span>表示刚参加第 <span class=\"math inline\">\\(i\\)</span> 场展览会后的最大获利。</p>\r\n<p>有转移方程 <span class=\"math inline\">\\(f_i = \\max\\limits_{T_j &lt; T_i}f_j-cost(j,i)\\)</span>。</p>\r\n<p>其中 <span class=\"math display\">\\[\r\ncost(i,j)=\\begin{cases}\r\nD(L_j-L_i) &amp;(L_i&lt;L_j)\\\\\r\nU(L_i-L_j) &amp;(L_i&gt;L_j)\r\n\\end{cases}\r\n\\]</span> 两种情况分别用树状数组维护前缀（后缀）最大值即可实现 <span class=\"math inline\">\\(O(\\log n)\\)</span> 转移。</p>\r\n<p>再考虑同一天的多场展览会怎么处理。</p>\r\n<p>记 <span class=\"math inline\">\\(f_{i,0/1}\\)</span> 表示从左/右到达第 <span class=\"math inline\">\\(i\\)</span> 场展览会后的最大获利。</p>\r\n<p>然后正反两遍 <code>DP</code>，每次用临时变量存由同一天的展览会转移来最优解，和树状数组中的最优解取个较优，计算出 <code>DP</code> 值后再把这一天所有展览会插入树状数组。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> upd(a, b) (a = max(a, b))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">5e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = <span class=\"built_in\">getchar</span>(), r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &lt; <span class=\"number\">48</span>) c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &gt; <span class=\"number\">47</span>) r = r * <span class=\"number\">10</span> + c - <span class=\"number\">48</span>, c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, U, D, s, L[N], M[N], f[N][<span class=\"number\">2</span>];</span><br><span class=\"line\">vector &lt;<span class=\"keyword\">int</span>&gt; id[N];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BIT</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> c[N];</span><br><span class=\"line\">    <span class=\"built_in\">BIT</span>() &#123; <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, N - <span class=\"number\">4</span>) c[i] = INT_MIN; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ins</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> v)</span> </span>&#123; <span class=\"keyword\">for</span>(; i &lt;= N - <span class=\"number\">4</span>; i += i &amp; -i) <span class=\"built_in\">upd</span>(c[i], v); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> r = INT_MIN)</span> </span>&#123; <span class=\"keyword\">for</span>(; i; i &amp;= i - <span class=\"number\">1</span>) <span class=\"built_in\">upd</span>(r, c[i]); <span class=\"keyword\">return</span> r; &#125;</span><br><span class=\"line\">&#125; Td, Tu;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ins</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    Td.<span class=\"built_in\">ins</span>(i, v - (N - i) * D), Tu.<span class=\"built_in\">ins</span>(N - <span class=\"number\">3</span> - i, v - i * U);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(Td.<span class=\"built_in\">qry</span>(i) + (N - i) * D, Tu.<span class=\"built_in\">qry</span>(N - <span class=\"number\">3</span> - i) + i * U);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; U &gt;&gt; D &gt;&gt; s;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) id[<span class=\"built_in\">read</span>()].<span class=\"built_in\">pb</span>(i), L[i] = <span class=\"built_in\">read</span>(), M[i] = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"built_in\">ins</span>(s, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, N - <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(id[i].<span class=\"built_in\">begin</span>(), id[i].<span class=\"built_in\">end</span>(), [](<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123; <span class=\"keyword\">return</span> L[a] &lt; L[b]; &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pre = INT_MIN, suf = INT_MIN;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j : id[i])</span><br><span class=\"line\">            <span class=\"built_in\">upd</span>(pre, (f[j][<span class=\"number\">0</span>] = <span class=\"built_in\">max</span>(<span class=\"built_in\">qry</span>(L[j]), pre + (N - L[j]) * D) + M[j]) - (N - L[j]) * D);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> j = id[i].<span class=\"built_in\">rbegin</span>(); j != id[i].<span class=\"built_in\">rend</span>(); j++)</span><br><span class=\"line\">            <span class=\"built_in\">upd</span>(suf, (f[*j][<span class=\"number\">1</span>] = <span class=\"built_in\">max</span>(<span class=\"built_in\">qry</span>(L[*j]), suf + L[*j] * U) + M[*j]) - L[*j] * U);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j : id[i]) <span class=\"built_in\">ins</span>(L[j], <span class=\"built_in\">max</span>(f[j][<span class=\"number\">0</span>], f[j][<span class=\"number\">1</span>]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">qry</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":1900,"excerpt":"","more":"<blockquote>\r\n<p>坐标轴上有 <span class=\"math inline\">\\(N\\)</span> 场展览会，每场展览会有一个举行时间 <span class=\"math inline\">\\(T_i\\)</span> ，举行地点 <span class=\"math inline\">\\(L_i\\)</span> 和获利 <span class=\"math inline\">\\(M_i\\)</span>。</p>\r\n<p>坐标向大移动 <span class=\"math inline\">\\(1\\)</span> 的代价是 <span class=\"math inline\">\\(D\\)</span>，向小移动 <span class=\"math inline\">\\(1\\)</span> 的代价是 <span class=\"math inline\">\\(U\\)</span>，速度为任意大。</p>\r\n<p>每场展览会只能参加一次，问从 <span class=\"math inline\">\\(S\\)</span> 出发最后再回到 <span class=\"math inline\">\\(S\\)</span> 的最大获利。</p>\r\n<p><span class=\"math inline\">\\(N,T_i \\le 5 \\cdot 10^5,L_i \\le 5 \\cdot 10^5+1\\)</span></p>\r\n</blockquote>\r\n<p>先考虑一个弱化版的问题：<span class=\"math inline\">\\(T_i\\)</span> 互不相同。</p>\r\n<p>设 <span class=\"math inline\">\\(f_i\\)</span>表示刚参加第 <span class=\"math inline\">\\(i\\)</span> 场展览会后的最大获利。</p>\r\n<p>有转移方程 <span class=\"math inline\">\\(f_i = \\max\\limits_{T_j &lt; T_i}f_j-cost(j,i)\\)</span>。</p>\r\n<p>其中 <span class=\"math display\">\\[\r\ncost(i,j)=\\begin{cases}\r\nD(L_j-L_i) &amp;(L_i&lt;L_j)\\\\\r\nU(L_i-L_j) &amp;(L_i&gt;L_j)\r\n\\end{cases}\r\n\\]</span> 两种情况分别用树状数组维护前缀（后缀）最大值即可实现 <span class=\"math inline\">\\(O(\\log n)\\)</span> 转移。</p>\r\n<p>再考虑同一天的多场展览会怎么处理。</p>\r\n<p>记 <span class=\"math inline\">\\(f_{i,0/1}\\)</span> 表示从左/右到达第 <span class=\"math inline\">\\(i\\)</span> 场展览会后的最大获利。</p>\r\n<p>然后正反两遍 <code>DP</code>，每次用临时变量存由同一天的展览会转移来最优解，和树状数组中的最优解取个较优，计算出 <code>DP</code> 值后再把这一天所有展览会插入树状数组。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> upd(a, b) (a = max(a, b))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">5e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = <span class=\"built_in\">getchar</span>(), r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &lt; <span class=\"number\">48</span>) c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &gt; <span class=\"number\">47</span>) r = r * <span class=\"number\">10</span> + c - <span class=\"number\">48</span>, c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, U, D, s, L[N], M[N], f[N][<span class=\"number\">2</span>];</span><br><span class=\"line\">vector &lt;<span class=\"keyword\">int</span>&gt; id[N];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BIT</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> c[N];</span><br><span class=\"line\">    <span class=\"built_in\">BIT</span>() &#123; <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, N - <span class=\"number\">4</span>) c[i] = INT_MIN; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ins</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> v)</span> </span>&#123; <span class=\"keyword\">for</span>(; i &lt;= N - <span class=\"number\">4</span>; i += i &amp; -i) <span class=\"built_in\">upd</span>(c[i], v); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> r = INT_MIN)</span> </span>&#123; <span class=\"keyword\">for</span>(; i; i &amp;= i - <span class=\"number\">1</span>) <span class=\"built_in\">upd</span>(r, c[i]); <span class=\"keyword\">return</span> r; &#125;</span><br><span class=\"line\">&#125; Td, Tu;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ins</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    Td.<span class=\"built_in\">ins</span>(i, v - (N - i) * D), Tu.<span class=\"built_in\">ins</span>(N - <span class=\"number\">3</span> - i, v - i * U);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(Td.<span class=\"built_in\">qry</span>(i) + (N - i) * D, Tu.<span class=\"built_in\">qry</span>(N - <span class=\"number\">3</span> - i) + i * U);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; U &gt;&gt; D &gt;&gt; s;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) id[<span class=\"built_in\">read</span>()].<span class=\"built_in\">pb</span>(i), L[i] = <span class=\"built_in\">read</span>(), M[i] = <span class=\"built_in\">read</span>();</span><br><span class=\"line\">    <span class=\"built_in\">ins</span>(s, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, N - <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(id[i].<span class=\"built_in\">begin</span>(), id[i].<span class=\"built_in\">end</span>(), [](<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123; <span class=\"keyword\">return</span> L[a] &lt; L[b]; &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pre = INT_MIN, suf = INT_MIN;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j : id[i])</span><br><span class=\"line\">            <span class=\"built_in\">upd</span>(pre, (f[j][<span class=\"number\">0</span>] = <span class=\"built_in\">max</span>(<span class=\"built_in\">qry</span>(L[j]), pre + (N - L[j]) * D) + M[j]) - (N - L[j]) * D);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> j = id[i].<span class=\"built_in\">rbegin</span>(); j != id[i].<span class=\"built_in\">rend</span>(); j++)</span><br><span class=\"line\">            <span class=\"built_in\">upd</span>(suf, (f[*j][<span class=\"number\">1</span>] = <span class=\"built_in\">max</span>(<span class=\"built_in\">qry</span>(L[*j]), suf + L[*j] * U) + M[*j]) - L[*j] * U);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j : id[i]) <span class=\"built_in\">ins</span>(L[j], <span class=\"built_in\">max</span>(f[j][<span class=\"number\">0</span>], f[j][<span class=\"number\">1</span>]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"built_in\">qry</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"Food Court | JOISC2021 D1T3","date":"2021-03-22T12:16:07.000Z","updated":"2021-03-22T12:16:07.000Z","_content":"> 有 $N$ 个商店，在每个商店的前面，都有顾客排队，顾客分 $M$ 类。\n>\n> 一共发生了 $Q$ 个事件，每个事件是以下之一。\n>\n> - 在第 $L$ 到 $R$ 的每个商店前的队列末尾加入 $K$ 个 $C$ 类顾客。\n> - 对于第 $L$ 到 $R$ 的每个商店，如果队列中的人数不少于 $K$，则队列最前面的 $K$ 个顾客离开，否则队列中的顾客将全部离开。\n> - 询问第 $A$ 个商店前的队列中从前往后数的第 $B$ 个人属于哪一类，不存在输出 $0$\n>\n> $N, M, Q \\le 2.5 \\cdot 10^5$\n\n### 先考虑第 $A$ 个商店前的队列中的人数怎么求。\n\n对于第一种操作，就是区间加上一个正数；对于第二种操作，就是区间减去一个正数，再和 $0$ 取 ```max```。\n\n简化一下就是：区间加上一个整数，再和 $0$ 取 ```max```。\n\n对于一个位置，假设它依次进行操作的数分别为 $a_1,a_2,\\cdots,a_k$，那么此时它的值为\n$$\n\\max\\{0,\\max\\{0,\\max\\{0,\\cdots\\max\\{0,a_1\\}\\cdots+a_{k-1}\\}+a_k\\}\\\\\n=\\max\\{0,a_k,a_{k-1}+a_k,a_{k-2}+a_{k-1}+a_k,\\cdots,a_1+a_2+\\cdots+a_k\\}\\\\\n=\\sum_{i=1}^ka_i-\\min\\{0,a_1,a_1+a_2,\\cdots,a_1+a_2+\\cdots+a_k\\}\n$$\n即在不考虑再和 $0$ 取 ```max``` 的情况下，当前值减**历史**最小值。\n\n做法是建立线段树，对每个结点维护加的懒标记 $tag_i$ 和**仅考虑包含此区间的操作**时的历史最小值 $minTag_i$。\n\n区间加 $b$ 时就 ```tag[i] += b, minTag[i] = min(minTag[i], tag[i])```。\n\n下放懒标记时就 ```tag[son] += tag[fa], minTag[son] = min(minTag[son], tag[son] + minTag[fa])```。\n\n### 再考虑原题\n\n假设第 $A$ 个商店当前有 $K$ 个人，这个商店总共来过 $S$ 个人，则当前第 $B$ 个人就是所有来过的人中第 $B+S-K$ 个人。\n\n$S$ 很好算，而 $K$ 用上述方法即可求得。问题是转化为求所有来过的人中第 $K$ 个人。\n\n离线下所有第一种操作，依次扫描第 $1$ 个到第 $n$ 个商店，维护一个时间轴线段树，每个结点的值这段时间内来过多少人。\n\n当扫到一个区间的左端点 $L$ 时在对应的时间 $t$ 上加人数 $B$。扫**过**一个区间的右端点 $R$ （即扫到 $R+1$）时在对应的时间 $t$ 上减人数 $B$。\n\n询问就是查询最小的 $T$ 满足 $[1,T]$ 内加入的人数不少于要求的 $K$ ，答案是第 $T$ 个操作对于的 $C$，线段树上二分一下即可。\n\n时间复杂度 $O(n\\log n)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define mid ((l + r) / 2)\n#define lch l, mid, o * 2\n#define rch mid + 1, r, o * 2 + 1\n\nusing namespace std;\nconst int N = 2.5e5 + 5;\ntypedef long long ll;\nint n, m, q;\nll c[N];\nvoid add(int i, int v) { for(; i <= n; i += i & -i) c[i] += v; }\nll qry(int i, ll r = 0) { for(; i; i &= i - 1) r += c[i]; return r; }\nnamespace seg1 {\n    ll ta[N * 4], mi[N * 4];\n    void put(int o, ll k, ll kk) {\n        mi[o] = min(mi[o], ta[o] + kk), ta[o] += k;\n    }\n    void pd(int o) {\n        put(o * 2, ta[o], mi[o]);\n        put(o * 2 + 1, ta[o], mi[o]);\n        ta[o] = mi[o] = 0;\n    }\n    void upd(int L, int R, int k, int l, int r, int o) {\n        if(L <= l && r <= R) return put(o, k, k);\n        pd(o);\n        if(L <= mid) upd(L, R, k, lch);\n        if(R > mid) upd(L, R, k, rch);\n    }\n    ll qry(int p, int l, int r, int o) {\n        if(l == r) return ta[o] - mi[o];\n        pd(o);\n        return p <= mid ? qry(p, lch) : qry(p, rch);\n    }\n};\nnamespace seg2 {\n    ll c[N * 4];\n    void upd(int p, int v, int l, int r, int o) {\n        c[o] += v; if(p > mid) upd(p, v, rch); else if(l < r) upd(p, v, lch);\n    }\n    ll qry(ll k, int l, int r, int o) {\n        return l < r ? k <= c[o * 2] ? qry(k, lch) : qry(k - c[o * 2], rch) : l;\n    }\n};\nvector <pair <int, int>> Add[N];\nvector <pair <ll, int>> Qry[N];\nint id[N], ans[N];\nint main() {\n    cin >> n >> m >> q;\n    int op, l, r, a, b; ll c;\n    rep(i, 1, q) {\n        scanf(\"%d\", &op);\n        if(op == 1) {\n            scanf(\"%d%d%d%d\", &l, &r, &id[i], &b);\n            seg1::upd(l, r, b, 1, n, 1);\n            Add[l].push_back({ b, i }), add(l, b);\n            Add[r + 1].push_back({ -b, i }), add(r + 1, -b);\n        }\n        if(op == 2) {\n            scanf(\"%d%d%d\", &l, &r, &b);\n            seg1::upd(l, r, -b, 1, n, 1);\n        }\n        if(op == 3) {\n            scanf(\"%d%lld\", &a, &c);\n            ll K = seg1::qry(a, 1, n, 1);\n            if(K < c) ans[i] = 0;\n            else Qry[a].push_back({ c + qry(a) - K, i });\n        } else ans[i] = -1;\n    }\n    rep(i, 1, n) {\n        for(auto [v, t] : Add[i]) seg2::upd(t, v, 1, q, 1);\n        for(auto [k, t] : Qry[i]) ans[t] = id[seg2::qry(k, 1, q, 1)];\n    }\n    rep(i, 1, q) if(~ans[i]) printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n```\n\n","source":"_posts/JOI2021D1T3.md","raw":"---\ntitle: Food Court | JOISC2021 D1T3\ndate: 2021-03-22 20:16:07\nupdated: 2021-03-22 20:16:07\ntags: [数据结构]\ncategories: JOISC\n---\n> 有 $N$ 个商店，在每个商店的前面，都有顾客排队，顾客分 $M$ 类。\n>\n> 一共发生了 $Q$ 个事件，每个事件是以下之一。\n>\n> - 在第 $L$ 到 $R$ 的每个商店前的队列末尾加入 $K$ 个 $C$ 类顾客。\n> - 对于第 $L$ 到 $R$ 的每个商店，如果队列中的人数不少于 $K$，则队列最前面的 $K$ 个顾客离开，否则队列中的顾客将全部离开。\n> - 询问第 $A$ 个商店前的队列中从前往后数的第 $B$ 个人属于哪一类，不存在输出 $0$\n>\n> $N, M, Q \\le 2.5 \\cdot 10^5$\n\n### 先考虑第 $A$ 个商店前的队列中的人数怎么求。\n\n对于第一种操作，就是区间加上一个正数；对于第二种操作，就是区间减去一个正数，再和 $0$ 取 ```max```。\n\n简化一下就是：区间加上一个整数，再和 $0$ 取 ```max```。\n\n对于一个位置，假设它依次进行操作的数分别为 $a_1,a_2,\\cdots,a_k$，那么此时它的值为\n$$\n\\max\\{0,\\max\\{0,\\max\\{0,\\cdots\\max\\{0,a_1\\}\\cdots+a_{k-1}\\}+a_k\\}\\\\\n=\\max\\{0,a_k,a_{k-1}+a_k,a_{k-2}+a_{k-1}+a_k,\\cdots,a_1+a_2+\\cdots+a_k\\}\\\\\n=\\sum_{i=1}^ka_i-\\min\\{0,a_1,a_1+a_2,\\cdots,a_1+a_2+\\cdots+a_k\\}\n$$\n即在不考虑再和 $0$ 取 ```max``` 的情况下，当前值减**历史**最小值。\n\n做法是建立线段树，对每个结点维护加的懒标记 $tag_i$ 和**仅考虑包含此区间的操作**时的历史最小值 $minTag_i$。\n\n区间加 $b$ 时就 ```tag[i] += b, minTag[i] = min(minTag[i], tag[i])```。\n\n下放懒标记时就 ```tag[son] += tag[fa], minTag[son] = min(minTag[son], tag[son] + minTag[fa])```。\n\n### 再考虑原题\n\n假设第 $A$ 个商店当前有 $K$ 个人，这个商店总共来过 $S$ 个人，则当前第 $B$ 个人就是所有来过的人中第 $B+S-K$ 个人。\n\n$S$ 很好算，而 $K$ 用上述方法即可求得。问题是转化为求所有来过的人中第 $K$ 个人。\n\n离线下所有第一种操作，依次扫描第 $1$ 个到第 $n$ 个商店，维护一个时间轴线段树，每个结点的值这段时间内来过多少人。\n\n当扫到一个区间的左端点 $L$ 时在对应的时间 $t$ 上加人数 $B$。扫**过**一个区间的右端点 $R$ （即扫到 $R+1$）时在对应的时间 $t$ 上减人数 $B$。\n\n询问就是查询最小的 $T$ 满足 $[1,T]$ 内加入的人数不少于要求的 $K$ ，答案是第 $T$ 个操作对于的 $C$，线段树上二分一下即可。\n\n时间复杂度 $O(n\\log n)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define mid ((l + r) / 2)\n#define lch l, mid, o * 2\n#define rch mid + 1, r, o * 2 + 1\n\nusing namespace std;\nconst int N = 2.5e5 + 5;\ntypedef long long ll;\nint n, m, q;\nll c[N];\nvoid add(int i, int v) { for(; i <= n; i += i & -i) c[i] += v; }\nll qry(int i, ll r = 0) { for(; i; i &= i - 1) r += c[i]; return r; }\nnamespace seg1 {\n    ll ta[N * 4], mi[N * 4];\n    void put(int o, ll k, ll kk) {\n        mi[o] = min(mi[o], ta[o] + kk), ta[o] += k;\n    }\n    void pd(int o) {\n        put(o * 2, ta[o], mi[o]);\n        put(o * 2 + 1, ta[o], mi[o]);\n        ta[o] = mi[o] = 0;\n    }\n    void upd(int L, int R, int k, int l, int r, int o) {\n        if(L <= l && r <= R) return put(o, k, k);\n        pd(o);\n        if(L <= mid) upd(L, R, k, lch);\n        if(R > mid) upd(L, R, k, rch);\n    }\n    ll qry(int p, int l, int r, int o) {\n        if(l == r) return ta[o] - mi[o];\n        pd(o);\n        return p <= mid ? qry(p, lch) : qry(p, rch);\n    }\n};\nnamespace seg2 {\n    ll c[N * 4];\n    void upd(int p, int v, int l, int r, int o) {\n        c[o] += v; if(p > mid) upd(p, v, rch); else if(l < r) upd(p, v, lch);\n    }\n    ll qry(ll k, int l, int r, int o) {\n        return l < r ? k <= c[o * 2] ? qry(k, lch) : qry(k - c[o * 2], rch) : l;\n    }\n};\nvector <pair <int, int>> Add[N];\nvector <pair <ll, int>> Qry[N];\nint id[N], ans[N];\nint main() {\n    cin >> n >> m >> q;\n    int op, l, r, a, b; ll c;\n    rep(i, 1, q) {\n        scanf(\"%d\", &op);\n        if(op == 1) {\n            scanf(\"%d%d%d%d\", &l, &r, &id[i], &b);\n            seg1::upd(l, r, b, 1, n, 1);\n            Add[l].push_back({ b, i }), add(l, b);\n            Add[r + 1].push_back({ -b, i }), add(r + 1, -b);\n        }\n        if(op == 2) {\n            scanf(\"%d%d%d\", &l, &r, &b);\n            seg1::upd(l, r, -b, 1, n, 1);\n        }\n        if(op == 3) {\n            scanf(\"%d%lld\", &a, &c);\n            ll K = seg1::qry(a, 1, n, 1);\n            if(K < c) ans[i] = 0;\n            else Qry[a].push_back({ c + qry(a) - K, i });\n        } else ans[i] = -1;\n    }\n    rep(i, 1, n) {\n        for(auto [v, t] : Add[i]) seg2::upd(t, v, 1, q, 1);\n        for(auto [k, t] : Qry[i]) ans[t] = id[seg2::qry(k, 1, q, 1)];\n    }\n    rep(i, 1, q) if(~ans[i]) printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n```\n\n","slug":"JOI2021D1T3","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh03001uootncgxbc09w","content":"<blockquote>\r\n<p>有 <span class=\"math inline\">\\(N\\)</span> 个商店，在每个商店的前面，都有顾客排队，顾客分 <span class=\"math inline\">\\(M\\)</span> 类。</p>\r\n<p>一共发生了 <span class=\"math inline\">\\(Q\\)</span> 个事件，每个事件是以下之一。</p>\r\n<ul>\r\n<li>在第 <span class=\"math inline\">\\(L\\)</span> 到 <span class=\"math inline\">\\(R\\)</span> 的每个商店前的队列末尾加入 <span class=\"math inline\">\\(K\\)</span> 个 <span class=\"math inline\">\\(C\\)</span> 类顾客。</li>\r\n<li>对于第 <span class=\"math inline\">\\(L\\)</span> 到 <span class=\"math inline\">\\(R\\)</span> 的每个商店，如果队列中的人数不少于 <span class=\"math inline\">\\(K\\)</span>，则队列最前面的 <span class=\"math inline\">\\(K\\)</span> 个顾客离开，否则队列中的顾客将全部离开。</li>\r\n<li>询问第 <span class=\"math inline\">\\(A\\)</span> 个商店前的队列中从前往后数的第 <span class=\"math inline\">\\(B\\)</span> 个人属于哪一类，不存在输出 <span class=\"math inline\">\\(0\\)</span></li>\r\n</ul>\r\n<p><span class=\"math inline\">\\(N, M, Q \\le 2.5 \\cdot 10^5\\)</span></p>\r\n</blockquote>\r\n<h3 id=\"先考虑第-a-个商店前的队列中的人数怎么求\">先考虑第 <span class=\"math inline\">\\(A\\)</span> 个商店前的队列中的人数怎么求。</h3>\r\n<p>对于第一种操作，就是区间加上一个正数；对于第二种操作，就是区间减去一个正数，再和 <span class=\"math inline\">\\(0\\)</span> 取 <code>max</code>。</p>\r\n<p>简化一下就是：区间加上一个整数，再和 <span class=\"math inline\">\\(0\\)</span> 取 <code>max</code>。</p>\r\n<p>对于一个位置，假设它依次进行操作的数分别为 <span class=\"math inline\">\\(a_1,a_2,\\cdots,a_k\\)</span>，那么此时它的值为 <span class=\"math display\">\\[\r\n\\max\\{0,\\max\\{0,\\max\\{0,\\cdots\\max\\{0,a_1\\}\\cdots+a_{k-1}\\}+a_k\\}\\\\\r\n=\\max\\{0,a_k,a_{k-1}+a_k,a_{k-2}+a_{k-1}+a_k,\\cdots,a_1+a_2+\\cdots+a_k\\}\\\\\r\n=\\sum_{i=1}^ka_i-\\min\\{0,a_1,a_1+a_2,\\cdots,a_1+a_2+\\cdots+a_k\\}\r\n\\]</span> 即在不考虑再和 <span class=\"math inline\">\\(0\\)</span> 取 <code>max</code> 的情况下，当前值减<strong>历史</strong>最小值。</p>\r\n<p>做法是建立线段树，对每个结点维护加的懒标记 <span class=\"math inline\">\\(tag_i\\)</span> 和<strong>仅考虑包含此区间的操作</strong>时的历史最小值 <span class=\"math inline\">\\(minTag_i\\)</span>。</p>\r\n<p>区间加 <span class=\"math inline\">\\(b\\)</span> 时就 <code>tag[i] += b, minTag[i] = min(minTag[i], tag[i])</code>。</p>\r\n<p>下放懒标记时就 <code>tag[son] += tag[fa], minTag[son] = min(minTag[son], tag[son] + minTag[fa])</code>。</p>\r\n<h3 id=\"再考虑原题\">再考虑原题</h3>\r\n<p>假设第 <span class=\"math inline\">\\(A\\)</span> 个商店当前有 <span class=\"math inline\">\\(K\\)</span> 个人，这个商店总共来过 <span class=\"math inline\">\\(S\\)</span> 个人，则当前第 <span class=\"math inline\">\\(B\\)</span> 个人就是所有来过的人中第 <span class=\"math inline\">\\(B+S-K\\)</span> 个人。</p>\r\n<p><span class=\"math inline\">\\(S\\)</span> 很好算，而 <span class=\"math inline\">\\(K\\)</span> 用上述方法即可求得。问题是转化为求所有来过的人中第 <span class=\"math inline\">\\(K\\)</span> 个人。</p>\r\n<p>离线下所有第一种操作，依次扫描第 <span class=\"math inline\">\\(1\\)</span> 个到第 <span class=\"math inline\">\\(n\\)</span> 个商店，维护一个时间轴线段树，每个结点的值这段时间内来过多少人。</p>\r\n<p>当扫到一个区间的左端点 <span class=\"math inline\">\\(L\\)</span> 时在对应的时间 <span class=\"math inline\">\\(t\\)</span> 上加人数 <span class=\"math inline\">\\(B\\)</span>。扫<strong>过</strong>一个区间的右端点 <span class=\"math inline\">\\(R\\)</span> （即扫到 <span class=\"math inline\">\\(R+1\\)</span>）时在对应的时间 <span class=\"math inline\">\\(t\\)</span> 上减人数 <span class=\"math inline\">\\(B\\)</span>。</p>\r\n<p>询问就是查询最小的 <span class=\"math inline\">\\(T\\)</span> 满足 <span class=\"math inline\">\\([1,T]\\)</span> 内加入的人数不少于要求的 <span class=\"math inline\">\\(K\\)</span> ，答案是第 <span class=\"math inline\">\\(T\\)</span> 个操作对于的 <span class=\"math inline\">\\(C\\)</span>，线段树上二分一下即可。</p>\r\n<p>时间复杂度 <span class=\"math inline\">\\(O(n\\log n)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l + r) / 2)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lch l, mid, o * 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rch mid + 1, r, o * 2 + 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2.5e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, q;</span><br><span class=\"line\">ll c[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> v)</span> </span>&#123; <span class=\"keyword\">for</span>(; i &lt;= n; i += i &amp; -i) c[i] += v; &#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> i, ll r = <span class=\"number\">0</span>)</span> </span>&#123; <span class=\"keyword\">for</span>(; i; i &amp;= i - <span class=\"number\">1</span>) r += c[i]; <span class=\"keyword\">return</span> r; &#125;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> seg1 &#123;</span><br><span class=\"line\">    ll ta[N * <span class=\"number\">4</span>], mi[N * <span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(<span class=\"keyword\">int</span> o, ll k, ll kk)</span> </span>&#123;</span><br><span class=\"line\">        mi[o] = <span class=\"built_in\">min</span>(mi[o], ta[o] + kk), ta[o] += k;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pd</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">put</span>(o * <span class=\"number\">2</span>, ta[o], mi[o]);</span><br><span class=\"line\">        <span class=\"built_in\">put</span>(o * <span class=\"number\">2</span> + <span class=\"number\">1</span>, ta[o], mi[o]);</span><br><span class=\"line\">        ta[o] = mi[o] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">upd</span><span class=\"params\">(<span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class=\"keyword\">return</span> <span class=\"built_in\">put</span>(o, k, k);</span><br><span class=\"line\">        <span class=\"built_in\">pd</span>(o);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L &lt;= mid) <span class=\"built_in\">upd</span>(L, R, k, lch);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(R &gt; mid) <span class=\"built_in\">upd</span>(L, R, k, rch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">ll <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l == r) <span class=\"keyword\">return</span> ta[o] - mi[o];</span><br><span class=\"line\">        <span class=\"built_in\">pd</span>(o);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p &lt;= mid ? <span class=\"built_in\">qry</span>(p, lch) : <span class=\"built_in\">qry</span>(p, rch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> seg2 &#123;</span><br><span class=\"line\">    ll c[N * <span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">upd</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">        c[o] += v; <span class=\"keyword\">if</span>(p &gt; mid) <span class=\"built_in\">upd</span>(p, v, rch); <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(l &lt; r) <span class=\"built_in\">upd</span>(p, v, lch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">ll <span class=\"title\">qry</span><span class=\"params\">(ll k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l &lt; r ? k &lt;= c[o * <span class=\"number\">2</span>] ? <span class=\"built_in\">qry</span>(k, lch) : <span class=\"built_in\">qry</span>(k - c[o * <span class=\"number\">2</span>], rch) : l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector &lt;pair &lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; Add[N];</span><br><span class=\"line\">vector &lt;pair &lt;ll, <span class=\"keyword\">int</span>&gt;&gt; Qry[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> id[N], ans[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> op, l, r, a, b; ll c;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, q) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;op);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;id[i], &amp;b);</span><br><span class=\"line\">            seg1::<span class=\"built_in\">upd</span>(l, r, b, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</span><br><span class=\"line\">            Add[l].<span class=\"built_in\">push_back</span>(&#123; b, i &#125;), <span class=\"built_in\">add</span>(l, b);</span><br><span class=\"line\">            Add[r + <span class=\"number\">1</span>].<span class=\"built_in\">push_back</span>(&#123; -b, i &#125;), <span class=\"built_in\">add</span>(r + <span class=\"number\">1</span>, -b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;b);</span><br><span class=\"line\">            seg1::<span class=\"built_in\">upd</span>(l, r, -b, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%lld&quot;</span>, &amp;a, &amp;c);</span><br><span class=\"line\">            ll K = seg1::<span class=\"built_in\">qry</span>(a, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(K &lt; c) ans[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> Qry[a].<span class=\"built_in\">push_back</span>(&#123; c + <span class=\"built_in\">qry</span>(a) - K, i &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> ans[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [v, t] : Add[i]) seg2::<span class=\"built_in\">upd</span>(t, v, <span class=\"number\">1</span>, q, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [k, t] : Qry[i]) ans[t] = id[seg2::<span class=\"built_in\">qry</span>(k, <span class=\"number\">1</span>, q, <span class=\"number\">1</span>)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, q) <span class=\"keyword\">if</span>(~ans[i]) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":3339,"excerpt":"","more":"<blockquote>\r\n<p>有 <span class=\"math inline\">\\(N\\)</span> 个商店，在每个商店的前面，都有顾客排队，顾客分 <span class=\"math inline\">\\(M\\)</span> 类。</p>\r\n<p>一共发生了 <span class=\"math inline\">\\(Q\\)</span> 个事件，每个事件是以下之一。</p>\r\n<ul>\r\n<li>在第 <span class=\"math inline\">\\(L\\)</span> 到 <span class=\"math inline\">\\(R\\)</span> 的每个商店前的队列末尾加入 <span class=\"math inline\">\\(K\\)</span> 个 <span class=\"math inline\">\\(C\\)</span> 类顾客。</li>\r\n<li>对于第 <span class=\"math inline\">\\(L\\)</span> 到 <span class=\"math inline\">\\(R\\)</span> 的每个商店，如果队列中的人数不少于 <span class=\"math inline\">\\(K\\)</span>，则队列最前面的 <span class=\"math inline\">\\(K\\)</span> 个顾客离开，否则队列中的顾客将全部离开。</li>\r\n<li>询问第 <span class=\"math inline\">\\(A\\)</span> 个商店前的队列中从前往后数的第 <span class=\"math inline\">\\(B\\)</span> 个人属于哪一类，不存在输出 <span class=\"math inline\">\\(0\\)</span></li>\r\n</ul>\r\n<p><span class=\"math inline\">\\(N, M, Q \\le 2.5 \\cdot 10^5\\)</span></p>\r\n</blockquote>\r\n<h3 id=\"先考虑第-a-个商店前的队列中的人数怎么求\">先考虑第 <span class=\"math inline\">\\(A\\)</span> 个商店前的队列中的人数怎么求。</h3>\r\n<p>对于第一种操作，就是区间加上一个正数；对于第二种操作，就是区间减去一个正数，再和 <span class=\"math inline\">\\(0\\)</span> 取 <code>max</code>。</p>\r\n<p>简化一下就是：区间加上一个整数，再和 <span class=\"math inline\">\\(0\\)</span> 取 <code>max</code>。</p>\r\n<p>对于一个位置，假设它依次进行操作的数分别为 <span class=\"math inline\">\\(a_1,a_2,\\cdots,a_k\\)</span>，那么此时它的值为 <span class=\"math display\">\\[\r\n\\max\\{0,\\max\\{0,\\max\\{0,\\cdots\\max\\{0,a_1\\}\\cdots+a_{k-1}\\}+a_k\\}\\\\\r\n=\\max\\{0,a_k,a_{k-1}+a_k,a_{k-2}+a_{k-1}+a_k,\\cdots,a_1+a_2+\\cdots+a_k\\}\\\\\r\n=\\sum_{i=1}^ka_i-\\min\\{0,a_1,a_1+a_2,\\cdots,a_1+a_2+\\cdots+a_k\\}\r\n\\]</span> 即在不考虑再和 <span class=\"math inline\">\\(0\\)</span> 取 <code>max</code> 的情况下，当前值减<strong>历史</strong>最小值。</p>\r\n<p>做法是建立线段树，对每个结点维护加的懒标记 <span class=\"math inline\">\\(tag_i\\)</span> 和<strong>仅考虑包含此区间的操作</strong>时的历史最小值 <span class=\"math inline\">\\(minTag_i\\)</span>。</p>\r\n<p>区间加 <span class=\"math inline\">\\(b\\)</span> 时就 <code>tag[i] += b, minTag[i] = min(minTag[i], tag[i])</code>。</p>\r\n<p>下放懒标记时就 <code>tag[son] += tag[fa], minTag[son] = min(minTag[son], tag[son] + minTag[fa])</code>。</p>\r\n<h3 id=\"再考虑原题\">再考虑原题</h3>\r\n<p>假设第 <span class=\"math inline\">\\(A\\)</span> 个商店当前有 <span class=\"math inline\">\\(K\\)</span> 个人，这个商店总共来过 <span class=\"math inline\">\\(S\\)</span> 个人，则当前第 <span class=\"math inline\">\\(B\\)</span> 个人就是所有来过的人中第 <span class=\"math inline\">\\(B+S-K\\)</span> 个人。</p>\r\n<p><span class=\"math inline\">\\(S\\)</span> 很好算，而 <span class=\"math inline\">\\(K\\)</span> 用上述方法即可求得。问题是转化为求所有来过的人中第 <span class=\"math inline\">\\(K\\)</span> 个人。</p>\r\n<p>离线下所有第一种操作，依次扫描第 <span class=\"math inline\">\\(1\\)</span> 个到第 <span class=\"math inline\">\\(n\\)</span> 个商店，维护一个时间轴线段树，每个结点的值这段时间内来过多少人。</p>\r\n<p>当扫到一个区间的左端点 <span class=\"math inline\">\\(L\\)</span> 时在对应的时间 <span class=\"math inline\">\\(t\\)</span> 上加人数 <span class=\"math inline\">\\(B\\)</span>。扫<strong>过</strong>一个区间的右端点 <span class=\"math inline\">\\(R\\)</span> （即扫到 <span class=\"math inline\">\\(R+1\\)</span>）时在对应的时间 <span class=\"math inline\">\\(t\\)</span> 上减人数 <span class=\"math inline\">\\(B\\)</span>。</p>\r\n<p>询问就是查询最小的 <span class=\"math inline\">\\(T\\)</span> 满足 <span class=\"math inline\">\\([1,T]\\)</span> 内加入的人数不少于要求的 <span class=\"math inline\">\\(K\\)</span> ，答案是第 <span class=\"math inline\">\\(T\\)</span> 个操作对于的 <span class=\"math inline\">\\(C\\)</span>，线段树上二分一下即可。</p>\r\n<p>时间复杂度 <span class=\"math inline\">\\(O(n\\log n)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l + r) / 2)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lch l, mid, o * 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rch mid + 1, r, o * 2 + 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2.5e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, q;</span><br><span class=\"line\">ll c[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> v)</span> </span>&#123; <span class=\"keyword\">for</span>(; i &lt;= n; i += i &amp; -i) c[i] += v; &#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> i, ll r = <span class=\"number\">0</span>)</span> </span>&#123; <span class=\"keyword\">for</span>(; i; i &amp;= i - <span class=\"number\">1</span>) r += c[i]; <span class=\"keyword\">return</span> r; &#125;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> seg1 &#123;</span><br><span class=\"line\">    ll ta[N * <span class=\"number\">4</span>], mi[N * <span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(<span class=\"keyword\">int</span> o, ll k, ll kk)</span> </span>&#123;</span><br><span class=\"line\">        mi[o] = <span class=\"built_in\">min</span>(mi[o], ta[o] + kk), ta[o] += k;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pd</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">put</span>(o * <span class=\"number\">2</span>, ta[o], mi[o]);</span><br><span class=\"line\">        <span class=\"built_in\">put</span>(o * <span class=\"number\">2</span> + <span class=\"number\">1</span>, ta[o], mi[o]);</span><br><span class=\"line\">        ta[o] = mi[o] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">upd</span><span class=\"params\">(<span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class=\"keyword\">return</span> <span class=\"built_in\">put</span>(o, k, k);</span><br><span class=\"line\">        <span class=\"built_in\">pd</span>(o);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L &lt;= mid) <span class=\"built_in\">upd</span>(L, R, k, lch);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(R &gt; mid) <span class=\"built_in\">upd</span>(L, R, k, rch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">ll <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l == r) <span class=\"keyword\">return</span> ta[o] - mi[o];</span><br><span class=\"line\">        <span class=\"built_in\">pd</span>(o);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p &lt;= mid ? <span class=\"built_in\">qry</span>(p, lch) : <span class=\"built_in\">qry</span>(p, rch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> seg2 &#123;</span><br><span class=\"line\">    ll c[N * <span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">upd</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">        c[o] += v; <span class=\"keyword\">if</span>(p &gt; mid) <span class=\"built_in\">upd</span>(p, v, rch); <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(l &lt; r) <span class=\"built_in\">upd</span>(p, v, lch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">ll <span class=\"title\">qry</span><span class=\"params\">(ll k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l &lt; r ? k &lt;= c[o * <span class=\"number\">2</span>] ? <span class=\"built_in\">qry</span>(k, lch) : <span class=\"built_in\">qry</span>(k - c[o * <span class=\"number\">2</span>], rch) : l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector &lt;pair &lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; Add[N];</span><br><span class=\"line\">vector &lt;pair &lt;ll, <span class=\"keyword\">int</span>&gt;&gt; Qry[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> id[N], ans[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> op, l, r, a, b; ll c;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, q) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;op);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;id[i], &amp;b);</span><br><span class=\"line\">            seg1::<span class=\"built_in\">upd</span>(l, r, b, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</span><br><span class=\"line\">            Add[l].<span class=\"built_in\">push_back</span>(&#123; b, i &#125;), <span class=\"built_in\">add</span>(l, b);</span><br><span class=\"line\">            Add[r + <span class=\"number\">1</span>].<span class=\"built_in\">push_back</span>(&#123; -b, i &#125;), <span class=\"built_in\">add</span>(r + <span class=\"number\">1</span>, -b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;b);</span><br><span class=\"line\">            seg1::<span class=\"built_in\">upd</span>(l, r, -b, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%lld&quot;</span>, &amp;a, &amp;c);</span><br><span class=\"line\">            ll K = seg1::<span class=\"built_in\">qry</span>(a, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(K &lt; c) ans[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> Qry[a].<span class=\"built_in\">push_back</span>(&#123; c + <span class=\"built_in\">qry</span>(a) - K, i &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> ans[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [v, t] : Add[i]) seg2::<span class=\"built_in\">upd</span>(t, v, <span class=\"number\">1</span>, q, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [k, t] : Qry[i]) ans[t] = id[seg2::<span class=\"built_in\">qry</span>(k, <span class=\"number\">1</span>, q, <span class=\"number\">1</span>)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, q) <span class=\"keyword\">if</span>(~ans[i]) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"Food Court | JOISC2021 D1T3","date":"2021-03-22T12:16:07.000Z","updated":"2021-03-22T12:16:07.000Z","_content":"> 有 $N$ 个商店，在每个商店的前面，都有顾客排队，顾客分 $M$ 类。\n>\n> 一共发生了 $Q$ 个事件，每个事件是以下之一。\n>\n> - 在第 $L$ 到 $R$ 的每个商店前的队列末尾加入 $K$ 个 $C$ 类顾客。\n> - 对于第 $L$ 到 $R$ 的每个商店，如果队列中的人数不少于 $K$，则队列最前面的 $K$ 个顾客离开，否则队列中的顾客将全部离开。\n> - 询问第 $A$ 个商店前的队列中从前往后数的第 $B$ 个人属于哪一类，不存在输出 $0$\n>\n> $N, M, Q \\le 2.5 \\cdot 10^5$\n\n### 先考虑第 $A$ 个商店前的队列中的人数怎么求。\n\n对于第一种操作，就是区间加上一个正数；对于第二种操作，就是区间减去一个正数，再和 $0$ 取 ```max```。\n\n简化一下就是：区间加上一个整数，再和 $0$ 取 ```max```。\n\n对于一个位置，假设它依次进行操作的数分别为 $a_1,a_2,\\cdots,a_k$，那么此时它的值为\n$$\n\\max\\{0,\\max\\{0,\\max\\{0,\\cdots\\max\\{0,a_1\\}\\cdots+a_{k-1}\\}+a_k\\}\\\\\n=\\max\\{0,a_k,a_{k-1}+a_k,a_{k-2}+a_{k-1}+a_k,\\cdots,a_1+a_2+\\cdots+a_k\\}\\\\\n=\\sum_{i=1}^ka_i-\\min\\{0,a_1,a_1+a_2,\\cdots,a_1+a_2+\\cdots+a_k\\}\n$$\n即在不考虑再和 $0$ 取 ```max``` 的情况下，当前值减**历史**最小值。\n\n做法是建立线段树，对每个结点维护加的懒标记 $tag_i$ 和**仅考虑包含此区间的操作**时的历史最小值 $minTag_i$。\n\n区间加 $b$ 时就 ```tag[i] += b, minTag[i] = min(minTag[i], tag[i])```。\n\n下放懒标记时就 ```tag[son] += tag[fa], minTag[son] = min(minTag[son], tag[son] + minTag[fa])```。\n\n### 再考虑原题\n\n假设第 $A$ 个商店当前有 $K$ 个人，这个商店总共来过 $S$ 个人，则当前第 $B$ 个人就是所有来过的人中第 $B+S-K$ 个人。\n\n$S$ 很好算，而 $K$ 用上述方法即可求得。问题是转化为求所有来过的人中第 $K$ 个人。\n\n离线下所有第一种操作，依次扫描第 $1$ 个到第 $n$ 个商店，维护一个时间轴线段树，每个结点的值这段时间内来过多少人。\n\n当扫到一个区间的左端点 $L$ 时在对应的时间 $t$ 上加人数 $B$。扫**过**一个区间的右端点 $R$ （即扫到 $R+1$）时在对应的时间 $t$ 上减人数 $B$。\n\n询问就是查询最小的 $T$ 满足 $[1,T]$ 内加入的人数不少于要求的 $K$ ，答案是第 $T$ 个操作对于的 $C$，线段树上二分一下即可。\n\n时间复杂度 $O(n\\log n)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define mid ((l + r) / 2)\n#define lch l, mid, o * 2\n#define rch mid + 1, r, o * 2 + 1\n\nusing namespace std;\nconst int N = 2.5e5 + 5;\ntypedef long long ll;\nint n, m, q;\nll c[N];\nvoid add(int i, int v) { for(; i <= n; i += i & -i) c[i] += v; }\nll qry(int i, ll r = 0) { for(; i; i &= i - 1) r += c[i]; return r; }\nnamespace seg1 {\n    ll ta[N * 4], mi[N * 4];\n    void put(int o, ll k, ll kk) {\n        mi[o] = min(mi[o], ta[o] + kk), ta[o] += k;\n    }\n    void pd(int o) {\n        put(o * 2, ta[o], mi[o]);\n        put(o * 2 + 1, ta[o], mi[o]);\n        ta[o] = mi[o] = 0;\n    }\n    void upd(int L, int R, int k, int l, int r, int o) {\n        if(L <= l && r <= R) return put(o, k, k);\n        pd(o);\n        if(L <= mid) upd(L, R, k, lch);\n        if(R > mid) upd(L, R, k, rch);\n    }\n    ll qry(int p, int l, int r, int o) {\n        if(l == r) return ta[o] - mi[o];\n        pd(o);\n        return p <= mid ? qry(p, lch) : qry(p, rch);\n    }\n};\nnamespace seg2 {\n    ll c[N * 4];\n    void upd(int p, int v, int l, int r, int o) {\n        c[o] += v; if(p > mid) upd(p, v, rch); else if(l < r) upd(p, v, lch);\n    }\n    ll qry(ll k, int l, int r, int o) {\n        return l < r ? k <= c[o * 2] ? qry(k, lch) : qry(k - c[o * 2], rch) : l;\n    }\n};\nvector <pair <int, int>> Add[N];\nvector <pair <ll, int>> Qry[N];\nint id[N], ans[N];\nint main() {\n    cin >> n >> m >> q;\n    int op, l, r, a, b; ll c;\n    rep(i, 1, q) {\n        scanf(\"%d\", &op);\n        if(op == 1) {\n            scanf(\"%d%d%d%d\", &l, &r, &id[i], &b);\n            seg1::upd(l, r, b, 1, n, 1);\n            Add[l].push_back({ b, i }), add(l, b);\n            Add[r + 1].push_back({ -b, i }), add(r + 1, -b);\n        }\n        if(op == 2) {\n            scanf(\"%d%d%d\", &l, &r, &b);\n            seg1::upd(l, r, -b, 1, n, 1);\n        }\n        if(op == 3) {\n            scanf(\"%d%lld\", &a, &c);\n            ll K = seg1::qry(a, 1, n, 1);\n            if(K < c) ans[i] = 0;\n            else Qry[a].push_back({ c + qry(a) - K, i });\n        } else ans[i] = -1;\n    }\n    rep(i, 1, n) {\n        for(auto [v, t] : Add[i]) seg2::upd(t, v, 1, q, 1);\n        for(auto [k, t] : Qry[i]) ans[t] = id[seg2::qry(k, 1, q, 1)];\n    }\n    rep(i, 1, q) if(~ans[i]) printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n```\n\n","source":"_posts/JOISC2021D1T3.md","raw":"---\ntitle: Food Court | JOISC2021 D1T3\ndate: 2021-03-22 20:16:07\nupdated: 2021-03-22 20:16:07\ntags: [数据结构]\ncategories: JOISC\n---\n> 有 $N$ 个商店，在每个商店的前面，都有顾客排队，顾客分 $M$ 类。\n>\n> 一共发生了 $Q$ 个事件，每个事件是以下之一。\n>\n> - 在第 $L$ 到 $R$ 的每个商店前的队列末尾加入 $K$ 个 $C$ 类顾客。\n> - 对于第 $L$ 到 $R$ 的每个商店，如果队列中的人数不少于 $K$，则队列最前面的 $K$ 个顾客离开，否则队列中的顾客将全部离开。\n> - 询问第 $A$ 个商店前的队列中从前往后数的第 $B$ 个人属于哪一类，不存在输出 $0$\n>\n> $N, M, Q \\le 2.5 \\cdot 10^5$\n\n### 先考虑第 $A$ 个商店前的队列中的人数怎么求。\n\n对于第一种操作，就是区间加上一个正数；对于第二种操作，就是区间减去一个正数，再和 $0$ 取 ```max```。\n\n简化一下就是：区间加上一个整数，再和 $0$ 取 ```max```。\n\n对于一个位置，假设它依次进行操作的数分别为 $a_1,a_2,\\cdots,a_k$，那么此时它的值为\n$$\n\\max\\{0,\\max\\{0,\\max\\{0,\\cdots\\max\\{0,a_1\\}\\cdots+a_{k-1}\\}+a_k\\}\\\\\n=\\max\\{0,a_k,a_{k-1}+a_k,a_{k-2}+a_{k-1}+a_k,\\cdots,a_1+a_2+\\cdots+a_k\\}\\\\\n=\\sum_{i=1}^ka_i-\\min\\{0,a_1,a_1+a_2,\\cdots,a_1+a_2+\\cdots+a_k\\}\n$$\n即在不考虑再和 $0$ 取 ```max``` 的情况下，当前值减**历史**最小值。\n\n做法是建立线段树，对每个结点维护加的懒标记 $tag_i$ 和**仅考虑包含此区间的操作**时的历史最小值 $minTag_i$。\n\n区间加 $b$ 时就 ```tag[i] += b, minTag[i] = min(minTag[i], tag[i])```。\n\n下放懒标记时就 ```tag[son] += tag[fa], minTag[son] = min(minTag[son], tag[son] + minTag[fa])```。\n\n### 再考虑原题\n\n假设第 $A$ 个商店当前有 $K$ 个人，这个商店总共来过 $S$ 个人，则当前第 $B$ 个人就是所有来过的人中第 $B+S-K$ 个人。\n\n$S$ 很好算，而 $K$ 用上述方法即可求得。问题是转化为求所有来过的人中第 $K$ 个人。\n\n离线下所有第一种操作，依次扫描第 $1$ 个到第 $n$ 个商店，维护一个时间轴线段树，每个结点的值这段时间内来过多少人。\n\n当扫到一个区间的左端点 $L$ 时在对应的时间 $t$ 上加人数 $B$。扫**过**一个区间的右端点 $R$ （即扫到 $R+1$）时在对应的时间 $t$ 上减人数 $B$。\n\n询问就是查询最小的 $T$ 满足 $[1,T]$ 内加入的人数不少于要求的 $K$ ，答案是第 $T$ 个操作对于的 $C$，线段树上二分一下即可。\n\n时间复杂度 $O(n\\log n)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define mid ((l + r) / 2)\n#define lch l, mid, o * 2\n#define rch mid + 1, r, o * 2 + 1\n\nusing namespace std;\nconst int N = 2.5e5 + 5;\ntypedef long long ll;\nint n, m, q;\nll c[N];\nvoid add(int i, int v) { for(; i <= n; i += i & -i) c[i] += v; }\nll qry(int i, ll r = 0) { for(; i; i &= i - 1) r += c[i]; return r; }\nnamespace seg1 {\n    ll ta[N * 4], mi[N * 4];\n    void put(int o, ll k, ll kk) {\n        mi[o] = min(mi[o], ta[o] + kk), ta[o] += k;\n    }\n    void pd(int o) {\n        put(o * 2, ta[o], mi[o]);\n        put(o * 2 + 1, ta[o], mi[o]);\n        ta[o] = mi[o] = 0;\n    }\n    void upd(int L, int R, int k, int l, int r, int o) {\n        if(L <= l && r <= R) return put(o, k, k);\n        pd(o);\n        if(L <= mid) upd(L, R, k, lch);\n        if(R > mid) upd(L, R, k, rch);\n    }\n    ll qry(int p, int l, int r, int o) {\n        if(l == r) return ta[o] - mi[o];\n        pd(o);\n        return p <= mid ? qry(p, lch) : qry(p, rch);\n    }\n};\nnamespace seg2 {\n    ll c[N * 4];\n    void upd(int p, int v, int l, int r, int o) {\n        c[o] += v; if(p > mid) upd(p, v, rch); else if(l < r) upd(p, v, lch);\n    }\n    ll qry(ll k, int l, int r, int o) {\n        return l < r ? k <= c[o * 2] ? qry(k, lch) : qry(k - c[o * 2], rch) : l;\n    }\n};\nvector <pair <int, int>> Add[N];\nvector <pair <ll, int>> Qry[N];\nint id[N], ans[N];\nint main() {\n    cin >> n >> m >> q;\n    int op, l, r, a, b; ll c;\n    rep(i, 1, q) {\n        scanf(\"%d\", &op);\n        if(op == 1) {\n            scanf(\"%d%d%d%d\", &l, &r, &id[i], &b);\n            seg1::upd(l, r, b, 1, n, 1);\n            Add[l].push_back({ b, i }), add(l, b);\n            Add[r + 1].push_back({ -b, i }), add(r + 1, -b);\n        }\n        if(op == 2) {\n            scanf(\"%d%d%d\", &l, &r, &b);\n            seg1::upd(l, r, -b, 1, n, 1);\n        }\n        if(op == 3) {\n            scanf(\"%d%lld\", &a, &c);\n            ll K = seg1::qry(a, 1, n, 1);\n            if(K < c) ans[i] = 0;\n            else Qry[a].push_back({ c + qry(a) - K, i });\n        } else ans[i] = -1;\n    }\n    rep(i, 1, n) {\n        for(auto [v, t] : Add[i]) seg2::upd(t, v, 1, q, 1);\n        for(auto [k, t] : Qry[i]) ans[t] = id[seg2::qry(k, 1, q, 1)];\n    }\n    rep(i, 1, q) if(~ans[i]) printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n```\n\n","slug":"JOISC2021D1T3","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh03001wootnaf27hcj4","content":"<blockquote>\r\n<p>有 <span class=\"math inline\">\\(N\\)</span> 个商店，在每个商店的前面，都有顾客排队，顾客分 <span class=\"math inline\">\\(M\\)</span> 类。</p>\r\n<p>一共发生了 <span class=\"math inline\">\\(Q\\)</span> 个事件，每个事件是以下之一。</p>\r\n<ul>\r\n<li>在第 <span class=\"math inline\">\\(L\\)</span> 到 <span class=\"math inline\">\\(R\\)</span> 的每个商店前的队列末尾加入 <span class=\"math inline\">\\(K\\)</span> 个 <span class=\"math inline\">\\(C\\)</span> 类顾客。</li>\r\n<li>对于第 <span class=\"math inline\">\\(L\\)</span> 到 <span class=\"math inline\">\\(R\\)</span> 的每个商店，如果队列中的人数不少于 <span class=\"math inline\">\\(K\\)</span>，则队列最前面的 <span class=\"math inline\">\\(K\\)</span> 个顾客离开，否则队列中的顾客将全部离开。</li>\r\n<li>询问第 <span class=\"math inline\">\\(A\\)</span> 个商店前的队列中从前往后数的第 <span class=\"math inline\">\\(B\\)</span> 个人属于哪一类，不存在输出 <span class=\"math inline\">\\(0\\)</span></li>\r\n</ul>\r\n<p><span class=\"math inline\">\\(N, M, Q \\le 2.5 \\cdot 10^5\\)</span></p>\r\n</blockquote>\r\n<h3 id=\"先考虑第-a-个商店前的队列中的人数怎么求\">先考虑第 <span class=\"math inline\">\\(A\\)</span> 个商店前的队列中的人数怎么求。</h3>\r\n<p>对于第一种操作，就是区间加上一个正数；对于第二种操作，就是区间减去一个正数，再和 <span class=\"math inline\">\\(0\\)</span> 取 <code>max</code>。</p>\r\n<p>简化一下就是：区间加上一个整数，再和 <span class=\"math inline\">\\(0\\)</span> 取 <code>max</code>。</p>\r\n<p>对于一个位置，假设它依次进行操作的数分别为 <span class=\"math inline\">\\(a_1,a_2,\\cdots,a_k\\)</span>，那么此时它的值为 <span class=\"math display\">\\[\r\n\\max\\{0,\\max\\{0,\\max\\{0,\\cdots\\max\\{0,a_1\\}\\cdots+a_{k-1}\\}+a_k\\}\\\\\r\n=\\max\\{0,a_k,a_{k-1}+a_k,a_{k-2}+a_{k-1}+a_k,\\cdots,a_1+a_2+\\cdots+a_k\\}\\\\\r\n=\\sum_{i=1}^ka_i-\\min\\{0,a_1,a_1+a_2,\\cdots,a_1+a_2+\\cdots+a_k\\}\r\n\\]</span> 即在不考虑再和 <span class=\"math inline\">\\(0\\)</span> 取 <code>max</code> 的情况下，当前值减<strong>历史</strong>最小值。</p>\r\n<p>做法是建立线段树，对每个结点维护加的懒标记 <span class=\"math inline\">\\(tag_i\\)</span> 和<strong>仅考虑包含此区间的操作</strong>时的历史最小值 <span class=\"math inline\">\\(minTag_i\\)</span>。</p>\r\n<p>区间加 <span class=\"math inline\">\\(b\\)</span> 时就 <code>tag[i] += b, minTag[i] = min(minTag[i], tag[i])</code>。</p>\r\n<p>下放懒标记时就 <code>tag[son] += tag[fa], minTag[son] = min(minTag[son], tag[son] + minTag[fa])</code>。</p>\r\n<h3 id=\"再考虑原题\">再考虑原题</h3>\r\n<p>假设第 <span class=\"math inline\">\\(A\\)</span> 个商店当前有 <span class=\"math inline\">\\(K\\)</span> 个人，这个商店总共来过 <span class=\"math inline\">\\(S\\)</span> 个人，则当前第 <span class=\"math inline\">\\(B\\)</span> 个人就是所有来过的人中第 <span class=\"math inline\">\\(B+S-K\\)</span> 个人。</p>\r\n<p><span class=\"math inline\">\\(S\\)</span> 很好算，而 <span class=\"math inline\">\\(K\\)</span> 用上述方法即可求得。问题是转化为求所有来过的人中第 <span class=\"math inline\">\\(K\\)</span> 个人。</p>\r\n<p>离线下所有第一种操作，依次扫描第 <span class=\"math inline\">\\(1\\)</span> 个到第 <span class=\"math inline\">\\(n\\)</span> 个商店，维护一个时间轴线段树，每个结点的值这段时间内来过多少人。</p>\r\n<p>当扫到一个区间的左端点 <span class=\"math inline\">\\(L\\)</span> 时在对应的时间 <span class=\"math inline\">\\(t\\)</span> 上加人数 <span class=\"math inline\">\\(B\\)</span>。扫<strong>过</strong>一个区间的右端点 <span class=\"math inline\">\\(R\\)</span> （即扫到 <span class=\"math inline\">\\(R+1\\)</span>）时在对应的时间 <span class=\"math inline\">\\(t\\)</span> 上减人数 <span class=\"math inline\">\\(B\\)</span>。</p>\r\n<p>询问就是查询最小的 <span class=\"math inline\">\\(T\\)</span> 满足 <span class=\"math inline\">\\([1,T]\\)</span> 内加入的人数不少于要求的 <span class=\"math inline\">\\(K\\)</span> ，答案是第 <span class=\"math inline\">\\(T\\)</span> 个操作对于的 <span class=\"math inline\">\\(C\\)</span>，线段树上二分一下即可。</p>\r\n<p>时间复杂度 <span class=\"math inline\">\\(O(n\\log n)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l + r) / 2)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lch l, mid, o * 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rch mid + 1, r, o * 2 + 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2.5e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, q;</span><br><span class=\"line\">ll c[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> v)</span> </span>&#123; <span class=\"keyword\">for</span>(; i &lt;= n; i += i &amp; -i) c[i] += v; &#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> i, ll r = <span class=\"number\">0</span>)</span> </span>&#123; <span class=\"keyword\">for</span>(; i; i &amp;= i - <span class=\"number\">1</span>) r += c[i]; <span class=\"keyword\">return</span> r; &#125;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> seg1 &#123;</span><br><span class=\"line\">    ll ta[N * <span class=\"number\">4</span>], mi[N * <span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(<span class=\"keyword\">int</span> o, ll k, ll kk)</span> </span>&#123;</span><br><span class=\"line\">        mi[o] = <span class=\"built_in\">min</span>(mi[o], ta[o] + kk), ta[o] += k;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pd</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">put</span>(o * <span class=\"number\">2</span>, ta[o], mi[o]);</span><br><span class=\"line\">        <span class=\"built_in\">put</span>(o * <span class=\"number\">2</span> + <span class=\"number\">1</span>, ta[o], mi[o]);</span><br><span class=\"line\">        ta[o] = mi[o] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">upd</span><span class=\"params\">(<span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class=\"keyword\">return</span> <span class=\"built_in\">put</span>(o, k, k);</span><br><span class=\"line\">        <span class=\"built_in\">pd</span>(o);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L &lt;= mid) <span class=\"built_in\">upd</span>(L, R, k, lch);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(R &gt; mid) <span class=\"built_in\">upd</span>(L, R, k, rch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">ll <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l == r) <span class=\"keyword\">return</span> ta[o] - mi[o];</span><br><span class=\"line\">        <span class=\"built_in\">pd</span>(o);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p &lt;= mid ? <span class=\"built_in\">qry</span>(p, lch) : <span class=\"built_in\">qry</span>(p, rch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> seg2 &#123;</span><br><span class=\"line\">    ll c[N * <span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">upd</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">        c[o] += v; <span class=\"keyword\">if</span>(p &gt; mid) <span class=\"built_in\">upd</span>(p, v, rch); <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(l &lt; r) <span class=\"built_in\">upd</span>(p, v, lch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">ll <span class=\"title\">qry</span><span class=\"params\">(ll k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l &lt; r ? k &lt;= c[o * <span class=\"number\">2</span>] ? <span class=\"built_in\">qry</span>(k, lch) : <span class=\"built_in\">qry</span>(k - c[o * <span class=\"number\">2</span>], rch) : l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector &lt;pair &lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; Add[N];</span><br><span class=\"line\">vector &lt;pair &lt;ll, <span class=\"keyword\">int</span>&gt;&gt; Qry[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> id[N], ans[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> op, l, r, a, b; ll c;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, q) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;op);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;id[i], &amp;b);</span><br><span class=\"line\">            seg1::<span class=\"built_in\">upd</span>(l, r, b, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</span><br><span class=\"line\">            Add[l].<span class=\"built_in\">push_back</span>(&#123; b, i &#125;), <span class=\"built_in\">add</span>(l, b);</span><br><span class=\"line\">            Add[r + <span class=\"number\">1</span>].<span class=\"built_in\">push_back</span>(&#123; -b, i &#125;), <span class=\"built_in\">add</span>(r + <span class=\"number\">1</span>, -b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;b);</span><br><span class=\"line\">            seg1::<span class=\"built_in\">upd</span>(l, r, -b, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%lld&quot;</span>, &amp;a, &amp;c);</span><br><span class=\"line\">            ll K = seg1::<span class=\"built_in\">qry</span>(a, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(K &lt; c) ans[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> Qry[a].<span class=\"built_in\">push_back</span>(&#123; c + <span class=\"built_in\">qry</span>(a) - K, i &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> ans[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [v, t] : Add[i]) seg2::<span class=\"built_in\">upd</span>(t, v, <span class=\"number\">1</span>, q, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [k, t] : Qry[i]) ans[t] = id[seg2::<span class=\"built_in\">qry</span>(k, <span class=\"number\">1</span>, q, <span class=\"number\">1</span>)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, q) <span class=\"keyword\">if</span>(~ans[i]) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":3339,"excerpt":"","more":"<blockquote>\r\n<p>有 <span class=\"math inline\">\\(N\\)</span> 个商店，在每个商店的前面，都有顾客排队，顾客分 <span class=\"math inline\">\\(M\\)</span> 类。</p>\r\n<p>一共发生了 <span class=\"math inline\">\\(Q\\)</span> 个事件，每个事件是以下之一。</p>\r\n<ul>\r\n<li>在第 <span class=\"math inline\">\\(L\\)</span> 到 <span class=\"math inline\">\\(R\\)</span> 的每个商店前的队列末尾加入 <span class=\"math inline\">\\(K\\)</span> 个 <span class=\"math inline\">\\(C\\)</span> 类顾客。</li>\r\n<li>对于第 <span class=\"math inline\">\\(L\\)</span> 到 <span class=\"math inline\">\\(R\\)</span> 的每个商店，如果队列中的人数不少于 <span class=\"math inline\">\\(K\\)</span>，则队列最前面的 <span class=\"math inline\">\\(K\\)</span> 个顾客离开，否则队列中的顾客将全部离开。</li>\r\n<li>询问第 <span class=\"math inline\">\\(A\\)</span> 个商店前的队列中从前往后数的第 <span class=\"math inline\">\\(B\\)</span> 个人属于哪一类，不存在输出 <span class=\"math inline\">\\(0\\)</span></li>\r\n</ul>\r\n<p><span class=\"math inline\">\\(N, M, Q \\le 2.5 \\cdot 10^5\\)</span></p>\r\n</blockquote>\r\n<h3 id=\"先考虑第-a-个商店前的队列中的人数怎么求\">先考虑第 <span class=\"math inline\">\\(A\\)</span> 个商店前的队列中的人数怎么求。</h3>\r\n<p>对于第一种操作，就是区间加上一个正数；对于第二种操作，就是区间减去一个正数，再和 <span class=\"math inline\">\\(0\\)</span> 取 <code>max</code>。</p>\r\n<p>简化一下就是：区间加上一个整数，再和 <span class=\"math inline\">\\(0\\)</span> 取 <code>max</code>。</p>\r\n<p>对于一个位置，假设它依次进行操作的数分别为 <span class=\"math inline\">\\(a_1,a_2,\\cdots,a_k\\)</span>，那么此时它的值为 <span class=\"math display\">\\[\r\n\\max\\{0,\\max\\{0,\\max\\{0,\\cdots\\max\\{0,a_1\\}\\cdots+a_{k-1}\\}+a_k\\}\\\\\r\n=\\max\\{0,a_k,a_{k-1}+a_k,a_{k-2}+a_{k-1}+a_k,\\cdots,a_1+a_2+\\cdots+a_k\\}\\\\\r\n=\\sum_{i=1}^ka_i-\\min\\{0,a_1,a_1+a_2,\\cdots,a_1+a_2+\\cdots+a_k\\}\r\n\\]</span> 即在不考虑再和 <span class=\"math inline\">\\(0\\)</span> 取 <code>max</code> 的情况下，当前值减<strong>历史</strong>最小值。</p>\r\n<p>做法是建立线段树，对每个结点维护加的懒标记 <span class=\"math inline\">\\(tag_i\\)</span> 和<strong>仅考虑包含此区间的操作</strong>时的历史最小值 <span class=\"math inline\">\\(minTag_i\\)</span>。</p>\r\n<p>区间加 <span class=\"math inline\">\\(b\\)</span> 时就 <code>tag[i] += b, minTag[i] = min(minTag[i], tag[i])</code>。</p>\r\n<p>下放懒标记时就 <code>tag[son] += tag[fa], minTag[son] = min(minTag[son], tag[son] + minTag[fa])</code>。</p>\r\n<h3 id=\"再考虑原题\">再考虑原题</h3>\r\n<p>假设第 <span class=\"math inline\">\\(A\\)</span> 个商店当前有 <span class=\"math inline\">\\(K\\)</span> 个人，这个商店总共来过 <span class=\"math inline\">\\(S\\)</span> 个人，则当前第 <span class=\"math inline\">\\(B\\)</span> 个人就是所有来过的人中第 <span class=\"math inline\">\\(B+S-K\\)</span> 个人。</p>\r\n<p><span class=\"math inline\">\\(S\\)</span> 很好算，而 <span class=\"math inline\">\\(K\\)</span> 用上述方法即可求得。问题是转化为求所有来过的人中第 <span class=\"math inline\">\\(K\\)</span> 个人。</p>\r\n<p>离线下所有第一种操作，依次扫描第 <span class=\"math inline\">\\(1\\)</span> 个到第 <span class=\"math inline\">\\(n\\)</span> 个商店，维护一个时间轴线段树，每个结点的值这段时间内来过多少人。</p>\r\n<p>当扫到一个区间的左端点 <span class=\"math inline\">\\(L\\)</span> 时在对应的时间 <span class=\"math inline\">\\(t\\)</span> 上加人数 <span class=\"math inline\">\\(B\\)</span>。扫<strong>过</strong>一个区间的右端点 <span class=\"math inline\">\\(R\\)</span> （即扫到 <span class=\"math inline\">\\(R+1\\)</span>）时在对应的时间 <span class=\"math inline\">\\(t\\)</span> 上减人数 <span class=\"math inline\">\\(B\\)</span>。</p>\r\n<p>询问就是查询最小的 <span class=\"math inline\">\\(T\\)</span> 满足 <span class=\"math inline\">\\([1,T]\\)</span> 内加入的人数不少于要求的 <span class=\"math inline\">\\(K\\)</span> ，答案是第 <span class=\"math inline\">\\(T\\)</span> 个操作对于的 <span class=\"math inline\">\\(C\\)</span>，线段树上二分一下即可。</p>\r\n<p>时间复杂度 <span class=\"math inline\">\\(O(n\\log n)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l + r) / 2)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lch l, mid, o * 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rch mid + 1, r, o * 2 + 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2.5e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, q;</span><br><span class=\"line\">ll c[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> v)</span> </span>&#123; <span class=\"keyword\">for</span>(; i &lt;= n; i += i &amp; -i) c[i] += v; &#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> i, ll r = <span class=\"number\">0</span>)</span> </span>&#123; <span class=\"keyword\">for</span>(; i; i &amp;= i - <span class=\"number\">1</span>) r += c[i]; <span class=\"keyword\">return</span> r; &#125;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> seg1 &#123;</span><br><span class=\"line\">    ll ta[N * <span class=\"number\">4</span>], mi[N * <span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(<span class=\"keyword\">int</span> o, ll k, ll kk)</span> </span>&#123;</span><br><span class=\"line\">        mi[o] = <span class=\"built_in\">min</span>(mi[o], ta[o] + kk), ta[o] += k;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pd</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">put</span>(o * <span class=\"number\">2</span>, ta[o], mi[o]);</span><br><span class=\"line\">        <span class=\"built_in\">put</span>(o * <span class=\"number\">2</span> + <span class=\"number\">1</span>, ta[o], mi[o]);</span><br><span class=\"line\">        ta[o] = mi[o] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">upd</span><span class=\"params\">(<span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class=\"keyword\">return</span> <span class=\"built_in\">put</span>(o, k, k);</span><br><span class=\"line\">        <span class=\"built_in\">pd</span>(o);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L &lt;= mid) <span class=\"built_in\">upd</span>(L, R, k, lch);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(R &gt; mid) <span class=\"built_in\">upd</span>(L, R, k, rch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">ll <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l == r) <span class=\"keyword\">return</span> ta[o] - mi[o];</span><br><span class=\"line\">        <span class=\"built_in\">pd</span>(o);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p &lt;= mid ? <span class=\"built_in\">qry</span>(p, lch) : <span class=\"built_in\">qry</span>(p, rch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> seg2 &#123;</span><br><span class=\"line\">    ll c[N * <span class=\"number\">4</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">upd</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">        c[o] += v; <span class=\"keyword\">if</span>(p &gt; mid) <span class=\"built_in\">upd</span>(p, v, rch); <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(l &lt; r) <span class=\"built_in\">upd</span>(p, v, lch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">ll <span class=\"title\">qry</span><span class=\"params\">(ll k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l &lt; r ? k &lt;= c[o * <span class=\"number\">2</span>] ? <span class=\"built_in\">qry</span>(k, lch) : <span class=\"built_in\">qry</span>(k - c[o * <span class=\"number\">2</span>], rch) : l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector &lt;pair &lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; Add[N];</span><br><span class=\"line\">vector &lt;pair &lt;ll, <span class=\"keyword\">int</span>&gt;&gt; Qry[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> id[N], ans[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> op, l, r, a, b; ll c;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, q) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;op);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;id[i], &amp;b);</span><br><span class=\"line\">            seg1::<span class=\"built_in\">upd</span>(l, r, b, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</span><br><span class=\"line\">            Add[l].<span class=\"built_in\">push_back</span>(&#123; b, i &#125;), <span class=\"built_in\">add</span>(l, b);</span><br><span class=\"line\">            Add[r + <span class=\"number\">1</span>].<span class=\"built_in\">push_back</span>(&#123; -b, i &#125;), <span class=\"built_in\">add</span>(r + <span class=\"number\">1</span>, -b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;b);</span><br><span class=\"line\">            seg1::<span class=\"built_in\">upd</span>(l, r, -b, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%lld&quot;</span>, &amp;a, &amp;c);</span><br><span class=\"line\">            ll K = seg1::<span class=\"built_in\">qry</span>(a, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(K &lt; c) ans[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> Qry[a].<span class=\"built_in\">push_back</span>(&#123; c + <span class=\"built_in\">qry</span>(a) - K, i &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> ans[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [v, t] : Add[i]) seg2::<span class=\"built_in\">upd</span>(t, v, <span class=\"number\">1</span>, q, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [k, t] : Qry[i]) ans[t] = id[seg2::<span class=\"built_in\">qry</span>(k, <span class=\"number\">1</span>, q, <span class=\"number\">1</span>)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, q) <span class=\"keyword\">if</span>(~ans[i]) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"Meetings 2 | JOISC2021 D3T3","date":"2021-03-22T12:16:23.000Z","updated":"2021-03-22T12:16:23.000Z","_content":"> 给定 $n$ 个点的树。\n>\n> 当一些结点上的人开会时，会将满足以下条件的结点作为会议的候选结点：所有参会者到此结点的距离和最小。\n>\n> 对于每一个的 $k \\in [1,n]$，求出所有可能的 $k$ 个人的会议最多有多少个候选结点。\n>\n> $n \\le 2 \\cdot 10^5$\n\n#### 这题告诉我们：涉及到 ```size``` 时可以考虑把重心作为树的重心有没有什么性质。\n\n### 结论 $1$：当 $k$ 为奇数时，答案为 $1$。\n\n证明：\n\n设 $f(u)$ 表示删去 $u$ 后，每个连通块内关键结点（有参会者的结点）数量的最大值。\n\n假设 $u$ 是一个候选结点，那么 $f(u) \\le \\lfloor \\frac k2 \\rfloor$ ，否则可以找到一个与 $u$ 相邻的结点 $v$ 满足所在连通块大小大于 $\\lfloor \\frac k2 \\rfloor$ ，不难发现 $v$ 比 $u$ 严格更优。\n\n因此任意一个不同于 $u$ 的结点 $v$ 必定满足 $f(v) \\ge k -f(u) > \\lfloor \\frac k2 \\rfloor$，所以 $v$ 一定不是候选结点。\n\n### 结论 $2$：当 $k$ 为偶数时，所有候选结点一定是一条链。\n\n 证明：\n\n若 $u, v$ 是不相邻两个结点，且都是候选结点。设边 $(u,v)$ 两边的关键结点数量分别为 $a,b$。\n\n则 $a + b = k, a \\le f(v) \\le \\frac k2,b \\le f(u) \\le \\frac k2 \\Rightarrow a = b = \\frac k2$。\n\n所有平分 $k$ 个点的边 $(u,v)$ 一定是一条链，如图。\n\n![](https://i.loli.net/2021/03/22/cs9ZJOrImCibEAz.png)\n\n至此，可以得到一个 $O(n^2)$ 做法：\n\n设 $F(u,v)$ 表示链 $u - v$ 两边的结点数的较小值。\n\n枚举一条链 $u - v$，如果 $F(u,v) \\ge \\frac k2$，那么可以在两边分别放 $\\frac k2$ 参会者，就至少能得到链长个候选结点。  \n因此用链长更新 $k=2F(u,v)$ 时的答案。\n\n然后最仙的想法就是把树的重心作为根，然后对于任意一条链 $u - v$，$F(u,v) = \\min\\{size_u,size_v\\}$，证明略（主要是分析深度递增型链）。\n\n从空集开始，把所有点按 $size$ 从大到小加入，动态维护当前树的直径 $D$。\n\n若刚加入的点为 $u$，那么就用 $D$ 更新 $k=2size_u$ 时的答案。\n\n动态维护树的直径的方法也很简单：设当前的直径的两个端点是 $a, b$，加入结点 $u$ 后，如果直径改变，则要么是 $u - a$，要么是 $u - b$，算两次树上距离即可。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n\nusing namespace std;\nconst int N = 2e5 + 5;\n\nint n, sz[N], rt, d[N], fa[18][N], ans[N];\nvector <int> G[N], nds[N];\nvoid dfs(int u, int fa) {\n    sz[u] = 1;\n    int ma = 0;\n    for(int v : G[u]) if(v ^ fa)\n        dfs(v, u), sz[u] += sz[v], ma = max(ma, sz[v]);\n    if(max(ma, n - sz[u]) <= n / 2) rt = u;\n}\nvoid Dfs(int u) {\n    sz[u] = 1;\n    rep(i, 1, 17) fa[i][u] = fa[i - 1][fa[i - 1][u]];\n    for(int v : G[u]) if(v ^ fa[0][u])\n        fa[0][v] = u, d[v] = d[u] + 1, Dfs(v), sz[u] += sz[v];\n}\nint dis(int u, int v) {\n    if(d[u] < d[v]) swap(u, v);\n    int res = d[u] - d[v];\n    per(i, 17, 0) if(d[u] - (1 << i) >= d[v]) u = fa[i][u];\n    if(u == v) return res;\n    per(i, 17, 0) if(fa[i][u] ^ fa[i][v])\n        u = fa[i][u], v = fa[i][v], res += 2 << i;\n    return res + 2;\n}\n\nint main() {\n    cin >> n;\n    int u, v;\n    rep(i, 2, n) {\n        scanf(\"%d%d\", &u, &v);\n        G[u].push_back(v), G[v].push_back(u);\n    }\n    dfs(1, 0), Dfs(rt);\n    rep(i, 1, n) nds[sz[i]].push_back(i);\n    u = v = rt;\n    int D = 0, d;\n    per(i, n, 1) {\n        for(int x : nds[i]) {\n            if((d = dis(x, u)) > D) v = x, D = d;\n            if((d = dis(x, v)) > D) u = x, D = d;\n        }\n        ans[i] = D + 1;\n    }\n    rep(i, 1, n) printf(\"%d\\n\", i & 1 ? 1 : ans[i / 2]);\n    return 0;\n}\n```","source":"_posts/JOISC2021D3T3.md","raw":"---\ntitle: Meetings 2 | JOISC2021 D3T3\ndate: 2021-03-22 20:16:23\nupdated: 2021-03-22 20:16:23\ntags: [数据结构,树的重心,树的直径]\ncategories: JOISC\n---\n> 给定 $n$ 个点的树。\n>\n> 当一些结点上的人开会时，会将满足以下条件的结点作为会议的候选结点：所有参会者到此结点的距离和最小。\n>\n> 对于每一个的 $k \\in [1,n]$，求出所有可能的 $k$ 个人的会议最多有多少个候选结点。\n>\n> $n \\le 2 \\cdot 10^5$\n\n#### 这题告诉我们：涉及到 ```size``` 时可以考虑把重心作为树的重心有没有什么性质。\n\n### 结论 $1$：当 $k$ 为奇数时，答案为 $1$。\n\n证明：\n\n设 $f(u)$ 表示删去 $u$ 后，每个连通块内关键结点（有参会者的结点）数量的最大值。\n\n假设 $u$ 是一个候选结点，那么 $f(u) \\le \\lfloor \\frac k2 \\rfloor$ ，否则可以找到一个与 $u$ 相邻的结点 $v$ 满足所在连通块大小大于 $\\lfloor \\frac k2 \\rfloor$ ，不难发现 $v$ 比 $u$ 严格更优。\n\n因此任意一个不同于 $u$ 的结点 $v$ 必定满足 $f(v) \\ge k -f(u) > \\lfloor \\frac k2 \\rfloor$，所以 $v$ 一定不是候选结点。\n\n### 结论 $2$：当 $k$ 为偶数时，所有候选结点一定是一条链。\n\n 证明：\n\n若 $u, v$ 是不相邻两个结点，且都是候选结点。设边 $(u,v)$ 两边的关键结点数量分别为 $a,b$。\n\n则 $a + b = k, a \\le f(v) \\le \\frac k2,b \\le f(u) \\le \\frac k2 \\Rightarrow a = b = \\frac k2$。\n\n所有平分 $k$ 个点的边 $(u,v)$ 一定是一条链，如图。\n\n![](https://i.loli.net/2021/03/22/cs9ZJOrImCibEAz.png)\n\n至此，可以得到一个 $O(n^2)$ 做法：\n\n设 $F(u,v)$ 表示链 $u - v$ 两边的结点数的较小值。\n\n枚举一条链 $u - v$，如果 $F(u,v) \\ge \\frac k2$，那么可以在两边分别放 $\\frac k2$ 参会者，就至少能得到链长个候选结点。  \n因此用链长更新 $k=2F(u,v)$ 时的答案。\n\n然后最仙的想法就是把树的重心作为根，然后对于任意一条链 $u - v$，$F(u,v) = \\min\\{size_u,size_v\\}$，证明略（主要是分析深度递增型链）。\n\n从空集开始，把所有点按 $size$ 从大到小加入，动态维护当前树的直径 $D$。\n\n若刚加入的点为 $u$，那么就用 $D$ 更新 $k=2size_u$ 时的答案。\n\n动态维护树的直径的方法也很简单：设当前的直径的两个端点是 $a, b$，加入结点 $u$ 后，如果直径改变，则要么是 $u - a$，要么是 $u - b$，算两次树上距离即可。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n\nusing namespace std;\nconst int N = 2e5 + 5;\n\nint n, sz[N], rt, d[N], fa[18][N], ans[N];\nvector <int> G[N], nds[N];\nvoid dfs(int u, int fa) {\n    sz[u] = 1;\n    int ma = 0;\n    for(int v : G[u]) if(v ^ fa)\n        dfs(v, u), sz[u] += sz[v], ma = max(ma, sz[v]);\n    if(max(ma, n - sz[u]) <= n / 2) rt = u;\n}\nvoid Dfs(int u) {\n    sz[u] = 1;\n    rep(i, 1, 17) fa[i][u] = fa[i - 1][fa[i - 1][u]];\n    for(int v : G[u]) if(v ^ fa[0][u])\n        fa[0][v] = u, d[v] = d[u] + 1, Dfs(v), sz[u] += sz[v];\n}\nint dis(int u, int v) {\n    if(d[u] < d[v]) swap(u, v);\n    int res = d[u] - d[v];\n    per(i, 17, 0) if(d[u] - (1 << i) >= d[v]) u = fa[i][u];\n    if(u == v) return res;\n    per(i, 17, 0) if(fa[i][u] ^ fa[i][v])\n        u = fa[i][u], v = fa[i][v], res += 2 << i;\n    return res + 2;\n}\n\nint main() {\n    cin >> n;\n    int u, v;\n    rep(i, 2, n) {\n        scanf(\"%d%d\", &u, &v);\n        G[u].push_back(v), G[v].push_back(u);\n    }\n    dfs(1, 0), Dfs(rt);\n    rep(i, 1, n) nds[sz[i]].push_back(i);\n    u = v = rt;\n    int D = 0, d;\n    per(i, n, 1) {\n        for(int x : nds[i]) {\n            if((d = dis(x, u)) > D) v = x, D = d;\n            if((d = dis(x, v)) > D) u = x, D = d;\n        }\n        ans[i] = D + 1;\n    }\n    rep(i, 1, n) printf(\"%d\\n\", i & 1 ? 1 : ans[i / 2]);\n    return 0;\n}\n```","slug":"JOISC2021D3T3","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh050021ootnbviu7tnp","content":"<blockquote>\r\n<p>给定 <span class=\"math inline\">\\(n\\)</span> 个点的树。</p>\r\n<p>当一些结点上的人开会时，会将满足以下条件的结点作为会议的候选结点：所有参会者到此结点的距离和最小。</p>\r\n<p>对于每一个的 <span class=\"math inline\">\\(k \\in [1,n]\\)</span>，求出所有可能的 <span class=\"math inline\">\\(k\\)</span> 个人的会议最多有多少个候选结点。</p>\r\n<p><span class=\"math inline\">\\(n \\le 2 \\cdot 10^5\\)</span></p>\r\n</blockquote>\r\n<h4 id=\"这题告诉我们涉及到-size-时可以考虑把重心作为树的重心有没有什么性质\">这题告诉我们：涉及到 <code>size</code> 时可以考虑把重心作为树的重心有没有什么性质。</h4>\r\n<h3 id=\"结论-1当-k-为奇数时答案为-1\">结论 <span class=\"math inline\">\\(1\\)</span>：当 <span class=\"math inline\">\\(k\\)</span> 为奇数时，答案为 <span class=\"math inline\">\\(1\\)</span>。</h3>\r\n<p>证明：</p>\r\n<p>设 <span class=\"math inline\">\\(f(u)\\)</span> 表示删去 <span class=\"math inline\">\\(u\\)</span> 后，每个连通块内关键结点（有参会者的结点）数量的最大值。</p>\r\n<p>假设 <span class=\"math inline\">\\(u\\)</span> 是一个候选结点，那么 <span class=\"math inline\">\\(f(u) \\le \\lfloor \\frac k2 \\rfloor\\)</span> ，否则可以找到一个与 <span class=\"math inline\">\\(u\\)</span> 相邻的结点 <span class=\"math inline\">\\(v\\)</span> 满足所在连通块大小大于 <span class=\"math inline\">\\(\\lfloor \\frac k2 \\rfloor\\)</span> ，不难发现 <span class=\"math inline\">\\(v\\)</span> 比 <span class=\"math inline\">\\(u\\)</span> 严格更优。</p>\r\n<p>因此任意一个不同于 <span class=\"math inline\">\\(u\\)</span> 的结点 <span class=\"math inline\">\\(v\\)</span> 必定满足 <span class=\"math inline\">\\(f(v) \\ge k -f(u) &gt; \\lfloor \\frac k2 \\rfloor\\)</span>，所以 <span class=\"math inline\">\\(v\\)</span> 一定不是候选结点。</p>\r\n<h3 id=\"结论-2当-k-为偶数时所有候选结点一定是一条链\">结论 <span class=\"math inline\">\\(2\\)</span>：当 <span class=\"math inline\">\\(k\\)</span> 为偶数时，所有候选结点一定是一条链。</h3>\r\n<p>证明：</p>\r\n<p>若 <span class=\"math inline\">\\(u, v\\)</span> 是不相邻两个结点，且都是候选结点。设边 <span class=\"math inline\">\\((u,v)\\)</span> 两边的关键结点数量分别为 <span class=\"math inline\">\\(a,b\\)</span>。</p>\r\n<p>则 <span class=\"math inline\">\\(a + b = k, a \\le f(v) \\le \\frac k2,b \\le f(u) \\le \\frac k2 \\Rightarrow a = b = \\frac k2\\)</span>。</p>\r\n<p>所有平分 <span class=\"math inline\">\\(k\\)</span> 个点的边 <span class=\"math inline\">\\((u,v)\\)</span> 一定是一条链，如图。</p>\r\n<p><img src=\"https://i.loli.net/2021/03/22/cs9ZJOrImCibEAz.png\" /></p>\r\n<p>至此，可以得到一个 <span class=\"math inline\">\\(O(n^2)\\)</span> 做法：</p>\r\n<p>设 <span class=\"math inline\">\\(F(u,v)\\)</span> 表示链 <span class=\"math inline\">\\(u - v\\)</span> 两边的结点数的较小值。</p>\r\n<p>枚举一条链 <span class=\"math inline\">\\(u - v\\)</span>，如果 <span class=\"math inline\">\\(F(u,v) \\ge \\frac k2\\)</span>，那么可以在两边分别放 <span class=\"math inline\">\\(\\frac k2\\)</span> 参会者，就至少能得到链长个候选结点。<br />\r\n因此用链长更新 <span class=\"math inline\">\\(k=2F(u,v)\\)</span> 时的答案。</p>\r\n<p>然后最仙的想法就是把树的重心作为根，然后对于任意一条链 <span class=\"math inline\">\\(u - v\\)</span>，<span class=\"math inline\">\\(F(u,v) = \\min\\{size_u,size_v\\}\\)</span>，证明略（主要是分析深度递增型链）。</p>\r\n<p>从空集开始，把所有点按 <span class=\"math inline\">\\(size\\)</span> 从大到小加入，动态维护当前树的直径 <span class=\"math inline\">\\(D\\)</span>。</p>\r\n<p>若刚加入的点为 <span class=\"math inline\">\\(u\\)</span>，那么就用 <span class=\"math inline\">\\(D\\)</span> 更新 <span class=\"math inline\">\\(k=2size_u\\)</span> 时的答案。</p>\r\n<p>动态维护树的直径的方法也很简单：设当前的直径的两个端点是 <span class=\"math inline\">\\(a, b\\)</span>，加入结点 <span class=\"math inline\">\\(u\\)</span> 后，如果直径改变，则要么是 <span class=\"math inline\">\\(u - a\\)</span>，要么是 <span class=\"math inline\">\\(u - b\\)</span>，算两次树上距离即可。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, sz[N], rt, d[N], fa[<span class=\"number\">18</span>][N], ans[N];</span><br><span class=\"line\">vector &lt;<span class=\"keyword\">int</span>&gt; G[N], nds[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">    sz[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ma = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) <span class=\"keyword\">if</span>(v ^ fa)</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v, u), sz[u] += sz[v], ma = <span class=\"built_in\">max</span>(ma, sz[v]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">max</span>(ma, n - sz[u]) &lt;= n / <span class=\"number\">2</span>) rt = u;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">    sz[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">17</span>) fa[i][u] = fa[i - <span class=\"number\">1</span>][fa[i - <span class=\"number\">1</span>][u]];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) <span class=\"keyword\">if</span>(v ^ fa[<span class=\"number\">0</span>][u])</span><br><span class=\"line\">        fa[<span class=\"number\">0</span>][v] = u, d[v] = d[u] + <span class=\"number\">1</span>, <span class=\"built_in\">Dfs</span>(v), sz[u] += sz[v];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dis</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d[u] &lt; d[v]) <span class=\"built_in\">swap</span>(u, v);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = d[u] - d[v];</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, <span class=\"number\">17</span>, <span class=\"number\">0</span>) <span class=\"keyword\">if</span>(d[u] - (<span class=\"number\">1</span> &lt;&lt; i) &gt;= d[v]) u = fa[i][u];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u == v) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, <span class=\"number\">17</span>, <span class=\"number\">0</span>) <span class=\"keyword\">if</span>(fa[i][u] ^ fa[i][v])</span><br><span class=\"line\">        u = fa[i][u], v = fa[i][v], res += <span class=\"number\">2</span> &lt;&lt; i;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res + <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class=\"line\">        G[u].<span class=\"built_in\">push_back</span>(v), G[v].<span class=\"built_in\">push_back</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>), <span class=\"built_in\">Dfs</span>(rt);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) nds[sz[i]].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    u = v = rt;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> D = <span class=\"number\">0</span>, d;</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, n, <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x : nds[i]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((d = <span class=\"built_in\">dis</span>(x, u)) &gt; D) v = x, D = d;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((d = <span class=\"built_in\">dis</span>(x, v)) &gt; D) u = x, D = d;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans[i] = D + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, i &amp; <span class=\"number\">1</span> ? <span class=\"number\">1</span> : ans[i / <span class=\"number\">2</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":2360,"excerpt":"","more":"<blockquote>\r\n<p>给定 <span class=\"math inline\">\\(n\\)</span> 个点的树。</p>\r\n<p>当一些结点上的人开会时，会将满足以下条件的结点作为会议的候选结点：所有参会者到此结点的距离和最小。</p>\r\n<p>对于每一个的 <span class=\"math inline\">\\(k \\in [1,n]\\)</span>，求出所有可能的 <span class=\"math inline\">\\(k\\)</span> 个人的会议最多有多少个候选结点。</p>\r\n<p><span class=\"math inline\">\\(n \\le 2 \\cdot 10^5\\)</span></p>\r\n</blockquote>\r\n<h4 id=\"这题告诉我们涉及到-size-时可以考虑把重心作为树的重心有没有什么性质\">这题告诉我们：涉及到 <code>size</code> 时可以考虑把重心作为树的重心有没有什么性质。</h4>\r\n<h3 id=\"结论-1当-k-为奇数时答案为-1\">结论 <span class=\"math inline\">\\(1\\)</span>：当 <span class=\"math inline\">\\(k\\)</span> 为奇数时，答案为 <span class=\"math inline\">\\(1\\)</span>。</h3>\r\n<p>证明：</p>\r\n<p>设 <span class=\"math inline\">\\(f(u)\\)</span> 表示删去 <span class=\"math inline\">\\(u\\)</span> 后，每个连通块内关键结点（有参会者的结点）数量的最大值。</p>\r\n<p>假设 <span class=\"math inline\">\\(u\\)</span> 是一个候选结点，那么 <span class=\"math inline\">\\(f(u) \\le \\lfloor \\frac k2 \\rfloor\\)</span> ，否则可以找到一个与 <span class=\"math inline\">\\(u\\)</span> 相邻的结点 <span class=\"math inline\">\\(v\\)</span> 满足所在连通块大小大于 <span class=\"math inline\">\\(\\lfloor \\frac k2 \\rfloor\\)</span> ，不难发现 <span class=\"math inline\">\\(v\\)</span> 比 <span class=\"math inline\">\\(u\\)</span> 严格更优。</p>\r\n<p>因此任意一个不同于 <span class=\"math inline\">\\(u\\)</span> 的结点 <span class=\"math inline\">\\(v\\)</span> 必定满足 <span class=\"math inline\">\\(f(v) \\ge k -f(u) &gt; \\lfloor \\frac k2 \\rfloor\\)</span>，所以 <span class=\"math inline\">\\(v\\)</span> 一定不是候选结点。</p>\r\n<h3 id=\"结论-2当-k-为偶数时所有候选结点一定是一条链\">结论 <span class=\"math inline\">\\(2\\)</span>：当 <span class=\"math inline\">\\(k\\)</span> 为偶数时，所有候选结点一定是一条链。</h3>\r\n<p>证明：</p>\r\n<p>若 <span class=\"math inline\">\\(u, v\\)</span> 是不相邻两个结点，且都是候选结点。设边 <span class=\"math inline\">\\((u,v)\\)</span> 两边的关键结点数量分别为 <span class=\"math inline\">\\(a,b\\)</span>。</p>\r\n<p>则 <span class=\"math inline\">\\(a + b = k, a \\le f(v) \\le \\frac k2,b \\le f(u) \\le \\frac k2 \\Rightarrow a = b = \\frac k2\\)</span>。</p>\r\n<p>所有平分 <span class=\"math inline\">\\(k\\)</span> 个点的边 <span class=\"math inline\">\\((u,v)\\)</span> 一定是一条链，如图。</p>\r\n<p><img src=\"https://i.loli.net/2021/03/22/cs9ZJOrImCibEAz.png\" /></p>\r\n<p>至此，可以得到一个 <span class=\"math inline\">\\(O(n^2)\\)</span> 做法：</p>\r\n<p>设 <span class=\"math inline\">\\(F(u,v)\\)</span> 表示链 <span class=\"math inline\">\\(u - v\\)</span> 两边的结点数的较小值。</p>\r\n<p>枚举一条链 <span class=\"math inline\">\\(u - v\\)</span>，如果 <span class=\"math inline\">\\(F(u,v) \\ge \\frac k2\\)</span>，那么可以在两边分别放 <span class=\"math inline\">\\(\\frac k2\\)</span> 参会者，就至少能得到链长个候选结点。<br />\r\n因此用链长更新 <span class=\"math inline\">\\(k=2F(u,v)\\)</span> 时的答案。</p>\r\n<p>然后最仙的想法就是把树的重心作为根，然后对于任意一条链 <span class=\"math inline\">\\(u - v\\)</span>，<span class=\"math inline\">\\(F(u,v) = \\min\\{size_u,size_v\\}\\)</span>，证明略（主要是分析深度递增型链）。</p>\r\n<p>从空集开始，把所有点按 <span class=\"math inline\">\\(size\\)</span> 从大到小加入，动态维护当前树的直径 <span class=\"math inline\">\\(D\\)</span>。</p>\r\n<p>若刚加入的点为 <span class=\"math inline\">\\(u\\)</span>，那么就用 <span class=\"math inline\">\\(D\\)</span> 更新 <span class=\"math inline\">\\(k=2size_u\\)</span> 时的答案。</p>\r\n<p>动态维护树的直径的方法也很简单：设当前的直径的两个端点是 <span class=\"math inline\">\\(a, b\\)</span>，加入结点 <span class=\"math inline\">\\(u\\)</span> 后，如果直径改变，则要么是 <span class=\"math inline\">\\(u - a\\)</span>，要么是 <span class=\"math inline\">\\(u - b\\)</span>，算两次树上距离即可。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, sz[N], rt, d[N], fa[<span class=\"number\">18</span>][N], ans[N];</span><br><span class=\"line\">vector &lt;<span class=\"keyword\">int</span>&gt; G[N], nds[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">    sz[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ma = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) <span class=\"keyword\">if</span>(v ^ fa)</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v, u), sz[u] += sz[v], ma = <span class=\"built_in\">max</span>(ma, sz[v]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">max</span>(ma, n - sz[u]) &lt;= n / <span class=\"number\">2</span>) rt = u;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">    sz[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">17</span>) fa[i][u] = fa[i - <span class=\"number\">1</span>][fa[i - <span class=\"number\">1</span>][u]];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) <span class=\"keyword\">if</span>(v ^ fa[<span class=\"number\">0</span>][u])</span><br><span class=\"line\">        fa[<span class=\"number\">0</span>][v] = u, d[v] = d[u] + <span class=\"number\">1</span>, <span class=\"built_in\">Dfs</span>(v), sz[u] += sz[v];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dis</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d[u] &lt; d[v]) <span class=\"built_in\">swap</span>(u, v);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = d[u] - d[v];</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, <span class=\"number\">17</span>, <span class=\"number\">0</span>) <span class=\"keyword\">if</span>(d[u] - (<span class=\"number\">1</span> &lt;&lt; i) &gt;= d[v]) u = fa[i][u];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u == v) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, <span class=\"number\">17</span>, <span class=\"number\">0</span>) <span class=\"keyword\">if</span>(fa[i][u] ^ fa[i][v])</span><br><span class=\"line\">        u = fa[i][u], v = fa[i][v], res += <span class=\"number\">2</span> &lt;&lt; i;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res + <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class=\"line\">        G[u].<span class=\"built_in\">push_back</span>(v), G[v].<span class=\"built_in\">push_back</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>), <span class=\"built_in\">Dfs</span>(rt);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) nds[sz[i]].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    u = v = rt;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> D = <span class=\"number\">0</span>, d;</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, n, <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x : nds[i]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((d = <span class=\"built_in\">dis</span>(x, u)) &gt; D) v = x, D = d;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((d = <span class=\"built_in\">dis</span>(x, v)) &gt; D) u = x, D = d;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans[i] = D + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, i &amp; <span class=\"number\">1</span> ? <span class=\"number\">1</span> : ans[i / <span class=\"number\">2</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"Password Remembering | UVa12212","date":"2021-03-13T14:47:35.000Z","updated":"2021-03-13T14:47:35.000Z","_content":"> [题目链接](https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=244&page=show_problem&problem=3364)\n>\n> 输入正整数 $A$、$B$ $(A \\le B < 2^{64})$，求有多少个整数 $n$ 满足: $A \\le n \\le B \\land A \\le rev(n) \\le B$。$rev(1203)=3021$，$rev(1050)=501$。\n\n不难看出此题是一个数位 DP，可以把以下作为状态：\n\n- 高 $i$ 位已经确定。\n- 高 $i$ 位与 $A$ 的大小关系（大于或等于）。\n- 高 $i$ 位与 $B$ 的大小关系（小于或等于）。\n- 从最高非零位到第 $i$ 位共有 $j$ 位。\n- 这 $j$  位翻转后与 $A$ 的低 $j$ 位的大小关系（大于，小于或等于）。\n- 这 $j$  位翻转后与 $B$ 的低 $j$ 位的大小关系（大于，小于或相等）。\n- 当前是否填了非零位。\n- ```DP``` 值是合法的填未确定位的方案数。\n\n感觉这个 DP 非常麻烦，状态数太多，有两维还是 $0/1/2$ 的。\n\n考虑差分一下，记  $\\text{calc}(A, B)$ 表示有多少个整数 $n$ 满足: $n<A \\land rev(n)<B$\n\n那么答案是 $\\text{calc}(B+1,B+1)-\\text{calc}(A,B+1)-\\text{calc}(B+1,A)+\\text{calc}(A,A)$\n\n剩下的问题是实现 $\\text{calc}$ 函数，还是考虑数位 DP，但状态只需存：\n\n- 高 $i$ 位已经确定。\n- 高 $i$ 位与 $A$ 的大小关系（大于或等于）。\n- 从最高非零位到第 $i$ 位共有 $j$ 位。\n- 这 $j$  位翻转后与 $B$ 的低 $j$ 位的大小关系（小于或不小于）。\n- 当前是否填了非零位。\n\n状态数现在少了两维，而且没有 $0/1/2$ 的。\n\n现在考虑转移方程：当前的状态是 ${(i,leA,j,leB,hv0)}$, 枚举第 $i-1$ 位上填 $s$.\n\n要填或已经填了非零位（$hv0=0\\lor s>0$)：\n$$\n(i-1,leA\\lor s<a_{i-1},j+1,s<b_{j+1}\\lor (s=b_{j+1}\\land leB),0)\\leftarrow (i,leA,j,leB,0)\n$$\n否则\n$$\n(i-1,leA\\lor s<a_{i-1},1,0,1)\\leftarrow (i,leA,1,0,1)\n$$\n最后，调用 $\\text{calc}$ 函数时特判 $A=2^{64}$ 和 $B=2^{64}$ 的情况。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++) \n\nusing namespace std;\ntypedef unsigned long long ull;\nconst int U64[] = { 0,6,1,6,1,5,5,9,0,7,3,7,0,4,4,7,6,4,4,8,1 };\null A, B, f[25][25][2][2][2]; int na, a[25], nb, b[25];\null dp(int i, int j, int leA, int leB, int hv0) {\n    if(!i) return leA && (j <= nb || leB);\n    ull& res = f[i][j][leA][leB][hv0];\n    if(~res) return res; res = 0;\n    rep(s, 0, j > nb ? 0 : leA ? 9 : a[i]) {\n        int Hv0 = hv0 & !s;\n        res += dp(i - 1, j > nb ? j : j + !Hv0, leA || s < a[i], j > nb ? leB : !Hv0 && (s < b[j] || (s == b[j] && leB)), Hv0);\n    }\n    return res;\n}\null calc(ull A, ull B) {\n    na = nb = 0, mem(f, -1);\n    if(A) while(A) a[++na] = A % 10, A /= 10;\n    else rep(i, 1, 20) a[++na] = U64[i];\n    if(B) while(B) b[++nb] = B % 10, B /= 10;\n    else rep(i, 1, 20) b[++nb] = U64[i];\n    return dp(na, 1, 0, 0, 1);\n}\nint main() {\n    int T; cin >> T;\n    rep(kase, 1, T) {\n        scanf(\"%llu%llu\", &A, &B), B++;\n        printf(\"Case %d: %llu\\n\", kase, calc(B, B) - calc(A, B) - calc(B, A) + calc(A, A));\n    }\n    return 0;\n}\n```","source":"_posts/UVa12212.md","raw":"---\ntitle: Password Remembering | UVa12212\ndate: 2021-03-13 22:47:35\nupdated: 2021-03-13 22:47:35\ntags: [动态规划,数位动态规划]\ncategories: UVa\n---\n> [题目链接](https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=244&page=show_problem&problem=3364)\n>\n> 输入正整数 $A$、$B$ $(A \\le B < 2^{64})$，求有多少个整数 $n$ 满足: $A \\le n \\le B \\land A \\le rev(n) \\le B$。$rev(1203)=3021$，$rev(1050)=501$。\n\n不难看出此题是一个数位 DP，可以把以下作为状态：\n\n- 高 $i$ 位已经确定。\n- 高 $i$ 位与 $A$ 的大小关系（大于或等于）。\n- 高 $i$ 位与 $B$ 的大小关系（小于或等于）。\n- 从最高非零位到第 $i$ 位共有 $j$ 位。\n- 这 $j$  位翻转后与 $A$ 的低 $j$ 位的大小关系（大于，小于或等于）。\n- 这 $j$  位翻转后与 $B$ 的低 $j$ 位的大小关系（大于，小于或相等）。\n- 当前是否填了非零位。\n- ```DP``` 值是合法的填未确定位的方案数。\n\n感觉这个 DP 非常麻烦，状态数太多，有两维还是 $0/1/2$ 的。\n\n考虑差分一下，记  $\\text{calc}(A, B)$ 表示有多少个整数 $n$ 满足: $n<A \\land rev(n)<B$\n\n那么答案是 $\\text{calc}(B+1,B+1)-\\text{calc}(A,B+1)-\\text{calc}(B+1,A)+\\text{calc}(A,A)$\n\n剩下的问题是实现 $\\text{calc}$ 函数，还是考虑数位 DP，但状态只需存：\n\n- 高 $i$ 位已经确定。\n- 高 $i$ 位与 $A$ 的大小关系（大于或等于）。\n- 从最高非零位到第 $i$ 位共有 $j$ 位。\n- 这 $j$  位翻转后与 $B$ 的低 $j$ 位的大小关系（小于或不小于）。\n- 当前是否填了非零位。\n\n状态数现在少了两维，而且没有 $0/1/2$ 的。\n\n现在考虑转移方程：当前的状态是 ${(i,leA,j,leB,hv0)}$, 枚举第 $i-1$ 位上填 $s$.\n\n要填或已经填了非零位（$hv0=0\\lor s>0$)：\n$$\n(i-1,leA\\lor s<a_{i-1},j+1,s<b_{j+1}\\lor (s=b_{j+1}\\land leB),0)\\leftarrow (i,leA,j,leB,0)\n$$\n否则\n$$\n(i-1,leA\\lor s<a_{i-1},1,0,1)\\leftarrow (i,leA,1,0,1)\n$$\n最后，调用 $\\text{calc}$ 函数时特判 $A=2^{64}$ 和 $B=2^{64}$ 的情况。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++) \n\nusing namespace std;\ntypedef unsigned long long ull;\nconst int U64[] = { 0,6,1,6,1,5,5,9,0,7,3,7,0,4,4,7,6,4,4,8,1 };\null A, B, f[25][25][2][2][2]; int na, a[25], nb, b[25];\null dp(int i, int j, int leA, int leB, int hv0) {\n    if(!i) return leA && (j <= nb || leB);\n    ull& res = f[i][j][leA][leB][hv0];\n    if(~res) return res; res = 0;\n    rep(s, 0, j > nb ? 0 : leA ? 9 : a[i]) {\n        int Hv0 = hv0 & !s;\n        res += dp(i - 1, j > nb ? j : j + !Hv0, leA || s < a[i], j > nb ? leB : !Hv0 && (s < b[j] || (s == b[j] && leB)), Hv0);\n    }\n    return res;\n}\null calc(ull A, ull B) {\n    na = nb = 0, mem(f, -1);\n    if(A) while(A) a[++na] = A % 10, A /= 10;\n    else rep(i, 1, 20) a[++na] = U64[i];\n    if(B) while(B) b[++nb] = B % 10, B /= 10;\n    else rep(i, 1, 20) b[++nb] = U64[i];\n    return dp(na, 1, 0, 0, 1);\n}\nint main() {\n    int T; cin >> T;\n    rep(kase, 1, T) {\n        scanf(\"%llu%llu\", &A, &B), B++;\n        printf(\"Case %d: %llu\\n\", kase, calc(B, B) - calc(A, B) - calc(B, A) + calc(A, A));\n    }\n    return 0;\n}\n```","slug":"UVa12212","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh060024ootnhn3b2p5l","content":"<blockquote>\r\n<p><a href=\"https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=244&amp;page=show_problem&amp;problem=3364\">题目链接</a></p>\r\n<p>输入正整数 <span class=\"math inline\">\\(A\\)</span>、<span class=\"math inline\">\\(B\\)</span> <span class=\"math inline\">\\((A \\le B &lt; 2^{64})\\)</span>，求有多少个整数 <span class=\"math inline\">\\(n\\)</span> 满足: <span class=\"math inline\">\\(A \\le n \\le B \\land A \\le rev(n) \\le B\\)</span>。<span class=\"math inline\">\\(rev(1203)=3021\\)</span>，<span class=\"math inline\">\\(rev(1050)=501\\)</span>。</p>\r\n</blockquote>\r\n<p>不难看出此题是一个数位 DP，可以把以下作为状态：</p>\r\n<ul>\r\n<li>高 <span class=\"math inline\">\\(i\\)</span> 位已经确定。</li>\r\n<li>高 <span class=\"math inline\">\\(i\\)</span> 位与 <span class=\"math inline\">\\(A\\)</span> 的大小关系（大于或等于）。</li>\r\n<li>高 <span class=\"math inline\">\\(i\\)</span> 位与 <span class=\"math inline\">\\(B\\)</span> 的大小关系（小于或等于）。</li>\r\n<li>从最高非零位到第 <span class=\"math inline\">\\(i\\)</span> 位共有 <span class=\"math inline\">\\(j\\)</span> 位。</li>\r\n<li>这 <span class=\"math inline\">\\(j\\)</span> 位翻转后与 <span class=\"math inline\">\\(A\\)</span> 的低 <span class=\"math inline\">\\(j\\)</span> 位的大小关系（大于，小于或等于）。</li>\r\n<li>这 <span class=\"math inline\">\\(j\\)</span> 位翻转后与 <span class=\"math inline\">\\(B\\)</span> 的低 <span class=\"math inline\">\\(j\\)</span> 位的大小关系（大于，小于或相等）。</li>\r\n<li>当前是否填了非零位。</li>\r\n<li><code>DP</code> 值是合法的填未确定位的方案数。</li>\r\n</ul>\r\n<p>感觉这个 DP 非常麻烦，状态数太多，有两维还是 <span class=\"math inline\">\\(0/1/2\\)</span> 的。</p>\r\n<p>考虑差分一下，记 <span class=\"math inline\">\\(\\text{calc}(A, B)\\)</span> 表示有多少个整数 <span class=\"math inline\">\\(n\\)</span> 满足: <span class=\"math inline\">\\(n&lt;A \\land rev(n)&lt;B\\)</span></p>\r\n<p>那么答案是 <span class=\"math inline\">\\(\\text{calc}(B+1,B+1)-\\text{calc}(A,B+1)-\\text{calc}(B+1,A)+\\text{calc}(A,A)\\)</span></p>\r\n<p>剩下的问题是实现 <span class=\"math inline\">\\(\\text{calc}\\)</span> 函数，还是考虑数位 DP，但状态只需存：</p>\r\n<ul>\r\n<li>高 <span class=\"math inline\">\\(i\\)</span> 位已经确定。</li>\r\n<li>高 <span class=\"math inline\">\\(i\\)</span> 位与 <span class=\"math inline\">\\(A\\)</span> 的大小关系（大于或等于）。</li>\r\n<li>从最高非零位到第 <span class=\"math inline\">\\(i\\)</span> 位共有 <span class=\"math inline\">\\(j\\)</span> 位。</li>\r\n<li>这 <span class=\"math inline\">\\(j\\)</span> 位翻转后与 <span class=\"math inline\">\\(B\\)</span> 的低 <span class=\"math inline\">\\(j\\)</span> 位的大小关系（小于或不小于）。</li>\r\n<li>当前是否填了非零位。</li>\r\n</ul>\r\n<p>状态数现在少了两维，而且没有 <span class=\"math inline\">\\(0/1/2\\)</span> 的。</p>\r\n<p>现在考虑转移方程：当前的状态是 <span class=\"math inline\">\\({(i,leA,j,leB,hv0)}\\)</span>, 枚举第 <span class=\"math inline\">\\(i-1\\)</span> 位上填 <span class=\"math inline\">\\(s\\)</span>.</p>\r\n<p>要填或已经填了非零位（<span class=\"math inline\">\\(hv0=0\\lor s&gt;0\\)</span>)： <span class=\"math display\">\\[\r\n(i-1,leA\\lor s&lt;a_{i-1},j+1,s&lt;b_{j+1}\\lor (s=b_{j+1}\\land leB),0)\\leftarrow (i,leA,j,leB,0)\r\n\\]</span> 否则 <span class=\"math display\">\\[\r\n(i-1,leA\\lor s&lt;a_{i-1},1,0,1)\\leftarrow (i,leA,1,0,1)\r\n\\]</span> 最后，调用 <span class=\"math inline\">\\(\\text{calc}\\)</span> 函数时特判 <span class=\"math inline\">\\(A=2^{64}\\)</span> 和 <span class=\"math inline\">\\(B=2^{64}\\)</span> 的情况。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++) </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> U64[] = &#123; <span class=\"number\">0</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">0</span>,<span class=\"number\">7</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">0</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">ull A, B, f[<span class=\"number\">25</span>][<span class=\"number\">25</span>][<span class=\"number\">2</span>][<span class=\"number\">2</span>][<span class=\"number\">2</span>]; <span class=\"keyword\">int</span> na, a[<span class=\"number\">25</span>], nb, b[<span class=\"number\">25</span>];</span><br><span class=\"line\"><span class=\"function\">ull <span class=\"title\">dp</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j, <span class=\"keyword\">int</span> leA, <span class=\"keyword\">int</span> leB, <span class=\"keyword\">int</span> hv0)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!i) <span class=\"keyword\">return</span> leA &amp;&amp; (j &lt;= nb || leB);</span><br><span class=\"line\">    ull&amp; res = f[i][j][leA][leB][hv0];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(~res) <span class=\"keyword\">return</span> res; res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(s, <span class=\"number\">0</span>, j &gt; nb ? <span class=\"number\">0</span> : leA ? <span class=\"number\">9</span> : a[i]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> Hv0 = hv0 &amp; !s;</span><br><span class=\"line\">        res += <span class=\"built_in\">dp</span>(i - <span class=\"number\">1</span>, j &gt; nb ? j : j + !Hv0, leA || s &lt; a[i], j &gt; nb ? leB : !Hv0 &amp;&amp; (s &lt; b[j] || (s == b[j] &amp;&amp; leB)), Hv0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ull <span class=\"title\">calc</span><span class=\"params\">(ull A, ull B)</span> </span>&#123;</span><br><span class=\"line\">    na = nb = <span class=\"number\">0</span>, <span class=\"built_in\">mem</span>(f, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A) <span class=\"keyword\">while</span>(A) a[++na] = A % <span class=\"number\">10</span>, A /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">20</span>) a[++na] = U64[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(B) <span class=\"keyword\">while</span>(B) b[++nb] = B % <span class=\"number\">10</span>, B /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">20</span>) b[++nb] = U64[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">dp</span>(na, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T; cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(kase, <span class=\"number\">1</span>, T) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%llu%llu&quot;</span>, &amp;A, &amp;B), B++;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case %d: %llu\\n&quot;</span>, kase, <span class=\"built_in\">calc</span>(B, B) - <span class=\"built_in\">calc</span>(A, B) - <span class=\"built_in\">calc</span>(B, A) + <span class=\"built_in\">calc</span>(A, A));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":2157,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=244&amp;page=show_problem&amp;problem=3364\">题目链接</a></p>\r\n<p>输入正整数 <span class=\"math inline\">\\(A\\)</span>、<span class=\"math inline\">\\(B\\)</span> <span class=\"math inline\">\\((A \\le B &lt; 2^{64})\\)</span>，求有多少个整数 <span class=\"math inline\">\\(n\\)</span> 满足: <span class=\"math inline\">\\(A \\le n \\le B \\land A \\le rev(n) \\le B\\)</span>。<span class=\"math inline\">\\(rev(1203)=3021\\)</span>，<span class=\"math inline\">\\(rev(1050)=501\\)</span>。</p>\r\n</blockquote>\r\n<p>不难看出此题是一个数位 DP，可以把以下作为状态：</p>\r\n<ul>\r\n<li>高 <span class=\"math inline\">\\(i\\)</span> 位已经确定。</li>\r\n<li>高 <span class=\"math inline\">\\(i\\)</span> 位与 <span class=\"math inline\">\\(A\\)</span> 的大小关系（大于或等于）。</li>\r\n<li>高 <span class=\"math inline\">\\(i\\)</span> 位与 <span class=\"math inline\">\\(B\\)</span> 的大小关系（小于或等于）。</li>\r\n<li>从最高非零位到第 <span class=\"math inline\">\\(i\\)</span> 位共有 <span class=\"math inline\">\\(j\\)</span> 位。</li>\r\n<li>这 <span class=\"math inline\">\\(j\\)</span> 位翻转后与 <span class=\"math inline\">\\(A\\)</span> 的低 <span class=\"math inline\">\\(j\\)</span> 位的大小关系（大于，小于或等于）。</li>\r\n<li>这 <span class=\"math inline\">\\(j\\)</span> 位翻转后与 <span class=\"math inline\">\\(B\\)</span> 的低 <span class=\"math inline\">\\(j\\)</span> 位的大小关系（大于，小于或相等）。</li>\r\n<li>当前是否填了非零位。</li>\r\n<li><code>DP</code> 值是合法的填未确定位的方案数。</li>\r\n</ul>\r\n<p>感觉这个 DP 非常麻烦，状态数太多，有两维还是 <span class=\"math inline\">\\(0/1/2\\)</span> 的。</p>\r\n<p>考虑差分一下，记 <span class=\"math inline\">\\(\\text{calc}(A, B)\\)</span> 表示有多少个整数 <span class=\"math inline\">\\(n\\)</span> 满足: <span class=\"math inline\">\\(n&lt;A \\land rev(n)&lt;B\\)</span></p>\r\n<p>那么答案是 <span class=\"math inline\">\\(\\text{calc}(B+1,B+1)-\\text{calc}(A,B+1)-\\text{calc}(B+1,A)+\\text{calc}(A,A)\\)</span></p>\r\n<p>剩下的问题是实现 <span class=\"math inline\">\\(\\text{calc}\\)</span> 函数，还是考虑数位 DP，但状态只需存：</p>\r\n<ul>\r\n<li>高 <span class=\"math inline\">\\(i\\)</span> 位已经确定。</li>\r\n<li>高 <span class=\"math inline\">\\(i\\)</span> 位与 <span class=\"math inline\">\\(A\\)</span> 的大小关系（大于或等于）。</li>\r\n<li>从最高非零位到第 <span class=\"math inline\">\\(i\\)</span> 位共有 <span class=\"math inline\">\\(j\\)</span> 位。</li>\r\n<li>这 <span class=\"math inline\">\\(j\\)</span> 位翻转后与 <span class=\"math inline\">\\(B\\)</span> 的低 <span class=\"math inline\">\\(j\\)</span> 位的大小关系（小于或不小于）。</li>\r\n<li>当前是否填了非零位。</li>\r\n</ul>\r\n<p>状态数现在少了两维，而且没有 <span class=\"math inline\">\\(0/1/2\\)</span> 的。</p>\r\n<p>现在考虑转移方程：当前的状态是 <span class=\"math inline\">\\({(i,leA,j,leB,hv0)}\\)</span>, 枚举第 <span class=\"math inline\">\\(i-1\\)</span> 位上填 <span class=\"math inline\">\\(s\\)</span>.</p>\r\n<p>要填或已经填了非零位（<span class=\"math inline\">\\(hv0=0\\lor s&gt;0\\)</span>)： <span class=\"math display\">\\[\r\n(i-1,leA\\lor s&lt;a_{i-1},j+1,s&lt;b_{j+1}\\lor (s=b_{j+1}\\land leB),0)\\leftarrow (i,leA,j,leB,0)\r\n\\]</span> 否则 <span class=\"math display\">\\[\r\n(i-1,leA\\lor s&lt;a_{i-1},1,0,1)\\leftarrow (i,leA,1,0,1)\r\n\\]</span> 最后，调用 <span class=\"math inline\">\\(\\text{calc}\\)</span> 函数时特判 <span class=\"math inline\">\\(A=2^{64}\\)</span> 和 <span class=\"math inline\">\\(B=2^{64}\\)</span> 的情况。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++) </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> U64[] = &#123; <span class=\"number\">0</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">0</span>,<span class=\"number\">7</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">0</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">7</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">ull A, B, f[<span class=\"number\">25</span>][<span class=\"number\">25</span>][<span class=\"number\">2</span>][<span class=\"number\">2</span>][<span class=\"number\">2</span>]; <span class=\"keyword\">int</span> na, a[<span class=\"number\">25</span>], nb, b[<span class=\"number\">25</span>];</span><br><span class=\"line\"><span class=\"function\">ull <span class=\"title\">dp</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j, <span class=\"keyword\">int</span> leA, <span class=\"keyword\">int</span> leB, <span class=\"keyword\">int</span> hv0)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!i) <span class=\"keyword\">return</span> leA &amp;&amp; (j &lt;= nb || leB);</span><br><span class=\"line\">    ull&amp; res = f[i][j][leA][leB][hv0];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(~res) <span class=\"keyword\">return</span> res; res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(s, <span class=\"number\">0</span>, j &gt; nb ? <span class=\"number\">0</span> : leA ? <span class=\"number\">9</span> : a[i]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> Hv0 = hv0 &amp; !s;</span><br><span class=\"line\">        res += <span class=\"built_in\">dp</span>(i - <span class=\"number\">1</span>, j &gt; nb ? j : j + !Hv0, leA || s &lt; a[i], j &gt; nb ? leB : !Hv0 &amp;&amp; (s &lt; b[j] || (s == b[j] &amp;&amp; leB)), Hv0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ull <span class=\"title\">calc</span><span class=\"params\">(ull A, ull B)</span> </span>&#123;</span><br><span class=\"line\">    na = nb = <span class=\"number\">0</span>, <span class=\"built_in\">mem</span>(f, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A) <span class=\"keyword\">while</span>(A) a[++na] = A % <span class=\"number\">10</span>, A /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">20</span>) a[++na] = U64[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(B) <span class=\"keyword\">while</span>(B) b[++nb] = B % <span class=\"number\">10</span>, B /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">20</span>) b[++nb] = U64[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">dp</span>(na, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T; cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(kase, <span class=\"number\">1</span>, T) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%llu%llu&quot;</span>, &amp;A, &amp;B), B++;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case %d: %llu\\n&quot;</span>, kase, <span class=\"built_in\">calc</span>(B, B) - <span class=\"built_in\">calc</span>(A, B) - <span class=\"built_in\">calc</span>(B, A) + <span class=\"built_in\">calc</span>(A, A));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"TheCowDivOne | TopCoder 11351","date":"2021-03-13T13:48:41.000Z","updated":"2021-03-13T13:48:41.000Z","_content":"> [题目链接](https://vjudge.net/problem/TopCoder-11351/origin)\n>\n> 给定 $n, k$。\n>\n> 求出从 $0,1,2,\\cdots,n-1$ 中选出 $k$ 个总和能被 $n$ 整除的数的方案数，模 $10^9+7$。\n>\n> $n \\le 10^9, k \\le 1000$\n\n我们先确定 $k - 1$ 个数的值，再解出最后一个数，这样可能导致最后一个数被选 $2$ 次。\n\n考虑容斥，减去钦定它选了 $2$ 次的方案数，加上钦定它选了 $3$ 次的方案数，$\\cdots$。\n\n钦定最后一个数 $x$ 出现了至少 $t$ 次，那么设另外 $k - t$ 个数的和为 $S$，则方程：\n$$\ntx + S \\equiv 0\\pmod n\n$$\n在 $[0, n)$ 范围内，方程有解条件为\n$$\n\\gcd(t,n)|S\n$$\n解的个数为\n$$\n\\gcd(t,n)\n$$\n设 $f_{i,S}$ 表示 $i$ 个数的和被 $S$ 整除的方案数，则\n$$\nf_{i,S} = \\frac 1i \\sum_{j = 1}^i (-1)^{j+1} \\frac nS\\gcd(j,S) f_{i-j,\\gcd(j,S)}\n$$\n乘 $\\frac nS$ 是因为我们是要求 $[0,\\ n)$ 中解的个数， $\\frac 1i$ 是因为我们相当于钦定最后一个数为特殊数，而实际要求的是无序方案。 \n观察转移方程，显然除了 $S=n$ 的情况，一定有 $S|(k-i)$，故总状态数为 $k\\log k$，即复杂度为 $O(k^2\\log k)$。\n\n代码：\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\nusing ll = long long;\nconst int N = 1005;\nconst ll P = 1e9 + 7;\n\nll inv[N], f[N][N];\n\nstruct TheCowDivOne {\n    int find(int n, int k) {\n        inv[1] = 1;\n        rep(i, 2, k) inv[i] = (P - P / i) * inv[P % i] % P;\n        rep(s, 1, k) f[0][s] = 1;\n        rep(i, 1, k) rep(s, 1, k) if((k - i) % s == 0) {\n            ll& re = f[i][s];\n            rep(j, 1, i) {\n                int g = __gcd(j, s);\n                (re += (j & 1 ? 1 : -1) * n / s * g * f[i - j][g]) %= P;\n            }\n            re = re * inv[i] % P;\n        }\n        ll as = 0;\n        rep(j, 1, k) {\n            int g = __gcd(j, n);\n            (as += (j & 1 ? 1 : -1) * g * f[k - j][g]) %= P;\n        }\n        return (as + P) * inv[k] % P;\n    }\n};\n```","source":"_posts/TC11351.md","raw":"---\ntitle: TheCowDivOne | TopCoder 11351\ndate: 2021-03-13 21:48:41\nupdated: 2021-03-13 21:48:41\ntags: [数论,动态规划,容斥原理]\ncategories: TopCoder\n---\n> [题目链接](https://vjudge.net/problem/TopCoder-11351/origin)\n>\n> 给定 $n, k$。\n>\n> 求出从 $0,1,2,\\cdots,n-1$ 中选出 $k$ 个总和能被 $n$ 整除的数的方案数，模 $10^9+7$。\n>\n> $n \\le 10^9, k \\le 1000$\n\n我们先确定 $k - 1$ 个数的值，再解出最后一个数，这样可能导致最后一个数被选 $2$ 次。\n\n考虑容斥，减去钦定它选了 $2$ 次的方案数，加上钦定它选了 $3$ 次的方案数，$\\cdots$。\n\n钦定最后一个数 $x$ 出现了至少 $t$ 次，那么设另外 $k - t$ 个数的和为 $S$，则方程：\n$$\ntx + S \\equiv 0\\pmod n\n$$\n在 $[0, n)$ 范围内，方程有解条件为\n$$\n\\gcd(t,n)|S\n$$\n解的个数为\n$$\n\\gcd(t,n)\n$$\n设 $f_{i,S}$ 表示 $i$ 个数的和被 $S$ 整除的方案数，则\n$$\nf_{i,S} = \\frac 1i \\sum_{j = 1}^i (-1)^{j+1} \\frac nS\\gcd(j,S) f_{i-j,\\gcd(j,S)}\n$$\n乘 $\\frac nS$ 是因为我们是要求 $[0,\\ n)$ 中解的个数， $\\frac 1i$ 是因为我们相当于钦定最后一个数为特殊数，而实际要求的是无序方案。 \n观察转移方程，显然除了 $S=n$ 的情况，一定有 $S|(k-i)$，故总状态数为 $k\\log k$，即复杂度为 $O(k^2\\log k)$。\n\n代码：\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\nusing ll = long long;\nconst int N = 1005;\nconst ll P = 1e9 + 7;\n\nll inv[N], f[N][N];\n\nstruct TheCowDivOne {\n    int find(int n, int k) {\n        inv[1] = 1;\n        rep(i, 2, k) inv[i] = (P - P / i) * inv[P % i] % P;\n        rep(s, 1, k) f[0][s] = 1;\n        rep(i, 1, k) rep(s, 1, k) if((k - i) % s == 0) {\n            ll& re = f[i][s];\n            rep(j, 1, i) {\n                int g = __gcd(j, s);\n                (re += (j & 1 ? 1 : -1) * n / s * g * f[i - j][g]) %= P;\n            }\n            re = re * inv[i] % P;\n        }\n        ll as = 0;\n        rep(j, 1, k) {\n            int g = __gcd(j, n);\n            (as += (j & 1 ? 1 : -1) * g * f[k - j][g]) %= P;\n        }\n        return (as + P) * inv[k] % P;\n    }\n};\n```","slug":"TC11351","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh0a0028ootn116ffzdj","content":"<blockquote>\r\n<p><a href=\"https://vjudge.net/problem/TopCoder-11351/origin\">题目链接</a></p>\r\n<p>给定 <span class=\"math inline\">\\(n, k\\)</span>。</p>\r\n<p>求出从 <span class=\"math inline\">\\(0,1,2,\\cdots,n-1\\)</span> 中选出 <span class=\"math inline\">\\(k\\)</span> 个总和能被 <span class=\"math inline\">\\(n\\)</span> 整除的数的方案数，模 <span class=\"math inline\">\\(10^9+7\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^9, k \\le 1000\\)</span></p>\r\n</blockquote>\r\n<p>我们先确定 <span class=\"math inline\">\\(k - 1\\)</span> 个数的值，再解出最后一个数，这样可能导致最后一个数被选 <span class=\"math inline\">\\(2\\)</span> 次。</p>\r\n<p>考虑容斥，减去钦定它选了 <span class=\"math inline\">\\(2\\)</span> 次的方案数，加上钦定它选了 <span class=\"math inline\">\\(3\\)</span> 次的方案数，<span class=\"math inline\">\\(\\cdots\\)</span>。</p>\r\n<p>钦定最后一个数 <span class=\"math inline\">\\(x\\)</span> 出现了至少 <span class=\"math inline\">\\(t\\)</span> 次，那么设另外 <span class=\"math inline\">\\(k - t\\)</span> 个数的和为 <span class=\"math inline\">\\(S\\)</span>，则方程： <span class=\"math display\">\\[\r\ntx + S \\equiv 0\\pmod n\r\n\\]</span> 在 <span class=\"math inline\">\\([0, n)\\)</span> 范围内，方程有解条件为 <span class=\"math display\">\\[\r\n\\gcd(t,n)|S\r\n\\]</span> 解的个数为 <span class=\"math display\">\\[\r\n\\gcd(t,n)\r\n\\]</span> 设 <span class=\"math inline\">\\(f_{i,S}\\)</span> 表示 <span class=\"math inline\">\\(i\\)</span> 个数的和被 <span class=\"math inline\">\\(S\\)</span> 整除的方案数，则 <span class=\"math display\">\\[\r\nf_{i,S} = \\frac 1i \\sum_{j = 1}^i (-1)^{j+1} \\frac nS\\gcd(j,S) f_{i-j,\\gcd(j,S)}\r\n\\]</span> 乘 <span class=\"math inline\">\\(\\frac nS\\)</span> 是因为我们是要求 <span class=\"math inline\">\\([0,\\ n)\\)</span> 中解的个数， <span class=\"math inline\">\\(\\frac 1i\\)</span> 是因为我们相当于钦定最后一个数为特殊数，而实际要求的是无序方案。 观察转移方程，显然除了 <span class=\"math inline\">\\(S=n\\)</span> 的情况，一定有 <span class=\"math inline\">\\(S|(k-i)\\)</span>，故总状态数为 <span class=\"math inline\">\\(k\\log k\\)</span>，即复杂度为 <span class=\"math inline\">\\(O(k^2\\log k)\\)</span>。</p>\r\n<p>代码： <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1005</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll P = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ll inv[N], f[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">TheCowDivOne</span> &#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        inv[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, k) inv[i] = (P - P / i) * inv[P % i] % P;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(s, <span class=\"number\">1</span>, k) f[<span class=\"number\">0</span>][s] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, k) <span class=\"built_in\">rep</span>(s, <span class=\"number\">1</span>, k) <span class=\"keyword\">if</span>((k - i) % s == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            ll&amp; re = f[i][s];</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> g = __gcd(j, s);</span><br><span class=\"line\">                (re += (j &amp; <span class=\"number\">1</span> ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>) * n / s * g * f[i - j][g]) %= P;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            re = re * inv[i] % P;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ll as = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, k) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> g = __gcd(j, n);</span><br><span class=\"line\">            (as += (j &amp; <span class=\"number\">1</span> ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>) * g * f[k - j][g]) %= P;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (as + P) * inv[k] % P;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\r\n","site":{"data":{}},"length":1340,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"https://vjudge.net/problem/TopCoder-11351/origin\">题目链接</a></p>\r\n<p>给定 <span class=\"math inline\">\\(n, k\\)</span>。</p>\r\n<p>求出从 <span class=\"math inline\">\\(0,1,2,\\cdots,n-1\\)</span> 中选出 <span class=\"math inline\">\\(k\\)</span> 个总和能被 <span class=\"math inline\">\\(n\\)</span> 整除的数的方案数，模 <span class=\"math inline\">\\(10^9+7\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^9, k \\le 1000\\)</span></p>\r\n</blockquote>\r\n<p>我们先确定 <span class=\"math inline\">\\(k - 1\\)</span> 个数的值，再解出最后一个数，这样可能导致最后一个数被选 <span class=\"math inline\">\\(2\\)</span> 次。</p>\r\n<p>考虑容斥，减去钦定它选了 <span class=\"math inline\">\\(2\\)</span> 次的方案数，加上钦定它选了 <span class=\"math inline\">\\(3\\)</span> 次的方案数，<span class=\"math inline\">\\(\\cdots\\)</span>。</p>\r\n<p>钦定最后一个数 <span class=\"math inline\">\\(x\\)</span> 出现了至少 <span class=\"math inline\">\\(t\\)</span> 次，那么设另外 <span class=\"math inline\">\\(k - t\\)</span> 个数的和为 <span class=\"math inline\">\\(S\\)</span>，则方程： <span class=\"math display\">\\[\r\ntx + S \\equiv 0\\pmod n\r\n\\]</span> 在 <span class=\"math inline\">\\([0, n)\\)</span> 范围内，方程有解条件为 <span class=\"math display\">\\[\r\n\\gcd(t,n)|S\r\n\\]</span> 解的个数为 <span class=\"math display\">\\[\r\n\\gcd(t,n)\r\n\\]</span> 设 <span class=\"math inline\">\\(f_{i,S}\\)</span> 表示 <span class=\"math inline\">\\(i\\)</span> 个数的和被 <span class=\"math inline\">\\(S\\)</span> 整除的方案数，则 <span class=\"math display\">\\[\r\nf_{i,S} = \\frac 1i \\sum_{j = 1}^i (-1)^{j+1} \\frac nS\\gcd(j,S) f_{i-j,\\gcd(j,S)}\r\n\\]</span> 乘 <span class=\"math inline\">\\(\\frac nS\\)</span> 是因为我们是要求 <span class=\"math inline\">\\([0,\\ n)\\)</span> 中解的个数， <span class=\"math inline\">\\(\\frac 1i\\)</span> 是因为我们相当于钦定最后一个数为特殊数，而实际要求的是无序方案。 观察转移方程，显然除了 <span class=\"math inline\">\\(S=n\\)</span> 的情况，一定有 <span class=\"math inline\">\\(S|(k-i)\\)</span>，故总状态数为 <span class=\"math inline\">\\(k\\log k\\)</span>，即复杂度为 <span class=\"math inline\">\\(O(k^2\\log k)\\)</span>。</p>\r\n<p>代码： <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1005</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll P = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ll inv[N], f[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">TheCowDivOne</span> &#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        inv[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, k) inv[i] = (P - P / i) * inv[P % i] % P;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(s, <span class=\"number\">1</span>, k) f[<span class=\"number\">0</span>][s] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, k) <span class=\"built_in\">rep</span>(s, <span class=\"number\">1</span>, k) <span class=\"keyword\">if</span>((k - i) % s == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            ll&amp; re = f[i][s];</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> g = __gcd(j, s);</span><br><span class=\"line\">                (re += (j &amp; <span class=\"number\">1</span> ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>) * n / s * g * f[i - j][g]) %= P;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            re = re * inv[i] % P;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ll as = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, k) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> g = __gcd(j, n);</span><br><span class=\"line\">            (as += (j &amp; <span class=\"number\">1</span> ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>) * g * f[k - j][g]) %= P;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (as + P) * inv[k] % P;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\r\n"},{"title":"Many Slimes | abc 140f","date":"2021-03-13T15:10:49.000Z","updated":"2021-03-13T15:10:49.000Z","_content":"> [题目链接](https://atcoder.jp/contests/abc140/tasks/abc140_f)\n>\n> 每个细菌都有一个 $s$ 值。\n>\n> 最初只有一个细菌。每一天原先的细菌都会生一个孩子，且孩子的 $s$ 值小于母体的 $s$ 值。\n>\n> 给定 $n$ 和 $2^n$ 个数。\n>\n> 判断是否存在一种情况，经过 $n$ 天后所有细菌的 $s$ 值为给定的数。\n>\n> $n \\le 10^5,s_i \\le 10^9$\n\n首先最大的数一定是原始细菌的 $s$ 值。然后考虑第 $i$ 天的细菌，它们所选择的 $s$ 一定要尽可能的大，如果选小了会使它们的后代选择变少。\n\n然后对于每一天产生的每个细菌都按顺序贪心地选择一个尽可能大的值。\n\n同一天选择的顺序是**无关紧要**的，下面给出证明：\n\n> 考虑第 $i$ 天有两个选择的顺序上**相邻**的细菌  $a, b$，记它们父亲的 s 分别为 $A, B (A < B)$。\n>\n> 如果让 $a$ 先选，且两者的 $s$ 分别为 $x，y(x < y)$。\n>\n> 若 $y < A$，那么交换顺序后两者的 $s$ 就为 $y，x$。\n>\n> 由于 $a, b$ 在同一天产生，它们在决定后续方案时的**地位**相同，那么选择的顺序也就无关紧要了。\n>\n> 若 $y > A$，那么交换顺序后两者的 s 不变，选择的顺序连方案都不会影响。\n\n为了方便，把父亲编号为 $j(j<2^i)$ 的细菌编号为 $j+2^i$。\n\n然后直接按编号顺序确定 $s$ 就行了，为了支持删除和查找前驱，可以用 ```multiset``` 来维护没被选择的 $s$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n\nusing namespace std;\n\nint main() {\n    cin >> n, m = 1 << n;\n    multiset <int, greater <int> > s;\n    For(i, 0, m) s.insert(read());\n    vector <int> c;\n    c.push_back(*s.begin()), s.erase(s.begin());\n    For(i, 0, m) {\n        For(j, 0, 1 << i) {\n            auto it = s.upper_bound(c[j]);\n            if(it != s.end()) c.push_back(*it), s.erase(it);\n            else return puts(\"No\") < 0;\n        }\n    }\n    return puts(\"Yes\") < 0;\n    return 0;\n}\n```\n\n","source":"_posts/abc140f.md","raw":"---\ntitle: Many Slimes | abc 140f\ndate: 2021-03-13 23:10:49\nupdated: 2021-03-13 23:10:49\ntags: [构造,贪心]\ncategories: ABC\n---\n> [题目链接](https://atcoder.jp/contests/abc140/tasks/abc140_f)\n>\n> 每个细菌都有一个 $s$ 值。\n>\n> 最初只有一个细菌。每一天原先的细菌都会生一个孩子，且孩子的 $s$ 值小于母体的 $s$ 值。\n>\n> 给定 $n$ 和 $2^n$ 个数。\n>\n> 判断是否存在一种情况，经过 $n$ 天后所有细菌的 $s$ 值为给定的数。\n>\n> $n \\le 10^5,s_i \\le 10^9$\n\n首先最大的数一定是原始细菌的 $s$ 值。然后考虑第 $i$ 天的细菌，它们所选择的 $s$ 一定要尽可能的大，如果选小了会使它们的后代选择变少。\n\n然后对于每一天产生的每个细菌都按顺序贪心地选择一个尽可能大的值。\n\n同一天选择的顺序是**无关紧要**的，下面给出证明：\n\n> 考虑第 $i$ 天有两个选择的顺序上**相邻**的细菌  $a, b$，记它们父亲的 s 分别为 $A, B (A < B)$。\n>\n> 如果让 $a$ 先选，且两者的 $s$ 分别为 $x，y(x < y)$。\n>\n> 若 $y < A$，那么交换顺序后两者的 $s$ 就为 $y，x$。\n>\n> 由于 $a, b$ 在同一天产生，它们在决定后续方案时的**地位**相同，那么选择的顺序也就无关紧要了。\n>\n> 若 $y > A$，那么交换顺序后两者的 s 不变，选择的顺序连方案都不会影响。\n\n为了方便，把父亲编号为 $j(j<2^i)$ 的细菌编号为 $j+2^i$。\n\n然后直接按编号顺序确定 $s$ 就行了，为了支持删除和查找前驱，可以用 ```multiset``` 来维护没被选择的 $s$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n\nusing namespace std;\n\nint main() {\n    cin >> n, m = 1 << n;\n    multiset <int, greater <int> > s;\n    For(i, 0, m) s.insert(read());\n    vector <int> c;\n    c.push_back(*s.begin()), s.erase(s.begin());\n    For(i, 0, m) {\n        For(j, 0, 1 << i) {\n            auto it = s.upper_bound(c[j]);\n            if(it != s.end()) c.push_back(*it), s.erase(it);\n            else return puts(\"No\") < 0;\n        }\n    }\n    return puts(\"Yes\") < 0;\n    return 0;\n}\n```\n\n","slug":"abc140f","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh0b002bootngpls904j","content":"<blockquote>\r\n<p><a href=\"https://atcoder.jp/contests/abc140/tasks/abc140_f\">题目链接</a></p>\r\n<p>每个细菌都有一个 <span class=\"math inline\">\\(s\\)</span> 值。</p>\r\n<p>最初只有一个细菌。每一天原先的细菌都会生一个孩子，且孩子的 <span class=\"math inline\">\\(s\\)</span> 值小于母体的 <span class=\"math inline\">\\(s\\)</span> 值。</p>\r\n<p>给定 <span class=\"math inline\">\\(n\\)</span> 和 <span class=\"math inline\">\\(2^n\\)</span> 个数。</p>\r\n<p>判断是否存在一种情况，经过 <span class=\"math inline\">\\(n\\)</span> 天后所有细菌的 <span class=\"math inline\">\\(s\\)</span> 值为给定的数。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^5,s_i \\le 10^9\\)</span></p>\r\n</blockquote>\r\n<p>首先最大的数一定是原始细菌的 <span class=\"math inline\">\\(s\\)</span> 值。然后考虑第 <span class=\"math inline\">\\(i\\)</span> 天的细菌，它们所选择的 <span class=\"math inline\">\\(s\\)</span> 一定要尽可能的大，如果选小了会使它们的后代选择变少。</p>\r\n<p>然后对于每一天产生的每个细菌都按顺序贪心地选择一个尽可能大的值。</p>\r\n<p>同一天选择的顺序是<strong>无关紧要</strong>的，下面给出证明：</p>\r\n<blockquote>\r\n<p>考虑第 <span class=\"math inline\">\\(i\\)</span> 天有两个选择的顺序上<strong>相邻</strong>的细菌 <span class=\"math inline\">\\(a, b\\)</span>，记它们父亲的 s 分别为 <span class=\"math inline\">\\(A, B (A &lt; B)\\)</span>。</p>\r\n<p>如果让 <span class=\"math inline\">\\(a\\)</span> 先选，且两者的 <span class=\"math inline\">\\(s\\)</span> 分别为 <span class=\"math inline\">\\(x，y(x &lt; y)\\)</span>。</p>\r\n<p>若 <span class=\"math inline\">\\(y &lt; A\\)</span>，那么交换顺序后两者的 <span class=\"math inline\">\\(s\\)</span> 就为 <span class=\"math inline\">\\(y，x\\)</span>。</p>\r\n<p>由于 <span class=\"math inline\">\\(a, b\\)</span> 在同一天产生，它们在决定后续方案时的<strong>地位</strong>相同，那么选择的顺序也就无关紧要了。</p>\r\n<p>若 <span class=\"math inline\">\\(y &gt; A\\)</span>，那么交换顺序后两者的 s 不变，选择的顺序连方案都不会影响。</p>\r\n</blockquote>\r\n<p>为了方便，把父亲编号为 <span class=\"math inline\">\\(j(j&lt;2^i)\\)</span> 的细菌编号为 <span class=\"math inline\">\\(j+2^i\\)</span>。</p>\r\n<p>然后直接按编号顺序确定 <span class=\"math inline\">\\(s\\)</span> 就行了，为了支持删除和查找前驱，可以用 <code>multiset</code> 来维护没被选择的 <span class=\"math inline\">\\(s\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n, m = <span class=\"number\">1</span> &lt;&lt; n;</span><br><span class=\"line\">    multiset &lt;<span class=\"keyword\">int</span>, greater &lt;<span class=\"keyword\">int</span>&gt; &gt; s;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, m) s.<span class=\"built_in\">insert</span>(<span class=\"built_in\">read</span>());</span><br><span class=\"line\">    vector &lt;<span class=\"keyword\">int</span>&gt; c;</span><br><span class=\"line\">    c.<span class=\"built_in\">push_back</span>(*s.<span class=\"built_in\">begin</span>()), s.<span class=\"built_in\">erase</span>(s.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, m) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">For</span>(j, <span class=\"number\">0</span>, <span class=\"number\">1</span> &lt;&lt; i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> it = s.<span class=\"built_in\">upper_bound</span>(c[j]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(it != s.<span class=\"built_in\">end</span>()) c.<span class=\"built_in\">push_back</span>(*it), s.<span class=\"built_in\">erase</span>(it);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;No&quot;</span>) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Yes&quot;</span>) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":1176,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"https://atcoder.jp/contests/abc140/tasks/abc140_f\">题目链接</a></p>\r\n<p>每个细菌都有一个 <span class=\"math inline\">\\(s\\)</span> 值。</p>\r\n<p>最初只有一个细菌。每一天原先的细菌都会生一个孩子，且孩子的 <span class=\"math inline\">\\(s\\)</span> 值小于母体的 <span class=\"math inline\">\\(s\\)</span> 值。</p>\r\n<p>给定 <span class=\"math inline\">\\(n\\)</span> 和 <span class=\"math inline\">\\(2^n\\)</span> 个数。</p>\r\n<p>判断是否存在一种情况，经过 <span class=\"math inline\">\\(n\\)</span> 天后所有细菌的 <span class=\"math inline\">\\(s\\)</span> 值为给定的数。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^5,s_i \\le 10^9\\)</span></p>\r\n</blockquote>\r\n<p>首先最大的数一定是原始细菌的 <span class=\"math inline\">\\(s\\)</span> 值。然后考虑第 <span class=\"math inline\">\\(i\\)</span> 天的细菌，它们所选择的 <span class=\"math inline\">\\(s\\)</span> 一定要尽可能的大，如果选小了会使它们的后代选择变少。</p>\r\n<p>然后对于每一天产生的每个细菌都按顺序贪心地选择一个尽可能大的值。</p>\r\n<p>同一天选择的顺序是<strong>无关紧要</strong>的，下面给出证明：</p>\r\n<blockquote>\r\n<p>考虑第 <span class=\"math inline\">\\(i\\)</span> 天有两个选择的顺序上<strong>相邻</strong>的细菌 <span class=\"math inline\">\\(a, b\\)</span>，记它们父亲的 s 分别为 <span class=\"math inline\">\\(A, B (A &lt; B)\\)</span>。</p>\r\n<p>如果让 <span class=\"math inline\">\\(a\\)</span> 先选，且两者的 <span class=\"math inline\">\\(s\\)</span> 分别为 <span class=\"math inline\">\\(x，y(x &lt; y)\\)</span>。</p>\r\n<p>若 <span class=\"math inline\">\\(y &lt; A\\)</span>，那么交换顺序后两者的 <span class=\"math inline\">\\(s\\)</span> 就为 <span class=\"math inline\">\\(y，x\\)</span>。</p>\r\n<p>由于 <span class=\"math inline\">\\(a, b\\)</span> 在同一天产生，它们在决定后续方案时的<strong>地位</strong>相同，那么选择的顺序也就无关紧要了。</p>\r\n<p>若 <span class=\"math inline\">\\(y &gt; A\\)</span>，那么交换顺序后两者的 s 不变，选择的顺序连方案都不会影响。</p>\r\n</blockquote>\r\n<p>为了方便，把父亲编号为 <span class=\"math inline\">\\(j(j&lt;2^i)\\)</span> 的细菌编号为 <span class=\"math inline\">\\(j+2^i\\)</span>。</p>\r\n<p>然后直接按编号顺序确定 <span class=\"math inline\">\\(s\\)</span> 就行了，为了支持删除和查找前驱，可以用 <code>multiset</code> 来维护没被选择的 <span class=\"math inline\">\\(s\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n, m = <span class=\"number\">1</span> &lt;&lt; n;</span><br><span class=\"line\">    multiset &lt;<span class=\"keyword\">int</span>, greater &lt;<span class=\"keyword\">int</span>&gt; &gt; s;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, m) s.<span class=\"built_in\">insert</span>(<span class=\"built_in\">read</span>());</span><br><span class=\"line\">    vector &lt;<span class=\"keyword\">int</span>&gt; c;</span><br><span class=\"line\">    c.<span class=\"built_in\">push_back</span>(*s.<span class=\"built_in\">begin</span>()), s.<span class=\"built_in\">erase</span>(s.<span class=\"built_in\">begin</span>());</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, m) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">For</span>(j, <span class=\"number\">0</span>, <span class=\"number\">1</span> &lt;&lt; i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> it = s.<span class=\"built_in\">upper_bound</span>(c[j]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(it != s.<span class=\"built_in\">end</span>()) c.<span class=\"built_in\">push_back</span>(*it), s.<span class=\"built_in\">erase</span>(it);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;No&quot;</span>) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Yes&quot;</span>) &lt; <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"(False)faces | Cerc2009","date":"2021-09-04T07:58:27.000Z","updated":"2021-09-04T07:58:27.000Z","_content":"> [题目链接](https://darkbzoj.tk/problem/2586)\n>\n> 给定一个两边各有 $n$ 个点的二分图，判断完美匹配的个数是否是 $4$ 的倍数。\n>\n> $n \\le 300$\n\n完美匹配的个数即积和式。\n\n来自论文的算法：求积和式模 $4$ 的余数。\n\n积和式定义\n$$\n\\text{perm }A = \\sum_{p}A_{i,p_i}\n$$\n当 $A$ 是 $01$ 矩阵时，有\n$$\n\\text{prem} A = (-1)^n\\sum_{x_i \\in \\{0,1\\}}(-1)^{x1+x2+\\cdots+x_n}\\prod_{i=1}^n(Ax)_i\n$$\n证明可以考虑容斥：枚举哪些行=列一定没有被选。\n\n观察到式子中间有一个 $\\prod$ ，由于我们要求这个东西模 $4$ 的余数，因此 $(Ax)_i$ 至多只能有一个位置模 $2$ 为 $0$。\n\n考虑 $(Ax)_i$ 每一项模 $2$ 的余数，由于至多只能有一个 $0$，因此可以枚举这个东西的取值，它只有 $n+1$ 种。\n\n对于每种取值，通过高斯消元解出满足条件的所有 $x$，再将每一组 $x$ 代入刚刚的式子中求出答案。\n\n问题是，合法的 $x$ 的个数可能很大，因为需要枚举自由元的取值。\n\n对这个矩阵做一些变换。\n$$\n\\begin{bmatrix}\nA_{1,1}&A_{1,2}&\\cdots &A_{1,n}&v_1\\\\\nA_{2,1}&A_{2,2}&\\cdots &A_{2,n}&v_2\\\\\n\\vdots&&&&\\vdots\\\\\nA_{n,1}&A_{n,2}&\\cdots &A_{n,n}&v_n\\\\\n0&0&\\cdots&0&1\n\\end{bmatrix}\n$$\n这个矩阵的积和式等于原矩阵的积和式。\n\n随机选取 $v$，则期望 $O(1)$ 组解。\n\n复杂度 $O(n^4)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\nconst int N = 305;\nint T, n, as;\nchar s[N];\nbitset <302> A[N], bas[N];\nint x[N];\nvoid dfs(int i) {\n    if(i > n) {\n        int mul = 1;\n        rep(i, 0, n) {\n            int su = 0;\n            rep(k, 0, n) su += A[i][k] & x[k];\n            (mul *= su) %= 4;\n        }\n        rep(i, 0, n) if(x[i]) mul *= -1;\n        (as += mul) %= 4;\n        return;\n    }\n    if(!bas[i][i]) rep(j, 0, 1) {\n        x[i] = j, dfs(i + 1);\n        rep(k, 0, n) if(bas[k][i]) x[k] ^= 1; \n    } else dfs(i + 1);\n}\nvoid solve() {\n    rep(i, 0, n) bas[i].reset();\n    rep(i, 0, n) {\n        bitset <302> nw = A[i];\n        rep(j, 0, n) if(nw[j]) {\n            if(bas[j][j]) nw ^= bas[j];\n            else { bas[j] = nw; break; }\n        }\n        if(nw[n + 1] && nw.count() == 1) return;\n    }\n    per(i, n, 0) if(bas[i][i]) rep(j, i + 1, n) if(bas[j][j] && bas[i][j]) bas[i] ^= bas[j];\n    rep(i, 0, n) x[i] = bas[i][n + 1];\n    dfs(0);\n}\nint main() {\n    srand(time(0));\n    for(cin >> T; T--;) {\n        scanf(\"%d\", &n), as = 0;\n        rep(i, 0, n) A[i].reset();\n        For(i, 0, n) {\n            scanf(\"%s\", s), A[i][n] = rand() & 1, A[i][n + 1] = 1;\n            For(j, 0, n) A[i][j] = s[j] - 48;\n        }\n        A[n][n] = A[n][n + 1] = 1;\n        solve();\n        rep(i, 0, n) A[i][n + 1] = 0, solve(), A[i][n + 1] = 1;\n        puts(as ? \"NO\" : \"YES\");\n    }\n    return 0;\n}\n```","source":"_posts/cerc2009.md","raw":"---\ntitle: (False)faces | Cerc2009\ndate: 2021-09-04 15:58:27\nupdated: 2021-09-04 15:58:27\ntags: []\ncategories: Cerc\n---\n> [题目链接](https://darkbzoj.tk/problem/2586)\n>\n> 给定一个两边各有 $n$ 个点的二分图，判断完美匹配的个数是否是 $4$ 的倍数。\n>\n> $n \\le 300$\n\n完美匹配的个数即积和式。\n\n来自论文的算法：求积和式模 $4$ 的余数。\n\n积和式定义\n$$\n\\text{perm }A = \\sum_{p}A_{i,p_i}\n$$\n当 $A$ 是 $01$ 矩阵时，有\n$$\n\\text{prem} A = (-1)^n\\sum_{x_i \\in \\{0,1\\}}(-1)^{x1+x2+\\cdots+x_n}\\prod_{i=1}^n(Ax)_i\n$$\n证明可以考虑容斥：枚举哪些行=列一定没有被选。\n\n观察到式子中间有一个 $\\prod$ ，由于我们要求这个东西模 $4$ 的余数，因此 $(Ax)_i$ 至多只能有一个位置模 $2$ 为 $0$。\n\n考虑 $(Ax)_i$ 每一项模 $2$ 的余数，由于至多只能有一个 $0$，因此可以枚举这个东西的取值，它只有 $n+1$ 种。\n\n对于每种取值，通过高斯消元解出满足条件的所有 $x$，再将每一组 $x$ 代入刚刚的式子中求出答案。\n\n问题是，合法的 $x$ 的个数可能很大，因为需要枚举自由元的取值。\n\n对这个矩阵做一些变换。\n$$\n\\begin{bmatrix}\nA_{1,1}&A_{1,2}&\\cdots &A_{1,n}&v_1\\\\\nA_{2,1}&A_{2,2}&\\cdots &A_{2,n}&v_2\\\\\n\\vdots&&&&\\vdots\\\\\nA_{n,1}&A_{n,2}&\\cdots &A_{n,n}&v_n\\\\\n0&0&\\cdots&0&1\n\\end{bmatrix}\n$$\n这个矩阵的积和式等于原矩阵的积和式。\n\n随机选取 $v$，则期望 $O(1)$ 组解。\n\n复杂度 $O(n^4)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\nconst int N = 305;\nint T, n, as;\nchar s[N];\nbitset <302> A[N], bas[N];\nint x[N];\nvoid dfs(int i) {\n    if(i > n) {\n        int mul = 1;\n        rep(i, 0, n) {\n            int su = 0;\n            rep(k, 0, n) su += A[i][k] & x[k];\n            (mul *= su) %= 4;\n        }\n        rep(i, 0, n) if(x[i]) mul *= -1;\n        (as += mul) %= 4;\n        return;\n    }\n    if(!bas[i][i]) rep(j, 0, 1) {\n        x[i] = j, dfs(i + 1);\n        rep(k, 0, n) if(bas[k][i]) x[k] ^= 1; \n    } else dfs(i + 1);\n}\nvoid solve() {\n    rep(i, 0, n) bas[i].reset();\n    rep(i, 0, n) {\n        bitset <302> nw = A[i];\n        rep(j, 0, n) if(nw[j]) {\n            if(bas[j][j]) nw ^= bas[j];\n            else { bas[j] = nw; break; }\n        }\n        if(nw[n + 1] && nw.count() == 1) return;\n    }\n    per(i, n, 0) if(bas[i][i]) rep(j, i + 1, n) if(bas[j][j] && bas[i][j]) bas[i] ^= bas[j];\n    rep(i, 0, n) x[i] = bas[i][n + 1];\n    dfs(0);\n}\nint main() {\n    srand(time(0));\n    for(cin >> T; T--;) {\n        scanf(\"%d\", &n), as = 0;\n        rep(i, 0, n) A[i].reset();\n        For(i, 0, n) {\n            scanf(\"%s\", s), A[i][n] = rand() & 1, A[i][n + 1] = 1;\n            For(j, 0, n) A[i][j] = s[j] - 48;\n        }\n        A[n][n] = A[n][n + 1] = 1;\n        solve();\n        rep(i, 0, n) A[i][n + 1] = 0, solve(), A[i][n + 1] = 1;\n        puts(as ? \"NO\" : \"YES\");\n    }\n    return 0;\n}\n```","slug":"cerc2009","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh0e002footncyti6e54","content":"<blockquote>\r\n<p><a href=\"https://darkbzoj.tk/problem/2586\">题目链接</a></p>\r\n<p>给定一个两边各有 <span class=\"math inline\">\\(n\\)</span> 个点的二分图，判断完美匹配的个数是否是 <span class=\"math inline\">\\(4\\)</span> 的倍数。</p>\r\n<p><span class=\"math inline\">\\(n \\le 300\\)</span></p>\r\n</blockquote>\r\n<p>完美匹配的个数即积和式。</p>\r\n<p>来自论文的算法：求积和式模 <span class=\"math inline\">\\(4\\)</span> 的余数。</p>\r\n<p>积和式定义 <span class=\"math display\">\\[\r\n\\text{perm }A = \\sum_{p}A_{i,p_i}\r\n\\]</span> 当 <span class=\"math inline\">\\(A\\)</span> 是 <span class=\"math inline\">\\(01\\)</span> 矩阵时，有 <span class=\"math display\">\\[\r\n\\text{prem} A = (-1)^n\\sum_{x_i \\in \\{0,1\\}}(-1)^{x1+x2+\\cdots+x_n}\\prod_{i=1}^n(Ax)_i\r\n\\]</span> 证明可以考虑容斥：枚举哪些行=列一定没有被选。</p>\r\n<p>观察到式子中间有一个 <span class=\"math inline\">\\(\\prod\\)</span> ，由于我们要求这个东西模 <span class=\"math inline\">\\(4\\)</span> 的余数，因此 <span class=\"math inline\">\\((Ax)_i\\)</span> 至多只能有一个位置模 <span class=\"math inline\">\\(2\\)</span> 为 <span class=\"math inline\">\\(0\\)</span>。</p>\r\n<p>考虑 <span class=\"math inline\">\\((Ax)_i\\)</span> 每一项模 <span class=\"math inline\">\\(2\\)</span> 的余数，由于至多只能有一个 <span class=\"math inline\">\\(0\\)</span>，因此可以枚举这个东西的取值，它只有 <span class=\"math inline\">\\(n+1\\)</span> 种。</p>\r\n<p>对于每种取值，通过高斯消元解出满足条件的所有 <span class=\"math inline\">\\(x\\)</span>，再将每一组 <span class=\"math inline\">\\(x\\)</span> 代入刚刚的式子中求出答案。</p>\r\n<p>问题是，合法的 <span class=\"math inline\">\\(x\\)</span> 的个数可能很大，因为需要枚举自由元的取值。</p>\r\n<p>对这个矩阵做一些变换。 <span class=\"math display\">\\[\r\n\\begin{bmatrix}\r\nA_{1,1}&amp;A_{1,2}&amp;\\cdots &amp;A_{1,n}&amp;v_1\\\\\r\nA_{2,1}&amp;A_{2,2}&amp;\\cdots &amp;A_{2,n}&amp;v_2\\\\\r\n\\vdots&amp;&amp;&amp;&amp;\\vdots\\\\\r\nA_{n,1}&amp;A_{n,2}&amp;\\cdots &amp;A_{n,n}&amp;v_n\\\\\r\n0&amp;0&amp;\\cdots&amp;0&amp;1\r\n\\end{bmatrix}\r\n\\]</span> 这个矩阵的积和式等于原矩阵的积和式。</p>\r\n<p>随机选取 <span class=\"math inline\">\\(v\\)</span>，则期望 <span class=\"math inline\">\\(O(1)\\)</span> 组解。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^4)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">305</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> T, n, as;</span><br><span class=\"line\"><span class=\"keyword\">char</span> s[N];</span><br><span class=\"line\">bitset &lt;302&gt; A[N], bas[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> x[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &gt; n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mul = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> su = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(k, <span class=\"number\">0</span>, n) su += A[i][k] &amp; x[k];</span><br><span class=\"line\">            (mul *= su) %= <span class=\"number\">4</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n) <span class=\"keyword\">if</span>(x[i]) mul *= <span class=\"number\">-1</span>;</span><br><span class=\"line\">        (as += mul) %= <span class=\"number\">4</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!bas[i][i]) <span class=\"built_in\">rep</span>(j, <span class=\"number\">0</span>, <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        x[i] = j, <span class=\"built_in\">dfs</span>(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(k, <span class=\"number\">0</span>, n) <span class=\"keyword\">if</span>(bas[k][i]) x[k] ^= <span class=\"number\">1</span>; </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"built_in\">dfs</span>(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n) bas[i].<span class=\"built_in\">reset</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n) &#123;</span><br><span class=\"line\">        bitset &lt;302&gt; nw = A[i];</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, <span class=\"number\">0</span>, n) <span class=\"keyword\">if</span>(nw[j]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(bas[j][j]) nw ^= bas[j];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123; bas[j] = nw; <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nw[n + <span class=\"number\">1</span>] &amp;&amp; nw.<span class=\"built_in\">count</span>() == <span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, n, <span class=\"number\">0</span>) <span class=\"keyword\">if</span>(bas[i][i]) <span class=\"built_in\">rep</span>(j, i + <span class=\"number\">1</span>, n) <span class=\"keyword\">if</span>(bas[j][j] &amp;&amp; bas[i][j]) bas[i] ^= bas[j];</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n) x[i] = bas[i][n + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">srand</span>(<span class=\"built_in\">time</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(cin &gt;&gt; T; T--;) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n), as = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n) A[i].<span class=\"built_in\">reset</span>();</span><br><span class=\"line\">        <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, n) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, s), A[i][n] = <span class=\"built_in\">rand</span>() &amp; <span class=\"number\">1</span>, A[i][n + <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">For</span>(j, <span class=\"number\">0</span>, n) A[i][j] = s[j] - <span class=\"number\">48</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        A[n][n] = A[n][n + <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n) A[i][n + <span class=\"number\">1</span>] = <span class=\"number\">0</span>, <span class=\"built_in\">solve</span>(), A[i][n + <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(as ? <span class=\"string\">&quot;NO&quot;</span> : <span class=\"string\">&quot;YES&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":2183,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"https://darkbzoj.tk/problem/2586\">题目链接</a></p>\r\n<p>给定一个两边各有 <span class=\"math inline\">\\(n\\)</span> 个点的二分图，判断完美匹配的个数是否是 <span class=\"math inline\">\\(4\\)</span> 的倍数。</p>\r\n<p><span class=\"math inline\">\\(n \\le 300\\)</span></p>\r\n</blockquote>\r\n<p>完美匹配的个数即积和式。</p>\r\n<p>来自论文的算法：求积和式模 <span class=\"math inline\">\\(4\\)</span> 的余数。</p>\r\n<p>积和式定义 <span class=\"math display\">\\[\r\n\\text{perm }A = \\sum_{p}A_{i,p_i}\r\n\\]</span> 当 <span class=\"math inline\">\\(A\\)</span> 是 <span class=\"math inline\">\\(01\\)</span> 矩阵时，有 <span class=\"math display\">\\[\r\n\\text{prem} A = (-1)^n\\sum_{x_i \\in \\{0,1\\}}(-1)^{x1+x2+\\cdots+x_n}\\prod_{i=1}^n(Ax)_i\r\n\\]</span> 证明可以考虑容斥：枚举哪些行=列一定没有被选。</p>\r\n<p>观察到式子中间有一个 <span class=\"math inline\">\\(\\prod\\)</span> ，由于我们要求这个东西模 <span class=\"math inline\">\\(4\\)</span> 的余数，因此 <span class=\"math inline\">\\((Ax)_i\\)</span> 至多只能有一个位置模 <span class=\"math inline\">\\(2\\)</span> 为 <span class=\"math inline\">\\(0\\)</span>。</p>\r\n<p>考虑 <span class=\"math inline\">\\((Ax)_i\\)</span> 每一项模 <span class=\"math inline\">\\(2\\)</span> 的余数，由于至多只能有一个 <span class=\"math inline\">\\(0\\)</span>，因此可以枚举这个东西的取值，它只有 <span class=\"math inline\">\\(n+1\\)</span> 种。</p>\r\n<p>对于每种取值，通过高斯消元解出满足条件的所有 <span class=\"math inline\">\\(x\\)</span>，再将每一组 <span class=\"math inline\">\\(x\\)</span> 代入刚刚的式子中求出答案。</p>\r\n<p>问题是，合法的 <span class=\"math inline\">\\(x\\)</span> 的个数可能很大，因为需要枚举自由元的取值。</p>\r\n<p>对这个矩阵做一些变换。 <span class=\"math display\">\\[\r\n\\begin{bmatrix}\r\nA_{1,1}&amp;A_{1,2}&amp;\\cdots &amp;A_{1,n}&amp;v_1\\\\\r\nA_{2,1}&amp;A_{2,2}&amp;\\cdots &amp;A_{2,n}&amp;v_2\\\\\r\n\\vdots&amp;&amp;&amp;&amp;\\vdots\\\\\r\nA_{n,1}&amp;A_{n,2}&amp;\\cdots &amp;A_{n,n}&amp;v_n\\\\\r\n0&amp;0&amp;\\cdots&amp;0&amp;1\r\n\\end{bmatrix}\r\n\\]</span> 这个矩阵的积和式等于原矩阵的积和式。</p>\r\n<p>随机选取 <span class=\"math inline\">\\(v\\)</span>，则期望 <span class=\"math inline\">\\(O(1)\\)</span> 组解。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^4)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">305</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> T, n, as;</span><br><span class=\"line\"><span class=\"keyword\">char</span> s[N];</span><br><span class=\"line\">bitset &lt;302&gt; A[N], bas[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> x[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &gt; n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mul = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> su = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(k, <span class=\"number\">0</span>, n) su += A[i][k] &amp; x[k];</span><br><span class=\"line\">            (mul *= su) %= <span class=\"number\">4</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n) <span class=\"keyword\">if</span>(x[i]) mul *= <span class=\"number\">-1</span>;</span><br><span class=\"line\">        (as += mul) %= <span class=\"number\">4</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!bas[i][i]) <span class=\"built_in\">rep</span>(j, <span class=\"number\">0</span>, <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        x[i] = j, <span class=\"built_in\">dfs</span>(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(k, <span class=\"number\">0</span>, n) <span class=\"keyword\">if</span>(bas[k][i]) x[k] ^= <span class=\"number\">1</span>; </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"built_in\">dfs</span>(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n) bas[i].<span class=\"built_in\">reset</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n) &#123;</span><br><span class=\"line\">        bitset &lt;302&gt; nw = A[i];</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, <span class=\"number\">0</span>, n) <span class=\"keyword\">if</span>(nw[j]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(bas[j][j]) nw ^= bas[j];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123; bas[j] = nw; <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nw[n + <span class=\"number\">1</span>] &amp;&amp; nw.<span class=\"built_in\">count</span>() == <span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, n, <span class=\"number\">0</span>) <span class=\"keyword\">if</span>(bas[i][i]) <span class=\"built_in\">rep</span>(j, i + <span class=\"number\">1</span>, n) <span class=\"keyword\">if</span>(bas[j][j] &amp;&amp; bas[i][j]) bas[i] ^= bas[j];</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n) x[i] = bas[i][n + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">srand</span>(<span class=\"built_in\">time</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(cin &gt;&gt; T; T--;) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n), as = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n) A[i].<span class=\"built_in\">reset</span>();</span><br><span class=\"line\">        <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, n) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, s), A[i][n] = <span class=\"built_in\">rand</span>() &amp; <span class=\"number\">1</span>, A[i][n + <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">For</span>(j, <span class=\"number\">0</span>, n) A[i][j] = s[j] - <span class=\"number\">48</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        A[n][n] = A[n][n + <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n) A[i][n + <span class=\"number\">1</span>] = <span class=\"number\">0</span>, <span class=\"built_in\">solve</span>(), A[i][n + <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(as ? <span class=\"string\">&quot;NO&quot;</span> : <span class=\"string\">&quot;YES&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"从 C++11 到 C++17","date":"2021-09-01T08:30:02.000Z","updated":"2021-09-01T08:30:02.000Z","_content":"建议在编程中尝试使用 `C++17`，可以一定程度上简化代码编写，提高编程效率。\n\n从 `C++11` 到 `C++14` 和 `C++17` 的部分实用特性：\n\n### lambda 的泛型参数和捕获的增强。\n\n允许 lambda 函数的形式参数声明中使用 `auto`。\n\n```cpp\nauto lambda = [](auto x, auto y) { return x + y; };\n// since C++14\n```\n\n允许 lambda 函数的捕获部分中定义变量同时初始化。\n\n```cpp\nint a = 1, b = 2, c = 3;\nauto lambda1 = [value = a + b] { return value + c; };\n// since C++14\n```\n\n允许成员函数中的 lambda 函数以拷贝的方式捕获 `*this`。\n\n```cpp\nstruct node { int value; void func(); };\nint node::func() {\n    auto lambda = [this]() { return ++value; }; // by reference\n    return lambda();\n}\n// since C++11\nstruct node { int value; void func(); };\nint node::func() {\n    auto lambda = [*this]() { return ++value; }; // by copy\n    return lambda();\n}\n// since C++17\n```\n\n### 函数返回类型推导。\n\n`C++11` 允许 lambda 函数返回值使用 `auto`，`C++14` 允许一般函数也可以这样做，甚至可以递归，但递归调用必须在函数定义中的至少一个 `return` 语句之后。\n\n```cpp\nauto factorial(int n) {\n    if(n == 0) return 1;\n    return factorial(n - 1) * n;\n}\n// since C++14\n```\n\n错误示例：\n\n```cpp\nauto factorial(int n) {\n    if(n) return factorial(n - 1) * n;\n    return 1;\n}\n```\n\n### 构造函数模板推导\n\n构造一个模板类对象不需要指明模板参数。\n\n```cpp\npair a(1, 2.2);\nvector b{1, 2, 3};\nset c{1, 2, 3};\ntuple d(1, 2.2, a);\n// since C++17\n```\n\n### 结构化绑定\n\n将结构体拆包，相当于 `C++11` 中 `tie` 函数的增强。\n\n```cpp\nvector a{pair(1, 2), pair(2, 3)};\nauto [first, second] = a[0];\ncout << first << ' ' << second << endl;\nfor(auto& [first, second] : a) first++, second++; // by reference\nfor(auto [first, second] : a) cout << first << ' ' << second << endl; // by copy\n// since C++17\n```\n\n### `if` 语句初始化\n\n`if` 可以像 `for` 循环一样有一条初始化语句。\n\n```cpp\nif(int value = func(); value < 100) cout << value;\n// since C++17\n```\n\n### 二进制字面量和其他新增标准字面量\n\n数字可以使用二进制形式指定，其格式使用前缀 `0b` 或 `0B`。\n\n在一个字符串后加 `s`，表示 `string` 类型。\n\n在一个数字后加 `i`，`if`，`il` 分别表示 `complex<double>`、`complex<float>` 和 `complex<long double>` 复数类型。\n\n```cpp\nauto str = \"hello world\"s; // string\nauto value = 0b1010; // 10\nauto z = 1i; // complex<double>\n// since C++14\n```\n\n### 折叠表达式\n\n可以用来方便的定义参数个数不定的函数。\n\n```cpp\ntemplate<class ...T> auto sum(T ...value) { return value + ...; }\n// since C++17\n```\n\n### namespace 嵌套\n\n```cpp\nnamespace A {\n    namespace B {\n        namespace C {\n            int func();\n        }\n    }\n}\nnamespace A::B::C {\n    int func() { return 100; }\n}\n// since C++17\n```\n\n### 字符串转化\n\n`from_chars` 是把 `const char*` 转化成整数或浮点数。\n\n`to_chars` 是把整数或浮点数转化成 `const char*`。\n\n","source":"_posts/cong-c11-dao-c17.md","raw":"---\ntitle: 从 C++11 到 C++17\ndate: 2021-09-01 16:30:02\nupdated: 2021-09-01 16:30:02\ntags: []\n---\n建议在编程中尝试使用 `C++17`，可以一定程度上简化代码编写，提高编程效率。\n\n从 `C++11` 到 `C++14` 和 `C++17` 的部分实用特性：\n\n### lambda 的泛型参数和捕获的增强。\n\n允许 lambda 函数的形式参数声明中使用 `auto`。\n\n```cpp\nauto lambda = [](auto x, auto y) { return x + y; };\n// since C++14\n```\n\n允许 lambda 函数的捕获部分中定义变量同时初始化。\n\n```cpp\nint a = 1, b = 2, c = 3;\nauto lambda1 = [value = a + b] { return value + c; };\n// since C++14\n```\n\n允许成员函数中的 lambda 函数以拷贝的方式捕获 `*this`。\n\n```cpp\nstruct node { int value; void func(); };\nint node::func() {\n    auto lambda = [this]() { return ++value; }; // by reference\n    return lambda();\n}\n// since C++11\nstruct node { int value; void func(); };\nint node::func() {\n    auto lambda = [*this]() { return ++value; }; // by copy\n    return lambda();\n}\n// since C++17\n```\n\n### 函数返回类型推导。\n\n`C++11` 允许 lambda 函数返回值使用 `auto`，`C++14` 允许一般函数也可以这样做，甚至可以递归，但递归调用必须在函数定义中的至少一个 `return` 语句之后。\n\n```cpp\nauto factorial(int n) {\n    if(n == 0) return 1;\n    return factorial(n - 1) * n;\n}\n// since C++14\n```\n\n错误示例：\n\n```cpp\nauto factorial(int n) {\n    if(n) return factorial(n - 1) * n;\n    return 1;\n}\n```\n\n### 构造函数模板推导\n\n构造一个模板类对象不需要指明模板参数。\n\n```cpp\npair a(1, 2.2);\nvector b{1, 2, 3};\nset c{1, 2, 3};\ntuple d(1, 2.2, a);\n// since C++17\n```\n\n### 结构化绑定\n\n将结构体拆包，相当于 `C++11` 中 `tie` 函数的增强。\n\n```cpp\nvector a{pair(1, 2), pair(2, 3)};\nauto [first, second] = a[0];\ncout << first << ' ' << second << endl;\nfor(auto& [first, second] : a) first++, second++; // by reference\nfor(auto [first, second] : a) cout << first << ' ' << second << endl; // by copy\n// since C++17\n```\n\n### `if` 语句初始化\n\n`if` 可以像 `for` 循环一样有一条初始化语句。\n\n```cpp\nif(int value = func(); value < 100) cout << value;\n// since C++17\n```\n\n### 二进制字面量和其他新增标准字面量\n\n数字可以使用二进制形式指定，其格式使用前缀 `0b` 或 `0B`。\n\n在一个字符串后加 `s`，表示 `string` 类型。\n\n在一个数字后加 `i`，`if`，`il` 分别表示 `complex<double>`、`complex<float>` 和 `complex<long double>` 复数类型。\n\n```cpp\nauto str = \"hello world\"s; // string\nauto value = 0b1010; // 10\nauto z = 1i; // complex<double>\n// since C++14\n```\n\n### 折叠表达式\n\n可以用来方便的定义参数个数不定的函数。\n\n```cpp\ntemplate<class ...T> auto sum(T ...value) { return value + ...; }\n// since C++17\n```\n\n### namespace 嵌套\n\n```cpp\nnamespace A {\n    namespace B {\n        namespace C {\n            int func();\n        }\n    }\n}\nnamespace A::B::C {\n    int func() { return 100; }\n}\n// since C++17\n```\n\n### 字符串转化\n\n`from_chars` 是把 `const char*` 转化成整数或浮点数。\n\n`to_chars` 是把整数或浮点数转化成 `const char*`。\n\n","slug":"cong-c11-dao-c17","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh0f002jootn27mhbaai","content":"<p>建议在编程中尝试使用 <code>C++17</code>，可以一定程度上简化代码编写，提高编程效率。</p>\r\n<p>从 <code>C++11</code> 到 <code>C++14</code> 和 <code>C++17</code> 的部分实用特性：</p>\r\n<h3 id=\"lambda-的泛型参数和捕获的增强\">lambda 的泛型参数和捕获的增强。</h3>\r\n<p>允许 lambda 函数的形式参数声明中使用 <code>auto</code>。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> lambda = [](<span class=\"keyword\">auto</span> x, <span class=\"keyword\">auto</span> y) &#123; <span class=\"keyword\">return</span> x + y; &#125;;</span><br><span class=\"line\"><span class=\"comment\">// since C++14</span></span><br></pre></td></tr></table></figure>\r\n<p>允许 lambda 函数的捕获部分中定义变量同时初始化。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>, c = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> lambda1 = [value = a + b] &#123; <span class=\"keyword\">return</span> value + c; &#125;;</span><br><span class=\"line\"><span class=\"comment\">// since C++14</span></span><br></pre></td></tr></table></figure>\r\n<p>允许成员函数中的 lambda 函数以拷贝的方式捕获 <code>*this</code>。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span> <span class=\"keyword\">int</span> value; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>; &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">node::func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> lambda = [<span class=\"keyword\">this</span>]() &#123; <span class=\"keyword\">return</span> ++value; &#125;; <span class=\"comment\">// by reference</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">lambda</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// since C++11</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span> <span class=\"keyword\">int</span> value; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>; &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">node::func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> lambda = [*<span class=\"keyword\">this</span>]() &#123; <span class=\"keyword\">return</span> ++value; &#125;; <span class=\"comment\">// by copy</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">lambda</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// since C++17</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数返回类型推导\">函数返回类型推导。</h3>\r\n<p><code>C++11</code> 允许 lambda 函数返回值使用 <code>auto</code>，<code>C++14</code> 允许一般函数也可以这样做，甚至可以递归，但递归调用必须在函数定义中的至少一个 <code>return</code> 语句之后。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">factorial</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">factorial</span>(n - <span class=\"number\">1</span>) * n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// since C++14</span></span><br></pre></td></tr></table></figure>\r\n<p>错误示例：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">factorial</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n) <span class=\"keyword\">return</span> <span class=\"built_in\">factorial</span>(n - <span class=\"number\">1</span>) * n;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"构造函数模板推导\">构造函数模板推导</h3>\r\n<p>构造一个模板类对象不需要指明模板参数。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">pair <span class=\"title\">a</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">2.2</span>)</span></span>;</span><br><span class=\"line\">vector b&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">set c&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"function\">tuple <span class=\"title\">d</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">2.2</span>, a)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// since C++17</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"结构化绑定\">结构化绑定</h3>\r\n<p>将结构体拆包，相当于 <code>C++11</code> 中 <code>tie</code> 函数的增强。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector a&#123;<span class=\"built_in\">pair</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>), <span class=\"built_in\">pair</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>)&#125;;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> [first, second] = a[<span class=\"number\">0</span>];</span><br><span class=\"line\">cout &lt;&lt; first &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; second &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span>&amp; [first, second] : a) first++, second++; <span class=\"comment\">// by reference</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [first, second] : a) cout &lt;&lt; first &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; second &lt;&lt; endl; <span class=\"comment\">// by copy</span></span><br><span class=\"line\"><span class=\"comment\">// since C++17</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"if-语句初始化\"><code>if</code> 语句初始化</h3>\r\n<p><code>if</code> 可以像 <code>for</code> 循环一样有一条初始化语句。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">int</span> value = <span class=\"built_in\">func</span>(); value &lt; <span class=\"number\">100</span>) cout &lt;&lt; value;</span><br><span class=\"line\"><span class=\"comment\">// since C++17</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"二进制字面量和其他新增标准字面量\">二进制字面量和其他新增标准字面量</h3>\r\n<p>数字可以使用二进制形式指定，其格式使用前缀 <code>0b</code> 或 <code>0B</code>。</p>\r\n<p>在一个字符串后加 <code>s</code>，表示 <code>string</code> 类型。</p>\r\n<p>在一个数字后加 <code>i</code>，<code>if</code>，<code>il</code> 分别表示 <code>complex&lt;double&gt;</code>、<code>complex&lt;float&gt;</code> 和 <code>complex&lt;long double&gt;</code> 复数类型。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> str = <span class=\"string\">&quot;hello world&quot;</span>s; <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> value = <span class=\"number\">0b1010</span>; <span class=\"comment\">// 10</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> z = <span class=\"number\">1</span>i; <span class=\"comment\">// complex&lt;double&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// since C++14</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"折叠表达式\">折叠表达式</h3>\r\n<p>可以用来方便的定义参数个数不定的函数。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;class ...T&gt; <span class=\"keyword\">auto</span> <span class=\"title\">sum</span><span class=\"params\">(T ...value)</span> </span>&#123; <span class=\"keyword\">return</span> value + ...; &#125;</span><br><span class=\"line\"><span class=\"comment\">// since C++17</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"namespace-嵌套\">namespace 嵌套</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> A &#123;</span><br><span class=\"line\">    <span class=\"keyword\">namespace</span> B &#123;</span><br><span class=\"line\">        <span class=\"keyword\">namespace</span> C &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> A::B::C &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">100</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// since C++17</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"字符串转化\">字符串转化</h3>\r\n<p><code>from_chars</code> 是把 <code>const char*</code> 转化成整数或浮点数。</p>\r\n<p><code>to_chars</code> 是把整数或浮点数转化成 <code>const char*</code>。</p>\r\n","site":{"data":{}},"length":2034,"excerpt":"","more":"<p>建议在编程中尝试使用 <code>C++17</code>，可以一定程度上简化代码编写，提高编程效率。</p>\r\n<p>从 <code>C++11</code> 到 <code>C++14</code> 和 <code>C++17</code> 的部分实用特性：</p>\r\n<h3 id=\"lambda-的泛型参数和捕获的增强\">lambda 的泛型参数和捕获的增强。</h3>\r\n<p>允许 lambda 函数的形式参数声明中使用 <code>auto</code>。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> lambda = [](<span class=\"keyword\">auto</span> x, <span class=\"keyword\">auto</span> y) &#123; <span class=\"keyword\">return</span> x + y; &#125;;</span><br><span class=\"line\"><span class=\"comment\">// since C++14</span></span><br></pre></td></tr></table></figure>\r\n<p>允许 lambda 函数的捕获部分中定义变量同时初始化。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>, c = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> lambda1 = [value = a + b] &#123; <span class=\"keyword\">return</span> value + c; &#125;;</span><br><span class=\"line\"><span class=\"comment\">// since C++14</span></span><br></pre></td></tr></table></figure>\r\n<p>允许成员函数中的 lambda 函数以拷贝的方式捕获 <code>*this</code>。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span> <span class=\"keyword\">int</span> value; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>; &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">node::func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> lambda = [<span class=\"keyword\">this</span>]() &#123; <span class=\"keyword\">return</span> ++value; &#125;; <span class=\"comment\">// by reference</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">lambda</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// since C++11</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span> <span class=\"keyword\">int</span> value; <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>; &#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">node::func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> lambda = [*<span class=\"keyword\">this</span>]() &#123; <span class=\"keyword\">return</span> ++value; &#125;; <span class=\"comment\">// by copy</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">lambda</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// since C++17</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数返回类型推导\">函数返回类型推导。</h3>\r\n<p><code>C++11</code> 允许 lambda 函数返回值使用 <code>auto</code>，<code>C++14</code> 允许一般函数也可以这样做，甚至可以递归，但递归调用必须在函数定义中的至少一个 <code>return</code> 语句之后。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">factorial</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">factorial</span>(n - <span class=\"number\">1</span>) * n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// since C++14</span></span><br></pre></td></tr></table></figure>\r\n<p>错误示例：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">auto</span> <span class=\"title\">factorial</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n) <span class=\"keyword\">return</span> <span class=\"built_in\">factorial</span>(n - <span class=\"number\">1</span>) * n;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"构造函数模板推导\">构造函数模板推导</h3>\r\n<p>构造一个模板类对象不需要指明模板参数。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">pair <span class=\"title\">a</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">2.2</span>)</span></span>;</span><br><span class=\"line\">vector b&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">set c&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"function\">tuple <span class=\"title\">d</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">2.2</span>, a)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// since C++17</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"结构化绑定\">结构化绑定</h3>\r\n<p>将结构体拆包，相当于 <code>C++11</code> 中 <code>tie</code> 函数的增强。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector a&#123;<span class=\"built_in\">pair</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>), <span class=\"built_in\">pair</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>)&#125;;</span><br><span class=\"line\"><span class=\"keyword\">auto</span> [first, second] = a[<span class=\"number\">0</span>];</span><br><span class=\"line\">cout &lt;&lt; first &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; second &lt;&lt; endl;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span>&amp; [first, second] : a) first++, second++; <span class=\"comment\">// by reference</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [first, second] : a) cout &lt;&lt; first &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; second &lt;&lt; endl; <span class=\"comment\">// by copy</span></span><br><span class=\"line\"><span class=\"comment\">// since C++17</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"if-语句初始化\"><code>if</code> 语句初始化</h3>\r\n<p><code>if</code> 可以像 <code>for</code> 循环一样有一条初始化语句。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">int</span> value = <span class=\"built_in\">func</span>(); value &lt; <span class=\"number\">100</span>) cout &lt;&lt; value;</span><br><span class=\"line\"><span class=\"comment\">// since C++17</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"二进制字面量和其他新增标准字面量\">二进制字面量和其他新增标准字面量</h3>\r\n<p>数字可以使用二进制形式指定，其格式使用前缀 <code>0b</code> 或 <code>0B</code>。</p>\r\n<p>在一个字符串后加 <code>s</code>，表示 <code>string</code> 类型。</p>\r\n<p>在一个数字后加 <code>i</code>，<code>if</code>，<code>il</code> 分别表示 <code>complex&lt;double&gt;</code>、<code>complex&lt;float&gt;</code> 和 <code>complex&lt;long double&gt;</code> 复数类型。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">auto</span> str = <span class=\"string\">&quot;hello world&quot;</span>s; <span class=\"comment\">// string</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> value = <span class=\"number\">0b1010</span>; <span class=\"comment\">// 10</span></span><br><span class=\"line\"><span class=\"keyword\">auto</span> z = <span class=\"number\">1</span>i; <span class=\"comment\">// complex&lt;double&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// since C++14</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"折叠表达式\">折叠表达式</h3>\r\n<p>可以用来方便的定义参数个数不定的函数。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">template</span>&lt;class ...T&gt; <span class=\"keyword\">auto</span> <span class=\"title\">sum</span><span class=\"params\">(T ...value)</span> </span>&#123; <span class=\"keyword\">return</span> value + ...; &#125;</span><br><span class=\"line\"><span class=\"comment\">// since C++17</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"namespace-嵌套\">namespace 嵌套</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> A &#123;</span><br><span class=\"line\">    <span class=\"keyword\">namespace</span> B &#123;</span><br><span class=\"line\">        <span class=\"keyword\">namespace</span> C &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> A::B::C &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">100</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// since C++17</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"字符串转化\">字符串转化</h3>\r\n<p><code>from_chars</code> 是把 <code>const char*</code> 转化成整数或浮点数。</p>\r\n<p><code>to_chars</code> 是把整数或浮点数转化成 <code>const char*</code>。</p>\r\n"},{"title":"杜教筛 & Min-25 筛 & Powerful Number 筛","date":"2021-03-13T15:13:29.000Z","updated":"2021-03-13T15:13:29.000Z","_content":"> 给定积性函数 $f(x)$，求 $\\sum\\limits_{i=1}^Nf(i)$。\n\n### 杜教筛\n\n找到积性函数 $g(x)$，设 $S(x) = \\sum\\limits_{i=1}^x f(i)$，那么答案是 $S(N)$。\n\n**核心**：\n$$\ng(1)S(n) = \\sum\\limits_{i=1}^n (f*g)(i) - \\sum\\limits_{i=2}^n g(i)S(\\big\\lfloor \\dfrac n i \\big\\rfloor)\n$$\n如果 $g(x)$ 和 $(f*g)(x)$ 的前缀和很好求，就可以代这个公式递归。\n\n**需要记忆化**。\n\n先欧拉筛出 $S(1) - S(N^{\\frac 2 3})$，对于其他会递归到的 $S(x)$，$x$ 只可能是 $\\big\\lfloor\\dfrac N i \\big \\rfloor$，故可以用 $F_i$ 存 $S(x)$。\n\n时空复杂度均为 $O(n^{\\frac 2 3})$。\n\n### Min-25 筛\n\n$p_i$ 表示第 $i$ 个质数，$d_i$ 表示 $i$ 的最小质因子。\n\n$S(n, i) = \\sum\\limits_{j = 2}^n [d_j > p_i]f(j)$\n\n那么答案是 $S(N, 0)$。\n\n有递推 $S(n, i) = \\sum\\limits_{j = i+1}^{p_j \\le n} f(p_j) + \\sum\\limits_{j = i+1}^{p_j^2 \\le n}\\sum\\limits_{k=1}^{p_j^k \\le n} f(p_j^k)(S(\\big\\lfloor \\dfrac n{p_j^k} \\big\\rfloor, j) + [k>1])$。\n\n如果 $f(p^k)$ 和第一项很好求，那就可以递归到 $0$，而且**无需记忆化**。\n\n所以问题是求第一项。\n\n找一个完全积性函数 $h(x)$ 满足 $h(p) = f(p)$。\n\n设 $g(n, i) = \\sum\\limits_{j=2}^n [j \\in P \\lor d_j > p_i]h(j)$\n\n有递推 $g(n, i) = g(n, i - 1) - h(p_i)(g(\\big\\lfloor\\dfrac n {p_i} \\big\\rfloor, i - 1) - \\sum\\limits_{j=1}^{i-1}h(p_j))$。\n\n减后面那项是因为 $p_ip_j(j < i)$ 的最小质因子不是 $p_i$。\n\n当 $n < p_i^2$ 时，$g(n,i)=g(n,i-1)$，即不需要转移。\n\n注意到 $n$ 会取到的值一定是 $\\big\\lfloor\\dfrac N i \\big \\rfloor$，且 $j \\le \\sqrt N$。\n\n初始化 $g(n, 0) = \\sum\\limits_{i=2}^n h(i)$，**注意 $1$ 不算**。\n\n然后从小到大枚举 $j$，开滚动数组存另一维，所以另一维需从大到小枚举计算。\n\n> 求 1 - n 的质数数量。\n>\n> $n \\le 10^{11}$\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n\nusing namespace std;\nconstexpr int N = sqrt(1e11) + 5;\ntypedef long long ll;\nll n, f1[N], f2[N];\nint main() {\n    cin >> n;\n    int lim = sqrt(n);\n    rep(i, 1, lim) f1[i] = i - 1, f2[i] = n / i - 1;\n\n    rep(p, 2, lim) if (f1[p] ^ f1[p - 1]) {\n        int w1 = lim / p;\n        ll x = f1[p - 1], w3 = (ll)p * p, w2 = min((ll)lim, n / w3), d = n / p;\n        rep(i, 1, w1) f2[i] -= f2[i * p] - x;\n        rep(i, w1 + 1, w2) f2[i] -= f1[d / i] - x;\n        per(i, lim, w3) f1[i] -= f1[i / p] - x;\n    }\n\n    cout << f2[1];\n    return 0;\n}\n```\n\n#### 常数优化\n\n由于 ```double``` 乘法快于 ```long long``` 乘法，可以预处理 $1-\\sqrt n$ 的倒数。\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n\nusing namespace std;\nconstexpr int N = sqrt(1e11) + 5;\nconst double Eps = 1e-7;\ntypedef long long ll;\nll n, f1[N], f2[N];\ndouble inv[N];\nint main() {\n    cin >> n;\n    int lim = sqrt(n);\n    rep(i, 1, lim) f1[i] = i - 1, f2[i] = n / i - 1, inv[i] = 1.0 / i;\n\n    rep(p, 2, lim) if (f1[p] ^ f1[p - 1]) {\n        int w1 = lim / p;\n        ll x = f1[p - 1], w3 = (ll)p * p, w2 = min((ll)lim, n / w3), d = n / p;\n        rep(i, 1, w1) f2[i] -= f2[i * p] - x;\n        rep(i, w1 + 1, w2) f2[i] -= f1[int(d * inv[i] + Eps)] - x;\n        per(i, lim, w3) f1[i] -= f1[int(i * inv[p] + Eps)] - x;\n    }\n\n    cout << f2[1];\n    return 0;\n}\n```\n\n### Powerful Number 筛\n\n定义：所有质因子的指数都大于 $1$ 的数叫 ```Powerful Number```。\n\n性质：可以表示为 $a^2b^3$。\n\n> 引理：$n$ 以内的 ```Powerful Number``` 的数量为 $O(\\sqrt n)$ 级别。\n>\n> 证明：根据性质，枚举 $a$，可以算出数量的上界：\n> $$\n> \\sum_{i=1}^{\\sqrt n}\\sqrt[3] {\\frac n{a^2}} < \\int_0^{\\sqrt n - 1}\\sqrt[3] {\\frac n{a^2}}da = 3n^\\frac 13(\\sqrt n - 1)^\\frac 13 < 3\\sqrt n\n> $$\n\n一个想法：如果一个积性函数仅在 ```Powerful Number``` 处取值不为 $0$，那么与之相关的计算可能做到较低的复杂度。\n\n找到一个**积性函数** $g(x)$ 满足 $g(x)=f(x) (x \\in Prime)$，设 $f(x)=\\sum\\limits_{ab=x}g(a)h(b)$，可知 $h(x)$ 仅在 ```Powerful Number``` 处取值不为 $0$。\n\n首先预处理出 $h(x)$ 在 $p^k(p \\in Prime,k > 1)$ 处的取值，这里可以做到 $O(\\sqrt N)$（无论 $O(1)$ 算 $h(p^k)$ 还是 $O(k)$ 算都是这个复杂度）。\n\n于是\n$$\n\\sum_{i=1}^Nf(i)=\\sum_{ab \\le N}g(a)h(b)=\\sum_{b=1}^Nh(b)\\sum_{a=1}^{\\lfloor \\frac Na \\rfloor}g(a)\n$$\n最后要求 $g(x)$ 在 $\\lfloor \\frac Na \\rfloor$ 的前缀和能快速求。","source":"_posts/du-jiao-shai-and-min-25-shai-and-powerful-number-shai.md","raw":"---\ntitle: 杜教筛 & Min-25 筛 & Powerful Number 筛\ndate: 2021-03-13 23:13:29\nupdated: 2021-03-13 23:13:29\ntags: [知识总结,数论,杜教筛,Min-25 筛,Powerful Number 筛]\ncategories: 算法\n---\n> 给定积性函数 $f(x)$，求 $\\sum\\limits_{i=1}^Nf(i)$。\n\n### 杜教筛\n\n找到积性函数 $g(x)$，设 $S(x) = \\sum\\limits_{i=1}^x f(i)$，那么答案是 $S(N)$。\n\n**核心**：\n$$\ng(1)S(n) = \\sum\\limits_{i=1}^n (f*g)(i) - \\sum\\limits_{i=2}^n g(i)S(\\big\\lfloor \\dfrac n i \\big\\rfloor)\n$$\n如果 $g(x)$ 和 $(f*g)(x)$ 的前缀和很好求，就可以代这个公式递归。\n\n**需要记忆化**。\n\n先欧拉筛出 $S(1) - S(N^{\\frac 2 3})$，对于其他会递归到的 $S(x)$，$x$ 只可能是 $\\big\\lfloor\\dfrac N i \\big \\rfloor$，故可以用 $F_i$ 存 $S(x)$。\n\n时空复杂度均为 $O(n^{\\frac 2 3})$。\n\n### Min-25 筛\n\n$p_i$ 表示第 $i$ 个质数，$d_i$ 表示 $i$ 的最小质因子。\n\n$S(n, i) = \\sum\\limits_{j = 2}^n [d_j > p_i]f(j)$\n\n那么答案是 $S(N, 0)$。\n\n有递推 $S(n, i) = \\sum\\limits_{j = i+1}^{p_j \\le n} f(p_j) + \\sum\\limits_{j = i+1}^{p_j^2 \\le n}\\sum\\limits_{k=1}^{p_j^k \\le n} f(p_j^k)(S(\\big\\lfloor \\dfrac n{p_j^k} \\big\\rfloor, j) + [k>1])$。\n\n如果 $f(p^k)$ 和第一项很好求，那就可以递归到 $0$，而且**无需记忆化**。\n\n所以问题是求第一项。\n\n找一个完全积性函数 $h(x)$ 满足 $h(p) = f(p)$。\n\n设 $g(n, i) = \\sum\\limits_{j=2}^n [j \\in P \\lor d_j > p_i]h(j)$\n\n有递推 $g(n, i) = g(n, i - 1) - h(p_i)(g(\\big\\lfloor\\dfrac n {p_i} \\big\\rfloor, i - 1) - \\sum\\limits_{j=1}^{i-1}h(p_j))$。\n\n减后面那项是因为 $p_ip_j(j < i)$ 的最小质因子不是 $p_i$。\n\n当 $n < p_i^2$ 时，$g(n,i)=g(n,i-1)$，即不需要转移。\n\n注意到 $n$ 会取到的值一定是 $\\big\\lfloor\\dfrac N i \\big \\rfloor$，且 $j \\le \\sqrt N$。\n\n初始化 $g(n, 0) = \\sum\\limits_{i=2}^n h(i)$，**注意 $1$ 不算**。\n\n然后从小到大枚举 $j$，开滚动数组存另一维，所以另一维需从大到小枚举计算。\n\n> 求 1 - n 的质数数量。\n>\n> $n \\le 10^{11}$\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n\nusing namespace std;\nconstexpr int N = sqrt(1e11) + 5;\ntypedef long long ll;\nll n, f1[N], f2[N];\nint main() {\n    cin >> n;\n    int lim = sqrt(n);\n    rep(i, 1, lim) f1[i] = i - 1, f2[i] = n / i - 1;\n\n    rep(p, 2, lim) if (f1[p] ^ f1[p - 1]) {\n        int w1 = lim / p;\n        ll x = f1[p - 1], w3 = (ll)p * p, w2 = min((ll)lim, n / w3), d = n / p;\n        rep(i, 1, w1) f2[i] -= f2[i * p] - x;\n        rep(i, w1 + 1, w2) f2[i] -= f1[d / i] - x;\n        per(i, lim, w3) f1[i] -= f1[i / p] - x;\n    }\n\n    cout << f2[1];\n    return 0;\n}\n```\n\n#### 常数优化\n\n由于 ```double``` 乘法快于 ```long long``` 乘法，可以预处理 $1-\\sqrt n$ 的倒数。\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n\nusing namespace std;\nconstexpr int N = sqrt(1e11) + 5;\nconst double Eps = 1e-7;\ntypedef long long ll;\nll n, f1[N], f2[N];\ndouble inv[N];\nint main() {\n    cin >> n;\n    int lim = sqrt(n);\n    rep(i, 1, lim) f1[i] = i - 1, f2[i] = n / i - 1, inv[i] = 1.0 / i;\n\n    rep(p, 2, lim) if (f1[p] ^ f1[p - 1]) {\n        int w1 = lim / p;\n        ll x = f1[p - 1], w3 = (ll)p * p, w2 = min((ll)lim, n / w3), d = n / p;\n        rep(i, 1, w1) f2[i] -= f2[i * p] - x;\n        rep(i, w1 + 1, w2) f2[i] -= f1[int(d * inv[i] + Eps)] - x;\n        per(i, lim, w3) f1[i] -= f1[int(i * inv[p] + Eps)] - x;\n    }\n\n    cout << f2[1];\n    return 0;\n}\n```\n\n### Powerful Number 筛\n\n定义：所有质因子的指数都大于 $1$ 的数叫 ```Powerful Number```。\n\n性质：可以表示为 $a^2b^3$。\n\n> 引理：$n$ 以内的 ```Powerful Number``` 的数量为 $O(\\sqrt n)$ 级别。\n>\n> 证明：根据性质，枚举 $a$，可以算出数量的上界：\n> $$\n> \\sum_{i=1}^{\\sqrt n}\\sqrt[3] {\\frac n{a^2}} < \\int_0^{\\sqrt n - 1}\\sqrt[3] {\\frac n{a^2}}da = 3n^\\frac 13(\\sqrt n - 1)^\\frac 13 < 3\\sqrt n\n> $$\n\n一个想法：如果一个积性函数仅在 ```Powerful Number``` 处取值不为 $0$，那么与之相关的计算可能做到较低的复杂度。\n\n找到一个**积性函数** $g(x)$ 满足 $g(x)=f(x) (x \\in Prime)$，设 $f(x)=\\sum\\limits_{ab=x}g(a)h(b)$，可知 $h(x)$ 仅在 ```Powerful Number``` 处取值不为 $0$。\n\n首先预处理出 $h(x)$ 在 $p^k(p \\in Prime,k > 1)$ 处的取值，这里可以做到 $O(\\sqrt N)$（无论 $O(1)$ 算 $h(p^k)$ 还是 $O(k)$ 算都是这个复杂度）。\n\n于是\n$$\n\\sum_{i=1}^Nf(i)=\\sum_{ab \\le N}g(a)h(b)=\\sum_{b=1}^Nh(b)\\sum_{a=1}^{\\lfloor \\frac Na \\rfloor}g(a)\n$$\n最后要求 $g(x)$ 在 $\\lfloor \\frac Na \\rfloor$ 的前缀和能快速求。","slug":"du-jiao-shai-and-min-25-shai-and-powerful-number-shai","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh0i002mootn52vu9bia","content":"<blockquote>\r\n<p>给定积性函数 <span class=\"math inline\">\\(f(x)\\)</span>，求 <span class=\"math inline\">\\(\\sum\\limits_{i=1}^Nf(i)\\)</span>。</p>\r\n</blockquote>\r\n<h3 id=\"杜教筛\">杜教筛</h3>\r\n<p>找到积性函数 <span class=\"math inline\">\\(g(x)\\)</span>，设 <span class=\"math inline\">\\(S(x) = \\sum\\limits_{i=1}^x f(i)\\)</span>，那么答案是 <span class=\"math inline\">\\(S(N)\\)</span>。</p>\r\n<p><strong>核心</strong>： <span class=\"math display\">\\[\r\ng(1)S(n) = \\sum\\limits_{i=1}^n (f*g)(i) - \\sum\\limits_{i=2}^n g(i)S(\\big\\lfloor \\dfrac n i \\big\\rfloor)\r\n\\]</span> 如果 <span class=\"math inline\">\\(g(x)\\)</span> 和 <span class=\"math inline\">\\((f*g)(x)\\)</span> 的前缀和很好求，就可以代这个公式递归。</p>\r\n<p><strong>需要记忆化</strong>。</p>\r\n<p>先欧拉筛出 <span class=\"math inline\">\\(S(1) - S(N^{\\frac 2 3})\\)</span>，对于其他会递归到的 <span class=\"math inline\">\\(S(x)\\)</span>，<span class=\"math inline\">\\(x\\)</span> 只可能是 <span class=\"math inline\">\\(\\big\\lfloor\\dfrac N i \\big \\rfloor\\)</span>，故可以用 <span class=\"math inline\">\\(F_i\\)</span> 存 <span class=\"math inline\">\\(S(x)\\)</span>。</p>\r\n<p>时空复杂度均为 <span class=\"math inline\">\\(O(n^{\\frac 2 3})\\)</span>。</p>\r\n<h3 id=\"min-25-筛\">Min-25 筛</h3>\r\n<p><span class=\"math inline\">\\(p_i\\)</span> 表示第 <span class=\"math inline\">\\(i\\)</span> 个质数，<span class=\"math inline\">\\(d_i\\)</span> 表示 <span class=\"math inline\">\\(i\\)</span> 的最小质因子。</p>\r\n<p><span class=\"math inline\">\\(S(n, i) = \\sum\\limits_{j = 2}^n [d_j &gt; p_i]f(j)\\)</span></p>\r\n<p>那么答案是 <span class=\"math inline\">\\(S(N, 0)\\)</span>。</p>\r\n<p>有递推 <span class=\"math inline\">\\(S(n, i) = \\sum\\limits_{j = i+1}^{p_j \\le n} f(p_j) + \\sum\\limits_{j = i+1}^{p_j^2 \\le n}\\sum\\limits_{k=1}^{p_j^k \\le n} f(p_j^k)(S(\\big\\lfloor \\dfrac n{p_j^k} \\big\\rfloor, j) + [k&gt;1])\\)</span>。</p>\r\n<p>如果 <span class=\"math inline\">\\(f(p^k)\\)</span> 和第一项很好求，那就可以递归到 <span class=\"math inline\">\\(0\\)</span>，而且<strong>无需记忆化</strong>。</p>\r\n<p>所以问题是求第一项。</p>\r\n<p>找一个完全积性函数 <span class=\"math inline\">\\(h(x)\\)</span> 满足 <span class=\"math inline\">\\(h(p) = f(p)\\)</span>。</p>\r\n<p>设 <span class=\"math inline\">\\(g(n, i) = \\sum\\limits_{j=2}^n [j \\in P \\lor d_j &gt; p_i]h(j)\\)</span></p>\r\n<p>有递推 <span class=\"math inline\">\\(g(n, i) = g(n, i - 1) - h(p_i)(g(\\big\\lfloor\\dfrac n {p_i} \\big\\rfloor, i - 1) - \\sum\\limits_{j=1}^{i-1}h(p_j))\\)</span>。</p>\r\n<p>减后面那项是因为 <span class=\"math inline\">\\(p_ip_j(j &lt; i)\\)</span> 的最小质因子不是 <span class=\"math inline\">\\(p_i\\)</span>。</p>\r\n<p>当 <span class=\"math inline\">\\(n &lt; p_i^2\\)</span> 时，<span class=\"math inline\">\\(g(n,i)=g(n,i-1)\\)</span>，即不需要转移。</p>\r\n<p>注意到 <span class=\"math inline\">\\(n\\)</span> 会取到的值一定是 <span class=\"math inline\">\\(\\big\\lfloor\\dfrac N i \\big \\rfloor\\)</span>，且 <span class=\"math inline\">\\(j \\le \\sqrt N\\)</span>。</p>\r\n<p>初始化 <span class=\"math inline\">\\(g(n, 0) = \\sum\\limits_{i=2}^n h(i)\\)</span>，<strong>注意 <span class=\"math inline\">\\(1\\)</span> 不算</strong>。</p>\r\n<p>然后从小到大枚举 <span class=\"math inline\">\\(j\\)</span>，开滚动数组存另一维，所以另一维需从大到小枚举计算。</p>\r\n<blockquote>\r\n<p>求 1 - n 的质数数量。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^{11}\\)</span></p>\r\n</blockquote>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">constexpr</span> <span class=\"keyword\">int</span> N = <span class=\"built_in\">sqrt</span>(<span class=\"number\">1e11</span>) + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\">ll n, f1[N], f2[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lim = <span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, lim) f1[i] = i - <span class=\"number\">1</span>, f2[i] = n / i - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(p, <span class=\"number\">2</span>, lim) <span class=\"keyword\">if</span> (f1[p] ^ f1[p - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> w1 = lim / p;</span><br><span class=\"line\">        ll x = f1[p - <span class=\"number\">1</span>], w3 = (ll)p * p, w2 = <span class=\"built_in\">min</span>((ll)lim, n / w3), d = n / p;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, w1) f2[i] -= f2[i * p] - x;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, w1 + <span class=\"number\">1</span>, w2) f2[i] -= f1[d / i] - x;</span><br><span class=\"line\">        <span class=\"built_in\">per</span>(i, lim, w3) f1[i] -= f1[i / p] - x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; f2[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"常数优化\">常数优化</h4>\r\n<p>由于 <code>double</code> 乘法快于 <code>long long</code> 乘法，可以预处理 <span class=\"math inline\">\\(1-\\sqrt n\\)</span> 的倒数。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">constexpr</span> <span class=\"keyword\">int</span> N = <span class=\"built_in\">sqrt</span>(<span class=\"number\">1e11</span>) + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> Eps = <span class=\"number\">1e-7</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\">ll n, f1[N], f2[N];</span><br><span class=\"line\"><span class=\"keyword\">double</span> inv[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lim = <span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, lim) f1[i] = i - <span class=\"number\">1</span>, f2[i] = n / i - <span class=\"number\">1</span>, inv[i] = <span class=\"number\">1.0</span> / i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(p, <span class=\"number\">2</span>, lim) <span class=\"keyword\">if</span> (f1[p] ^ f1[p - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> w1 = lim / p;</span><br><span class=\"line\">        ll x = f1[p - <span class=\"number\">1</span>], w3 = (ll)p * p, w2 = <span class=\"built_in\">min</span>((ll)lim, n / w3), d = n / p;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, w1) f2[i] -= f2[i * p] - x;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, w1 + <span class=\"number\">1</span>, w2) f2[i] -= f1[<span class=\"built_in\"><span class=\"keyword\">int</span></span>(d * inv[i] + Eps)] - x;</span><br><span class=\"line\">        <span class=\"built_in\">per</span>(i, lim, w3) f1[i] -= f1[<span class=\"built_in\"><span class=\"keyword\">int</span></span>(i * inv[p] + Eps)] - x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; f2[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"powerful-number-筛\">Powerful Number 筛</h3>\r\n<p>定义：所有质因子的指数都大于 <span class=\"math inline\">\\(1\\)</span> 的数叫 <code>Powerful Number</code>。</p>\r\n<p>性质：可以表示为 <span class=\"math inline\">\\(a^2b^3\\)</span>。</p>\r\n<blockquote>\r\n<p>引理：<span class=\"math inline\">\\(n\\)</span> 以内的 <code>Powerful Number</code> 的数量为 <span class=\"math inline\">\\(O(\\sqrt n)\\)</span> 级别。</p>\r\n<p>证明：根据性质，枚举 <span class=\"math inline\">\\(a\\)</span>，可以算出数量的上界： <span class=\"math display\">\\[\r\n\\sum_{i=1}^{\\sqrt n}\\sqrt[3] {\\frac n{a^2}} &lt; \\int_0^{\\sqrt n - 1}\\sqrt[3] {\\frac n{a^2}}da = 3n^\\frac 13(\\sqrt n - 1)^\\frac 13 &lt; 3\\sqrt n\r\n\\]</span></p>\r\n</blockquote>\r\n<p>一个想法：如果一个积性函数仅在 <code>Powerful Number</code> 处取值不为 <span class=\"math inline\">\\(0\\)</span>，那么与之相关的计算可能做到较低的复杂度。</p>\r\n<p>找到一个<strong>积性函数</strong> <span class=\"math inline\">\\(g(x)\\)</span> 满足 <span class=\"math inline\">\\(g(x)=f(x) (x \\in Prime)\\)</span>，设 <span class=\"math inline\">\\(f(x)=\\sum\\limits_{ab=x}g(a)h(b)\\)</span>，可知 <span class=\"math inline\">\\(h(x)\\)</span> 仅在 <code>Powerful Number</code> 处取值不为 <span class=\"math inline\">\\(0\\)</span>。</p>\r\n<p>首先预处理出 <span class=\"math inline\">\\(h(x)\\)</span> 在 <span class=\"math inline\">\\(p^k(p \\in Prime,k &gt; 1)\\)</span> 处的取值，这里可以做到 <span class=\"math inline\">\\(O(\\sqrt N)\\)</span>（无论 <span class=\"math inline\">\\(O(1)\\)</span> 算 <span class=\"math inline\">\\(h(p^k)\\)</span> 还是 <span class=\"math inline\">\\(O(k)\\)</span> 算都是这个复杂度）。</p>\r\n<p>于是 <span class=\"math display\">\\[\r\n\\sum_{i=1}^Nf(i)=\\sum_{ab \\le N}g(a)h(b)=\\sum_{b=1}^Nh(b)\\sum_{a=1}^{\\lfloor \\frac Na \\rfloor}g(a)\r\n\\]</span> 最后要求 <span class=\"math inline\">\\(g(x)\\)</span> 在 <span class=\"math inline\">\\(\\lfloor \\frac Na \\rfloor\\)</span> 的前缀和能快速求。</p>\r\n","site":{"data":{}},"length":3081,"excerpt":"","more":"<blockquote>\r\n<p>给定积性函数 <span class=\"math inline\">\\(f(x)\\)</span>，求 <span class=\"math inline\">\\(\\sum\\limits_{i=1}^Nf(i)\\)</span>。</p>\r\n</blockquote>\r\n<h3 id=\"杜教筛\">杜教筛</h3>\r\n<p>找到积性函数 <span class=\"math inline\">\\(g(x)\\)</span>，设 <span class=\"math inline\">\\(S(x) = \\sum\\limits_{i=1}^x f(i)\\)</span>，那么答案是 <span class=\"math inline\">\\(S(N)\\)</span>。</p>\r\n<p><strong>核心</strong>： <span class=\"math display\">\\[\r\ng(1)S(n) = \\sum\\limits_{i=1}^n (f*g)(i) - \\sum\\limits_{i=2}^n g(i)S(\\big\\lfloor \\dfrac n i \\big\\rfloor)\r\n\\]</span> 如果 <span class=\"math inline\">\\(g(x)\\)</span> 和 <span class=\"math inline\">\\((f*g)(x)\\)</span> 的前缀和很好求，就可以代这个公式递归。</p>\r\n<p><strong>需要记忆化</strong>。</p>\r\n<p>先欧拉筛出 <span class=\"math inline\">\\(S(1) - S(N^{\\frac 2 3})\\)</span>，对于其他会递归到的 <span class=\"math inline\">\\(S(x)\\)</span>，<span class=\"math inline\">\\(x\\)</span> 只可能是 <span class=\"math inline\">\\(\\big\\lfloor\\dfrac N i \\big \\rfloor\\)</span>，故可以用 <span class=\"math inline\">\\(F_i\\)</span> 存 <span class=\"math inline\">\\(S(x)\\)</span>。</p>\r\n<p>时空复杂度均为 <span class=\"math inline\">\\(O(n^{\\frac 2 3})\\)</span>。</p>\r\n<h3 id=\"min-25-筛\">Min-25 筛</h3>\r\n<p><span class=\"math inline\">\\(p_i\\)</span> 表示第 <span class=\"math inline\">\\(i\\)</span> 个质数，<span class=\"math inline\">\\(d_i\\)</span> 表示 <span class=\"math inline\">\\(i\\)</span> 的最小质因子。</p>\r\n<p><span class=\"math inline\">\\(S(n, i) = \\sum\\limits_{j = 2}^n [d_j &gt; p_i]f(j)\\)</span></p>\r\n<p>那么答案是 <span class=\"math inline\">\\(S(N, 0)\\)</span>。</p>\r\n<p>有递推 <span class=\"math inline\">\\(S(n, i) = \\sum\\limits_{j = i+1}^{p_j \\le n} f(p_j) + \\sum\\limits_{j = i+1}^{p_j^2 \\le n}\\sum\\limits_{k=1}^{p_j^k \\le n} f(p_j^k)(S(\\big\\lfloor \\dfrac n{p_j^k} \\big\\rfloor, j) + [k&gt;1])\\)</span>。</p>\r\n<p>如果 <span class=\"math inline\">\\(f(p^k)\\)</span> 和第一项很好求，那就可以递归到 <span class=\"math inline\">\\(0\\)</span>，而且<strong>无需记忆化</strong>。</p>\r\n<p>所以问题是求第一项。</p>\r\n<p>找一个完全积性函数 <span class=\"math inline\">\\(h(x)\\)</span> 满足 <span class=\"math inline\">\\(h(p) = f(p)\\)</span>。</p>\r\n<p>设 <span class=\"math inline\">\\(g(n, i) = \\sum\\limits_{j=2}^n [j \\in P \\lor d_j &gt; p_i]h(j)\\)</span></p>\r\n<p>有递推 <span class=\"math inline\">\\(g(n, i) = g(n, i - 1) - h(p_i)(g(\\big\\lfloor\\dfrac n {p_i} \\big\\rfloor, i - 1) - \\sum\\limits_{j=1}^{i-1}h(p_j))\\)</span>。</p>\r\n<p>减后面那项是因为 <span class=\"math inline\">\\(p_ip_j(j &lt; i)\\)</span> 的最小质因子不是 <span class=\"math inline\">\\(p_i\\)</span>。</p>\r\n<p>当 <span class=\"math inline\">\\(n &lt; p_i^2\\)</span> 时，<span class=\"math inline\">\\(g(n,i)=g(n,i-1)\\)</span>，即不需要转移。</p>\r\n<p>注意到 <span class=\"math inline\">\\(n\\)</span> 会取到的值一定是 <span class=\"math inline\">\\(\\big\\lfloor\\dfrac N i \\big \\rfloor\\)</span>，且 <span class=\"math inline\">\\(j \\le \\sqrt N\\)</span>。</p>\r\n<p>初始化 <span class=\"math inline\">\\(g(n, 0) = \\sum\\limits_{i=2}^n h(i)\\)</span>，<strong>注意 <span class=\"math inline\">\\(1\\)</span> 不算</strong>。</p>\r\n<p>然后从小到大枚举 <span class=\"math inline\">\\(j\\)</span>，开滚动数组存另一维，所以另一维需从大到小枚举计算。</p>\r\n<blockquote>\r\n<p>求 1 - n 的质数数量。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^{11}\\)</span></p>\r\n</blockquote>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">constexpr</span> <span class=\"keyword\">int</span> N = <span class=\"built_in\">sqrt</span>(<span class=\"number\">1e11</span>) + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\">ll n, f1[N], f2[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lim = <span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, lim) f1[i] = i - <span class=\"number\">1</span>, f2[i] = n / i - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(p, <span class=\"number\">2</span>, lim) <span class=\"keyword\">if</span> (f1[p] ^ f1[p - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> w1 = lim / p;</span><br><span class=\"line\">        ll x = f1[p - <span class=\"number\">1</span>], w3 = (ll)p * p, w2 = <span class=\"built_in\">min</span>((ll)lim, n / w3), d = n / p;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, w1) f2[i] -= f2[i * p] - x;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, w1 + <span class=\"number\">1</span>, w2) f2[i] -= f1[d / i] - x;</span><br><span class=\"line\">        <span class=\"built_in\">per</span>(i, lim, w3) f1[i] -= f1[i / p] - x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; f2[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"常数优化\">常数优化</h4>\r\n<p>由于 <code>double</code> 乘法快于 <code>long long</code> 乘法，可以预处理 <span class=\"math inline\">\\(1-\\sqrt n\\)</span> 的倒数。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">constexpr</span> <span class=\"keyword\">int</span> N = <span class=\"built_in\">sqrt</span>(<span class=\"number\">1e11</span>) + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> Eps = <span class=\"number\">1e-7</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\">ll n, f1[N], f2[N];</span><br><span class=\"line\"><span class=\"keyword\">double</span> inv[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lim = <span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, lim) f1[i] = i - <span class=\"number\">1</span>, f2[i] = n / i - <span class=\"number\">1</span>, inv[i] = <span class=\"number\">1.0</span> / i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(p, <span class=\"number\">2</span>, lim) <span class=\"keyword\">if</span> (f1[p] ^ f1[p - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> w1 = lim / p;</span><br><span class=\"line\">        ll x = f1[p - <span class=\"number\">1</span>], w3 = (ll)p * p, w2 = <span class=\"built_in\">min</span>((ll)lim, n / w3), d = n / p;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, w1) f2[i] -= f2[i * p] - x;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, w1 + <span class=\"number\">1</span>, w2) f2[i] -= f1[<span class=\"built_in\"><span class=\"keyword\">int</span></span>(d * inv[i] + Eps)] - x;</span><br><span class=\"line\">        <span class=\"built_in\">per</span>(i, lim, w3) f1[i] -= f1[<span class=\"built_in\"><span class=\"keyword\">int</span></span>(i * inv[p] + Eps)] - x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; f2[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"powerful-number-筛\">Powerful Number 筛</h3>\r\n<p>定义：所有质因子的指数都大于 <span class=\"math inline\">\\(1\\)</span> 的数叫 <code>Powerful Number</code>。</p>\r\n<p>性质：可以表示为 <span class=\"math inline\">\\(a^2b^3\\)</span>。</p>\r\n<blockquote>\r\n<p>引理：<span class=\"math inline\">\\(n\\)</span> 以内的 <code>Powerful Number</code> 的数量为 <span class=\"math inline\">\\(O(\\sqrt n)\\)</span> 级别。</p>\r\n<p>证明：根据性质，枚举 <span class=\"math inline\">\\(a\\)</span>，可以算出数量的上界： <span class=\"math display\">\\[\r\n\\sum_{i=1}^{\\sqrt n}\\sqrt[3] {\\frac n{a^2}} &lt; \\int_0^{\\sqrt n - 1}\\sqrt[3] {\\frac n{a^2}}da = 3n^\\frac 13(\\sqrt n - 1)^\\frac 13 &lt; 3\\sqrt n\r\n\\]</span></p>\r\n</blockquote>\r\n<p>一个想法：如果一个积性函数仅在 <code>Powerful Number</code> 处取值不为 <span class=\"math inline\">\\(0\\)</span>，那么与之相关的计算可能做到较低的复杂度。</p>\r\n<p>找到一个<strong>积性函数</strong> <span class=\"math inline\">\\(g(x)\\)</span> 满足 <span class=\"math inline\">\\(g(x)=f(x) (x \\in Prime)\\)</span>，设 <span class=\"math inline\">\\(f(x)=\\sum\\limits_{ab=x}g(a)h(b)\\)</span>，可知 <span class=\"math inline\">\\(h(x)\\)</span> 仅在 <code>Powerful Number</code> 处取值不为 <span class=\"math inline\">\\(0\\)</span>。</p>\r\n<p>首先预处理出 <span class=\"math inline\">\\(h(x)\\)</span> 在 <span class=\"math inline\">\\(p^k(p \\in Prime,k &gt; 1)\\)</span> 处的取值，这里可以做到 <span class=\"math inline\">\\(O(\\sqrt N)\\)</span>（无论 <span class=\"math inline\">\\(O(1)\\)</span> 算 <span class=\"math inline\">\\(h(p^k)\\)</span> 还是 <span class=\"math inline\">\\(O(k)\\)</span> 算都是这个复杂度）。</p>\r\n<p>于是 <span class=\"math display\">\\[\r\n\\sum_{i=1}^Nf(i)=\\sum_{ab \\le N}g(a)h(b)=\\sum_{b=1}^Nh(b)\\sum_{a=1}^{\\lfloor \\frac Na \\rfloor}g(a)\r\n\\]</span> 最后要求 <span class=\"math inline\">\\(g(x)\\)</span> 在 <span class=\"math inline\">\\(\\lfloor \\frac Na \\rfloor\\)</span> 的前缀和能快速求。</p>\r\n"},{"title":"关于康威生命游戏","date":"2021-03-13T13:36:41.000Z","updated":"2021-03-13T13:36:41.000Z","_content":"> [Play](https://playgameoflife.com/)\n>\n> 生命游戏中，对于任意细胞，规则如下：\n>\n> - 每个细胞有两种状态 - 存活或死亡，每个细胞与以自身为中心的周围**八格**细胞产生互动\n>\n> - 当前细胞为存活状态时，当周围的存活细胞低于2个时（不包含2个），该细胞变成死亡状态。（模拟生命数量稀少）\n>\n> - 当前细胞为存活状态时，当周围有2个或3个存活细胞时，该细胞保持原样。\n>\n> - 当前细胞为存活状态时，当周围有超过3个存活细胞时，该细胞变成死亡状态。（模拟生命数量过多）\n>\n> - 当前细胞为死亡状态时，当周围有3个存活细胞时，该细胞变成存活状态。（模拟繁殖）\n>\n>   按规则处理当前的细胞图，可以得到下一代的细胞图，周而复始。\n\n\n我的一些发现。\n1. 核心元件：结构简单，演变 230 轮。  \n```plain\n  ■   ■\n■ ■ ■ ■\n  ■   ■\n```\n\n2. 循环周期优美的元件：  \n```plain\n  ■   ■          ■   ■\n■ ■ ■ ■  3 格  ■ ■ ■ ■\n  ■   ■          ■   ■\n```\n\n3. 演变 650 轮（放 4 个滑翔机）的元件：\n```plain\n  ■   ■          ■   ■\n■ ■ ■ ■  7 格  ■ ■ ■ ■\n  ■   ■          ■   ■\n```\n\n4. 演变 2500 轮（放 20 个滑翔机）的元件：\n```plain\n  ■   ■          ■   ■\n■ ■ ■ ■ 10 格  ■ ■ ■ ■\n  ■   ■          ■   ■\n```\n\n5. 有点长的循环周期：\n```plain\n   ■    ■           ■   ■\n   ■ ■ ■ ■  2 格  ■ ■ ■ ■\n   ■    ■           ■   ■\n```","source":"_posts/guan-yu-xi-bao-zi-dong-ji-kang-wei-sheng-ming-you-xi.md","raw":"---\ntitle: 关于康威生命游戏\ndate: 2021-03-13 21:36:41\nupdated: 2021-03-13 21:36:41\ntags: []\n---\n> [Play](https://playgameoflife.com/)\n>\n> 生命游戏中，对于任意细胞，规则如下：\n>\n> - 每个细胞有两种状态 - 存活或死亡，每个细胞与以自身为中心的周围**八格**细胞产生互动\n>\n> - 当前细胞为存活状态时，当周围的存活细胞低于2个时（不包含2个），该细胞变成死亡状态。（模拟生命数量稀少）\n>\n> - 当前细胞为存活状态时，当周围有2个或3个存活细胞时，该细胞保持原样。\n>\n> - 当前细胞为存活状态时，当周围有超过3个存活细胞时，该细胞变成死亡状态。（模拟生命数量过多）\n>\n> - 当前细胞为死亡状态时，当周围有3个存活细胞时，该细胞变成存活状态。（模拟繁殖）\n>\n>   按规则处理当前的细胞图，可以得到下一代的细胞图，周而复始。\n\n\n我的一些发现。\n1. 核心元件：结构简单，演变 230 轮。  \n```plain\n  ■   ■\n■ ■ ■ ■\n  ■   ■\n```\n\n2. 循环周期优美的元件：  \n```plain\n  ■   ■          ■   ■\n■ ■ ■ ■  3 格  ■ ■ ■ ■\n  ■   ■          ■   ■\n```\n\n3. 演变 650 轮（放 4 个滑翔机）的元件：\n```plain\n  ■   ■          ■   ■\n■ ■ ■ ■  7 格  ■ ■ ■ ■\n  ■   ■          ■   ■\n```\n\n4. 演变 2500 轮（放 20 个滑翔机）的元件：\n```plain\n  ■   ■          ■   ■\n■ ■ ■ ■ 10 格  ■ ■ ■ ■\n  ■   ■          ■   ■\n```\n\n5. 有点长的循环周期：\n```plain\n   ■    ■           ■   ■\n   ■ ■ ■ ■  2 格  ■ ■ ■ ■\n   ■    ■           ■   ■\n```","slug":"guan-yu-xi-bao-zi-dong-ji-kang-wei-sheng-ming-you-xi","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh0j002pootn6jdncae6","content":"<blockquote>\r\n<p><a href=\"https://playgameoflife.com/\">Play</a></p>\r\n<p>生命游戏中，对于任意细胞，规则如下：</p>\r\n<ul>\r\n<li><p>每个细胞有两种状态 - 存活或死亡，每个细胞与以自身为中心的周围<strong>八格</strong>细胞产生互动</p></li>\r\n<li><p>当前细胞为存活状态时，当周围的存活细胞低于2个时（不包含2个），该细胞变成死亡状态。（模拟生命数量稀少）</p></li>\r\n<li><p>当前细胞为存活状态时，当周围有2个或3个存活细胞时，该细胞保持原样。</p></li>\r\n<li><p>当前细胞为存活状态时，当周围有超过3个存活细胞时，该细胞变成死亡状态。（模拟生命数量过多）</p></li>\r\n<li><p>当前细胞为死亡状态时，当周围有3个存活细胞时，该细胞变成存活状态。（模拟繁殖）</p>\r\n<p>按规则处理当前的细胞图，可以得到下一代的细胞图，周而复始。</p></li>\r\n</ul>\r\n</blockquote>\r\n<p>我的一些发现。 1. 核心元件：结构简单，演变 230 轮。<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  ■   ■</span><br><span class=\"line\">■ ■ ■ ■</span><br><span class=\"line\">  ■   ■</span><br></pre></td></tr></table></figure></p>\r\n<ol start=\"2\" type=\"1\">\r\n<li><p>循环周期优美的元件：<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  ■   ■          ■   ■</span><br><span class=\"line\">■ ■ ■ ■  3 格  ■ ■ ■ ■</span><br><span class=\"line\">  ■   ■          ■   ■</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>演变 650 轮（放 4 个滑翔机）的元件： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  ■   ■          ■   ■</span><br><span class=\"line\">■ ■ ■ ■  7 格  ■ ■ ■ ■</span><br><span class=\"line\">  ■   ■          ■   ■</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>演变 2500 轮（放 20 个滑翔机）的元件： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  ■   ■          ■   ■</span><br><span class=\"line\">■ ■ ■ ■ 10 格  ■ ■ ■ ■</span><br><span class=\"line\">  ■   ■          ■   ■</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>有点长的循环周期： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">■    ■           ■   ■</span><br><span class=\"line\">■ ■ ■ ■  2 格  ■ ■ ■ ■</span><br><span class=\"line\">■    ■           ■   ■</span><br></pre></td></tr></table></figure></p></li>\r\n</ol>\r\n","site":{"data":{}},"length":438,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"https://playgameoflife.com/\">Play</a></p>\r\n<p>生命游戏中，对于任意细胞，规则如下：</p>\r\n<ul>\r\n<li><p>每个细胞有两种状态 - 存活或死亡，每个细胞与以自身为中心的周围<strong>八格</strong>细胞产生互动</p></li>\r\n<li><p>当前细胞为存活状态时，当周围的存活细胞低于2个时（不包含2个），该细胞变成死亡状态。（模拟生命数量稀少）</p></li>\r\n<li><p>当前细胞为存活状态时，当周围有2个或3个存活细胞时，该细胞保持原样。</p></li>\r\n<li><p>当前细胞为存活状态时，当周围有超过3个存活细胞时，该细胞变成死亡状态。（模拟生命数量过多）</p></li>\r\n<li><p>当前细胞为死亡状态时，当周围有3个存活细胞时，该细胞变成存活状态。（模拟繁殖）</p>\r\n<p>按规则处理当前的细胞图，可以得到下一代的细胞图，周而复始。</p></li>\r\n</ul>\r\n</blockquote>\r\n<p>我的一些发现。 1. 核心元件：结构简单，演变 230 轮。<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  ■   ■</span><br><span class=\"line\">■ ■ ■ ■</span><br><span class=\"line\">  ■   ■</span><br></pre></td></tr></table></figure></p>\r\n<ol start=\"2\" type=\"1\">\r\n<li><p>循环周期优美的元件：<br />\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  ■   ■          ■   ■</span><br><span class=\"line\">■ ■ ■ ■  3 格  ■ ■ ■ ■</span><br><span class=\"line\">  ■   ■          ■   ■</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>演变 650 轮（放 4 个滑翔机）的元件： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  ■   ■          ■   ■</span><br><span class=\"line\">■ ■ ■ ■  7 格  ■ ■ ■ ■</span><br><span class=\"line\">  ■   ■          ■   ■</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>演变 2500 轮（放 20 个滑翔机）的元件： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  ■   ■          ■   ■</span><br><span class=\"line\">■ ■ ■ ■ 10 格  ■ ■ ■ ■</span><br><span class=\"line\">  ■   ■          ■   ■</span><br></pre></td></tr></table></figure></p></li>\r\n<li><p>有点长的循环周期： <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">■    ■           ■   ■</span><br><span class=\"line\">■ ■ ■ ■  2 格  ■ ■ ■ ■</span><br><span class=\"line\">■    ■           ■   ■</span><br></pre></td></tr></table></figure></p></li>\r\n</ol>\r\n"},{"title":"Gridea C++ 高亮代码块折叠","date":"2021-08-23T10:53:32.000Z","updated":"2021-08-23T10:53:32.000Z","hidden":true,"_content":"代码全部平铺在页面上有点影响阅读，想将代码块折叠起来。\n\n在网上找到了内嵌 `html` 代码来实现折叠，但不支持语法高亮，我找到了一种仅适用于 `Gridea` 博客的方法来实现 `C++` 语法高亮，如下：\n\n```plain\n<details><summary>查看代码</summary>\n<pre><code class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;<br>\nint main() {\n    int a, b;\n    scanf(\"%d%d\", &a, &b);\n    printf(\"%d\\n\", a + b);\n}\n</code></pre></details>\n```\n\n`C++` 代码不能直接粘中间，需要进行两个改动：\n\n- 把 `<` 替换成 `&lt;`，`>` 替换成 `&gt;`。\n\n- 对于每一个空行，在上一个非空行的结尾加上 `<br>` 并删除该空行。\n\n我在下面提供了一个把 `markdown` 源码中所有或指定的代码块替换成折叠型的小工具。\n\n实际效果\n\n<details><summary>查看代码</summary>\n<pre><code class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;<br>\nint main() {\n    int a, b;\n    scanf(\"%d%d\", &a, &b);\n    printf(\"%d\\n\", a + b);\n}\n</code></pre></details>\n\n<details><summary><span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">小工具</span></summary><pre><code class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;<br>\nusing namespace std;<br>\nint main(int argc, char* argv[]) {\n    if(argc &lt; 3) exit(0);\n    freopen(argv[1], \"r\", stdin), freopen(argv[2], \"w\", stdout);\n    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n    set&lt;int&gt; rows;\n    int tmp;\n    for(int i = 3; i &lt; argc; i++) sscanf(argv[i], \"%d\", &tmp), rows.insert(tmp);\n    string str, CodeBlock;\n    bool isCodeBlock = false;\n    for(int row = 1; getline(cin, str); row++)\n    if(isCodeBlock) {\n        if(str == \"```\") cout &lt;&lt; CodeBlock + \"&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;\\n\", isCodeBlock = false;\n        else if(str == \"\") CodeBlock.insert(CodeBlock.size() - (CodeBlock.back() == '\\n'), \"&lt;br&gt;\");\n        else {\n            for(char ch : str) if(ch == '&lt;') CodeBlock += \"&lt;\";\n            else if(ch == '&gt;') CodeBlock += \"&gt;\";\n            else CodeBlock += ch;\n            CodeBlock += '\\n';\n        }\n    } else {\n        if(str == \"```cpp\" && (argc == 3 || rows.count(row)))\n            CodeBlock = \"&lt;details&gt;&lt;summary&gt;&lt;span style=\\\"font-size: large; font-weight: bold; color: rgb(33,150,243);\\\"&gt;查看代码&lt;/span&gt;&lt;/summary&gt;&lt;pre&gt;&lt;code class=\\\"language-cpp\\\"&gt;\", isCodeBlock = true;\n        else cout &lt;&lt; str &lt;&lt; '\\n';\n    }\n}\n</code></pre></details>\n\n假设小工具被保存为 `tool.cpp`，编译后可以在命令行中使用。\n\n- `tool <input-file> <output-file>`，其中 `<input-file>` 为 `markdown` 源文件，`<output-file>` 为处理后的文件，会将所有的 `cpp` 代码块换成折叠代码块。\n\n- `tool <input-file> <output-file> row1 row2 row3 ...`，其中第 `row1`，`row2`，`row3`，... 行必须是 ` ```cpp `，将指定的代码块换成折叠代码块。\n","source":"_posts/gridea-c-gao-liang-dai-ma-kuai-zhe-die.md","raw":"---\ntitle: Gridea C++ 高亮代码块折叠\ndate: 2021-08-23 18:53:32\nupdated: 2021-08-23 18:53:32\ntags: []\nhidden: true\n---\n代码全部平铺在页面上有点影响阅读，想将代码块折叠起来。\n\n在网上找到了内嵌 `html` 代码来实现折叠，但不支持语法高亮，我找到了一种仅适用于 `Gridea` 博客的方法来实现 `C++` 语法高亮，如下：\n\n```plain\n<details><summary>查看代码</summary>\n<pre><code class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;<br>\nint main() {\n    int a, b;\n    scanf(\"%d%d\", &a, &b);\n    printf(\"%d\\n\", a + b);\n}\n</code></pre></details>\n```\n\n`C++` 代码不能直接粘中间，需要进行两个改动：\n\n- 把 `<` 替换成 `&lt;`，`>` 替换成 `&gt;`。\n\n- 对于每一个空行，在上一个非空行的结尾加上 `<br>` 并删除该空行。\n\n我在下面提供了一个把 `markdown` 源码中所有或指定的代码块替换成折叠型的小工具。\n\n实际效果\n\n<details><summary>查看代码</summary>\n<pre><code class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;<br>\nint main() {\n    int a, b;\n    scanf(\"%d%d\", &a, &b);\n    printf(\"%d\\n\", a + b);\n}\n</code></pre></details>\n\n<details><summary><span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">小工具</span></summary><pre><code class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;<br>\nusing namespace std;<br>\nint main(int argc, char* argv[]) {\n    if(argc &lt; 3) exit(0);\n    freopen(argv[1], \"r\", stdin), freopen(argv[2], \"w\", stdout);\n    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n    set&lt;int&gt; rows;\n    int tmp;\n    for(int i = 3; i &lt; argc; i++) sscanf(argv[i], \"%d\", &tmp), rows.insert(tmp);\n    string str, CodeBlock;\n    bool isCodeBlock = false;\n    for(int row = 1; getline(cin, str); row++)\n    if(isCodeBlock) {\n        if(str == \"```\") cout &lt;&lt; CodeBlock + \"&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;\\n\", isCodeBlock = false;\n        else if(str == \"\") CodeBlock.insert(CodeBlock.size() - (CodeBlock.back() == '\\n'), \"&lt;br&gt;\");\n        else {\n            for(char ch : str) if(ch == '&lt;') CodeBlock += \"&lt;\";\n            else if(ch == '&gt;') CodeBlock += \"&gt;\";\n            else CodeBlock += ch;\n            CodeBlock += '\\n';\n        }\n    } else {\n        if(str == \"```cpp\" && (argc == 3 || rows.count(row)))\n            CodeBlock = \"&lt;details&gt;&lt;summary&gt;&lt;span style=\\\"font-size: large; font-weight: bold; color: rgb(33,150,243);\\\"&gt;查看代码&lt;/span&gt;&lt;/summary&gt;&lt;pre&gt;&lt;code class=\\\"language-cpp\\\"&gt;\", isCodeBlock = true;\n        else cout &lt;&lt; str &lt;&lt; '\\n';\n    }\n}\n</code></pre></details>\n\n假设小工具被保存为 `tool.cpp`，编译后可以在命令行中使用。\n\n- `tool <input-file> <output-file>`，其中 `<input-file>` 为 `markdown` 源文件，`<output-file>` 为处理后的文件，会将所有的 `cpp` 代码块换成折叠代码块。\n\n- `tool <input-file> <output-file> row1 row2 row3 ...`，其中第 `row1`，`row2`，`row3`，... 行必须是 ` ```cpp `，将指定的代码块换成折叠代码块。\n","slug":"gridea-c-gao-liang-dai-ma-kuai-zhe-die","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh0l002rootngylu202a","content":"<p>代码全部平铺在页面上有点影响阅读，想将代码块折叠起来。</p>\r\n<p>在网上找到了内嵌 <code>html</code> 代码来实现折叠，但不支持语法高亮，我找到了一种仅适用于 <code>Gridea</code> 博客的方法来实现 <code>C++</code> 语法高亮，如下：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;details&gt;&lt;summary&gt;查看代码&lt;/summary&gt;</span><br><span class=\"line\">&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;#include &amp;lt;bits/stdc++.h&amp;gt;&lt;br&gt;</span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    int a, b;</span><br><span class=\"line\">    scanf(&quot;%d%d&quot;, &amp;a, &amp;b);</span><br><span class=\"line\">    printf(&quot;%d\\n&quot;, a + b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;</span><br></pre></td></tr></table></figure>\r\n<p><code>C++</code> 代码不能直接粘中间，需要进行两个改动：</p>\r\n<ul>\r\n<li><p>把 <code>&lt;</code> 替换成 <code>&amp;lt;</code>，<code>&gt;</code> 替换成 <code>&amp;gt;</code>。</p></li>\r\n<li><p>对于每一个空行，在上一个非空行的结尾加上 <code>&lt;br&gt;</code> 并删除该空行。</p></li>\r\n</ul>\r\n<p>我在下面提供了一个把 <code>markdown</code> 源码中所有或指定的代码块替换成折叠型的小工具。</p>\r\n<p>实际效果</p>\r\n<details>\r\n<summary>\r\n查看代码\r\n</summary>\r\n<pre><code class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;<br>\r\nint main() &#123;\r\n    int a, b;\r\n    scanf(\"%d%d\", &a, &b);\r\n    printf(\"%d\\n\", a + b);\r\n&#125;\r\n</code></pre>\r\n</details>\r\n<details>\r\n<summary>\r\n<span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">小工具</span>\r\n</summary>\r\n<pre><code class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;<br>\r\nusing namespace std;<br>\r\nint main(int argc, char* argv[]) &#123;\r\n    if(argc &lt; 3) exit(0);\r\n    freopen(argv[1], \"r\", stdin), freopen(argv[2], \"w\", stdout);\r\n    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\r\n    set&lt;int&gt; rows;\r\n    int tmp;\r\n    for(int i = 3; i &lt; argc; i++) sscanf(argv[i], \"%d\", &tmp), rows.insert(tmp);\r\n    string str, CodeBlock;\r\n    bool isCodeBlock = false;\r\n    for(int row = 1; getline(cin, str); row++)\r\n    if(isCodeBlock) &#123;\r\n        if(str == \"```\") cout &lt;&lt; CodeBlock + \"&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;\\n\", isCodeBlock = false;\r\n        else if(str == \"\") CodeBlock.insert(CodeBlock.size() - (CodeBlock.back() == '\\n'), \"&lt;br&gt;\");\r\n        else &#123;\r\n            for(char ch : str) if(ch == '&lt;') CodeBlock += \"&lt;\";\r\n            else if(ch == '&gt;') CodeBlock += \"&gt;\";\r\n            else CodeBlock += ch;\r\n            CodeBlock += '\\n';\r\n        &#125;\r\n    &#125; else &#123;\r\n        if(str == \"```cpp\" && (argc == 3 || rows.count(row)))\r\n            CodeBlock = \"&lt;details&gt;&lt;summary&gt;&lt;span style=\\\"font-size: large; font-weight: bold; color: rgb(33,150,243);\\\"&gt;查看代码&lt;/span&gt;&lt;/summary&gt;&lt;pre&gt;&lt;code class=\\\"language-cpp\\\"&gt;\", isCodeBlock = true;\r\n        else cout &lt;&lt; str &lt;&lt; '\\n';\r\n    &#125;\r\n&#125;\r\n</code></pre>\r\n</details>\r\n<p>假设小工具被保存为 <code>tool.cpp</code>，编译后可以在命令行中使用。</p>\r\n<ul>\r\n<li><p><code>tool &lt;input-file&gt; &lt;output-file&gt;</code>，其中 <code>&lt;input-file&gt;</code> 为 <code>markdown</code> 源文件，<code>&lt;output-file&gt;</code> 为处理后的文件，会将所有的 <code>cpp</code> 代码块换成折叠代码块。</p></li>\r\n<li><p><code>tool &lt;input-file&gt; &lt;output-file&gt; row1 row2 row3 ...</code>，其中第 <code>row1</code>，<code>row2</code>，<code>row3</code>，... 行必须是 <code>```cpp</code>，将指定的代码块换成折叠代码块。</p></li>\r\n</ul>\r\n<!-- flag of hidden posts -->","site":{"data":{}},"length":1919,"excerpt":"","more":"<p>代码全部平铺在页面上有点影响阅读，想将代码块折叠起来。</p>\r\n<p>在网上找到了内嵌 <code>html</code> 代码来实现折叠，但不支持语法高亮，我找到了一种仅适用于 <code>Gridea</code> 博客的方法来实现 <code>C++</code> 语法高亮，如下：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;details&gt;&lt;summary&gt;查看代码&lt;/summary&gt;</span><br><span class=\"line\">&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;#include &amp;lt;bits/stdc++.h&amp;gt;&lt;br&gt;</span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    int a, b;</span><br><span class=\"line\">    scanf(&quot;%d%d&quot;, &amp;a, &amp;b);</span><br><span class=\"line\">    printf(&quot;%d\\n&quot;, a + b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;</span><br></pre></td></tr></table></figure>\r\n<p><code>C++</code> 代码不能直接粘中间，需要进行两个改动：</p>\r\n<ul>\r\n<li><p>把 <code>&lt;</code> 替换成 <code>&amp;lt;</code>，<code>&gt;</code> 替换成 <code>&amp;gt;</code>。</p></li>\r\n<li><p>对于每一个空行，在上一个非空行的结尾加上 <code>&lt;br&gt;</code> 并删除该空行。</p></li>\r\n</ul>\r\n<p>我在下面提供了一个把 <code>markdown</code> 源码中所有或指定的代码块替换成折叠型的小工具。</p>\r\n<p>实际效果</p>\r\n<details>\r\n<summary>\r\n查看代码\r\n</summary>\r\n<pre><code class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;<br>\r\nint main() &#123;\r\n    int a, b;\r\n    scanf(\"%d%d\", &a, &b);\r\n    printf(\"%d\\n\", a + b);\r\n&#125;\r\n</code></pre>\r\n</details>\r\n<details>\r\n<summary>\r\n<span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">小工具</span>\r\n</summary>\r\n<pre><code class=\"language-cpp\">#include &lt;bits/stdc++.h&gt;<br>\r\nusing namespace std;<br>\r\nint main(int argc, char* argv[]) &#123;\r\n    if(argc &lt; 3) exit(0);\r\n    freopen(argv[1], \"r\", stdin), freopen(argv[2], \"w\", stdout);\r\n    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\r\n    set&lt;int&gt; rows;\r\n    int tmp;\r\n    for(int i = 3; i &lt; argc; i++) sscanf(argv[i], \"%d\", &tmp), rows.insert(tmp);\r\n    string str, CodeBlock;\r\n    bool isCodeBlock = false;\r\n    for(int row = 1; getline(cin, str); row++)\r\n    if(isCodeBlock) &#123;\r\n        if(str == \"```\") cout &lt;&lt; CodeBlock + \"&lt;/code&gt;&lt;/pre&gt;&lt;/details&gt;\\n\", isCodeBlock = false;\r\n        else if(str == \"\") CodeBlock.insert(CodeBlock.size() - (CodeBlock.back() == '\\n'), \"&lt;br&gt;\");\r\n        else &#123;\r\n            for(char ch : str) if(ch == '&lt;') CodeBlock += \"&lt;\";\r\n            else if(ch == '&gt;') CodeBlock += \"&gt;\";\r\n            else CodeBlock += ch;\r\n            CodeBlock += '\\n';\r\n        &#125;\r\n    &#125; else &#123;\r\n        if(str == \"```cpp\" && (argc == 3 || rows.count(row)))\r\n            CodeBlock = \"&lt;details&gt;&lt;summary&gt;&lt;span style=\\\"font-size: large; font-weight: bold; color: rgb(33,150,243);\\\"&gt;查看代码&lt;/span&gt;&lt;/summary&gt;&lt;pre&gt;&lt;code class=\\\"language-cpp\\\"&gt;\", isCodeBlock = true;\r\n        else cout &lt;&lt; str &lt;&lt; '\\n';\r\n    &#125;\r\n&#125;\r\n</code></pre>\r\n</details>\r\n<p>假设小工具被保存为 <code>tool.cpp</code>，编译后可以在命令行中使用。</p>\r\n<ul>\r\n<li><p><code>tool &lt;input-file&gt; &lt;output-file&gt;</code>，其中 <code>&lt;input-file&gt;</code> 为 <code>markdown</code> 源文件，<code>&lt;output-file&gt;</code> 为处理后的文件，会将所有的 <code>cpp</code> 代码块换成折叠代码块。</p></li>\r\n<li><p><code>tool &lt;input-file&gt; &lt;output-file&gt; row1 row2 row3 ...</code>，其中第 <code>row1</code>，<code>row2</code>，<code>row3</code>，... 行必须是 <code>```cpp</code>，将指定的代码块换成折叠代码块。</p></li>\r\n</ul>\r\n"},{"title":"基于 std::streambuf 的 Fast IO 模板","date":"2021-03-13T14:22:39.000Z","updated":"2021-03-13T14:22:39.000Z","_content":"### 读入输出非负整数版\n\n```cpp\nint read() {\n    const int M = 1e6;\n    static streambuf* in = cin.rdbuf();\n    #define gc (p1 == p2 && (p2 = (p1 = buf) + in -> sgetn(buf, M), p1 == p2) ? -1 : *p1++)\n    static char buf[M], *p1, *p2;\n    int c = gc, r = 0;\n    while(c < 48) c = gc;\n    while(c > 47) r = r * 10 + (c & 15), c = gc;\n    return r;\n}\nvoid wrt(int x) {\n    static streambuf* out = cout.rdbuf();\n    #define pc out -> sputc\n    static char c[11]; int sz = 0;\n    do c[++sz] = x % 10, x /= 10; while(x);\n    while(sz) pc(c[sz--] + 48);\n    pc(10);\n}\n```\n\n**注：```main``` 函数开头请加入这 $3$ 句话**\n\n```cpp\nios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n```\n\n其实后两句可以选择性添加，见文末。\n\n**不可与  ```cin, cout, scanf, printf, gets, puts, getchar, putchar``` 等其他读入输出方式同时使用**\n\n其实也不是全部不能同时使用，见文末。\n\n**```read``` 函数只能通过文件输入或者标准输入完后按 ```Ctrl + Z``` （仅 ```WIN 10```）。**\n\n### 读入输出整数版\n\n```cpp\nint read() {\n    const int M = 1e6;\n    static streambuf* in = cin.rdbuf();\n    #define gc (p1 == p2 && (p2 = (p1 = buf) + in -> sgetn(buf, M), p1 == p2) ? -1 : *p1++)\n    static char buf[M], *p1, *p2;\n    int c = gc, r = 0, f = 1;\n    while(c < 48) { if(c == 45) f = -1; c = gc; }\n    while(c > 47) r = r * 10 + (c & 15), c = gc;\n    return r * f;\n}\nvoid wrt(int x) {\n    static streambuf* out = cout.rdbuf();\n    #define pc out -> sputc\n    static char c[11]; int sz = 0;\n    if(x < 0) pc(45), x = -x;\n    do c[++sz] = x % 10, x /= 10; while(x);\n    while(sz) pc(c[sz--] + 48);\n    pc(10);\n}\n```\n\n**注：输出 ```long long``` 时 ```wrt``` 函数中的 ```c``` 数组大小要开到 $20$。**\n\n### 文末补充\n\n- 在使用 ```read``` 函数时要加 ```cin.tie(0)```，在使用 ```wrt``` 函数时要加 ```cout.tie(0)```，但 ```ios::sync_with_stdio(0)``` **必须加。**\n\n- 两个函数不可与 ```scanf, printf, gets, puts, getchar, putchar``` 等 ```stdio``` 的读入输出方式同时使用。\n\n  在 ```read``` 函数第一次调用前可以随便使用 ```cin``` 等 ```streambuf```  的读入方式。\n\n   ```wrt``` 函数可以与 ```cout``` 等 ```streambuf```  的输出方式随便交叉使用。","source":"_posts/ji-yu-stdstreambuf-de-fast-io-mo-ban.md","raw":"---\ntitle: 基于 std::streambuf 的 Fast IO 模板\ndate: 2021-03-13 22:22:39\nupdated: 2021-03-13 22:22:39\ntags: [模板]\n---\n### 读入输出非负整数版\n\n```cpp\nint read() {\n    const int M = 1e6;\n    static streambuf* in = cin.rdbuf();\n    #define gc (p1 == p2 && (p2 = (p1 = buf) + in -> sgetn(buf, M), p1 == p2) ? -1 : *p1++)\n    static char buf[M], *p1, *p2;\n    int c = gc, r = 0;\n    while(c < 48) c = gc;\n    while(c > 47) r = r * 10 + (c & 15), c = gc;\n    return r;\n}\nvoid wrt(int x) {\n    static streambuf* out = cout.rdbuf();\n    #define pc out -> sputc\n    static char c[11]; int sz = 0;\n    do c[++sz] = x % 10, x /= 10; while(x);\n    while(sz) pc(c[sz--] + 48);\n    pc(10);\n}\n```\n\n**注：```main``` 函数开头请加入这 $3$ 句话**\n\n```cpp\nios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n```\n\n其实后两句可以选择性添加，见文末。\n\n**不可与  ```cin, cout, scanf, printf, gets, puts, getchar, putchar``` 等其他读入输出方式同时使用**\n\n其实也不是全部不能同时使用，见文末。\n\n**```read``` 函数只能通过文件输入或者标准输入完后按 ```Ctrl + Z``` （仅 ```WIN 10```）。**\n\n### 读入输出整数版\n\n```cpp\nint read() {\n    const int M = 1e6;\n    static streambuf* in = cin.rdbuf();\n    #define gc (p1 == p2 && (p2 = (p1 = buf) + in -> sgetn(buf, M), p1 == p2) ? -1 : *p1++)\n    static char buf[M], *p1, *p2;\n    int c = gc, r = 0, f = 1;\n    while(c < 48) { if(c == 45) f = -1; c = gc; }\n    while(c > 47) r = r * 10 + (c & 15), c = gc;\n    return r * f;\n}\nvoid wrt(int x) {\n    static streambuf* out = cout.rdbuf();\n    #define pc out -> sputc\n    static char c[11]; int sz = 0;\n    if(x < 0) pc(45), x = -x;\n    do c[++sz] = x % 10, x /= 10; while(x);\n    while(sz) pc(c[sz--] + 48);\n    pc(10);\n}\n```\n\n**注：输出 ```long long``` 时 ```wrt``` 函数中的 ```c``` 数组大小要开到 $20$。**\n\n### 文末补充\n\n- 在使用 ```read``` 函数时要加 ```cin.tie(0)```，在使用 ```wrt``` 函数时要加 ```cout.tie(0)```，但 ```ios::sync_with_stdio(0)``` **必须加。**\n\n- 两个函数不可与 ```scanf, printf, gets, puts, getchar, putchar``` 等 ```stdio``` 的读入输出方式同时使用。\n\n  在 ```read``` 函数第一次调用前可以随便使用 ```cin``` 等 ```streambuf```  的读入方式。\n\n   ```wrt``` 函数可以与 ```cout``` 等 ```streambuf```  的输出方式随便交叉使用。","slug":"ji-yu-stdstreambuf-de-fast-io-mo-ban","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh0m002uootncaw3crja","content":"<h3 id=\"读入输出非负整数版\">读入输出非负整数版</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> M = <span class=\"number\">1e6</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> streambuf* in = cin.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + in -&gt; sgetn(buf, M), p1 == p2) ? -1 : *p1++)</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> buf[M], *p1, *p2;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = gc, r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &lt; <span class=\"number\">48</span>) c = gc;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &gt; <span class=\"number\">47</span>) r = r * <span class=\"number\">10</span> + (c &amp; <span class=\"number\">15</span>), c = gc;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">wrt</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> streambuf* out = cout.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc out -&gt; sputc</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> c[<span class=\"number\">11</span>]; <span class=\"keyword\">int</span> sz = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> c[++sz] = x % <span class=\"number\">10</span>, x /= <span class=\"number\">10</span>; <span class=\"keyword\">while</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(sz) <span class=\"built_in\">pc</span>(c[sz--] + <span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"built_in\">pc</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>注：<code>main</code> 函数开头请加入这 <span class=\"math inline\">\\(3\\)</span> 句话</strong></p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\r\n<p>其实后两句可以选择性添加，见文末。</p>\r\n<p><strong>不可与 <code>cin, cout, scanf, printf, gets, puts, getchar, putchar</code> 等其他读入输出方式同时使用</strong></p>\r\n<p>其实也不是全部不能同时使用，见文末。</p>\r\n<p><strong><code>read</code> 函数只能通过文件输入或者标准输入完后按 <code>Ctrl + Z</code> （仅 <code>WIN 10</code>）。</strong></p>\r\n<h3 id=\"读入输出整数版\">读入输出整数版</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> M = <span class=\"number\">1e6</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> streambuf* in = cin.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + in -&gt; sgetn(buf, M), p1 == p2) ? -1 : *p1++)</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> buf[M], *p1, *p2;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = gc, r = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &lt; <span class=\"number\">48</span>) &#123; <span class=\"keyword\">if</span>(c == <span class=\"number\">45</span>) f = <span class=\"number\">-1</span>; c = gc; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &gt; <span class=\"number\">47</span>) r = r * <span class=\"number\">10</span> + (c &amp; <span class=\"number\">15</span>), c = gc;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">wrt</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> streambuf* out = cout.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc out -&gt; sputc</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> c[<span class=\"number\">11</span>]; <span class=\"keyword\">int</span> sz = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>) <span class=\"built_in\">pc</span>(<span class=\"number\">45</span>), x = -x;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> c[++sz] = x % <span class=\"number\">10</span>, x /= <span class=\"number\">10</span>; <span class=\"keyword\">while</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(sz) <span class=\"built_in\">pc</span>(c[sz--] + <span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"built_in\">pc</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>注：输出 <code>long long</code> 时 <code>wrt</code> 函数中的 <code>c</code> 数组大小要开到 <span class=\"math inline\">\\(20\\)</span>。</strong></p>\r\n<h3 id=\"文末补充\">文末补充</h3>\r\n<ul>\r\n<li><p>在使用 <code>read</code> 函数时要加 <code>cin.tie(0)</code>，在使用 <code>wrt</code> 函数时要加 <code>cout.tie(0)</code>，但 <code>ios::sync_with_stdio(0)</code> <strong>必须加。</strong></p></li>\r\n<li><p>两个函数不可与 <code>scanf, printf, gets, puts, getchar, putchar</code> 等 <code>stdio</code> 的读入输出方式同时使用。</p>\r\n<p>在 <code>read</code> 函数第一次调用前可以随便使用 <code>cin</code> 等 <code>streambuf</code> 的读入方式。</p>\r\n<p><code>wrt</code> 函数可以与 <code>cout</code> 等 <code>streambuf</code> 的输出方式随便交叉使用。</p></li>\r\n</ul>\r\n","site":{"data":{}},"length":1395,"excerpt":"","more":"<h3 id=\"读入输出非负整数版\">读入输出非负整数版</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> M = <span class=\"number\">1e6</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> streambuf* in = cin.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + in -&gt; sgetn(buf, M), p1 == p2) ? -1 : *p1++)</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> buf[M], *p1, *p2;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = gc, r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &lt; <span class=\"number\">48</span>) c = gc;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &gt; <span class=\"number\">47</span>) r = r * <span class=\"number\">10</span> + (c &amp; <span class=\"number\">15</span>), c = gc;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">wrt</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> streambuf* out = cout.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc out -&gt; sputc</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> c[<span class=\"number\">11</span>]; <span class=\"keyword\">int</span> sz = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> c[++sz] = x % <span class=\"number\">10</span>, x /= <span class=\"number\">10</span>; <span class=\"keyword\">while</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(sz) <span class=\"built_in\">pc</span>(c[sz--] + <span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"built_in\">pc</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>注：<code>main</code> 函数开头请加入这 <span class=\"math inline\">\\(3\\)</span> 句话</strong></p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\r\n<p>其实后两句可以选择性添加，见文末。</p>\r\n<p><strong>不可与 <code>cin, cout, scanf, printf, gets, puts, getchar, putchar</code> 等其他读入输出方式同时使用</strong></p>\r\n<p>其实也不是全部不能同时使用，见文末。</p>\r\n<p><strong><code>read</code> 函数只能通过文件输入或者标准输入完后按 <code>Ctrl + Z</code> （仅 <code>WIN 10</code>）。</strong></p>\r\n<h3 id=\"读入输出整数版\">读入输出整数版</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> M = <span class=\"number\">1e6</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> streambuf* in = cin.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + in -&gt; sgetn(buf, M), p1 == p2) ? -1 : *p1++)</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> buf[M], *p1, *p2;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = gc, r = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &lt; <span class=\"number\">48</span>) &#123; <span class=\"keyword\">if</span>(c == <span class=\"number\">45</span>) f = <span class=\"number\">-1</span>; c = gc; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &gt; <span class=\"number\">47</span>) r = r * <span class=\"number\">10</span> + (c &amp; <span class=\"number\">15</span>), c = gc;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">wrt</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> streambuf* out = cout.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc out -&gt; sputc</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> c[<span class=\"number\">11</span>]; <span class=\"keyword\">int</span> sz = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>) <span class=\"built_in\">pc</span>(<span class=\"number\">45</span>), x = -x;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> c[++sz] = x % <span class=\"number\">10</span>, x /= <span class=\"number\">10</span>; <span class=\"keyword\">while</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(sz) <span class=\"built_in\">pc</span>(c[sz--] + <span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"built_in\">pc</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>注：输出 <code>long long</code> 时 <code>wrt</code> 函数中的 <code>c</code> 数组大小要开到 <span class=\"math inline\">\\(20\\)</span>。</strong></p>\r\n<h3 id=\"文末补充\">文末补充</h3>\r\n<ul>\r\n<li><p>在使用 <code>read</code> 函数时要加 <code>cin.tie(0)</code>，在使用 <code>wrt</code> 函数时要加 <code>cout.tie(0)</code>，但 <code>ios::sync_with_stdio(0)</code> <strong>必须加。</strong></p></li>\r\n<li><p>两个函数不可与 <code>scanf, printf, gets, puts, getchar, putchar</code> 等 <code>stdio</code> 的读入输出方式同时使用。</p>\r\n<p>在 <code>read</code> 函数第一次调用前可以随便使用 <code>cin</code> 等 <code>streambuf</code> 的读入方式。</p>\r\n<p><code>wrt</code> 函数可以与 <code>cout</code> 等 <code>streambuf</code> 的输出方式随便交叉使用。</p></li>\r\n</ul>\r\n"},{"title":"精准预测 | JSOI2019","date":"2021-09-04T07:58:47.000Z","updated":"2021-09-04T07:58:47.000Z","_content":">[题目链接](https://loj.ac/p/3101)\n>\n>有 $n$ 个人和 $m$ 个限制，以及 $T +1$ 个时刻。限制分两种：\n>\n>- 如果 $x$ 在 $t$ 时刻是死亡状态，则 $y$ 在 $t+1$ 时刻是死亡状态。\n>- 如果 $x$ 在 $t$ 时刻是生存状态，则 $y$ 在 $t$ 时刻是死亡状态。\n>\n>对于每个人 $i$，求出其他人中有多少个人 $j$ 满足 **$i$ 与 $j$ 能够同时存活到最后**。\n>\n>$n \\le 5 \\cdot 10^4,m \\le 10^5,t \\le T \\le 10^6$\n\n对于每个人每个时刻，建生死两个点。\n\n对于第一种限制，连有向边 $Dead(x,t) \\rightarrow Dead(y,t+1),Alive(y,t+1) \\rightarrow Alive(x,t)$。\n\n对于第二种限制，连有向边 $Alive(x,t) \\rightarrow Dead(y,t),Alive(y,t) \\rightarrow Dead(x,t)$。\n\n另外，由于每个人不能复活，连有向边 $Dead(x,t) \\rightarrow Dead(x,t+1),Alive(x,t+1) \\rightarrow Alive(x,t)$。\n\n首先有一些 $x$ 满足 $Alive(x,T+1)$ 能到 $Dead(x, T+1)$，删除 $Alive(x,T+1)$ 和 $Dead(x, T+1)$。\n\n如果从 $Dead(x,T+1)$ 不能到达 $Dead(y,T+1)$，则 $y$ 对 $x$ 造成贡献。\n\n建图时其实只有所有的 $(x,t)$ 和所有 $(x,T+1)$ 有用，$(x,t)$ 向 $(y,t')$ 连边，其中 $(y,t')$ 是横坐标为 $y$ 的点中第一个纵坐标大于（等于）的点，取决于是哪种限制，然后 $Dead(x,t)$ 向后继连边，$Alive(x,t)$ 向前驱连边。\n\n求 $Dead(x,T+1)$ 能到达多少 $Dead(y,T+1)$ 可以用 ```bitset``` 优化 ```DP```。\n\n但空间开不下，```bitset``` 只能开 $10000$，因此需要每 $10000$ 个点做一次 ```DP```。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n\nusing namespace std;\nconst int N = 1e5 + 5;\nint T, n, K, c[N], t[N], x[N], y[N];\nmap<int, int> m[N];\nvector<int> G[N * 3];\nint ed[N], vis[N * 3], as[N];\nbitset<10000> ban, s[N * 3];\nvoid add(int c, int u, int v) {\n    G[u + c].push_back(v), G[v + 1].push_back(u + !c);\n}\nvoid dfs(int u) {\n    if(vis[u]) return;\n    vis[u] = 1;\n    for(int v : G[u]) dfs(v), s[u] |= s[v];\n}\nint main() {\n    cin >> T >> n >> K;\n    int p = 0;\n    rep(i, 1, K) scanf(\"%d%d%d%d\", &c[i], &t[i], &x[i], &y[i]), m[x[i]][t[i]] = p += 2;\n    rep(i, 1, n) ed[i] = m[i][T + 1] = p += 2;\n    rep(i, 1, K) add(c[i], m[x[i]][t[i]], m[y[i]].lower_bound(t[i] + !c[i]) -> second);\n    rep(i, 1, n) {\n        int lst = 0;\n        for(auto [t, j] : m[i]) { if(lst) add(0, lst, j); lst = j; }\n    }\n    for(int l = 1, r; l <= n; l += 10000) {\n        r = min(l + 9999, n), ban.reset();\n        rep(i, 2, p + 1) s[i].reset(), vis[i] = 0;\n        rep(i, l, r) s[ed[i]][i - l] = 1;\n        rep(i, 2, p + 1) dfs(i);\n        rep(i, l, r) if(s[ed[i] + 1][i - l]) ban[i - l] = 1, as[i] = -1e9;\n        rep(i, 1, n) as[i] += r - l + 1 - (s[ed[i] + 1] | ban).count();\n    }\n    rep(i, 1, n) printf(\"%d \", max(as[i] - 1, 0));\n    return 0;\n}\n```","source":"_posts/jing-zhun-yu-ce-or-jsoi2019.md","raw":"---\ntitle: 精准预测 | JSOI2019\ndate: 2021-09-04 15:58:47\nupdated: 2021-09-04 15:58:47\ntags: []\ncategories: 省选\n---\n>[题目链接](https://loj.ac/p/3101)\n>\n>有 $n$ 个人和 $m$ 个限制，以及 $T +1$ 个时刻。限制分两种：\n>\n>- 如果 $x$ 在 $t$ 时刻是死亡状态，则 $y$ 在 $t+1$ 时刻是死亡状态。\n>- 如果 $x$ 在 $t$ 时刻是生存状态，则 $y$ 在 $t$ 时刻是死亡状态。\n>\n>对于每个人 $i$，求出其他人中有多少个人 $j$ 满足 **$i$ 与 $j$ 能够同时存活到最后**。\n>\n>$n \\le 5 \\cdot 10^4,m \\le 10^5,t \\le T \\le 10^6$\n\n对于每个人每个时刻，建生死两个点。\n\n对于第一种限制，连有向边 $Dead(x,t) \\rightarrow Dead(y,t+1),Alive(y,t+1) \\rightarrow Alive(x,t)$。\n\n对于第二种限制，连有向边 $Alive(x,t) \\rightarrow Dead(y,t),Alive(y,t) \\rightarrow Dead(x,t)$。\n\n另外，由于每个人不能复活，连有向边 $Dead(x,t) \\rightarrow Dead(x,t+1),Alive(x,t+1) \\rightarrow Alive(x,t)$。\n\n首先有一些 $x$ 满足 $Alive(x,T+1)$ 能到 $Dead(x, T+1)$，删除 $Alive(x,T+1)$ 和 $Dead(x, T+1)$。\n\n如果从 $Dead(x,T+1)$ 不能到达 $Dead(y,T+1)$，则 $y$ 对 $x$ 造成贡献。\n\n建图时其实只有所有的 $(x,t)$ 和所有 $(x,T+1)$ 有用，$(x,t)$ 向 $(y,t')$ 连边，其中 $(y,t')$ 是横坐标为 $y$ 的点中第一个纵坐标大于（等于）的点，取决于是哪种限制，然后 $Dead(x,t)$ 向后继连边，$Alive(x,t)$ 向前驱连边。\n\n求 $Dead(x,T+1)$ 能到达多少 $Dead(y,T+1)$ 可以用 ```bitset``` 优化 ```DP```。\n\n但空间开不下，```bitset``` 只能开 $10000$，因此需要每 $10000$ 个点做一次 ```DP```。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n\nusing namespace std;\nconst int N = 1e5 + 5;\nint T, n, K, c[N], t[N], x[N], y[N];\nmap<int, int> m[N];\nvector<int> G[N * 3];\nint ed[N], vis[N * 3], as[N];\nbitset<10000> ban, s[N * 3];\nvoid add(int c, int u, int v) {\n    G[u + c].push_back(v), G[v + 1].push_back(u + !c);\n}\nvoid dfs(int u) {\n    if(vis[u]) return;\n    vis[u] = 1;\n    for(int v : G[u]) dfs(v), s[u] |= s[v];\n}\nint main() {\n    cin >> T >> n >> K;\n    int p = 0;\n    rep(i, 1, K) scanf(\"%d%d%d%d\", &c[i], &t[i], &x[i], &y[i]), m[x[i]][t[i]] = p += 2;\n    rep(i, 1, n) ed[i] = m[i][T + 1] = p += 2;\n    rep(i, 1, K) add(c[i], m[x[i]][t[i]], m[y[i]].lower_bound(t[i] + !c[i]) -> second);\n    rep(i, 1, n) {\n        int lst = 0;\n        for(auto [t, j] : m[i]) { if(lst) add(0, lst, j); lst = j; }\n    }\n    for(int l = 1, r; l <= n; l += 10000) {\n        r = min(l + 9999, n), ban.reset();\n        rep(i, 2, p + 1) s[i].reset(), vis[i] = 0;\n        rep(i, l, r) s[ed[i]][i - l] = 1;\n        rep(i, 2, p + 1) dfs(i);\n        rep(i, l, r) if(s[ed[i] + 1][i - l]) ban[i - l] = 1, as[i] = -1e9;\n        rep(i, 1, n) as[i] += r - l + 1 - (s[ed[i] + 1] | ban).count();\n    }\n    rep(i, 1, n) printf(\"%d \", max(as[i] - 1, 0));\n    return 0;\n}\n```","slug":"jing-zhun-yu-ce-or-jsoi2019","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh0n002wootn3lvc0avc","content":"<blockquote>\r\n<p><a href=\"https://loj.ac/p/3101\">题目链接</a></p>\r\n<p>有 <span class=\"math inline\">\\(n\\)</span> 个人和 <span class=\"math inline\">\\(m\\)</span> 个限制，以及 <span class=\"math inline\">\\(T +1\\)</span> 个时刻。限制分两种：</p>\r\n<ul>\r\n<li>如果 <span class=\"math inline\">\\(x\\)</span> 在 <span class=\"math inline\">\\(t\\)</span> 时刻是死亡状态，则 <span class=\"math inline\">\\(y\\)</span> 在 <span class=\"math inline\">\\(t+1\\)</span> 时刻是死亡状态。</li>\r\n<li>如果 <span class=\"math inline\">\\(x\\)</span> 在 <span class=\"math inline\">\\(t\\)</span> 时刻是生存状态，则 <span class=\"math inline\">\\(y\\)</span> 在 <span class=\"math inline\">\\(t\\)</span> 时刻是死亡状态。</li>\r\n</ul>\r\n<p>对于每个人 <span class=\"math inline\">\\(i\\)</span>，求出其他人中有多少个人 <span class=\"math inline\">\\(j\\)</span> 满足 <strong><span class=\"math inline\">\\(i\\)</span> 与 <span class=\"math inline\">\\(j\\)</span> 能够同时存活到最后</strong>。</p>\r\n<p><span class=\"math inline\">\\(n \\le 5 \\cdot 10^4,m \\le 10^5,t \\le T \\le 10^6\\)</span></p>\r\n</blockquote>\r\n<p>对于每个人每个时刻，建生死两个点。</p>\r\n<p>对于第一种限制，连有向边 <span class=\"math inline\">\\(Dead(x,t) \\rightarrow Dead(y,t+1),Alive(y,t+1) \\rightarrow Alive(x,t)\\)</span>。</p>\r\n<p>对于第二种限制，连有向边 <span class=\"math inline\">\\(Alive(x,t) \\rightarrow Dead(y,t),Alive(y,t) \\rightarrow Dead(x,t)\\)</span>。</p>\r\n<p>另外，由于每个人不能复活，连有向边 <span class=\"math inline\">\\(Dead(x,t) \\rightarrow Dead(x,t+1),Alive(x,t+1) \\rightarrow Alive(x,t)\\)</span>。</p>\r\n<p>首先有一些 <span class=\"math inline\">\\(x\\)</span> 满足 <span class=\"math inline\">\\(Alive(x,T+1)\\)</span> 能到 <span class=\"math inline\">\\(Dead(x, T+1)\\)</span>，删除 <span class=\"math inline\">\\(Alive(x,T+1)\\)</span> 和 <span class=\"math inline\">\\(Dead(x, T+1)\\)</span>。</p>\r\n<p>如果从 <span class=\"math inline\">\\(Dead(x,T+1)\\)</span> 不能到达 <span class=\"math inline\">\\(Dead(y,T+1)\\)</span>，则 <span class=\"math inline\">\\(y\\)</span> 对 <span class=\"math inline\">\\(x\\)</span> 造成贡献。</p>\r\n<p>建图时其实只有所有的 <span class=\"math inline\">\\((x,t)\\)</span> 和所有 <span class=\"math inline\">\\((x,T+1)\\)</span> 有用，<span class=\"math inline\">\\((x,t)\\)</span> 向 <span class=\"math inline\">\\((y,t&#39;)\\)</span> 连边，其中 <span class=\"math inline\">\\((y,t&#39;)\\)</span> 是横坐标为 <span class=\"math inline\">\\(y\\)</span> 的点中第一个纵坐标大于（等于）的点，取决于是哪种限制，然后 <span class=\"math inline\">\\(Dead(x,t)\\)</span> 向后继连边，<span class=\"math inline\">\\(Alive(x,t)\\)</span> 向前驱连边。</p>\r\n<p>求 <span class=\"math inline\">\\(Dead(x,T+1)\\)</span> 能到达多少 <span class=\"math inline\">\\(Dead(y,T+1)\\)</span> 可以用 <code>bitset</code> 优化 <code>DP</code>。</p>\r\n<p>但空间开不下，<code>bitset</code> 只能开 <span class=\"math inline\">\\(10000\\)</span>，因此需要每 <span class=\"math inline\">\\(10000\\)</span> 个点做一次 <code>DP</code>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> T, n, K, c[N], t[N], x[N], y[N];</span><br><span class=\"line\">map&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; m[N];</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; G[N * <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> ed[N], vis[N * <span class=\"number\">3</span>], as[N];</span><br><span class=\"line\">bitset&lt;10000&gt; ban, s[N * <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> c, <span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    G[u + c].<span class=\"built_in\">push_back</span>(v), G[v + <span class=\"number\">1</span>].<span class=\"built_in\">push_back</span>(u + !c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vis[u]) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    vis[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) <span class=\"built_in\">dfs</span>(v), s[u] |= s[v];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; T &gt;&gt; n &gt;&gt; K;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, K) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>, &amp;c[i], &amp;t[i], &amp;x[i], &amp;y[i]), m[x[i]][t[i]] = p += <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) ed[i] = m[i][T + <span class=\"number\">1</span>] = p += <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, K) <span class=\"built_in\">add</span>(c[i], m[x[i]][t[i]], m[y[i]].<span class=\"built_in\">lower_bound</span>(t[i] + !c[i]) -&gt; second);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lst = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [t, j] : m[i]) &#123; <span class=\"keyword\">if</span>(lst) <span class=\"built_in\">add</span>(<span class=\"number\">0</span>, lst, j); lst = j; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">1</span>, r; l &lt;= n; l += <span class=\"number\">10000</span>) &#123;</span><br><span class=\"line\">        r = <span class=\"built_in\">min</span>(l + <span class=\"number\">9999</span>, n), ban.<span class=\"built_in\">reset</span>();</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, p + <span class=\"number\">1</span>) s[i].<span class=\"built_in\">reset</span>(), vis[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, l, r) s[ed[i]][i - l] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, p + <span class=\"number\">1</span>) <span class=\"built_in\">dfs</span>(i);</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, l, r) <span class=\"keyword\">if</span>(s[ed[i] + <span class=\"number\">1</span>][i - l]) ban[i - l] = <span class=\"number\">1</span>, as[i] = <span class=\"number\">-1e9</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) as[i] += r - l + <span class=\"number\">1</span> - (s[ed[i] + <span class=\"number\">1</span>] | ban).<span class=\"built_in\">count</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, <span class=\"built_in\">max</span>(as[i] - <span class=\"number\">1</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":1996,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"https://loj.ac/p/3101\">题目链接</a></p>\r\n<p>有 <span class=\"math inline\">\\(n\\)</span> 个人和 <span class=\"math inline\">\\(m\\)</span> 个限制，以及 <span class=\"math inline\">\\(T +1\\)</span> 个时刻。限制分两种：</p>\r\n<ul>\r\n<li>如果 <span class=\"math inline\">\\(x\\)</span> 在 <span class=\"math inline\">\\(t\\)</span> 时刻是死亡状态，则 <span class=\"math inline\">\\(y\\)</span> 在 <span class=\"math inline\">\\(t+1\\)</span> 时刻是死亡状态。</li>\r\n<li>如果 <span class=\"math inline\">\\(x\\)</span> 在 <span class=\"math inline\">\\(t\\)</span> 时刻是生存状态，则 <span class=\"math inline\">\\(y\\)</span> 在 <span class=\"math inline\">\\(t\\)</span> 时刻是死亡状态。</li>\r\n</ul>\r\n<p>对于每个人 <span class=\"math inline\">\\(i\\)</span>，求出其他人中有多少个人 <span class=\"math inline\">\\(j\\)</span> 满足 <strong><span class=\"math inline\">\\(i\\)</span> 与 <span class=\"math inline\">\\(j\\)</span> 能够同时存活到最后</strong>。</p>\r\n<p><span class=\"math inline\">\\(n \\le 5 \\cdot 10^4,m \\le 10^5,t \\le T \\le 10^6\\)</span></p>\r\n</blockquote>\r\n<p>对于每个人每个时刻，建生死两个点。</p>\r\n<p>对于第一种限制，连有向边 <span class=\"math inline\">\\(Dead(x,t) \\rightarrow Dead(y,t+1),Alive(y,t+1) \\rightarrow Alive(x,t)\\)</span>。</p>\r\n<p>对于第二种限制，连有向边 <span class=\"math inline\">\\(Alive(x,t) \\rightarrow Dead(y,t),Alive(y,t) \\rightarrow Dead(x,t)\\)</span>。</p>\r\n<p>另外，由于每个人不能复活，连有向边 <span class=\"math inline\">\\(Dead(x,t) \\rightarrow Dead(x,t+1),Alive(x,t+1) \\rightarrow Alive(x,t)\\)</span>。</p>\r\n<p>首先有一些 <span class=\"math inline\">\\(x\\)</span> 满足 <span class=\"math inline\">\\(Alive(x,T+1)\\)</span> 能到 <span class=\"math inline\">\\(Dead(x, T+1)\\)</span>，删除 <span class=\"math inline\">\\(Alive(x,T+1)\\)</span> 和 <span class=\"math inline\">\\(Dead(x, T+1)\\)</span>。</p>\r\n<p>如果从 <span class=\"math inline\">\\(Dead(x,T+1)\\)</span> 不能到达 <span class=\"math inline\">\\(Dead(y,T+1)\\)</span>，则 <span class=\"math inline\">\\(y\\)</span> 对 <span class=\"math inline\">\\(x\\)</span> 造成贡献。</p>\r\n<p>建图时其实只有所有的 <span class=\"math inline\">\\((x,t)\\)</span> 和所有 <span class=\"math inline\">\\((x,T+1)\\)</span> 有用，<span class=\"math inline\">\\((x,t)\\)</span> 向 <span class=\"math inline\">\\((y,t&#39;)\\)</span> 连边，其中 <span class=\"math inline\">\\((y,t&#39;)\\)</span> 是横坐标为 <span class=\"math inline\">\\(y\\)</span> 的点中第一个纵坐标大于（等于）的点，取决于是哪种限制，然后 <span class=\"math inline\">\\(Dead(x,t)\\)</span> 向后继连边，<span class=\"math inline\">\\(Alive(x,t)\\)</span> 向前驱连边。</p>\r\n<p>求 <span class=\"math inline\">\\(Dead(x,T+1)\\)</span> 能到达多少 <span class=\"math inline\">\\(Dead(y,T+1)\\)</span> 可以用 <code>bitset</code> 优化 <code>DP</code>。</p>\r\n<p>但空间开不下，<code>bitset</code> 只能开 <span class=\"math inline\">\\(10000\\)</span>，因此需要每 <span class=\"math inline\">\\(10000\\)</span> 个点做一次 <code>DP</code>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> T, n, K, c[N], t[N], x[N], y[N];</span><br><span class=\"line\">map&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; m[N];</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; G[N * <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> ed[N], vis[N * <span class=\"number\">3</span>], as[N];</span><br><span class=\"line\">bitset&lt;10000&gt; ban, s[N * <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> c, <span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    G[u + c].<span class=\"built_in\">push_back</span>(v), G[v + <span class=\"number\">1</span>].<span class=\"built_in\">push_back</span>(u + !c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vis[u]) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    vis[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) <span class=\"built_in\">dfs</span>(v), s[u] |= s[v];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; T &gt;&gt; n &gt;&gt; K;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, K) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>, &amp;c[i], &amp;t[i], &amp;x[i], &amp;y[i]), m[x[i]][t[i]] = p += <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) ed[i] = m[i][T + <span class=\"number\">1</span>] = p += <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, K) <span class=\"built_in\">add</span>(c[i], m[x[i]][t[i]], m[y[i]].<span class=\"built_in\">lower_bound</span>(t[i] + !c[i]) -&gt; second);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lst = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [t, j] : m[i]) &#123; <span class=\"keyword\">if</span>(lst) <span class=\"built_in\">add</span>(<span class=\"number\">0</span>, lst, j); lst = j; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">1</span>, r; l &lt;= n; l += <span class=\"number\">10000</span>) &#123;</span><br><span class=\"line\">        r = <span class=\"built_in\">min</span>(l + <span class=\"number\">9999</span>, n), ban.<span class=\"built_in\">reset</span>();</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, p + <span class=\"number\">1</span>) s[i].<span class=\"built_in\">reset</span>(), vis[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, l, r) s[ed[i]][i - l] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, p + <span class=\"number\">1</span>) <span class=\"built_in\">dfs</span>(i);</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, l, r) <span class=\"keyword\">if</span>(s[ed[i] + <span class=\"number\">1</span>][i - l]) ban[i - l] = <span class=\"number\">1</span>, as[i] = <span class=\"number\">-1e9</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) as[i] += r - l + <span class=\"number\">1</span> - (s[ed[i] + <span class=\"number\">1</span>] | ban).<span class=\"built_in\">count</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, <span class=\"built_in\">max</span>(as[i] - <span class=\"number\">1</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"梦现时刻 | 洛谷 P7481","date":"2021-04-12T07:25:13.000Z","updated":"2021-04-12T07:25:13.000Z","_content":"> [题目链接](https://www.luogu.com.cn/problem/P7481)\n>\n> 给定 $n,m$，保证 $m \\le n$，设 $f(a,b)=\\sum\\limits_{i=0}^b\\binom bi\\binom {n-i}a$。\n>\n> 求 $\\bigoplus\\limits_{a=1}^m\\bigoplus\\limits_{b=1}^m\\left(f(a,b) \\bmod 998244353\\right)$。\n>\n> $n \\le 10^9,m \\le 5000$\n\n### 引理\n\n$$\n\\sum_{a=0}^n f(a,b)x^a=(x+2)^b(x+1)^{n-b}\n$$\n\n#### 证明一：\n\n$$\n\\begin{aligned}\n&\\sum_{a=0}^n f(a,b)x^a\\\\\n&=\\sum_{a=0}^n\\sum\\limits_{i=0}^b\\binom bi\\binom {n-i}ax^a\\\\\n&=\\sum_{i=0}^b\\binom bi\\sum_{a=0}^n\\binom {n-i}ax^a\\\\\n&=\\sum_{i=0}^b\\binom bi(x+1)^{n-i}\\\\\n&=\\sum_{i=0}^b\\binom bi(x+1)^{b-i}(x+1)^{n-b}\\\\\n&=(x+2)^b(x+1)^{n-b}\n\\end{aligned}\n$$\n\n#### 证明二\n\n考虑 $f(a,b)$ 的组合意义：有 $n$ 个人，其中 $b$ 个人比较强，要选出两批人：\n\n- 先从比较强的 $b$ 个人中选出 $i$ 个人作为第一批。\n- 再从剩下的 $n-i$ 个人中选出 $a$ 个人作为第二批。\n\n因为要对 $i \\in [0,b]$ 求和，所以 $f(a,b)$ 表示第一批的人数任意，第二批的人数为 $a$ 的方案数。\n\n换一个角度看这个方案数：设第二批的 $a$ 个人中有 $x$ 个人比较强，$y$ 个人不强（$a=x+y$）。\n\n- 对于一个比较强的人，如果他入选第二批，方案数为 $1$，否则他既可能入选第一批，也可能落选，方案数为 $2$。\n\n  因此比较强的 $b$ 个人入选的情况数的生成函数为 $(x+2)^b$。\n\n- 对于一个不强的人，如果他入选第二批，方案数为 $1$，否则他落选了，方案数为 $1$。\n\n  因此不强的 $n-b$ 个人入选的情况数的生成函数为 $(x+1)^{n-b}$。\n\n综上，得到 $\\sum\\limits_{a=0}^n f(a,b)x^a=(x+2)^b(x+1)^{n-b}$。\n\n### 两种解法\n\n#### 类 01 背包 ```DP```\n\n根据引理，有\n$$\n\\sum_{a=0}^n f(a,b)x^a=\\frac {x+2}{x+1}\\sum_{a=0}^nf(a,b-1)x^a\n$$\n乘 $x+2$ 相当于添加一个物品，除以 $x+1$ 相当于删除一个物品，后者用可撤销背包解决。\n\n复杂度 $O(m^2)$。\n\n#### 递推\n\n 考虑\n$$\n\\begin{aligned}\n&[(x+2)^b(x+1)^{n-b}]'\\\\\n&=b(x+2)^{b-1}(x+1)^{n-b}+(x+2)^b(n-b)(x+1)^{n-b-1}\\\\\n&=\\dfrac{b(x+1)+(n-b)(x+2)}{(x+2)(x+1)}(x+2)^b(x+1)^{n-b}\\\\\n&=\\dfrac{nx+2n-b}{(x+2)(x+1)}(x+2)^b(x+1)^{n-b}\\\\\n\\end{aligned}\n$$\n两边同乘 $(x+2)(x+1)$ 得：\n$$\n(x+2)(x+1)[(x+2)^b(x+1)^{n-b}]'=(nx+2n-b)(x+2)^b(x+1)^{n-b}\n$$\n提取 $x^a$ 系数：\n$$\n\\begin{aligned}\n&(a-1)f(a-1,b)+3af(a,b)+2(a+1)f(a+1,b)\\\\\n&=nf(a-1,b)+(2n-b)f(a,b)\n\\end{aligned}\n$$\n整理得：\n$$\nf(a+1,b)=\\frac {(2n-b-3a)f(a,b)+(n-a+1)f(a-1,b)}{2(a+1)}\n$$\n进一步：\n$$\nf(a,b)=\\frac {(2n-b-3a+3)f(a-1,b)+(n-a+2)f(a-2,b)}{2a}\n$$\n对于 $b \\in [1,m]$ 都递推一遍即可。\n\n复杂度 $O(m^2)$。\n\n代码（类 01 背包 ```DP```）：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\nconst int P = 998244353;\n\nint n, m;\nlong long inv[5005], f[5005];\n\nint main() {\n    cin >> n >> m;\n    f[0] = inv[1] = 1;\n    rep(i, 2, m) inv[i] = (P - P / i) * inv[P % i] % P;\n    rep(i, 1, m) f[i] = f[i - 1] * (n - i + 1) % P * inv[i] % P;\n    int as = 0;\n    rep(i, 1, m) {\n        per(j, m, 0) f[j] = (f[j] * 2 + f[j - 1]) % P;\n        rep(j, 1, m) as ^= f[j] = (f[j] + P - f[j - 1]) % P;\n    }\n    cout << as;\n    return 0;\n}\n```\n\n代码（递推）：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\nconst int P = 998244353;\n\nint n, m;\nlong long inv[10005], f[5005];\n\nint main() {\n    cin >> n >> m;\n    inv[1] = 1;\n    rep(i, 2, m * 2) inv[i] = (P - P / i) * inv[P % i] % P;\n    int as = 0;\n    f[0] = 1;\n    rep(i, 1, m) {\n        (f[0] *= 2) %= P;\n        rep(j, 1, m) as ^= f[j] = (((n * 2 - i - j * 3 + 3) * f[j - 1] + (n - j + 2) * f[j - 2]) % P * inv[j * 2] % P + P) % P;\n    }\n    cout << as;\n    return 0;\n}\n```","source":"_posts/luogu7481.md","raw":"---\ntitle: 梦现时刻 | 洛谷 P7481\ndate: 2021-04-12 15:25:13\nupdated: 2021-04-12 15:25:13\ntags: [数论,生成函数,递推]\ncategories: 洛谷月赛\n---\n> [题目链接](https://www.luogu.com.cn/problem/P7481)\n>\n> 给定 $n,m$，保证 $m \\le n$，设 $f(a,b)=\\sum\\limits_{i=0}^b\\binom bi\\binom {n-i}a$。\n>\n> 求 $\\bigoplus\\limits_{a=1}^m\\bigoplus\\limits_{b=1}^m\\left(f(a,b) \\bmod 998244353\\right)$。\n>\n> $n \\le 10^9,m \\le 5000$\n\n### 引理\n\n$$\n\\sum_{a=0}^n f(a,b)x^a=(x+2)^b(x+1)^{n-b}\n$$\n\n#### 证明一：\n\n$$\n\\begin{aligned}\n&\\sum_{a=0}^n f(a,b)x^a\\\\\n&=\\sum_{a=0}^n\\sum\\limits_{i=0}^b\\binom bi\\binom {n-i}ax^a\\\\\n&=\\sum_{i=0}^b\\binom bi\\sum_{a=0}^n\\binom {n-i}ax^a\\\\\n&=\\sum_{i=0}^b\\binom bi(x+1)^{n-i}\\\\\n&=\\sum_{i=0}^b\\binom bi(x+1)^{b-i}(x+1)^{n-b}\\\\\n&=(x+2)^b(x+1)^{n-b}\n\\end{aligned}\n$$\n\n#### 证明二\n\n考虑 $f(a,b)$ 的组合意义：有 $n$ 个人，其中 $b$ 个人比较强，要选出两批人：\n\n- 先从比较强的 $b$ 个人中选出 $i$ 个人作为第一批。\n- 再从剩下的 $n-i$ 个人中选出 $a$ 个人作为第二批。\n\n因为要对 $i \\in [0,b]$ 求和，所以 $f(a,b)$ 表示第一批的人数任意，第二批的人数为 $a$ 的方案数。\n\n换一个角度看这个方案数：设第二批的 $a$ 个人中有 $x$ 个人比较强，$y$ 个人不强（$a=x+y$）。\n\n- 对于一个比较强的人，如果他入选第二批，方案数为 $1$，否则他既可能入选第一批，也可能落选，方案数为 $2$。\n\n  因此比较强的 $b$ 个人入选的情况数的生成函数为 $(x+2)^b$。\n\n- 对于一个不强的人，如果他入选第二批，方案数为 $1$，否则他落选了，方案数为 $1$。\n\n  因此不强的 $n-b$ 个人入选的情况数的生成函数为 $(x+1)^{n-b}$。\n\n综上，得到 $\\sum\\limits_{a=0}^n f(a,b)x^a=(x+2)^b(x+1)^{n-b}$。\n\n### 两种解法\n\n#### 类 01 背包 ```DP```\n\n根据引理，有\n$$\n\\sum_{a=0}^n f(a,b)x^a=\\frac {x+2}{x+1}\\sum_{a=0}^nf(a,b-1)x^a\n$$\n乘 $x+2$ 相当于添加一个物品，除以 $x+1$ 相当于删除一个物品，后者用可撤销背包解决。\n\n复杂度 $O(m^2)$。\n\n#### 递推\n\n 考虑\n$$\n\\begin{aligned}\n&[(x+2)^b(x+1)^{n-b}]'\\\\\n&=b(x+2)^{b-1}(x+1)^{n-b}+(x+2)^b(n-b)(x+1)^{n-b-1}\\\\\n&=\\dfrac{b(x+1)+(n-b)(x+2)}{(x+2)(x+1)}(x+2)^b(x+1)^{n-b}\\\\\n&=\\dfrac{nx+2n-b}{(x+2)(x+1)}(x+2)^b(x+1)^{n-b}\\\\\n\\end{aligned}\n$$\n两边同乘 $(x+2)(x+1)$ 得：\n$$\n(x+2)(x+1)[(x+2)^b(x+1)^{n-b}]'=(nx+2n-b)(x+2)^b(x+1)^{n-b}\n$$\n提取 $x^a$ 系数：\n$$\n\\begin{aligned}\n&(a-1)f(a-1,b)+3af(a,b)+2(a+1)f(a+1,b)\\\\\n&=nf(a-1,b)+(2n-b)f(a,b)\n\\end{aligned}\n$$\n整理得：\n$$\nf(a+1,b)=\\frac {(2n-b-3a)f(a,b)+(n-a+1)f(a-1,b)}{2(a+1)}\n$$\n进一步：\n$$\nf(a,b)=\\frac {(2n-b-3a+3)f(a-1,b)+(n-a+2)f(a-2,b)}{2a}\n$$\n对于 $b \\in [1,m]$ 都递推一遍即可。\n\n复杂度 $O(m^2)$。\n\n代码（类 01 背包 ```DP```）：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\nconst int P = 998244353;\n\nint n, m;\nlong long inv[5005], f[5005];\n\nint main() {\n    cin >> n >> m;\n    f[0] = inv[1] = 1;\n    rep(i, 2, m) inv[i] = (P - P / i) * inv[P % i] % P;\n    rep(i, 1, m) f[i] = f[i - 1] * (n - i + 1) % P * inv[i] % P;\n    int as = 0;\n    rep(i, 1, m) {\n        per(j, m, 0) f[j] = (f[j] * 2 + f[j - 1]) % P;\n        rep(j, 1, m) as ^= f[j] = (f[j] + P - f[j - 1]) % P;\n    }\n    cout << as;\n    return 0;\n}\n```\n\n代码（递推）：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\nconst int P = 998244353;\n\nint n, m;\nlong long inv[10005], f[5005];\n\nint main() {\n    cin >> n >> m;\n    inv[1] = 1;\n    rep(i, 2, m * 2) inv[i] = (P - P / i) * inv[P % i] % P;\n    int as = 0;\n    f[0] = 1;\n    rep(i, 1, m) {\n        (f[0] *= 2) %= P;\n        rep(j, 1, m) as ^= f[j] = (((n * 2 - i - j * 3 + 3) * f[j - 1] + (n - j + 2) * f[j - 2]) % P * inv[j * 2] % P + P) % P;\n    }\n    cout << as;\n    return 0;\n}\n```","slug":"luogu7481","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh0o0030ootn4omf2cgf","content":"<blockquote>\r\n<p><a href=\"https://www.luogu.com.cn/problem/P7481\">题目链接</a></p>\r\n<p>给定 <span class=\"math inline\">\\(n,m\\)</span>，保证 <span class=\"math inline\">\\(m \\le n\\)</span>，设 <span class=\"math inline\">\\(f(a,b)=\\sum\\limits_{i=0}^b\\binom bi\\binom {n-i}a\\)</span>。</p>\r\n<p>求 <span class=\"math inline\">\\(\\bigoplus\\limits_{a=1}^m\\bigoplus\\limits_{b=1}^m\\left(f(a,b) \\bmod 998244353\\right)\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^9,m \\le 5000\\)</span></p>\r\n</blockquote>\r\n<h3 id=\"引理\">引理</h3>\r\n<p><span class=\"math display\">\\[\r\n\\sum_{a=0}^n f(a,b)x^a=(x+2)^b(x+1)^{n-b}\r\n\\]</span></p>\r\n<h4 id=\"证明一\">证明一：</h4>\r\n<p><span class=\"math display\">\\[\r\n\\begin{aligned}\r\n&amp;\\sum_{a=0}^n f(a,b)x^a\\\\\r\n&amp;=\\sum_{a=0}^n\\sum\\limits_{i=0}^b\\binom bi\\binom {n-i}ax^a\\\\\r\n&amp;=\\sum_{i=0}^b\\binom bi\\sum_{a=0}^n\\binom {n-i}ax^a\\\\\r\n&amp;=\\sum_{i=0}^b\\binom bi(x+1)^{n-i}\\\\\r\n&amp;=\\sum_{i=0}^b\\binom bi(x+1)^{b-i}(x+1)^{n-b}\\\\\r\n&amp;=(x+2)^b(x+1)^{n-b}\r\n\\end{aligned}\r\n\\]</span></p>\r\n<h4 id=\"证明二\">证明二</h4>\r\n<p>考虑 <span class=\"math inline\">\\(f(a,b)\\)</span> 的组合意义：有 <span class=\"math inline\">\\(n\\)</span> 个人，其中 <span class=\"math inline\">\\(b\\)</span> 个人比较强，要选出两批人：</p>\r\n<ul>\r\n<li>先从比较强的 <span class=\"math inline\">\\(b\\)</span> 个人中选出 <span class=\"math inline\">\\(i\\)</span> 个人作为第一批。</li>\r\n<li>再从剩下的 <span class=\"math inline\">\\(n-i\\)</span> 个人中选出 <span class=\"math inline\">\\(a\\)</span> 个人作为第二批。</li>\r\n</ul>\r\n<p>因为要对 <span class=\"math inline\">\\(i \\in [0,b]\\)</span> 求和，所以 <span class=\"math inline\">\\(f(a,b)\\)</span> 表示第一批的人数任意，第二批的人数为 <span class=\"math inline\">\\(a\\)</span> 的方案数。</p>\r\n<p>换一个角度看这个方案数：设第二批的 <span class=\"math inline\">\\(a\\)</span> 个人中有 <span class=\"math inline\">\\(x\\)</span> 个人比较强，<span class=\"math inline\">\\(y\\)</span> 个人不强（<span class=\"math inline\">\\(a=x+y\\)</span>）。</p>\r\n<ul>\r\n<li><p>对于一个比较强的人，如果他入选第二批，方案数为 <span class=\"math inline\">\\(1\\)</span>，否则他既可能入选第一批，也可能落选，方案数为 <span class=\"math inline\">\\(2\\)</span>。</p>\r\n<p>因此比较强的 <span class=\"math inline\">\\(b\\)</span> 个人入选的情况数的生成函数为 <span class=\"math inline\">\\((x+2)^b\\)</span>。</p></li>\r\n<li><p>对于一个不强的人，如果他入选第二批，方案数为 <span class=\"math inline\">\\(1\\)</span>，否则他落选了，方案数为 <span class=\"math inline\">\\(1\\)</span>。</p>\r\n<p>因此不强的 <span class=\"math inline\">\\(n-b\\)</span> 个人入选的情况数的生成函数为 <span class=\"math inline\">\\((x+1)^{n-b}\\)</span>。</p></li>\r\n</ul>\r\n<p>综上，得到 <span class=\"math inline\">\\(\\sum\\limits_{a=0}^n f(a,b)x^a=(x+2)^b(x+1)^{n-b}\\)</span>。</p>\r\n<h3 id=\"两种解法\">两种解法</h3>\r\n<h4 id=\"类-01-背包-dp\">类 01 背包 <code>DP</code></h4>\r\n<p>根据引理，有 <span class=\"math display\">\\[\r\n\\sum_{a=0}^n f(a,b)x^a=\\frac {x+2}{x+1}\\sum_{a=0}^nf(a,b-1)x^a\r\n\\]</span> 乘 <span class=\"math inline\">\\(x+2\\)</span> 相当于添加一个物品，除以 <span class=\"math inline\">\\(x+1\\)</span> 相当于删除一个物品，后者用可撤销背包解决。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(m^2)\\)</span>。</p>\r\n<h4 id=\"递推\">递推</h4>\r\n<p>考虑 <span class=\"math display\">\\[\r\n\\begin{aligned}\r\n&amp;[(x+2)^b(x+1)^{n-b}]&#39;\\\\\r\n&amp;=b(x+2)^{b-1}(x+1)^{n-b}+(x+2)^b(n-b)(x+1)^{n-b-1}\\\\\r\n&amp;=\\dfrac{b(x+1)+(n-b)(x+2)}{(x+2)(x+1)}(x+2)^b(x+1)^{n-b}\\\\\r\n&amp;=\\dfrac{nx+2n-b}{(x+2)(x+1)}(x+2)^b(x+1)^{n-b}\\\\\r\n\\end{aligned}\r\n\\]</span> 两边同乘 <span class=\"math inline\">\\((x+2)(x+1)\\)</span> 得： <span class=\"math display\">\\[\r\n(x+2)(x+1)[(x+2)^b(x+1)^{n-b}]&#39;=(nx+2n-b)(x+2)^b(x+1)^{n-b}\r\n\\]</span> 提取 <span class=\"math inline\">\\(x^a\\)</span> 系数： <span class=\"math display\">\\[\r\n\\begin{aligned}\r\n&amp;(a-1)f(a-1,b)+3af(a,b)+2(a+1)f(a+1,b)\\\\\r\n&amp;=nf(a-1,b)+(2n-b)f(a,b)\r\n\\end{aligned}\r\n\\]</span> 整理得： <span class=\"math display\">\\[\r\nf(a+1,b)=\\frac {(2n-b-3a)f(a,b)+(n-a+1)f(a-1,b)}{2(a+1)}\r\n\\]</span> 进一步： <span class=\"math display\">\\[\r\nf(a,b)=\\frac {(2n-b-3a+3)f(a-1,b)+(n-a+2)f(a-2,b)}{2a}\r\n\\]</span> 对于 <span class=\"math inline\">\\(b \\in [1,m]\\)</span> 都递推一遍即可。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(m^2)\\)</span>。</p>\r\n<p>代码（类 01 背包 <code>DP</code>）：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> P = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> inv[<span class=\"number\">5005</span>], f[<span class=\"number\">5005</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    f[<span class=\"number\">0</span>] = inv[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, m) inv[i] = (P - P / i) * inv[P % i] % P;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) f[i] = f[i - <span class=\"number\">1</span>] * (n - i + <span class=\"number\">1</span>) % P * inv[i] % P;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> as = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">per</span>(j, m, <span class=\"number\">0</span>) f[j] = (f[j] * <span class=\"number\">2</span> + f[j - <span class=\"number\">1</span>]) % P;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, m) as ^= f[j] = (f[j] + P - f[j - <span class=\"number\">1</span>]) % P;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; as;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>代码（递推）：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> P = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> inv[<span class=\"number\">10005</span>], f[<span class=\"number\">5005</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    inv[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, m * <span class=\"number\">2</span>) inv[i] = (P - P / i) * inv[P % i] % P;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> as = <span class=\"number\">0</span>;</span><br><span class=\"line\">    f[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">        (f[<span class=\"number\">0</span>] *= <span class=\"number\">2</span>) %= P;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, m) as ^= f[j] = (((n * <span class=\"number\">2</span> - i - j * <span class=\"number\">3</span> + <span class=\"number\">3</span>) * f[j - <span class=\"number\">1</span>] + (n - j + <span class=\"number\">2</span>) * f[j - <span class=\"number\">2</span>]) % P * inv[j * <span class=\"number\">2</span>] % P + P) % P;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; as;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":2927,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"https://www.luogu.com.cn/problem/P7481\">题目链接</a></p>\r\n<p>给定 <span class=\"math inline\">\\(n,m\\)</span>，保证 <span class=\"math inline\">\\(m \\le n\\)</span>，设 <span class=\"math inline\">\\(f(a,b)=\\sum\\limits_{i=0}^b\\binom bi\\binom {n-i}a\\)</span>。</p>\r\n<p>求 <span class=\"math inline\">\\(\\bigoplus\\limits_{a=1}^m\\bigoplus\\limits_{b=1}^m\\left(f(a,b) \\bmod 998244353\\right)\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^9,m \\le 5000\\)</span></p>\r\n</blockquote>\r\n<h3 id=\"引理\">引理</h3>\r\n<p><span class=\"math display\">\\[\r\n\\sum_{a=0}^n f(a,b)x^a=(x+2)^b(x+1)^{n-b}\r\n\\]</span></p>\r\n<h4 id=\"证明一\">证明一：</h4>\r\n<p><span class=\"math display\">\\[\r\n\\begin{aligned}\r\n&amp;\\sum_{a=0}^n f(a,b)x^a\\\\\r\n&amp;=\\sum_{a=0}^n\\sum\\limits_{i=0}^b\\binom bi\\binom {n-i}ax^a\\\\\r\n&amp;=\\sum_{i=0}^b\\binom bi\\sum_{a=0}^n\\binom {n-i}ax^a\\\\\r\n&amp;=\\sum_{i=0}^b\\binom bi(x+1)^{n-i}\\\\\r\n&amp;=\\sum_{i=0}^b\\binom bi(x+1)^{b-i}(x+1)^{n-b}\\\\\r\n&amp;=(x+2)^b(x+1)^{n-b}\r\n\\end{aligned}\r\n\\]</span></p>\r\n<h4 id=\"证明二\">证明二</h4>\r\n<p>考虑 <span class=\"math inline\">\\(f(a,b)\\)</span> 的组合意义：有 <span class=\"math inline\">\\(n\\)</span> 个人，其中 <span class=\"math inline\">\\(b\\)</span> 个人比较强，要选出两批人：</p>\r\n<ul>\r\n<li>先从比较强的 <span class=\"math inline\">\\(b\\)</span> 个人中选出 <span class=\"math inline\">\\(i\\)</span> 个人作为第一批。</li>\r\n<li>再从剩下的 <span class=\"math inline\">\\(n-i\\)</span> 个人中选出 <span class=\"math inline\">\\(a\\)</span> 个人作为第二批。</li>\r\n</ul>\r\n<p>因为要对 <span class=\"math inline\">\\(i \\in [0,b]\\)</span> 求和，所以 <span class=\"math inline\">\\(f(a,b)\\)</span> 表示第一批的人数任意，第二批的人数为 <span class=\"math inline\">\\(a\\)</span> 的方案数。</p>\r\n<p>换一个角度看这个方案数：设第二批的 <span class=\"math inline\">\\(a\\)</span> 个人中有 <span class=\"math inline\">\\(x\\)</span> 个人比较强，<span class=\"math inline\">\\(y\\)</span> 个人不强（<span class=\"math inline\">\\(a=x+y\\)</span>）。</p>\r\n<ul>\r\n<li><p>对于一个比较强的人，如果他入选第二批，方案数为 <span class=\"math inline\">\\(1\\)</span>，否则他既可能入选第一批，也可能落选，方案数为 <span class=\"math inline\">\\(2\\)</span>。</p>\r\n<p>因此比较强的 <span class=\"math inline\">\\(b\\)</span> 个人入选的情况数的生成函数为 <span class=\"math inline\">\\((x+2)^b\\)</span>。</p></li>\r\n<li><p>对于一个不强的人，如果他入选第二批，方案数为 <span class=\"math inline\">\\(1\\)</span>，否则他落选了，方案数为 <span class=\"math inline\">\\(1\\)</span>。</p>\r\n<p>因此不强的 <span class=\"math inline\">\\(n-b\\)</span> 个人入选的情况数的生成函数为 <span class=\"math inline\">\\((x+1)^{n-b}\\)</span>。</p></li>\r\n</ul>\r\n<p>综上，得到 <span class=\"math inline\">\\(\\sum\\limits_{a=0}^n f(a,b)x^a=(x+2)^b(x+1)^{n-b}\\)</span>。</p>\r\n<h3 id=\"两种解法\">两种解法</h3>\r\n<h4 id=\"类-01-背包-dp\">类 01 背包 <code>DP</code></h4>\r\n<p>根据引理，有 <span class=\"math display\">\\[\r\n\\sum_{a=0}^n f(a,b)x^a=\\frac {x+2}{x+1}\\sum_{a=0}^nf(a,b-1)x^a\r\n\\]</span> 乘 <span class=\"math inline\">\\(x+2\\)</span> 相当于添加一个物品，除以 <span class=\"math inline\">\\(x+1\\)</span> 相当于删除一个物品，后者用可撤销背包解决。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(m^2)\\)</span>。</p>\r\n<h4 id=\"递推\">递推</h4>\r\n<p>考虑 <span class=\"math display\">\\[\r\n\\begin{aligned}\r\n&amp;[(x+2)^b(x+1)^{n-b}]&#39;\\\\\r\n&amp;=b(x+2)^{b-1}(x+1)^{n-b}+(x+2)^b(n-b)(x+1)^{n-b-1}\\\\\r\n&amp;=\\dfrac{b(x+1)+(n-b)(x+2)}{(x+2)(x+1)}(x+2)^b(x+1)^{n-b}\\\\\r\n&amp;=\\dfrac{nx+2n-b}{(x+2)(x+1)}(x+2)^b(x+1)^{n-b}\\\\\r\n\\end{aligned}\r\n\\]</span> 两边同乘 <span class=\"math inline\">\\((x+2)(x+1)\\)</span> 得： <span class=\"math display\">\\[\r\n(x+2)(x+1)[(x+2)^b(x+1)^{n-b}]&#39;=(nx+2n-b)(x+2)^b(x+1)^{n-b}\r\n\\]</span> 提取 <span class=\"math inline\">\\(x^a\\)</span> 系数： <span class=\"math display\">\\[\r\n\\begin{aligned}\r\n&amp;(a-1)f(a-1,b)+3af(a,b)+2(a+1)f(a+1,b)\\\\\r\n&amp;=nf(a-1,b)+(2n-b)f(a,b)\r\n\\end{aligned}\r\n\\]</span> 整理得： <span class=\"math display\">\\[\r\nf(a+1,b)=\\frac {(2n-b-3a)f(a,b)+(n-a+1)f(a-1,b)}{2(a+1)}\r\n\\]</span> 进一步： <span class=\"math display\">\\[\r\nf(a,b)=\\frac {(2n-b-3a+3)f(a-1,b)+(n-a+2)f(a-2,b)}{2a}\r\n\\]</span> 对于 <span class=\"math inline\">\\(b \\in [1,m]\\)</span> 都递推一遍即可。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(m^2)\\)</span>。</p>\r\n<p>代码（类 01 背包 <code>DP</code>）：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> P = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> inv[<span class=\"number\">5005</span>], f[<span class=\"number\">5005</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    f[<span class=\"number\">0</span>] = inv[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, m) inv[i] = (P - P / i) * inv[P % i] % P;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) f[i] = f[i - <span class=\"number\">1</span>] * (n - i + <span class=\"number\">1</span>) % P * inv[i] % P;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> as = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">per</span>(j, m, <span class=\"number\">0</span>) f[j] = (f[j] * <span class=\"number\">2</span> + f[j - <span class=\"number\">1</span>]) % P;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, m) as ^= f[j] = (f[j] + P - f[j - <span class=\"number\">1</span>]) % P;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; as;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>代码（递推）：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> P = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> inv[<span class=\"number\">10005</span>], f[<span class=\"number\">5005</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    inv[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, m * <span class=\"number\">2</span>) inv[i] = (P - P / i) * inv[P % i] % P;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> as = <span class=\"number\">0</span>;</span><br><span class=\"line\">    f[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">        (f[<span class=\"number\">0</span>] *= <span class=\"number\">2</span>) %= P;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, m) as ^= f[j] = (((n * <span class=\"number\">2</span> - i - j * <span class=\"number\">3</span> + <span class=\"number\">3</span>) * f[j - <span class=\"number\">1</span>] + (n - j + <span class=\"number\">2</span>) * f[j - <span class=\"number\">2</span>]) % P * inv[j * <span class=\"number\">2</span>] % P + P) % P;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; as;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"不条理狂诗曲 | 洛谷 P7482","date":"2021-04-12T07:24:46.000Z","updated":"2021-04-12T07:24:46.000Z","_content":"> [题目链接](https://www.luogu.com.cn/problem/P7482)\n>\n> 给定一个长度为 $n$ 的序列 $A$，定义 $f(l,r)$ 表示从区间 $[l,r]$ 中选择若干不相邻的数的和的最大值。\n>\n> 求 $\\sum\\limits_{l=1}^n\\sum\\limits_{r=l}^nf(l,r) \\bmod 10^9 + 7$。\n>\n> $n \\le 10^5,0 \\le a_i \\le 10^9$\n\n$f(l,r)$ 显然可以通过 ```DP``` 在 $O(r-l+1)$ 的时间内求出，枚举左端点或右端点来计算答案都不太行得通，因为端点移动一步后难以快速维护。\n\n但所有包含同一位置 $p$ 的区间（$p$ 是端点不算）的 $f$ 值之和却可以快速计算，因为枚举了 $p$ 选不选后，$p$ 左右的部分是**独立的**。\n\n对于一个包含 $p$ 的区间 $[l,r]$，有\n$$\nf(l,r)=\\max\\{f(l,p-1)+f(p+1,r),f(l,p-2)+f(p+2,r)+A_p\\}\n$$\n设\n$$\nx_i=\\begin{cases}f(i,p-1)&(i < p)\\\\f(p+1,i)&(i>p)\\\\0&(i=p)\\end{cases},y_i=\\begin{cases}f(i,p-2)&(i<p-1)\\\\f(p+2,i)&(i>p+1)\\\\0&(p-1 \\le i \\le p+1)\\end{cases}\n$$\n$x,y$ 数组可以通过 ```DP``` 在 $O(n)$ 的时间内求出。\n$$\nf(l,r)=\\max\\{x_l+x_r,y_l+y_r+A_p\\}\\\\\nx_l+x_r \\ge y_l + y_r + A_p \\iff (x_l - y_l) + (x_r - y_r) \\ge A_p\n$$\n把所有除 $p$ 以外的位置按 $x_i-y_i$ 为关键字升序排序，再用双指针扫描一遍即可求出所有包含 $p$ （$p$ 是端点不算）的 $f$ 值之和，单次的复杂度为 $O(n\\log n)$。\n\n接下来就是套路了，考虑分治，定义函数 $solve(L,R)$ 表示 $\\sum\\limits_{l=L}^R\\sum\\limits_{r=l}^Rf(l,r)$。\n\n令 $mid = \\lfloor \\frac {L + R}2 \\rfloor$，那么 $solve(L, R) = solve(L, mid) + solve(mid, R) - A_{mid} + \\sum\\limits_{l=L}^{mid-1}\\sum\\limits_{r=mid+1}^Rf(l,r)$。\n\n最后一项用上述方法计算，总复杂度为 $O(n \\log^2 n)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\nconst int N = 1e5 + 5;\ntypedef long long ll;\nconst ll P = 1e9 + 7, Inf = 1e18;\nint n; ll a[N], f[N][2][2], A[N], B[N], as;\nvoid solve(int l, int r) {\n    if(l == r) { (as += a[l]) %= P; return; }\n    if(r == l + 1) { (as += a[l] + a[r] + max(a[l], a[r])) %= P; return; }\n    int mid = (l + r) / 2;\n    rep(i, 0, 1) f[mid][i][i] = 0, f[mid][i][!i] = -Inf;\n    rep(i, mid + 1, r) rep(j, 0, 1) {\n        f[i][j][0] = max(f[i - 1][j][0], f[i - 1][j][1]);\n        f[i][j][1] = f[i - 1][j][0] + a[i];\n    }\n    per(i, mid - 1, l) rep(j, 0, 1) {\n        f[i][j][0] = max(f[i + 1][j][0], f[i + 1][j][1]);\n        f[i][j][1] = f[i + 1][j][0] + a[i];\n    }\n    vector <int> v;\n    rep(i, l, r) if(i ^ mid) {\n        v.pb(i);\n        A[i] = max(f[i][0][0], f[i][0][1]);\n        B[i] = max(f[i][1][0], f[i][1][1]);\n    }\n    sort(v.begin(), v.end(), [](int i, int j){ return A[i] - B[i] < A[j] - B[j]; });\n    int j = v.size() - 1;\n    ll sua = 0, sub = 0; int cna = 0, cnb = 0;\n    for(int i : v) if(i > mid) (sub += B[i]) %= P, cnb++;\n    for(int i : v) if(i < mid) {\n        while(j >= 0 && (v[j] < mid || A[i] - B[i] + A[v[j]] - B[v[j]] > a[mid])) {\n            if(v[j] > mid) (sua += A[v[j]]) %= P, (sub -= B[v[j]]) %= P, cna++, cnb--;\n            j--;\n        }\n        (as += (a[mid] + B[i]) * cnb + A[i] * cna + sua + sub) %= P;\n    }\n    (as -= a[mid]) %= P, solve(l, mid), solve(mid, r);\n}\nint main() {\n    cin >> n;\n    rep(i, 1, n) scanf(\"%lld\", &a[i]);\n    solve(1, n);\n    cout << (as + P) % P;\n    return 0;\n}\n```","source":"_posts/luogu7482.md","raw":"---\ntitle: 不条理狂诗曲 | 洛谷 P7482\ndate: 2021-04-12 15:24:46\nupdated: 2021-04-12 15:24:46\ntags: [分治,双指针]\ncategories: 洛谷月赛\n---\n> [题目链接](https://www.luogu.com.cn/problem/P7482)\n>\n> 给定一个长度为 $n$ 的序列 $A$，定义 $f(l,r)$ 表示从区间 $[l,r]$ 中选择若干不相邻的数的和的最大值。\n>\n> 求 $\\sum\\limits_{l=1}^n\\sum\\limits_{r=l}^nf(l,r) \\bmod 10^9 + 7$。\n>\n> $n \\le 10^5,0 \\le a_i \\le 10^9$\n\n$f(l,r)$ 显然可以通过 ```DP``` 在 $O(r-l+1)$ 的时间内求出，枚举左端点或右端点来计算答案都不太行得通，因为端点移动一步后难以快速维护。\n\n但所有包含同一位置 $p$ 的区间（$p$ 是端点不算）的 $f$ 值之和却可以快速计算，因为枚举了 $p$ 选不选后，$p$ 左右的部分是**独立的**。\n\n对于一个包含 $p$ 的区间 $[l,r]$，有\n$$\nf(l,r)=\\max\\{f(l,p-1)+f(p+1,r),f(l,p-2)+f(p+2,r)+A_p\\}\n$$\n设\n$$\nx_i=\\begin{cases}f(i,p-1)&(i < p)\\\\f(p+1,i)&(i>p)\\\\0&(i=p)\\end{cases},y_i=\\begin{cases}f(i,p-2)&(i<p-1)\\\\f(p+2,i)&(i>p+1)\\\\0&(p-1 \\le i \\le p+1)\\end{cases}\n$$\n$x,y$ 数组可以通过 ```DP``` 在 $O(n)$ 的时间内求出。\n$$\nf(l,r)=\\max\\{x_l+x_r,y_l+y_r+A_p\\}\\\\\nx_l+x_r \\ge y_l + y_r + A_p \\iff (x_l - y_l) + (x_r - y_r) \\ge A_p\n$$\n把所有除 $p$ 以外的位置按 $x_i-y_i$ 为关键字升序排序，再用双指针扫描一遍即可求出所有包含 $p$ （$p$ 是端点不算）的 $f$ 值之和，单次的复杂度为 $O(n\\log n)$。\n\n接下来就是套路了，考虑分治，定义函数 $solve(L,R)$ 表示 $\\sum\\limits_{l=L}^R\\sum\\limits_{r=l}^Rf(l,r)$。\n\n令 $mid = \\lfloor \\frac {L + R}2 \\rfloor$，那么 $solve(L, R) = solve(L, mid) + solve(mid, R) - A_{mid} + \\sum\\limits_{l=L}^{mid-1}\\sum\\limits_{r=mid+1}^Rf(l,r)$。\n\n最后一项用上述方法计算，总复杂度为 $O(n \\log^2 n)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\nconst int N = 1e5 + 5;\ntypedef long long ll;\nconst ll P = 1e9 + 7, Inf = 1e18;\nint n; ll a[N], f[N][2][2], A[N], B[N], as;\nvoid solve(int l, int r) {\n    if(l == r) { (as += a[l]) %= P; return; }\n    if(r == l + 1) { (as += a[l] + a[r] + max(a[l], a[r])) %= P; return; }\n    int mid = (l + r) / 2;\n    rep(i, 0, 1) f[mid][i][i] = 0, f[mid][i][!i] = -Inf;\n    rep(i, mid + 1, r) rep(j, 0, 1) {\n        f[i][j][0] = max(f[i - 1][j][0], f[i - 1][j][1]);\n        f[i][j][1] = f[i - 1][j][0] + a[i];\n    }\n    per(i, mid - 1, l) rep(j, 0, 1) {\n        f[i][j][0] = max(f[i + 1][j][0], f[i + 1][j][1]);\n        f[i][j][1] = f[i + 1][j][0] + a[i];\n    }\n    vector <int> v;\n    rep(i, l, r) if(i ^ mid) {\n        v.pb(i);\n        A[i] = max(f[i][0][0], f[i][0][1]);\n        B[i] = max(f[i][1][0], f[i][1][1]);\n    }\n    sort(v.begin(), v.end(), [](int i, int j){ return A[i] - B[i] < A[j] - B[j]; });\n    int j = v.size() - 1;\n    ll sua = 0, sub = 0; int cna = 0, cnb = 0;\n    for(int i : v) if(i > mid) (sub += B[i]) %= P, cnb++;\n    for(int i : v) if(i < mid) {\n        while(j >= 0 && (v[j] < mid || A[i] - B[i] + A[v[j]] - B[v[j]] > a[mid])) {\n            if(v[j] > mid) (sua += A[v[j]]) %= P, (sub -= B[v[j]]) %= P, cna++, cnb--;\n            j--;\n        }\n        (as += (a[mid] + B[i]) * cnb + A[i] * cna + sua + sub) %= P;\n    }\n    (as -= a[mid]) %= P, solve(l, mid), solve(mid, r);\n}\nint main() {\n    cin >> n;\n    rep(i, 1, n) scanf(\"%lld\", &a[i]);\n    solve(1, n);\n    cout << (as + P) % P;\n    return 0;\n}\n```","slug":"luogu7482","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh0q0033ootn0g78bh46","content":"<blockquote>\r\n<p><a href=\"https://www.luogu.com.cn/problem/P7482\">题目链接</a></p>\r\n<p>给定一个长度为 <span class=\"math inline\">\\(n\\)</span> 的序列 <span class=\"math inline\">\\(A\\)</span>，定义 <span class=\"math inline\">\\(f(l,r)\\)</span> 表示从区间 <span class=\"math inline\">\\([l,r]\\)</span> 中选择若干不相邻的数的和的最大值。</p>\r\n<p>求 <span class=\"math inline\">\\(\\sum\\limits_{l=1}^n\\sum\\limits_{r=l}^nf(l,r) \\bmod 10^9 + 7\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^5,0 \\le a_i \\le 10^9\\)</span></p>\r\n</blockquote>\r\n<p><span class=\"math inline\">\\(f(l,r)\\)</span> 显然可以通过 <code>DP</code> 在 <span class=\"math inline\">\\(O(r-l+1)\\)</span> 的时间内求出，枚举左端点或右端点来计算答案都不太行得通，因为端点移动一步后难以快速维护。</p>\r\n<p>但所有包含同一位置 <span class=\"math inline\">\\(p\\)</span> 的区间（<span class=\"math inline\">\\(p\\)</span> 是端点不算）的 <span class=\"math inline\">\\(f\\)</span> 值之和却可以快速计算，因为枚举了 <span class=\"math inline\">\\(p\\)</span> 选不选后，<span class=\"math inline\">\\(p\\)</span> 左右的部分是<strong>独立的</strong>。</p>\r\n<p>对于一个包含 <span class=\"math inline\">\\(p\\)</span> 的区间 <span class=\"math inline\">\\([l,r]\\)</span>，有 <span class=\"math display\">\\[\r\nf(l,r)=\\max\\{f(l,p-1)+f(p+1,r),f(l,p-2)+f(p+2,r)+A_p\\}\r\n\\]</span> 设 <span class=\"math display\">\\[\r\nx_i=\\begin{cases}f(i,p-1)&amp;(i &lt; p)\\\\f(p+1,i)&amp;(i&gt;p)\\\\0&amp;(i=p)\\end{cases},y_i=\\begin{cases}f(i,p-2)&amp;(i&lt;p-1)\\\\f(p+2,i)&amp;(i&gt;p+1)\\\\0&amp;(p-1 \\le i \\le p+1)\\end{cases}\r\n\\]</span> <span class=\"math inline\">\\(x,y\\)</span> 数组可以通过 <code>DP</code> 在 <span class=\"math inline\">\\(O(n)\\)</span> 的时间内求出。 <span class=\"math display\">\\[\r\nf(l,r)=\\max\\{x_l+x_r,y_l+y_r+A_p\\}\\\\\r\nx_l+x_r \\ge y_l + y_r + A_p \\iff (x_l - y_l) + (x_r - y_r) \\ge A_p\r\n\\]</span> 把所有除 <span class=\"math inline\">\\(p\\)</span> 以外的位置按 <span class=\"math inline\">\\(x_i-y_i\\)</span> 为关键字升序排序，再用双指针扫描一遍即可求出所有包含 <span class=\"math inline\">\\(p\\)</span> （<span class=\"math inline\">\\(p\\)</span> 是端点不算）的 <span class=\"math inline\">\\(f\\)</span> 值之和，单次的复杂度为 <span class=\"math inline\">\\(O(n\\log n)\\)</span>。</p>\r\n<p>接下来就是套路了，考虑分治，定义函数 <span class=\"math inline\">\\(solve(L,R)\\)</span> 表示 <span class=\"math inline\">\\(\\sum\\limits_{l=L}^R\\sum\\limits_{r=l}^Rf(l,r)\\)</span>。</p>\r\n<p>令 <span class=\"math inline\">\\(mid = \\lfloor \\frac {L + R}2 \\rfloor\\)</span>，那么 <span class=\"math inline\">\\(solve(L, R) = solve(L, mid) + solve(mid, R) - A_{mid} + \\sum\\limits_{l=L}^{mid-1}\\sum\\limits_{r=mid+1}^Rf(l,r)\\)</span>。</p>\r\n<p>最后一项用上述方法计算，总复杂度为 <span class=\"math inline\">\\(O(n \\log^2 n)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll P = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>, Inf = <span class=\"number\">1e18</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n; ll a[N], f[N][<span class=\"number\">2</span>][<span class=\"number\">2</span>], A[N], B[N], as;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r) &#123; (as += a[l]) %= P; <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r == l + <span class=\"number\">1</span>) &#123; (as += a[l] + a[r] + <span class=\"built_in\">max</span>(a[l], a[r])) %= P; <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, <span class=\"number\">1</span>) f[mid][i][i] = <span class=\"number\">0</span>, f[mid][i][!i] = -Inf;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, mid + <span class=\"number\">1</span>, r) <span class=\"built_in\">rep</span>(j, <span class=\"number\">0</span>, <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        f[i][j][<span class=\"number\">0</span>] = <span class=\"built_in\">max</span>(f[i - <span class=\"number\">1</span>][j][<span class=\"number\">0</span>], f[i - <span class=\"number\">1</span>][j][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        f[i][j][<span class=\"number\">1</span>] = f[i - <span class=\"number\">1</span>][j][<span class=\"number\">0</span>] + a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, mid - <span class=\"number\">1</span>, l) <span class=\"built_in\">rep</span>(j, <span class=\"number\">0</span>, <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        f[i][j][<span class=\"number\">0</span>] = <span class=\"built_in\">max</span>(f[i + <span class=\"number\">1</span>][j][<span class=\"number\">0</span>], f[i + <span class=\"number\">1</span>][j][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        f[i][j][<span class=\"number\">1</span>] = f[i + <span class=\"number\">1</span>][j][<span class=\"number\">0</span>] + a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector &lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, l, r) <span class=\"keyword\">if</span>(i ^ mid) &#123;</span><br><span class=\"line\">        v.<span class=\"built_in\">pb</span>(i);</span><br><span class=\"line\">        A[i] = <span class=\"built_in\">max</span>(f[i][<span class=\"number\">0</span>][<span class=\"number\">0</span>], f[i][<span class=\"number\">0</span>][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        B[i] = <span class=\"built_in\">max</span>(f[i][<span class=\"number\">1</span>][<span class=\"number\">0</span>], f[i][<span class=\"number\">1</span>][<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), [](<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)&#123; <span class=\"keyword\">return</span> A[i] - B[i] &lt; A[j] - B[j]; &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = v.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    ll sua = <span class=\"number\">0</span>, sub = <span class=\"number\">0</span>; <span class=\"keyword\">int</span> cna = <span class=\"number\">0</span>, cnb = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : v) <span class=\"keyword\">if</span>(i &gt; mid) (sub += B[i]) %= P, cnb++;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : v) <span class=\"keyword\">if</span>(i &lt; mid) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j &gt;= <span class=\"number\">0</span> &amp;&amp; (v[j] &lt; mid || A[i] - B[i] + A[v[j]] - B[v[j]] &gt; a[mid])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v[j] &gt; mid) (sua += A[v[j]]) %= P, (sub -= B[v[j]]) %= P, cna++, cnb--;</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        (as += (a[mid] + B[i]) * cnb + A[i] * cna + sua + sub) %= P;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    (as -= a[mid]) %= P, <span class=\"built_in\">solve</span>(l, mid), <span class=\"built_in\">solve</span>(mid, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">    <span class=\"built_in\">solve</span>(<span class=\"number\">1</span>, n);</span><br><span class=\"line\">    cout &lt;&lt; (as + P) % P;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":2579,"excerpt":"","more":"<blockquote>\r\n<p><a href=\"https://www.luogu.com.cn/problem/P7482\">题目链接</a></p>\r\n<p>给定一个长度为 <span class=\"math inline\">\\(n\\)</span> 的序列 <span class=\"math inline\">\\(A\\)</span>，定义 <span class=\"math inline\">\\(f(l,r)\\)</span> 表示从区间 <span class=\"math inline\">\\([l,r]\\)</span> 中选择若干不相邻的数的和的最大值。</p>\r\n<p>求 <span class=\"math inline\">\\(\\sum\\limits_{l=1}^n\\sum\\limits_{r=l}^nf(l,r) \\bmod 10^9 + 7\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^5,0 \\le a_i \\le 10^9\\)</span></p>\r\n</blockquote>\r\n<p><span class=\"math inline\">\\(f(l,r)\\)</span> 显然可以通过 <code>DP</code> 在 <span class=\"math inline\">\\(O(r-l+1)\\)</span> 的时间内求出，枚举左端点或右端点来计算答案都不太行得通，因为端点移动一步后难以快速维护。</p>\r\n<p>但所有包含同一位置 <span class=\"math inline\">\\(p\\)</span> 的区间（<span class=\"math inline\">\\(p\\)</span> 是端点不算）的 <span class=\"math inline\">\\(f\\)</span> 值之和却可以快速计算，因为枚举了 <span class=\"math inline\">\\(p\\)</span> 选不选后，<span class=\"math inline\">\\(p\\)</span> 左右的部分是<strong>独立的</strong>。</p>\r\n<p>对于一个包含 <span class=\"math inline\">\\(p\\)</span> 的区间 <span class=\"math inline\">\\([l,r]\\)</span>，有 <span class=\"math display\">\\[\r\nf(l,r)=\\max\\{f(l,p-1)+f(p+1,r),f(l,p-2)+f(p+2,r)+A_p\\}\r\n\\]</span> 设 <span class=\"math display\">\\[\r\nx_i=\\begin{cases}f(i,p-1)&amp;(i &lt; p)\\\\f(p+1,i)&amp;(i&gt;p)\\\\0&amp;(i=p)\\end{cases},y_i=\\begin{cases}f(i,p-2)&amp;(i&lt;p-1)\\\\f(p+2,i)&amp;(i&gt;p+1)\\\\0&amp;(p-1 \\le i \\le p+1)\\end{cases}\r\n\\]</span> <span class=\"math inline\">\\(x,y\\)</span> 数组可以通过 <code>DP</code> 在 <span class=\"math inline\">\\(O(n)\\)</span> 的时间内求出。 <span class=\"math display\">\\[\r\nf(l,r)=\\max\\{x_l+x_r,y_l+y_r+A_p\\}\\\\\r\nx_l+x_r \\ge y_l + y_r + A_p \\iff (x_l - y_l) + (x_r - y_r) \\ge A_p\r\n\\]</span> 把所有除 <span class=\"math inline\">\\(p\\)</span> 以外的位置按 <span class=\"math inline\">\\(x_i-y_i\\)</span> 为关键字升序排序，再用双指针扫描一遍即可求出所有包含 <span class=\"math inline\">\\(p\\)</span> （<span class=\"math inline\">\\(p\\)</span> 是端点不算）的 <span class=\"math inline\">\\(f\\)</span> 值之和，单次的复杂度为 <span class=\"math inline\">\\(O(n\\log n)\\)</span>。</p>\r\n<p>接下来就是套路了，考虑分治，定义函数 <span class=\"math inline\">\\(solve(L,R)\\)</span> 表示 <span class=\"math inline\">\\(\\sum\\limits_{l=L}^R\\sum\\limits_{r=l}^Rf(l,r)\\)</span>。</p>\r\n<p>令 <span class=\"math inline\">\\(mid = \\lfloor \\frac {L + R}2 \\rfloor\\)</span>，那么 <span class=\"math inline\">\\(solve(L, R) = solve(L, mid) + solve(mid, R) - A_{mid} + \\sum\\limits_{l=L}^{mid-1}\\sum\\limits_{r=mid+1}^Rf(l,r)\\)</span>。</p>\r\n<p>最后一项用上述方法计算，总复杂度为 <span class=\"math inline\">\\(O(n \\log^2 n)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll P = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>, Inf = <span class=\"number\">1e18</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n; ll a[N], f[N][<span class=\"number\">2</span>][<span class=\"number\">2</span>], A[N], B[N], as;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r) &#123; (as += a[l]) %= P; <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r == l + <span class=\"number\">1</span>) &#123; (as += a[l] + a[r] + <span class=\"built_in\">max</span>(a[l], a[r])) %= P; <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, <span class=\"number\">1</span>) f[mid][i][i] = <span class=\"number\">0</span>, f[mid][i][!i] = -Inf;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, mid + <span class=\"number\">1</span>, r) <span class=\"built_in\">rep</span>(j, <span class=\"number\">0</span>, <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        f[i][j][<span class=\"number\">0</span>] = <span class=\"built_in\">max</span>(f[i - <span class=\"number\">1</span>][j][<span class=\"number\">0</span>], f[i - <span class=\"number\">1</span>][j][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        f[i][j][<span class=\"number\">1</span>] = f[i - <span class=\"number\">1</span>][j][<span class=\"number\">0</span>] + a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, mid - <span class=\"number\">1</span>, l) <span class=\"built_in\">rep</span>(j, <span class=\"number\">0</span>, <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        f[i][j][<span class=\"number\">0</span>] = <span class=\"built_in\">max</span>(f[i + <span class=\"number\">1</span>][j][<span class=\"number\">0</span>], f[i + <span class=\"number\">1</span>][j][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        f[i][j][<span class=\"number\">1</span>] = f[i + <span class=\"number\">1</span>][j][<span class=\"number\">0</span>] + a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector &lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, l, r) <span class=\"keyword\">if</span>(i ^ mid) &#123;</span><br><span class=\"line\">        v.<span class=\"built_in\">pb</span>(i);</span><br><span class=\"line\">        A[i] = <span class=\"built_in\">max</span>(f[i][<span class=\"number\">0</span>][<span class=\"number\">0</span>], f[i][<span class=\"number\">0</span>][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        B[i] = <span class=\"built_in\">max</span>(f[i][<span class=\"number\">1</span>][<span class=\"number\">0</span>], f[i][<span class=\"number\">1</span>][<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), [](<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)&#123; <span class=\"keyword\">return</span> A[i] - B[i] &lt; A[j] - B[j]; &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = v.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    ll sua = <span class=\"number\">0</span>, sub = <span class=\"number\">0</span>; <span class=\"keyword\">int</span> cna = <span class=\"number\">0</span>, cnb = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : v) <span class=\"keyword\">if</span>(i &gt; mid) (sub += B[i]) %= P, cnb++;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i : v) <span class=\"keyword\">if</span>(i &lt; mid) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j &gt;= <span class=\"number\">0</span> &amp;&amp; (v[j] &lt; mid || A[i] - B[i] + A[v[j]] - B[v[j]] &gt; a[mid])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v[j] &gt; mid) (sua += A[v[j]]) %= P, (sub -= B[v[j]]) %= P, cna++, cnb--;</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        (as += (a[mid] + B[i]) * cnb + A[i] * cna + sua + sub) %= P;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    (as -= a[mid]) %= P, <span class=\"built_in\">solve</span>(l, mid), <span class=\"built_in\">solve</span>(mid, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">    <span class=\"built_in\">solve</span>(<span class=\"number\">1</span>, n);</span><br><span class=\"line\">    cout &lt;&lt; (as + P) % P;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"NIM 游戏 & SG 定理","date":"2021-03-31T02:45:39.000Z","updated":"2021-03-31T02:45:39.000Z","_content":"定义**必胜状态**为**当前局面先手必胜的状态**，**必败状态**为**当前局面先手必败的状态**。\n\n### 有向图游戏\n\n> 在一个**有向无环图**中，只有一个起点，上面有一个棋子，两个玩家轮流沿着有向边推动棋子，不能走的玩家判负。\n\n对于点 $u$ 和它的 $k$ 个后继点 $v_1,v_2,\\cdots,v_k$，定义 ```SG``` 函数：\n$$\nSG(u)=\\text{mex}\\{SG(v_1),SG(v_2),\\cdots,SG(v_k)\\}\n$$\n特别地，当 $u$ 没有后继状态时 $SG(u)=0$。\n\n显然，先手必胜当且仅当 $SG(u) \\ne 0$。\n\n对于 $n$ 个有向图游戏组合而成的游戏，即两个玩家轮流推动 $n$ 个棋子之一，设这个游戏的初始状态为 $S$，棋子的起点分别为 $s_1,s_2,\\cdots,s_n$，则有 **```SG``` 定理**：\n\n$SG(S) = SG(s_1) \\oplus SG(s_2) \\oplus \\cdots \\oplus SG(s_n)$。\n\n证明：由于组合而成的游戏也是有向图游戏，因此所有的状态存在一个拓扑序，以下使用**数学归纳法**证明：\n\n- 归纳奠基：对于没有后继的状态 $S$，$\\forall i \\in [1,n], SG(s_i)=0, SG(S)=0$，命题成立。\n\n- 归纳假设：设当前状态 $S$ 满足 $SG(s_1) + SG(s_2) + \\cdots + SG(s_n) = m$，对于所有满足 $SG(s_1') + SG(s_2') + \\cdots + SG(s_n') < m$ 的状态以及所有满足 $SG(s_1') + SG(s_2') + \\cdots + SG(s_n') = m$ 并且拓扑序小于 $S$ 的状态命题成立。\n\n- 归纳递推：设 $SG(s_1) \\oplus SG(s_2) \\oplus \\cdots \\oplus SG(s_n) =k$。\n\n  先证明 $\\forall k' < k$, $S$ 都存在一个后继状态 $S'$ 满足 $SG(S')=k'$。 \n  \n  设 $k \\oplus k'$ 在二进制下的最高位为第 $m$ 位，因为 $k' < k$, 所以 $k'$ 的第 $m$ 位为 $0$，$k$ 的第 $m$ 位为 $1$。\n\n  根据异或定义，存在 $i$ 满足 $SG(s_i)$ 的第 $m$ 位为 $1$。\n\n  那么 $SG(s_i) \\oplus k \\oplus k' < SG(s_i)$，根据 ```SG``` 函数定义，$s_i$ 一定存在后继点 $s_i'$，满足 $SG(s_i') = SG(s_i) \\oplus k \\oplus k'$。\n\n  把 $s_i$ 推到 $s_i'$ 后满足 $SG(s_1) + SG(s_2) + \\cdots + SG(s_i') + \\cdots + SG(s_n) < m$，因此 $SG(S')=SG(s_1) \\oplus SG(s_2) \\oplus \\cdots \\oplus SG(s_i') \\oplus \\cdots \\oplus SG(s_n)=k'$。\n\n  再证明 $S$ 不存在后继状态 $S'$ 满足 $SG(S')=k$。\n\n  如果把 $s_i$ 推到 $s_i'$，一定 $SG(s_i') \\ne SG(s_i)$。\n\n  如果 $SG(s_i') < SG(s_i)$，那么 $SG(s_1) + SG(s_2) + \\cdots + SG(s_i') + \\cdots + SG(s_n) < m$，因此 $SG(S')=SG(s_1) \\oplus SG(s_2) \\oplus \\cdots \\oplus SG(s_i') \\oplus \\cdots \\oplus SG(s_n) \\ne k$。\n\n  如果 $SG(s_i') > SG(s_i)$，那么 $SG(s_1) + SG(s_2) + \\cdots + SG(s_i') + \\cdots + SG(s_n) > m$，因此 $SG(S')$ 未知，但我们只需证 $SG(S') \\ne k$。根据 ```SG``` 函数定义，$s_i'$ 一定存在后继点 $s_i''$，满足 $SG(s_i'') = SG(s_i)$，此时 $SG(s_1) + SG(s_2) + \\cdots + SG(s_i'') + \\cdots + SG(s_n) = m$，并且 $S''$ 的拓扑序小于 $S$，因此 $SG(S'')=SG(s_1) \\oplus SG(s_2) \\oplus \\cdots \\oplus SG(s_i'') \\oplus \\cdots \\oplus SG(s_n)=k$，所以一定有 $SG(S') \\ne k$。\n\n### NIM 游戏\n\n很多的公平组合游戏都可以转化为多个有向图游戏的组合，比如 **NIM 游戏**。\n\n> $n$ 堆物品，每堆有 $a_i$ 个，两个玩家轮流取走任意一堆的任意个物品，但不能不取。\n>\n> 取走最后一个物品的人获胜。\n\n对于每一堆石子，定义结点 $x$ 表示有 $x$ 个物品的状态。所有编号大的结点向编号小的结点连边。\n\n这样，NIM 游戏就转化 $n$ 个有向图游戏的组合了。\n\n易得 $SG(x)=x$，根据 ```SG``` 定理，当且仅当 $a_1 \\oplus a_2 \\oplus \\cdots \\oplus a_n \\ne 0$ 时，先手必胜。\n\n### 阶梯 NIM 游戏\n\n>  $n$ 堆物品，每堆有 $a_i$ 个，两个玩家轮流取走任意第 $i$ 堆（$i > 1$）的任意个物品移到第 $i-1$ 堆中，但不能不取。\n>\n> 最后没有物品可取的人输。\n\n结论：**此游戏等价于 $\\lfloor \\frac n2 \\rfloor$ 堆物品，每堆有  $a_{2i}$ 个物品的 NIM 游戏。**\n\n不妨假设在 NIM 游戏中 ```A``` 必胜，```B``` 必败，则 ```A``` 可以使用以下策略：\n\n- 如果前一步 ```B```  从第 $2i$ 堆里取物品或者当前为第一步，```A``` 按照 NIM 里的策略从对应的堆里取物品。\n- 如果前一步 ```B``` 从第 $2i+1$ 堆里取物品，```A``` 将这些物品再移到第 $2i-1$ 堆。\n\n这样奇数堆中的物品就不会影响胜负情况，而在偶数堆中取物品相当于直接删除（因为它们到奇数堆后就不会影响胜负情况）。","source":"_posts/nim-you-xi-and-sg-ding-li.md","raw":"---\ntitle: NIM 游戏 & SG 定理\ndate: 2021-03-31 10:45:39\nupdated: 2021-03-31 10:45:39\ntags: [知识总结,博弈论,阶梯 NIM 游戏]\ncategories: 算法\n---\n定义**必胜状态**为**当前局面先手必胜的状态**，**必败状态**为**当前局面先手必败的状态**。\n\n### 有向图游戏\n\n> 在一个**有向无环图**中，只有一个起点，上面有一个棋子，两个玩家轮流沿着有向边推动棋子，不能走的玩家判负。\n\n对于点 $u$ 和它的 $k$ 个后继点 $v_1,v_2,\\cdots,v_k$，定义 ```SG``` 函数：\n$$\nSG(u)=\\text{mex}\\{SG(v_1),SG(v_2),\\cdots,SG(v_k)\\}\n$$\n特别地，当 $u$ 没有后继状态时 $SG(u)=0$。\n\n显然，先手必胜当且仅当 $SG(u) \\ne 0$。\n\n对于 $n$ 个有向图游戏组合而成的游戏，即两个玩家轮流推动 $n$ 个棋子之一，设这个游戏的初始状态为 $S$，棋子的起点分别为 $s_1,s_2,\\cdots,s_n$，则有 **```SG``` 定理**：\n\n$SG(S) = SG(s_1) \\oplus SG(s_2) \\oplus \\cdots \\oplus SG(s_n)$。\n\n证明：由于组合而成的游戏也是有向图游戏，因此所有的状态存在一个拓扑序，以下使用**数学归纳法**证明：\n\n- 归纳奠基：对于没有后继的状态 $S$，$\\forall i \\in [1,n], SG(s_i)=0, SG(S)=0$，命题成立。\n\n- 归纳假设：设当前状态 $S$ 满足 $SG(s_1) + SG(s_2) + \\cdots + SG(s_n) = m$，对于所有满足 $SG(s_1') + SG(s_2') + \\cdots + SG(s_n') < m$ 的状态以及所有满足 $SG(s_1') + SG(s_2') + \\cdots + SG(s_n') = m$ 并且拓扑序小于 $S$ 的状态命题成立。\n\n- 归纳递推：设 $SG(s_1) \\oplus SG(s_2) \\oplus \\cdots \\oplus SG(s_n) =k$。\n\n  先证明 $\\forall k' < k$, $S$ 都存在一个后继状态 $S'$ 满足 $SG(S')=k'$。 \n  \n  设 $k \\oplus k'$ 在二进制下的最高位为第 $m$ 位，因为 $k' < k$, 所以 $k'$ 的第 $m$ 位为 $0$，$k$ 的第 $m$ 位为 $1$。\n\n  根据异或定义，存在 $i$ 满足 $SG(s_i)$ 的第 $m$ 位为 $1$。\n\n  那么 $SG(s_i) \\oplus k \\oplus k' < SG(s_i)$，根据 ```SG``` 函数定义，$s_i$ 一定存在后继点 $s_i'$，满足 $SG(s_i') = SG(s_i) \\oplus k \\oplus k'$。\n\n  把 $s_i$ 推到 $s_i'$ 后满足 $SG(s_1) + SG(s_2) + \\cdots + SG(s_i') + \\cdots + SG(s_n) < m$，因此 $SG(S')=SG(s_1) \\oplus SG(s_2) \\oplus \\cdots \\oplus SG(s_i') \\oplus \\cdots \\oplus SG(s_n)=k'$。\n\n  再证明 $S$ 不存在后继状态 $S'$ 满足 $SG(S')=k$。\n\n  如果把 $s_i$ 推到 $s_i'$，一定 $SG(s_i') \\ne SG(s_i)$。\n\n  如果 $SG(s_i') < SG(s_i)$，那么 $SG(s_1) + SG(s_2) + \\cdots + SG(s_i') + \\cdots + SG(s_n) < m$，因此 $SG(S')=SG(s_1) \\oplus SG(s_2) \\oplus \\cdots \\oplus SG(s_i') \\oplus \\cdots \\oplus SG(s_n) \\ne k$。\n\n  如果 $SG(s_i') > SG(s_i)$，那么 $SG(s_1) + SG(s_2) + \\cdots + SG(s_i') + \\cdots + SG(s_n) > m$，因此 $SG(S')$ 未知，但我们只需证 $SG(S') \\ne k$。根据 ```SG``` 函数定义，$s_i'$ 一定存在后继点 $s_i''$，满足 $SG(s_i'') = SG(s_i)$，此时 $SG(s_1) + SG(s_2) + \\cdots + SG(s_i'') + \\cdots + SG(s_n) = m$，并且 $S''$ 的拓扑序小于 $S$，因此 $SG(S'')=SG(s_1) \\oplus SG(s_2) \\oplus \\cdots \\oplus SG(s_i'') \\oplus \\cdots \\oplus SG(s_n)=k$，所以一定有 $SG(S') \\ne k$。\n\n### NIM 游戏\n\n很多的公平组合游戏都可以转化为多个有向图游戏的组合，比如 **NIM 游戏**。\n\n> $n$ 堆物品，每堆有 $a_i$ 个，两个玩家轮流取走任意一堆的任意个物品，但不能不取。\n>\n> 取走最后一个物品的人获胜。\n\n对于每一堆石子，定义结点 $x$ 表示有 $x$ 个物品的状态。所有编号大的结点向编号小的结点连边。\n\n这样，NIM 游戏就转化 $n$ 个有向图游戏的组合了。\n\n易得 $SG(x)=x$，根据 ```SG``` 定理，当且仅当 $a_1 \\oplus a_2 \\oplus \\cdots \\oplus a_n \\ne 0$ 时，先手必胜。\n\n### 阶梯 NIM 游戏\n\n>  $n$ 堆物品，每堆有 $a_i$ 个，两个玩家轮流取走任意第 $i$ 堆（$i > 1$）的任意个物品移到第 $i-1$ 堆中，但不能不取。\n>\n> 最后没有物品可取的人输。\n\n结论：**此游戏等价于 $\\lfloor \\frac n2 \\rfloor$ 堆物品，每堆有  $a_{2i}$ 个物品的 NIM 游戏。**\n\n不妨假设在 NIM 游戏中 ```A``` 必胜，```B``` 必败，则 ```A``` 可以使用以下策略：\n\n- 如果前一步 ```B```  从第 $2i$ 堆里取物品或者当前为第一步，```A``` 按照 NIM 里的策略从对应的堆里取物品。\n- 如果前一步 ```B``` 从第 $2i+1$ 堆里取物品，```A``` 将这些物品再移到第 $2i-1$ 堆。\n\n这样奇数堆中的物品就不会影响胜负情况，而在偶数堆中取物品相当于直接删除（因为它们到奇数堆后就不会影响胜负情况）。","slug":"nim-you-xi-and-sg-ding-li","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh0r0036ootn68hf2kpr","content":"<p>定义<strong>必胜状态</strong>为<strong>当前局面先手必胜的状态</strong>，<strong>必败状态</strong>为<strong>当前局面先手必败的状态</strong>。</p>\r\n<h3 id=\"有向图游戏\">有向图游戏</h3>\r\n<blockquote>\r\n<p>在一个<strong>有向无环图</strong>中，只有一个起点，上面有一个棋子，两个玩家轮流沿着有向边推动棋子，不能走的玩家判负。</p>\r\n</blockquote>\r\n<p>对于点 <span class=\"math inline\">\\(u\\)</span> 和它的 <span class=\"math inline\">\\(k\\)</span> 个后继点 <span class=\"math inline\">\\(v_1,v_2,\\cdots,v_k\\)</span>，定义 <code>SG</code> 函数： <span class=\"math display\">\\[\r\nSG(u)=\\text{mex}\\{SG(v_1),SG(v_2),\\cdots,SG(v_k)\\}\r\n\\]</span> 特别地，当 <span class=\"math inline\">\\(u\\)</span> 没有后继状态时 <span class=\"math inline\">\\(SG(u)=0\\)</span>。</p>\r\n<p>显然，先手必胜当且仅当 <span class=\"math inline\">\\(SG(u) \\ne 0\\)</span>。</p>\r\n<p>对于 <span class=\"math inline\">\\(n\\)</span> 个有向图游戏组合而成的游戏，即两个玩家轮流推动 <span class=\"math inline\">\\(n\\)</span> 个棋子之一，设这个游戏的初始状态为 <span class=\"math inline\">\\(S\\)</span>，棋子的起点分别为 <span class=\"math inline\">\\(s_1,s_2,\\cdots,s_n\\)</span>，则有 <strong><code>SG</code> 定理</strong>：</p>\r\n<p><span class=\"math inline\">\\(SG(S) = SG(s_1) \\oplus SG(s_2) \\oplus \\cdots \\oplus SG(s_n)\\)</span>。</p>\r\n<p>证明：由于组合而成的游戏也是有向图游戏，因此所有的状态存在一个拓扑序，以下使用<strong>数学归纳法</strong>证明：</p>\r\n<ul>\r\n<li><p>归纳奠基：对于没有后继的状态 <span class=\"math inline\">\\(S\\)</span>，<span class=\"math inline\">\\(\\forall i \\in [1,n], SG(s_i)=0, SG(S)=0\\)</span>，命题成立。</p></li>\r\n<li><p>归纳假设：设当前状态 <span class=\"math inline\">\\(S\\)</span> 满足 <span class=\"math inline\">\\(SG(s_1) + SG(s_2) + \\cdots + SG(s_n) = m\\)</span>，对于所有满足 <span class=\"math inline\">\\(SG(s_1&#39;) + SG(s_2&#39;) + \\cdots + SG(s_n&#39;) &lt; m\\)</span> 的状态以及所有满足 <span class=\"math inline\">\\(SG(s_1&#39;) + SG(s_2&#39;) + \\cdots + SG(s_n&#39;) = m\\)</span> 并且拓扑序小于 <span class=\"math inline\">\\(S\\)</span> 的状态命题成立。</p></li>\r\n<li><p>归纳递推：设 <span class=\"math inline\">\\(SG(s_1) \\oplus SG(s_2) \\oplus \\cdots \\oplus SG(s_n) =k\\)</span>。</p>\r\n<p>先证明 <span class=\"math inline\">\\(\\forall k&#39; &lt; k\\)</span>, <span class=\"math inline\">\\(S\\)</span> 都存在一个后继状态 <span class=\"math inline\">\\(S&#39;\\)</span> 满足 <span class=\"math inline\">\\(SG(S&#39;)=k&#39;\\)</span>。</p>\r\n<p>设 <span class=\"math inline\">\\(k \\oplus k&#39;\\)</span> 在二进制下的最高位为第 <span class=\"math inline\">\\(m\\)</span> 位，因为 <span class=\"math inline\">\\(k&#39; &lt; k\\)</span>, 所以 <span class=\"math inline\">\\(k&#39;\\)</span> 的第 <span class=\"math inline\">\\(m\\)</span> 位为 <span class=\"math inline\">\\(0\\)</span>，<span class=\"math inline\">\\(k\\)</span> 的第 <span class=\"math inline\">\\(m\\)</span> 位为 <span class=\"math inline\">\\(1\\)</span>。</p>\r\n<p>根据异或定义，存在 <span class=\"math inline\">\\(i\\)</span> 满足 <span class=\"math inline\">\\(SG(s_i)\\)</span> 的第 <span class=\"math inline\">\\(m\\)</span> 位为 <span class=\"math inline\">\\(1\\)</span>。</p>\r\n<p>那么 <span class=\"math inline\">\\(SG(s_i) \\oplus k \\oplus k&#39; &lt; SG(s_i)\\)</span>，根据 <code>SG</code> 函数定义，<span class=\"math inline\">\\(s_i\\)</span> 一定存在后继点 <span class=\"math inline\">\\(s_i&#39;\\)</span>，满足 <span class=\"math inline\">\\(SG(s_i&#39;) = SG(s_i) \\oplus k \\oplus k&#39;\\)</span>。</p>\r\n<p>把 <span class=\"math inline\">\\(s_i\\)</span> 推到 <span class=\"math inline\">\\(s_i&#39;\\)</span> 后满足 <span class=\"math inline\">\\(SG(s_1) + SG(s_2) + \\cdots + SG(s_i&#39;) + \\cdots + SG(s_n) &lt; m\\)</span>，因此 <span class=\"math inline\">\\(SG(S&#39;)=SG(s_1) \\oplus SG(s_2) \\oplus \\cdots \\oplus SG(s_i&#39;) \\oplus \\cdots \\oplus SG(s_n)=k&#39;\\)</span>。</p>\r\n<p>再证明 <span class=\"math inline\">\\(S\\)</span> 不存在后继状态 <span class=\"math inline\">\\(S&#39;\\)</span> 满足 <span class=\"math inline\">\\(SG(S&#39;)=k\\)</span>。</p>\r\n<p>如果把 <span class=\"math inline\">\\(s_i\\)</span> 推到 <span class=\"math inline\">\\(s_i&#39;\\)</span>，一定 <span class=\"math inline\">\\(SG(s_i&#39;) \\ne SG(s_i)\\)</span>。</p>\r\n<p>如果 <span class=\"math inline\">\\(SG(s_i&#39;) &lt; SG(s_i)\\)</span>，那么 <span class=\"math inline\">\\(SG(s_1) + SG(s_2) + \\cdots + SG(s_i&#39;) + \\cdots + SG(s_n) &lt; m\\)</span>，因此 <span class=\"math inline\">\\(SG(S&#39;)=SG(s_1) \\oplus SG(s_2) \\oplus \\cdots \\oplus SG(s_i&#39;) \\oplus \\cdots \\oplus SG(s_n) \\ne k\\)</span>。</p>\r\n<p>如果 <span class=\"math inline\">\\(SG(s_i&#39;) &gt; SG(s_i)\\)</span>，那么 <span class=\"math inline\">\\(SG(s_1) + SG(s_2) + \\cdots + SG(s_i&#39;) + \\cdots + SG(s_n) &gt; m\\)</span>，因此 <span class=\"math inline\">\\(SG(S&#39;)\\)</span> 未知，但我们只需证 <span class=\"math inline\">\\(SG(S&#39;) \\ne k\\)</span>。根据 <code>SG</code> 函数定义，<span class=\"math inline\">\\(s_i&#39;\\)</span> 一定存在后继点 <span class=\"math inline\">\\(s_i&#39;&#39;\\)</span>，满足 <span class=\"math inline\">\\(SG(s_i&#39;&#39;) = SG(s_i)\\)</span>，此时 <span class=\"math inline\">\\(SG(s_1) + SG(s_2) + \\cdots + SG(s_i&#39;&#39;) + \\cdots + SG(s_n) = m\\)</span>，并且 <span class=\"math inline\">\\(S&#39;&#39;\\)</span> 的拓扑序小于 <span class=\"math inline\">\\(S\\)</span>，因此 <span class=\"math inline\">\\(SG(S&#39;&#39;)=SG(s_1) \\oplus SG(s_2) \\oplus \\cdots \\oplus SG(s_i&#39;&#39;) \\oplus \\cdots \\oplus SG(s_n)=k\\)</span>，所以一定有 <span class=\"math inline\">\\(SG(S&#39;) \\ne k\\)</span>。</p></li>\r\n</ul>\r\n<h3 id=\"nim-游戏\">NIM 游戏</h3>\r\n<p>很多的公平组合游戏都可以转化为多个有向图游戏的组合，比如 <strong>NIM 游戏</strong>。</p>\r\n<blockquote>\r\n<p><span class=\"math inline\">\\(n\\)</span> 堆物品，每堆有 <span class=\"math inline\">\\(a_i\\)</span> 个，两个玩家轮流取走任意一堆的任意个物品，但不能不取。</p>\r\n<p>取走最后一个物品的人获胜。</p>\r\n</blockquote>\r\n<p>对于每一堆石子，定义结点 <span class=\"math inline\">\\(x\\)</span> 表示有 <span class=\"math inline\">\\(x\\)</span> 个物品的状态。所有编号大的结点向编号小的结点连边。</p>\r\n<p>这样，NIM 游戏就转化 <span class=\"math inline\">\\(n\\)</span> 个有向图游戏的组合了。</p>\r\n<p>易得 <span class=\"math inline\">\\(SG(x)=x\\)</span>，根据 <code>SG</code> 定理，当且仅当 <span class=\"math inline\">\\(a_1 \\oplus a_2 \\oplus \\cdots \\oplus a_n \\ne 0\\)</span> 时，先手必胜。</p>\r\n<h3 id=\"阶梯-nim-游戏\">阶梯 NIM 游戏</h3>\r\n<blockquote>\r\n<p><span class=\"math inline\">\\(n\\)</span> 堆物品，每堆有 <span class=\"math inline\">\\(a_i\\)</span> 个，两个玩家轮流取走任意第 <span class=\"math inline\">\\(i\\)</span> 堆（<span class=\"math inline\">\\(i &gt; 1\\)</span>）的任意个物品移到第 <span class=\"math inline\">\\(i-1\\)</span> 堆中，但不能不取。</p>\r\n<p>最后没有物品可取的人输。</p>\r\n</blockquote>\r\n<p>结论：<strong>此游戏等价于 <span class=\"math inline\">\\(\\lfloor \\frac n2 \\rfloor\\)</span> 堆物品，每堆有 <span class=\"math inline\">\\(a_{2i}\\)</span> 个物品的 NIM 游戏。</strong></p>\r\n<p>不妨假设在 NIM 游戏中 <code>A</code> 必胜，<code>B</code> 必败，则 <code>A</code> 可以使用以下策略：</p>\r\n<ul>\r\n<li>如果前一步 <code>B</code> 从第 <span class=\"math inline\">\\(2i\\)</span> 堆里取物品或者当前为第一步，<code>A</code> 按照 NIM 里的策略从对应的堆里取物品。</li>\r\n<li>如果前一步 <code>B</code> 从第 <span class=\"math inline\">\\(2i+1\\)</span> 堆里取物品，<code>A</code> 将这些物品再移到第 <span class=\"math inline\">\\(2i-1\\)</span> 堆。</li>\r\n</ul>\r\n<p>这样奇数堆中的物品就不会影响胜负情况，而在偶数堆中取物品相当于直接删除（因为它们到奇数堆后就不会影响胜负情况）。</p>\r\n","site":{"data":{}},"length":2594,"excerpt":"","more":"<p>定义<strong>必胜状态</strong>为<strong>当前局面先手必胜的状态</strong>，<strong>必败状态</strong>为<strong>当前局面先手必败的状态</strong>。</p>\r\n<h3 id=\"有向图游戏\">有向图游戏</h3>\r\n<blockquote>\r\n<p>在一个<strong>有向无环图</strong>中，只有一个起点，上面有一个棋子，两个玩家轮流沿着有向边推动棋子，不能走的玩家判负。</p>\r\n</blockquote>\r\n<p>对于点 <span class=\"math inline\">\\(u\\)</span> 和它的 <span class=\"math inline\">\\(k\\)</span> 个后继点 <span class=\"math inline\">\\(v_1,v_2,\\cdots,v_k\\)</span>，定义 <code>SG</code> 函数： <span class=\"math display\">\\[\r\nSG(u)=\\text{mex}\\{SG(v_1),SG(v_2),\\cdots,SG(v_k)\\}\r\n\\]</span> 特别地，当 <span class=\"math inline\">\\(u\\)</span> 没有后继状态时 <span class=\"math inline\">\\(SG(u)=0\\)</span>。</p>\r\n<p>显然，先手必胜当且仅当 <span class=\"math inline\">\\(SG(u) \\ne 0\\)</span>。</p>\r\n<p>对于 <span class=\"math inline\">\\(n\\)</span> 个有向图游戏组合而成的游戏，即两个玩家轮流推动 <span class=\"math inline\">\\(n\\)</span> 个棋子之一，设这个游戏的初始状态为 <span class=\"math inline\">\\(S\\)</span>，棋子的起点分别为 <span class=\"math inline\">\\(s_1,s_2,\\cdots,s_n\\)</span>，则有 <strong><code>SG</code> 定理</strong>：</p>\r\n<p><span class=\"math inline\">\\(SG(S) = SG(s_1) \\oplus SG(s_2) \\oplus \\cdots \\oplus SG(s_n)\\)</span>。</p>\r\n<p>证明：由于组合而成的游戏也是有向图游戏，因此所有的状态存在一个拓扑序，以下使用<strong>数学归纳法</strong>证明：</p>\r\n<ul>\r\n<li><p>归纳奠基：对于没有后继的状态 <span class=\"math inline\">\\(S\\)</span>，<span class=\"math inline\">\\(\\forall i \\in [1,n], SG(s_i)=0, SG(S)=0\\)</span>，命题成立。</p></li>\r\n<li><p>归纳假设：设当前状态 <span class=\"math inline\">\\(S\\)</span> 满足 <span class=\"math inline\">\\(SG(s_1) + SG(s_2) + \\cdots + SG(s_n) = m\\)</span>，对于所有满足 <span class=\"math inline\">\\(SG(s_1&#39;) + SG(s_2&#39;) + \\cdots + SG(s_n&#39;) &lt; m\\)</span> 的状态以及所有满足 <span class=\"math inline\">\\(SG(s_1&#39;) + SG(s_2&#39;) + \\cdots + SG(s_n&#39;) = m\\)</span> 并且拓扑序小于 <span class=\"math inline\">\\(S\\)</span> 的状态命题成立。</p></li>\r\n<li><p>归纳递推：设 <span class=\"math inline\">\\(SG(s_1) \\oplus SG(s_2) \\oplus \\cdots \\oplus SG(s_n) =k\\)</span>。</p>\r\n<p>先证明 <span class=\"math inline\">\\(\\forall k&#39; &lt; k\\)</span>, <span class=\"math inline\">\\(S\\)</span> 都存在一个后继状态 <span class=\"math inline\">\\(S&#39;\\)</span> 满足 <span class=\"math inline\">\\(SG(S&#39;)=k&#39;\\)</span>。</p>\r\n<p>设 <span class=\"math inline\">\\(k \\oplus k&#39;\\)</span> 在二进制下的最高位为第 <span class=\"math inline\">\\(m\\)</span> 位，因为 <span class=\"math inline\">\\(k&#39; &lt; k\\)</span>, 所以 <span class=\"math inline\">\\(k&#39;\\)</span> 的第 <span class=\"math inline\">\\(m\\)</span> 位为 <span class=\"math inline\">\\(0\\)</span>，<span class=\"math inline\">\\(k\\)</span> 的第 <span class=\"math inline\">\\(m\\)</span> 位为 <span class=\"math inline\">\\(1\\)</span>。</p>\r\n<p>根据异或定义，存在 <span class=\"math inline\">\\(i\\)</span> 满足 <span class=\"math inline\">\\(SG(s_i)\\)</span> 的第 <span class=\"math inline\">\\(m\\)</span> 位为 <span class=\"math inline\">\\(1\\)</span>。</p>\r\n<p>那么 <span class=\"math inline\">\\(SG(s_i) \\oplus k \\oplus k&#39; &lt; SG(s_i)\\)</span>，根据 <code>SG</code> 函数定义，<span class=\"math inline\">\\(s_i\\)</span> 一定存在后继点 <span class=\"math inline\">\\(s_i&#39;\\)</span>，满足 <span class=\"math inline\">\\(SG(s_i&#39;) = SG(s_i) \\oplus k \\oplus k&#39;\\)</span>。</p>\r\n<p>把 <span class=\"math inline\">\\(s_i\\)</span> 推到 <span class=\"math inline\">\\(s_i&#39;\\)</span> 后满足 <span class=\"math inline\">\\(SG(s_1) + SG(s_2) + \\cdots + SG(s_i&#39;) + \\cdots + SG(s_n) &lt; m\\)</span>，因此 <span class=\"math inline\">\\(SG(S&#39;)=SG(s_1) \\oplus SG(s_2) \\oplus \\cdots \\oplus SG(s_i&#39;) \\oplus \\cdots \\oplus SG(s_n)=k&#39;\\)</span>。</p>\r\n<p>再证明 <span class=\"math inline\">\\(S\\)</span> 不存在后继状态 <span class=\"math inline\">\\(S&#39;\\)</span> 满足 <span class=\"math inline\">\\(SG(S&#39;)=k\\)</span>。</p>\r\n<p>如果把 <span class=\"math inline\">\\(s_i\\)</span> 推到 <span class=\"math inline\">\\(s_i&#39;\\)</span>，一定 <span class=\"math inline\">\\(SG(s_i&#39;) \\ne SG(s_i)\\)</span>。</p>\r\n<p>如果 <span class=\"math inline\">\\(SG(s_i&#39;) &lt; SG(s_i)\\)</span>，那么 <span class=\"math inline\">\\(SG(s_1) + SG(s_2) + \\cdots + SG(s_i&#39;) + \\cdots + SG(s_n) &lt; m\\)</span>，因此 <span class=\"math inline\">\\(SG(S&#39;)=SG(s_1) \\oplus SG(s_2) \\oplus \\cdots \\oplus SG(s_i&#39;) \\oplus \\cdots \\oplus SG(s_n) \\ne k\\)</span>。</p>\r\n<p>如果 <span class=\"math inline\">\\(SG(s_i&#39;) &gt; SG(s_i)\\)</span>，那么 <span class=\"math inline\">\\(SG(s_1) + SG(s_2) + \\cdots + SG(s_i&#39;) + \\cdots + SG(s_n) &gt; m\\)</span>，因此 <span class=\"math inline\">\\(SG(S&#39;)\\)</span> 未知，但我们只需证 <span class=\"math inline\">\\(SG(S&#39;) \\ne k\\)</span>。根据 <code>SG</code> 函数定义，<span class=\"math inline\">\\(s_i&#39;\\)</span> 一定存在后继点 <span class=\"math inline\">\\(s_i&#39;&#39;\\)</span>，满足 <span class=\"math inline\">\\(SG(s_i&#39;&#39;) = SG(s_i)\\)</span>，此时 <span class=\"math inline\">\\(SG(s_1) + SG(s_2) + \\cdots + SG(s_i&#39;&#39;) + \\cdots + SG(s_n) = m\\)</span>，并且 <span class=\"math inline\">\\(S&#39;&#39;\\)</span> 的拓扑序小于 <span class=\"math inline\">\\(S\\)</span>，因此 <span class=\"math inline\">\\(SG(S&#39;&#39;)=SG(s_1) \\oplus SG(s_2) \\oplus \\cdots \\oplus SG(s_i&#39;&#39;) \\oplus \\cdots \\oplus SG(s_n)=k\\)</span>，所以一定有 <span class=\"math inline\">\\(SG(S&#39;) \\ne k\\)</span>。</p></li>\r\n</ul>\r\n<h3 id=\"nim-游戏\">NIM 游戏</h3>\r\n<p>很多的公平组合游戏都可以转化为多个有向图游戏的组合，比如 <strong>NIM 游戏</strong>。</p>\r\n<blockquote>\r\n<p><span class=\"math inline\">\\(n\\)</span> 堆物品，每堆有 <span class=\"math inline\">\\(a_i\\)</span> 个，两个玩家轮流取走任意一堆的任意个物品，但不能不取。</p>\r\n<p>取走最后一个物品的人获胜。</p>\r\n</blockquote>\r\n<p>对于每一堆石子，定义结点 <span class=\"math inline\">\\(x\\)</span> 表示有 <span class=\"math inline\">\\(x\\)</span> 个物品的状态。所有编号大的结点向编号小的结点连边。</p>\r\n<p>这样，NIM 游戏就转化 <span class=\"math inline\">\\(n\\)</span> 个有向图游戏的组合了。</p>\r\n<p>易得 <span class=\"math inline\">\\(SG(x)=x\\)</span>，根据 <code>SG</code> 定理，当且仅当 <span class=\"math inline\">\\(a_1 \\oplus a_2 \\oplus \\cdots \\oplus a_n \\ne 0\\)</span> 时，先手必胜。</p>\r\n<h3 id=\"阶梯-nim-游戏\">阶梯 NIM 游戏</h3>\r\n<blockquote>\r\n<p><span class=\"math inline\">\\(n\\)</span> 堆物品，每堆有 <span class=\"math inline\">\\(a_i\\)</span> 个，两个玩家轮流取走任意第 <span class=\"math inline\">\\(i\\)</span> 堆（<span class=\"math inline\">\\(i &gt; 1\\)</span>）的任意个物品移到第 <span class=\"math inline\">\\(i-1\\)</span> 堆中，但不能不取。</p>\r\n<p>最后没有物品可取的人输。</p>\r\n</blockquote>\r\n<p>结论：<strong>此游戏等价于 <span class=\"math inline\">\\(\\lfloor \\frac n2 \\rfloor\\)</span> 堆物品，每堆有 <span class=\"math inline\">\\(a_{2i}\\)</span> 个物品的 NIM 游戏。</strong></p>\r\n<p>不妨假设在 NIM 游戏中 <code>A</code> 必胜，<code>B</code> 必败，则 <code>A</code> 可以使用以下策略：</p>\r\n<ul>\r\n<li>如果前一步 <code>B</code> 从第 <span class=\"math inline\">\\(2i\\)</span> 堆里取物品或者当前为第一步，<code>A</code> 按照 NIM 里的策略从对应的堆里取物品。</li>\r\n<li>如果前一步 <code>B</code> 从第 <span class=\"math inline\">\\(2i+1\\)</span> 堆里取物品，<code>A</code> 将这些物品再移到第 <span class=\"math inline\">\\(2i-1\\)</span> 堆。</li>\r\n</ul>\r\n<p>这样奇数堆中的物品就不会影响胜负情况，而在偶数堆中取物品相当于直接删除（因为它们到奇数堆后就不会影响胜负情况）。</p>\r\n"},{"title":"一道题","date":"2021-03-13T14:05:04.000Z","updated":"2021-03-13T14:05:04.000Z","_content":"> 给定一棵 $n$ 个节点的树，每个节点 $u$ 上有一个可容纳 $k_u$ 个球的桶，$m$ 次操作：给一个节点到根路径上的所有节点的桶内放一个**有颜色的**球，如果节点的桶满了则不能放进这个节点，$q$ 次询问某节点的桶内的球有多少种颜色。\n>\n> $n, m, q  \\le 10^5$\n\n因为节点上的桶有容量，所以只有某时刻前的操作会对该节点产生影响。\n\n记 $Max_u$ 表示$u$号节点上的桶**恰好**装满的时刻，考虑求出每个节点的 $Max$，将所有询问以 $Max$ 为关键字升序排序，问题就转化为单点加球，子树查询颜色数的问题。\n\n- 求 $Max$：\n\n  $Max_u$ 按照定义是所有覆盖 $u$ 节点的操作的时间第 $k_u$ 小，而所有覆盖 $u$ 节点的操作是下端点在 $u$ 子树内的操作，如果能将这些操作放到同一区间上，就可以用主席数实现区间第 $k$ 小。\n\n  如果对每个点都至多有一次操作以它为下端点，将这个节点的 dfs 序作为对应操作的下标，操作的时间为值，问题就转化成了区间第 $k$ 小。\n\n  但对每个点都可能作为多次操作的下端点，需要将每个结点扩充成一个区间，区间长度为这个节点对应操作的数量，然后就可以类别上一段所说的方法求出 $Max$。\n\n  ```cpp\n  rep(i, 1, m) {\n      scanf(\"%d%d\", &x[i], &c[i]);\n      tim[dfn[x[i]]].push_back(i);\n  }\n  rep(i, 1, n) {\n      R[i] = R[i-1]; //R[i] 是 dfs 序为 i 的节点对应区间的右端点\n      for(int t : tim[i]) SegTree::upd(t, R[i]), R[i]++;\n  }\n  rep(i, 1, n) Max[i] = SegTree::qry(k[i], R[dfn[i]-1], R[suf[i]]);\n  ```\n\n  \n\n- 单点加球，子树查询颜色数的问题：\n\n  考虑静态查询子树查询颜色数的问题，做法是每个有颜色的结点处 $+1$，每个结点和同种颜色， ```dfs``` 序小于这个结点且 ```dfs``` 序最大的结点的 ```lca``` 处 $-1$。\n\n  如图\n\n    ![.jpg](https://i.loli.net/2020/10/24/8mOxgRBsJMpzLI1.jpg)\n\n  在 $4，5$ 号结点的 ```lca```，$1$ 号结点处 $-1$。\n\n  在 $5，6$ 号结点的 ```lca```，$1$ 号结点处 $-1$。\n\n  ...\n\n  然后查询子树和就是子树颜色数。\n\n  再考虑单点加球，子树查询颜色数的问题。其实只需要加一个 ```set``` 数组和树状数组，```set``` 数组维护当前每种颜色结点的 ```dfs``` 序，单点加球时在 ```set``` 中找出前驱和后继，这个点处 $+1$，它和前驱的 ```lca``` 处 $-1$，和后继的 ```lca``` 处 $-1$，前驱和后继的 ```lca``` 处 $+1$，然后查询子树和。\n\n  ```cpp\n  int ci = c[i], dfnx = dfn[x[i]];\n  if(s[ci].count(dfnx)) return;\n  s[ci].insert(dfnx), add(dfnx, 1);\n  auto it = s[ci].find(dfnx);\n  int pre = 0, suf = 0;\n  if(it != s[ci].begin()) pre = *(--it), it++;\n  if(it != --s[ci].end()) suf = *(++it), it--;\n  if(pre) upd(pre, dfnx, -1);\n  if(suf) upd(suf, dfnx, -1);\n  if(pre && suf) upd(pre, suf, 1);\n  ```\n\n时间复杂度 $O(n\\log n)$。\n\n完整代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n\nusing namespace std;\nconst int N = 1e5 + 5;\nint n, m, q, k[N];\n\nnamespace Seg {\n    int sz, T[N], c[N*20], ls[N*20], rs[N*20];\n    #define mid ((l + r) >> 1)\n    #define lch l, mid, ls[o]\n    #define rch mid + 1, r, rs[o]\n    void upd(int oo, int p, int l, int r, int& o) {\n        c[o = ++sz] = c[oo] + 1, ls[o] = ls[oo], rs[o] = rs[oo];\n        if(p > mid) upd(rs[oo], p, rch);\n        else if(l ^ r) upd(ls[oo], p, lch);\n    }\n    int qry(int k, int l, int r, int o, int oo) {\n        if(l == r) return k > 1 ? m : l;\n        int cnt = c[ls[o]] - c[ls[oo]];\n        return k <= cnt ? qry(k, lch, ls[oo]) : qry(k - cnt, rch, rs[oo]);\n    }\n    void upd(int p, int t) {\n        upd(T[t], p, 0, m, T[t+1]);\n    }\n    int qry(int k, int l, int r) {\n        return qry(k, 0, m, T[r], T[l]);\n    }\n};\nnamespace Tree {\n    int idx, dfn[N], suf[N], rnk[N], d[N], fa[20][N];\n    vector <int> G[N]; \n    void dfs(int u) {\n        rnk[dfn[u] = ++idx] = u;\n        rep(i, 1, 19) fa[i][u] = fa[i-1][fa[i-1][u]];\n        for(int v : G[u]) if(v ^ fa[0][u])\n            fa[0][v] = u, d[v] = d[u] + 1, dfs(v);\n        suf[u] = idx;\n    }\n    int lca(int u, int v) {\n        if(d[u] < d[v]) swap(u, v);\n        per(i, 19, 0) if(d[u] - (1 << i) >= d[v]) u = fa[i][u];\n        if(u == v) return u;\n        per(i, 19, 0) if(fa[i][u] ^ fa[i][v]) u = fa[i][u], v = fa[i][v];\n        return fa[0][u];\n    }\n    \n    int Max[N], R[N], x[N], c[N], g[N];\n    vector <int> tim[N];\n    void pretreat() {\n        cin >> m;\n        rep(i, 1, m) {\n            scanf(\"%d%d\", &x[i], &c[i]), g[i] = c[i];\n            tim[dfn[x[i]]].push_back(i);\n        }\n        sort(g + 1, g + m + 1);//离散化颜色\n        rep(i, 1, m) c[i] = lower_bound(g + 1, g + m + 1, c[i]) - g;\n        rep(i, 1, n) {\n            R[i] = R[i-1];//R[i] 是 dfs 序为 i 的节点对应区间的右端点\n            for(int t : tim[i]) Seg::upd(t, R[i]), R[i]++;\n        }\n        rep(i, 1, n) Max[i] = Seg::qry(k[i], R[dfn[i]-1], R[suf[i]]);\n    }\n    \n    int C[N];\n    void add(int i, int v) {\n        for(; i <= n; i += i & -i) C[i] += v;\n    }\n    int qry(int i, int r = 0) {\n        for(; i; i &= i - 1) r += C[i];\n        return r;\n    }\n    int Qry(int u) {\n        return qry(suf[u]) - qry(dfn[u] - 1);\n    }\n    \n    set <int> s[N];\n    void upd(int u, int v, int x) {\n        add(dfn[lca(rnk[u], rnk[v])], x);\n    }\n    void ins(int i) {//单点加球\n        int ci = c[i], dfnx = dfn[x[i]];\n        if(s[ci].count(dfnx)) return;\n        s[ci].insert(dfnx), add(dfnx, 1);\n        auto it = s[ci].find(dfnx);\n        int pre = 0, suf = 0;\n        if(it != s[ci].begin()) pre = *(--it), it++;\n        if(it != --s[ci].end()) suf = *(++it), it--;\n        if(pre) upd(pre, dfnx, -1);\n        if(suf) upd(suf, dfnx, -1);\n        if(pre && suf) upd(pre, suf, 1);\n    }\n};\n\nint x[N], u, v, ans[N]; vector <int> id[N];\nint main() {\n    cin >> n;\n    rep(i, 2, n) {\n        scanf(\"%d%d\", &u, &v);\n        Tree::G[u].push_back(v);\n        Tree::G[v].push_back(u);\n    }\n    Tree::dfs(1);\n    rep(i, 1, n) scanf(\"%d\", &k[i]);\n    Tree::pretreat();\n    cin >> q;\n    rep(i, 1, q) scanf(\"%d\", &x[i]), id[Tree::Max[x[i]]].push_back(i);\n    rep(i, 1, m) {\n        Tree::ins(i);\n        for(int j : id[i]) ans[j] = Tree::Qry(x[j]);\n    }\n    rep(i, 1, q) printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n```","source":"_posts/problem.md","raw":"---\ntitle: 一道题\ndate: 2021-03-13 22:05:04\nupdated: 2021-03-13 22:05:04\ntags: [数据结构]\ncategories: 考试\n---\n> 给定一棵 $n$ 个节点的树，每个节点 $u$ 上有一个可容纳 $k_u$ 个球的桶，$m$ 次操作：给一个节点到根路径上的所有节点的桶内放一个**有颜色的**球，如果节点的桶满了则不能放进这个节点，$q$ 次询问某节点的桶内的球有多少种颜色。\n>\n> $n, m, q  \\le 10^5$\n\n因为节点上的桶有容量，所以只有某时刻前的操作会对该节点产生影响。\n\n记 $Max_u$ 表示$u$号节点上的桶**恰好**装满的时刻，考虑求出每个节点的 $Max$，将所有询问以 $Max$ 为关键字升序排序，问题就转化为单点加球，子树查询颜色数的问题。\n\n- 求 $Max$：\n\n  $Max_u$ 按照定义是所有覆盖 $u$ 节点的操作的时间第 $k_u$ 小，而所有覆盖 $u$ 节点的操作是下端点在 $u$ 子树内的操作，如果能将这些操作放到同一区间上，就可以用主席数实现区间第 $k$ 小。\n\n  如果对每个点都至多有一次操作以它为下端点，将这个节点的 dfs 序作为对应操作的下标，操作的时间为值，问题就转化成了区间第 $k$ 小。\n\n  但对每个点都可能作为多次操作的下端点，需要将每个结点扩充成一个区间，区间长度为这个节点对应操作的数量，然后就可以类别上一段所说的方法求出 $Max$。\n\n  ```cpp\n  rep(i, 1, m) {\n      scanf(\"%d%d\", &x[i], &c[i]);\n      tim[dfn[x[i]]].push_back(i);\n  }\n  rep(i, 1, n) {\n      R[i] = R[i-1]; //R[i] 是 dfs 序为 i 的节点对应区间的右端点\n      for(int t : tim[i]) SegTree::upd(t, R[i]), R[i]++;\n  }\n  rep(i, 1, n) Max[i] = SegTree::qry(k[i], R[dfn[i]-1], R[suf[i]]);\n  ```\n\n  \n\n- 单点加球，子树查询颜色数的问题：\n\n  考虑静态查询子树查询颜色数的问题，做法是每个有颜色的结点处 $+1$，每个结点和同种颜色， ```dfs``` 序小于这个结点且 ```dfs``` 序最大的结点的 ```lca``` 处 $-1$。\n\n  如图\n\n    ![.jpg](https://i.loli.net/2020/10/24/8mOxgRBsJMpzLI1.jpg)\n\n  在 $4，5$ 号结点的 ```lca```，$1$ 号结点处 $-1$。\n\n  在 $5，6$ 号结点的 ```lca```，$1$ 号结点处 $-1$。\n\n  ...\n\n  然后查询子树和就是子树颜色数。\n\n  再考虑单点加球，子树查询颜色数的问题。其实只需要加一个 ```set``` 数组和树状数组，```set``` 数组维护当前每种颜色结点的 ```dfs``` 序，单点加球时在 ```set``` 中找出前驱和后继，这个点处 $+1$，它和前驱的 ```lca``` 处 $-1$，和后继的 ```lca``` 处 $-1$，前驱和后继的 ```lca``` 处 $+1$，然后查询子树和。\n\n  ```cpp\n  int ci = c[i], dfnx = dfn[x[i]];\n  if(s[ci].count(dfnx)) return;\n  s[ci].insert(dfnx), add(dfnx, 1);\n  auto it = s[ci].find(dfnx);\n  int pre = 0, suf = 0;\n  if(it != s[ci].begin()) pre = *(--it), it++;\n  if(it != --s[ci].end()) suf = *(++it), it--;\n  if(pre) upd(pre, dfnx, -1);\n  if(suf) upd(suf, dfnx, -1);\n  if(pre && suf) upd(pre, suf, 1);\n  ```\n\n时间复杂度 $O(n\\log n)$。\n\n完整代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n\nusing namespace std;\nconst int N = 1e5 + 5;\nint n, m, q, k[N];\n\nnamespace Seg {\n    int sz, T[N], c[N*20], ls[N*20], rs[N*20];\n    #define mid ((l + r) >> 1)\n    #define lch l, mid, ls[o]\n    #define rch mid + 1, r, rs[o]\n    void upd(int oo, int p, int l, int r, int& o) {\n        c[o = ++sz] = c[oo] + 1, ls[o] = ls[oo], rs[o] = rs[oo];\n        if(p > mid) upd(rs[oo], p, rch);\n        else if(l ^ r) upd(ls[oo], p, lch);\n    }\n    int qry(int k, int l, int r, int o, int oo) {\n        if(l == r) return k > 1 ? m : l;\n        int cnt = c[ls[o]] - c[ls[oo]];\n        return k <= cnt ? qry(k, lch, ls[oo]) : qry(k - cnt, rch, rs[oo]);\n    }\n    void upd(int p, int t) {\n        upd(T[t], p, 0, m, T[t+1]);\n    }\n    int qry(int k, int l, int r) {\n        return qry(k, 0, m, T[r], T[l]);\n    }\n};\nnamespace Tree {\n    int idx, dfn[N], suf[N], rnk[N], d[N], fa[20][N];\n    vector <int> G[N]; \n    void dfs(int u) {\n        rnk[dfn[u] = ++idx] = u;\n        rep(i, 1, 19) fa[i][u] = fa[i-1][fa[i-1][u]];\n        for(int v : G[u]) if(v ^ fa[0][u])\n            fa[0][v] = u, d[v] = d[u] + 1, dfs(v);\n        suf[u] = idx;\n    }\n    int lca(int u, int v) {\n        if(d[u] < d[v]) swap(u, v);\n        per(i, 19, 0) if(d[u] - (1 << i) >= d[v]) u = fa[i][u];\n        if(u == v) return u;\n        per(i, 19, 0) if(fa[i][u] ^ fa[i][v]) u = fa[i][u], v = fa[i][v];\n        return fa[0][u];\n    }\n    \n    int Max[N], R[N], x[N], c[N], g[N];\n    vector <int> tim[N];\n    void pretreat() {\n        cin >> m;\n        rep(i, 1, m) {\n            scanf(\"%d%d\", &x[i], &c[i]), g[i] = c[i];\n            tim[dfn[x[i]]].push_back(i);\n        }\n        sort(g + 1, g + m + 1);//离散化颜色\n        rep(i, 1, m) c[i] = lower_bound(g + 1, g + m + 1, c[i]) - g;\n        rep(i, 1, n) {\n            R[i] = R[i-1];//R[i] 是 dfs 序为 i 的节点对应区间的右端点\n            for(int t : tim[i]) Seg::upd(t, R[i]), R[i]++;\n        }\n        rep(i, 1, n) Max[i] = Seg::qry(k[i], R[dfn[i]-1], R[suf[i]]);\n    }\n    \n    int C[N];\n    void add(int i, int v) {\n        for(; i <= n; i += i & -i) C[i] += v;\n    }\n    int qry(int i, int r = 0) {\n        for(; i; i &= i - 1) r += C[i];\n        return r;\n    }\n    int Qry(int u) {\n        return qry(suf[u]) - qry(dfn[u] - 1);\n    }\n    \n    set <int> s[N];\n    void upd(int u, int v, int x) {\n        add(dfn[lca(rnk[u], rnk[v])], x);\n    }\n    void ins(int i) {//单点加球\n        int ci = c[i], dfnx = dfn[x[i]];\n        if(s[ci].count(dfnx)) return;\n        s[ci].insert(dfnx), add(dfnx, 1);\n        auto it = s[ci].find(dfnx);\n        int pre = 0, suf = 0;\n        if(it != s[ci].begin()) pre = *(--it), it++;\n        if(it != --s[ci].end()) suf = *(++it), it--;\n        if(pre) upd(pre, dfnx, -1);\n        if(suf) upd(suf, dfnx, -1);\n        if(pre && suf) upd(pre, suf, 1);\n    }\n};\n\nint x[N], u, v, ans[N]; vector <int> id[N];\nint main() {\n    cin >> n;\n    rep(i, 2, n) {\n        scanf(\"%d%d\", &u, &v);\n        Tree::G[u].push_back(v);\n        Tree::G[v].push_back(u);\n    }\n    Tree::dfs(1);\n    rep(i, 1, n) scanf(\"%d\", &k[i]);\n    Tree::pretreat();\n    cin >> q;\n    rep(i, 1, q) scanf(\"%d\", &x[i]), id[Tree::Max[x[i]]].push_back(i);\n    rep(i, 1, m) {\n        Tree::ins(i);\n        for(int j : id[i]) ans[j] = Tree::Qry(x[j]);\n    }\n    rep(i, 1, q) printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n```","slug":"problem","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh0s0038ootndocp07zz","content":"<blockquote>\r\n<p>给定一棵 <span class=\"math inline\">\\(n\\)</span> 个节点的树，每个节点 <span class=\"math inline\">\\(u\\)</span> 上有一个可容纳 <span class=\"math inline\">\\(k_u\\)</span> 个球的桶，<span class=\"math inline\">\\(m\\)</span> 次操作：给一个节点到根路径上的所有节点的桶内放一个<strong>有颜色的</strong>球，如果节点的桶满了则不能放进这个节点，<span class=\"math inline\">\\(q\\)</span> 次询问某节点的桶内的球有多少种颜色。</p>\r\n<p><span class=\"math inline\">\\(n, m, q \\le 10^5\\)</span></p>\r\n</blockquote>\r\n<p>因为节点上的桶有容量，所以只有某时刻前的操作会对该节点产生影响。</p>\r\n<p>记 <span class=\"math inline\">\\(Max_u\\)</span> 表示<span class=\"math inline\">\\(u\\)</span>号节点上的桶<strong>恰好</strong>装满的时刻，考虑求出每个节点的 <span class=\"math inline\">\\(Max\\)</span>，将所有询问以 <span class=\"math inline\">\\(Max\\)</span> 为关键字升序排序，问题就转化为单点加球，子树查询颜色数的问题。</p>\r\n<ul>\r\n<li><p>求 <span class=\"math inline\">\\(Max\\)</span>：</p>\r\n<p><span class=\"math inline\">\\(Max_u\\)</span> 按照定义是所有覆盖 <span class=\"math inline\">\\(u\\)</span> 节点的操作的时间第 <span class=\"math inline\">\\(k_u\\)</span> 小，而所有覆盖 <span class=\"math inline\">\\(u\\)</span> 节点的操作是下端点在 <span class=\"math inline\">\\(u\\)</span> 子树内的操作，如果能将这些操作放到同一区间上，就可以用主席数实现区间第 <span class=\"math inline\">\\(k\\)</span> 小。</p>\r\n<p>如果对每个点都至多有一次操作以它为下端点，将这个节点的 dfs 序作为对应操作的下标，操作的时间为值，问题就转化成了区间第 <span class=\"math inline\">\\(k\\)</span> 小。</p>\r\n<p>但对每个点都可能作为多次操作的下端点，需要将每个结点扩充成一个区间，区间长度为这个节点对应操作的数量，然后就可以类别上一段所说的方法求出 <span class=\"math inline\">\\(Max\\)</span>。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;x[i], &amp;c[i]);</span><br><span class=\"line\">    tim[dfn[x[i]]].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">    R[i] = R[i<span class=\"number\">-1</span>]; <span class=\"comment\">//R[i] 是 dfs 序为 i 的节点对应区间的右端点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> t : tim[i]) SegTree::<span class=\"built_in\">upd</span>(t, R[i]), R[i]++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) Max[i] = SegTree::<span class=\"built_in\">qry</span>(k[i], R[dfn[i]<span class=\"number\">-1</span>], R[suf[i]]);</span><br></pre></td></tr></table></figure></li>\r\n<li><p>单点加球，子树查询颜色数的问题：</p>\r\n<p>考虑静态查询子树查询颜色数的问题，做法是每个有颜色的结点处 <span class=\"math inline\">\\(+1\\)</span>，每个结点和同种颜色， <code>dfs</code> 序小于这个结点且 <code>dfs</code> 序最大的结点的 <code>lca</code> 处 <span class=\"math inline\">\\(-1\\)</span>。</p>\r\n<p>如图</p>\r\n<figure>\r\n<img src=\"https://i.loli.net/2020/10/24/8mOxgRBsJMpzLI1.jpg\" alt=\".jpg\" /><figcaption aria-hidden=\"true\">.jpg</figcaption>\r\n</figure>\r\n<p>在 <span class=\"math inline\">\\(4，5\\)</span> 号结点的 <code>lca</code>，<span class=\"math inline\">\\(1\\)</span> 号结点处 <span class=\"math inline\">\\(-1\\)</span>。</p>\r\n<p>在 <span class=\"math inline\">\\(5，6\\)</span> 号结点的 <code>lca</code>，<span class=\"math inline\">\\(1\\)</span> 号结点处 <span class=\"math inline\">\\(-1\\)</span>。</p>\r\n<p>...</p>\r\n<p>然后查询子树和就是子树颜色数。</p>\r\n<p>再考虑单点加球，子树查询颜色数的问题。其实只需要加一个 <code>set</code> 数组和树状数组，<code>set</code> 数组维护当前每种颜色结点的 <code>dfs</code> 序，单点加球时在 <code>set</code> 中找出前驱和后继，这个点处 <span class=\"math inline\">\\(+1\\)</span>，它和前驱的 <code>lca</code> 处 <span class=\"math inline\">\\(-1\\)</span>，和后继的 <code>lca</code> 处 <span class=\"math inline\">\\(-1\\)</span>，前驱和后继的 <code>lca</code> 处 <span class=\"math inline\">\\(+1\\)</span>，然后查询子树和。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> ci = c[i], dfnx = dfn[x[i]];</span><br><span class=\"line\"><span class=\"keyword\">if</span>(s[ci].<span class=\"built_in\">count</span>(dfnx)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">s[ci].<span class=\"built_in\">insert</span>(dfnx), <span class=\"built_in\">add</span>(dfnx, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">auto</span> it = s[ci].<span class=\"built_in\">find</span>(dfnx);</span><br><span class=\"line\"><span class=\"keyword\">int</span> pre = <span class=\"number\">0</span>, suf = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(it != s[ci].<span class=\"built_in\">begin</span>()) pre = *(--it), it++;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(it != --s[ci].<span class=\"built_in\">end</span>()) suf = *(++it), it--;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(pre) <span class=\"built_in\">upd</span>(pre, dfnx, <span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(suf) <span class=\"built_in\">upd</span>(suf, dfnx, <span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(pre &amp;&amp; suf) <span class=\"built_in\">upd</span>(pre, suf, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></li>\r\n</ul>\r\n<p>时间复杂度 <span class=\"math inline\">\\(O(n\\log n)\\)</span>。</p>\r\n<p>完整代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, q, k[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> Seg &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sz, T[N], c[N*<span class=\"number\">20</span>], ls[N*<span class=\"number\">20</span>], rs[N*<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> lch l, mid, ls[o]</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> rch mid + 1, r, rs[o]</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">upd</span><span class=\"params\">(<span class=\"keyword\">int</span> oo, <span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span>&amp; o)</span> </span>&#123;</span><br><span class=\"line\">        c[o = ++sz] = c[oo] + <span class=\"number\">1</span>, ls[o] = ls[oo], rs[o] = rs[oo];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p &gt; mid) <span class=\"built_in\">upd</span>(rs[oo], p, rch);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(l ^ r) <span class=\"built_in\">upd</span>(ls[oo], p, lch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> oo)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l == r) <span class=\"keyword\">return</span> k &gt; <span class=\"number\">1</span> ? m : l;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt = c[ls[o]] - c[ls[oo]];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> k &lt;= cnt ? <span class=\"built_in\">qry</span>(k, lch, ls[oo]) : <span class=\"built_in\">qry</span>(k - cnt, rch, rs[oo]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">upd</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">upd</span>(T[t], p, <span class=\"number\">0</span>, m, T[t+<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">qry</span>(k, <span class=\"number\">0</span>, m, T[r], T[l]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> Tree &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> idx, dfn[N], suf[N], rnk[N], d[N], fa[<span class=\"number\">20</span>][N];</span><br><span class=\"line\">    vector &lt;<span class=\"keyword\">int</span>&gt; G[N]; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">        rnk[dfn[u] = ++idx] = u;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">19</span>) fa[i][u] = fa[i<span class=\"number\">-1</span>][fa[i<span class=\"number\">-1</span>][u]];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) <span class=\"keyword\">if</span>(v ^ fa[<span class=\"number\">0</span>][u])</span><br><span class=\"line\">            fa[<span class=\"number\">0</span>][v] = u, d[v] = d[u] + <span class=\"number\">1</span>, <span class=\"built_in\">dfs</span>(v);</span><br><span class=\"line\">        suf[u] = idx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d[u] &lt; d[v]) <span class=\"built_in\">swap</span>(u, v);</span><br><span class=\"line\">        <span class=\"built_in\">per</span>(i, <span class=\"number\">19</span>, <span class=\"number\">0</span>) <span class=\"keyword\">if</span>(d[u] - (<span class=\"number\">1</span> &lt;&lt; i) &gt;= d[v]) u = fa[i][u];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(u == v) <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">        <span class=\"built_in\">per</span>(i, <span class=\"number\">19</span>, <span class=\"number\">0</span>) <span class=\"keyword\">if</span>(fa[i][u] ^ fa[i][v]) u = fa[i][u], v = fa[i][v];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa[<span class=\"number\">0</span>][u];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> Max[N], R[N], x[N], c[N], g[N];</span><br><span class=\"line\">    vector &lt;<span class=\"keyword\">int</span>&gt; tim[N];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pretreat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cin &gt;&gt; m;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;x[i], &amp;c[i]), g[i] = c[i];</span><br><span class=\"line\">            tim[dfn[x[i]]].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(g + <span class=\"number\">1</span>, g + m + <span class=\"number\">1</span>);<span class=\"comment\">//离散化颜色</span></span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) c[i] = <span class=\"built_in\">lower_bound</span>(g + <span class=\"number\">1</span>, g + m + <span class=\"number\">1</span>, c[i]) - g;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">            R[i] = R[i<span class=\"number\">-1</span>];<span class=\"comment\">//R[i] 是 dfs 序为 i 的节点对应区间的右端点</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> t : tim[i]) Seg::<span class=\"built_in\">upd</span>(t, R[i]), R[i]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) Max[i] = Seg::<span class=\"built_in\">qry</span>(k[i], R[dfn[i]<span class=\"number\">-1</span>], R[suf[i]]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> C[N];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(; i &lt;= n; i += i &amp; -i) C[i] += v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> r = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(; i; i &amp;= i - <span class=\"number\">1</span>) r += C[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Qry</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">qry</span>(suf[u]) - <span class=\"built_in\">qry</span>(dfn[u] - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    set &lt;<span class=\"keyword\">int</span>&gt; s[N];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">upd</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(dfn[<span class=\"built_in\">lca</span>(rnk[u], rnk[v])], x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ins</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;<span class=\"comment\">//单点加球</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> ci = c[i], dfnx = dfn[x[i]];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[ci].<span class=\"built_in\">count</span>(dfnx)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        s[ci].<span class=\"built_in\">insert</span>(dfnx), <span class=\"built_in\">add</span>(dfnx, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> it = s[ci].<span class=\"built_in\">find</span>(dfnx);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pre = <span class=\"number\">0</span>, suf = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(it != s[ci].<span class=\"built_in\">begin</span>()) pre = *(--it), it++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(it != --s[ci].<span class=\"built_in\">end</span>()) suf = *(++it), it--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pre) <span class=\"built_in\">upd</span>(pre, dfnx, <span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(suf) <span class=\"built_in\">upd</span>(suf, dfnx, <span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pre &amp;&amp; suf) <span class=\"built_in\">upd</span>(pre, suf, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> x[N], u, v, ans[N]; vector &lt;<span class=\"keyword\">int</span>&gt; id[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class=\"line\">        Tree::G[u].<span class=\"built_in\">push_back</span>(v);</span><br><span class=\"line\">        Tree::G[v].<span class=\"built_in\">push_back</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Tree::<span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;k[i]);</span><br><span class=\"line\">    Tree::<span class=\"built_in\">pretreat</span>();</span><br><span class=\"line\">    cin &gt;&gt; q;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, q) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x[i]), id[Tree::Max[x[i]]].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">        Tree::<span class=\"built_in\">ins</span>(i);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j : id[i]) ans[j] = Tree::<span class=\"built_in\">Qry</span>(x[j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, q) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":4348,"excerpt":"","more":"<blockquote>\r\n<p>给定一棵 <span class=\"math inline\">\\(n\\)</span> 个节点的树，每个节点 <span class=\"math inline\">\\(u\\)</span> 上有一个可容纳 <span class=\"math inline\">\\(k_u\\)</span> 个球的桶，<span class=\"math inline\">\\(m\\)</span> 次操作：给一个节点到根路径上的所有节点的桶内放一个<strong>有颜色的</strong>球，如果节点的桶满了则不能放进这个节点，<span class=\"math inline\">\\(q\\)</span> 次询问某节点的桶内的球有多少种颜色。</p>\r\n<p><span class=\"math inline\">\\(n, m, q \\le 10^5\\)</span></p>\r\n</blockquote>\r\n<p>因为节点上的桶有容量，所以只有某时刻前的操作会对该节点产生影响。</p>\r\n<p>记 <span class=\"math inline\">\\(Max_u\\)</span> 表示<span class=\"math inline\">\\(u\\)</span>号节点上的桶<strong>恰好</strong>装满的时刻，考虑求出每个节点的 <span class=\"math inline\">\\(Max\\)</span>，将所有询问以 <span class=\"math inline\">\\(Max\\)</span> 为关键字升序排序，问题就转化为单点加球，子树查询颜色数的问题。</p>\r\n<ul>\r\n<li><p>求 <span class=\"math inline\">\\(Max\\)</span>：</p>\r\n<p><span class=\"math inline\">\\(Max_u\\)</span> 按照定义是所有覆盖 <span class=\"math inline\">\\(u\\)</span> 节点的操作的时间第 <span class=\"math inline\">\\(k_u\\)</span> 小，而所有覆盖 <span class=\"math inline\">\\(u\\)</span> 节点的操作是下端点在 <span class=\"math inline\">\\(u\\)</span> 子树内的操作，如果能将这些操作放到同一区间上，就可以用主席数实现区间第 <span class=\"math inline\">\\(k\\)</span> 小。</p>\r\n<p>如果对每个点都至多有一次操作以它为下端点，将这个节点的 dfs 序作为对应操作的下标，操作的时间为值，问题就转化成了区间第 <span class=\"math inline\">\\(k\\)</span> 小。</p>\r\n<p>但对每个点都可能作为多次操作的下端点，需要将每个结点扩充成一个区间，区间长度为这个节点对应操作的数量，然后就可以类别上一段所说的方法求出 <span class=\"math inline\">\\(Max\\)</span>。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;x[i], &amp;c[i]);</span><br><span class=\"line\">    tim[dfn[x[i]]].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">    R[i] = R[i<span class=\"number\">-1</span>]; <span class=\"comment\">//R[i] 是 dfs 序为 i 的节点对应区间的右端点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> t : tim[i]) SegTree::<span class=\"built_in\">upd</span>(t, R[i]), R[i]++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) Max[i] = SegTree::<span class=\"built_in\">qry</span>(k[i], R[dfn[i]<span class=\"number\">-1</span>], R[suf[i]]);</span><br></pre></td></tr></table></figure></li>\r\n<li><p>单点加球，子树查询颜色数的问题：</p>\r\n<p>考虑静态查询子树查询颜色数的问题，做法是每个有颜色的结点处 <span class=\"math inline\">\\(+1\\)</span>，每个结点和同种颜色， <code>dfs</code> 序小于这个结点且 <code>dfs</code> 序最大的结点的 <code>lca</code> 处 <span class=\"math inline\">\\(-1\\)</span>。</p>\r\n<p>如图</p>\r\n<figure>\r\n<img src=\"https://i.loli.net/2020/10/24/8mOxgRBsJMpzLI1.jpg\" alt=\".jpg\" /><figcaption aria-hidden=\"true\">.jpg</figcaption>\r\n</figure>\r\n<p>在 <span class=\"math inline\">\\(4，5\\)</span> 号结点的 <code>lca</code>，<span class=\"math inline\">\\(1\\)</span> 号结点处 <span class=\"math inline\">\\(-1\\)</span>。</p>\r\n<p>在 <span class=\"math inline\">\\(5，6\\)</span> 号结点的 <code>lca</code>，<span class=\"math inline\">\\(1\\)</span> 号结点处 <span class=\"math inline\">\\(-1\\)</span>。</p>\r\n<p>...</p>\r\n<p>然后查询子树和就是子树颜色数。</p>\r\n<p>再考虑单点加球，子树查询颜色数的问题。其实只需要加一个 <code>set</code> 数组和树状数组，<code>set</code> 数组维护当前每种颜色结点的 <code>dfs</code> 序，单点加球时在 <code>set</code> 中找出前驱和后继，这个点处 <span class=\"math inline\">\\(+1\\)</span>，它和前驱的 <code>lca</code> 处 <span class=\"math inline\">\\(-1\\)</span>，和后继的 <code>lca</code> 处 <span class=\"math inline\">\\(-1\\)</span>，前驱和后继的 <code>lca</code> 处 <span class=\"math inline\">\\(+1\\)</span>，然后查询子树和。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> ci = c[i], dfnx = dfn[x[i]];</span><br><span class=\"line\"><span class=\"keyword\">if</span>(s[ci].<span class=\"built_in\">count</span>(dfnx)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">s[ci].<span class=\"built_in\">insert</span>(dfnx), <span class=\"built_in\">add</span>(dfnx, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">auto</span> it = s[ci].<span class=\"built_in\">find</span>(dfnx);</span><br><span class=\"line\"><span class=\"keyword\">int</span> pre = <span class=\"number\">0</span>, suf = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(it != s[ci].<span class=\"built_in\">begin</span>()) pre = *(--it), it++;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(it != --s[ci].<span class=\"built_in\">end</span>()) suf = *(++it), it--;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(pre) <span class=\"built_in\">upd</span>(pre, dfnx, <span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(suf) <span class=\"built_in\">upd</span>(suf, dfnx, <span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(pre &amp;&amp; suf) <span class=\"built_in\">upd</span>(pre, suf, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></li>\r\n</ul>\r\n<p>时间复杂度 <span class=\"math inline\">\\(O(n\\log n)\\)</span>。</p>\r\n<p>完整代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, q, k[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> Seg &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sz, T[N], c[N*<span class=\"number\">20</span>], ls[N*<span class=\"number\">20</span>], rs[N*<span class=\"number\">20</span>];</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l + r) &gt;&gt; 1)</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> lch l, mid, ls[o]</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> rch mid + 1, r, rs[o]</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">upd</span><span class=\"params\">(<span class=\"keyword\">int</span> oo, <span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span>&amp; o)</span> </span>&#123;</span><br><span class=\"line\">        c[o = ++sz] = c[oo] + <span class=\"number\">1</span>, ls[o] = ls[oo], rs[o] = rs[oo];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p &gt; mid) <span class=\"built_in\">upd</span>(rs[oo], p, rch);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(l ^ r) <span class=\"built_in\">upd</span>(ls[oo], p, lch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> oo)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l == r) <span class=\"keyword\">return</span> k &gt; <span class=\"number\">1</span> ? m : l;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt = c[ls[o]] - c[ls[oo]];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> k &lt;= cnt ? <span class=\"built_in\">qry</span>(k, lch, ls[oo]) : <span class=\"built_in\">qry</span>(k - cnt, rch, rs[oo]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">upd</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">upd</span>(T[t], p, <span class=\"number\">0</span>, m, T[t+<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">qry</span>(k, <span class=\"number\">0</span>, m, T[r], T[l]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> Tree &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> idx, dfn[N], suf[N], rnk[N], d[N], fa[<span class=\"number\">20</span>][N];</span><br><span class=\"line\">    vector &lt;<span class=\"keyword\">int</span>&gt; G[N]; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">        rnk[dfn[u] = ++idx] = u;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">19</span>) fa[i][u] = fa[i<span class=\"number\">-1</span>][fa[i<span class=\"number\">-1</span>][u]];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) <span class=\"keyword\">if</span>(v ^ fa[<span class=\"number\">0</span>][u])</span><br><span class=\"line\">            fa[<span class=\"number\">0</span>][v] = u, d[v] = d[u] + <span class=\"number\">1</span>, <span class=\"built_in\">dfs</span>(v);</span><br><span class=\"line\">        suf[u] = idx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d[u] &lt; d[v]) <span class=\"built_in\">swap</span>(u, v);</span><br><span class=\"line\">        <span class=\"built_in\">per</span>(i, <span class=\"number\">19</span>, <span class=\"number\">0</span>) <span class=\"keyword\">if</span>(d[u] - (<span class=\"number\">1</span> &lt;&lt; i) &gt;= d[v]) u = fa[i][u];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(u == v) <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">        <span class=\"built_in\">per</span>(i, <span class=\"number\">19</span>, <span class=\"number\">0</span>) <span class=\"keyword\">if</span>(fa[i][u] ^ fa[i][v]) u = fa[i][u], v = fa[i][v];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa[<span class=\"number\">0</span>][u];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> Max[N], R[N], x[N], c[N], g[N];</span><br><span class=\"line\">    vector &lt;<span class=\"keyword\">int</span>&gt; tim[N];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pretreat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cin &gt;&gt; m;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;x[i], &amp;c[i]), g[i] = c[i];</span><br><span class=\"line\">            tim[dfn[x[i]]].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(g + <span class=\"number\">1</span>, g + m + <span class=\"number\">1</span>);<span class=\"comment\">//离散化颜色</span></span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) c[i] = <span class=\"built_in\">lower_bound</span>(g + <span class=\"number\">1</span>, g + m + <span class=\"number\">1</span>, c[i]) - g;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">            R[i] = R[i<span class=\"number\">-1</span>];<span class=\"comment\">//R[i] 是 dfs 序为 i 的节点对应区间的右端点</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> t : tim[i]) Seg::<span class=\"built_in\">upd</span>(t, R[i]), R[i]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) Max[i] = Seg::<span class=\"built_in\">qry</span>(k[i], R[dfn[i]<span class=\"number\">-1</span>], R[suf[i]]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> C[N];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(; i &lt;= n; i += i &amp; -i) C[i] += v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> r = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(; i; i &amp;= i - <span class=\"number\">1</span>) r += C[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Qry</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">qry</span>(suf[u]) - <span class=\"built_in\">qry</span>(dfn[u] - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    set &lt;<span class=\"keyword\">int</span>&gt; s[N];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">upd</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(dfn[<span class=\"built_in\">lca</span>(rnk[u], rnk[v])], x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ins</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;<span class=\"comment\">//单点加球</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> ci = c[i], dfnx = dfn[x[i]];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[ci].<span class=\"built_in\">count</span>(dfnx)) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        s[ci].<span class=\"built_in\">insert</span>(dfnx), <span class=\"built_in\">add</span>(dfnx, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> it = s[ci].<span class=\"built_in\">find</span>(dfnx);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pre = <span class=\"number\">0</span>, suf = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(it != s[ci].<span class=\"built_in\">begin</span>()) pre = *(--it), it++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(it != --s[ci].<span class=\"built_in\">end</span>()) suf = *(++it), it--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pre) <span class=\"built_in\">upd</span>(pre, dfnx, <span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(suf) <span class=\"built_in\">upd</span>(suf, dfnx, <span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pre &amp;&amp; suf) <span class=\"built_in\">upd</span>(pre, suf, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> x[N], u, v, ans[N]; vector &lt;<span class=\"keyword\">int</span>&gt; id[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class=\"line\">        Tree::G[u].<span class=\"built_in\">push_back</span>(v);</span><br><span class=\"line\">        Tree::G[v].<span class=\"built_in\">push_back</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Tree::<span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;k[i]);</span><br><span class=\"line\">    Tree::<span class=\"built_in\">pretreat</span>();</span><br><span class=\"line\">    cin &gt;&gt; q;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, q) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x[i]), id[Tree::Max[x[i]]].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">        Tree::<span class=\"built_in\">ins</span>(i);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j : id[i]) ans[j] = Tree::<span class=\"built_in\">Qry</span>(x[j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, q) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"一道题1","date":"2021-03-13T14:29:46.000Z","updated":"2021-03-13T14:29:46.000Z","_content":"> 给定一个长度为 $n$ 的序列 $a$。有 $q$ 次询问，每次给出区间 $[L,R]$ ,\n>\n> 求 $\\max\\limits_{L\\le l<r\\le R}\\dfrac{\\sum_{i=l}^ra_i}{r-l}$\n>\n> $n\\le 10^5,q\\le 3\\cdot 10^4,|a_i|\\le 10^6$\n\n先把原问题转化成斜率最大值。\n\n记 $s_i=\\sum_{j=1}^ia_j,\\text{点}A_i(i,s_{i-1}),\\text{点}B_i(i,s_i)$\n\n$\\text{原式}=\\max\\limits_{L\\le i < j\\le R}\\text{Slope}_{A_i,B_j}$\n\n考虑 $L=1,R=n$ 时怎么做。\n\n- 从左往右依次扫描，同时维护 $A$ 类点的下凸包，每次二分求出 $B_i$ 过当前凸包上的切点。\n\n  时间复杂度 $O(n\\log n)$。\n\n- **线性做法**：单调队列维护 $A$ 类点的下凸包，一旦发现队首不是当前 $B_i$ 过当前凸包上的切点，就将队首弹出。\n\n  这样做可能会导致之后的一些 $B_i$ 的切点被弹出而失去这些 $B_i$ 的最优解，但可以证明这样做不会错过**全局最优解**。\n\n  **如图**，扫描到 $E$ 时切点已经不是 $A$ 了，弹出 $A$ 后会导致扫到 $F$ 时失去最优解。\n\n  但因为 $F$ 的切线是 $AF$, 所以 $\\text{Slope}_{AF}<\\text{Slope}_{AB}<\\text{Slope}_{BE}$。\n\n  故 $AF$ 劣于 $BE$, $A$ 已经不可能更新最优解。\n\n  \n\n  ![](https://i.loli.net/2020/11/18/ncWZHmCtw2bokxX.png)\n\n考虑分块，令 $sz=\\sqrt n$，每次查询分两类：\n\n- 当 $A_i,B_j$ 都在边角（在同一个块或不同块）中时，直接对所有边角使用线性做法求出这类最优解。\n\n- 当 $A_i,B_j$ 至少有一个在大块中时。\n\n  预处理 $pre_{i,j}=\\max\\limits_{sz\\cdot i\\le I< J \\le j}\\text{Slope}_{A_I,B_J},suf_{i,j}=\\max\\limits_{j\\le I<J\\le sz\\cdot i}\\text{Slope}_{A_I,B_J}$\n\n  预处理方式也使用线性做法。\n\n  用 $pre_{\\lceil\\frac L{sz}\\rceil,R},suf_{\\lfloor\\frac R{sz}\\rfloor,L}$  更新答案。\n\n综上，时间复杂度 $O(n\\sqrt n)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n\nusing namespace std;\nconst int N = 100005, M = 125;\ntypedef long long ll;\nint read() {\n    int c = getchar(), r = 0, f = 1; \n    while(c < 48) { if(c == 45) f = -1; c = getchar(); }\n    while(c > 47) r = r * 10 + c - 48, c = getchar();\n    return r * f;\n}\nint n, Q, sz; ll a[N], maU[M][N]; int maD[M][N];// U 后缀表示分子，D 后缀表示分母\nll gcd(ll a, ll b) { return b ? gcd(b, a % b) : a; }\nint l, r, x[N], D; ll y[N], U;// U/D 是答案\nvoid init() { l = 1, r = 0, U = -1e9, D = 1; }// 清空凸包\nvoid upd(ll u, int d) {// 更新答案\n    if(d < 0) u = -u, d = -d;\n    if(u * D > U * d) U = u, D = d;\n}\nvoid ins(int X, ll Y) {// X 递增时维护的是下凸包，递减时维护的是上凸包\n    while(l < r && (y[r] - y[r-1]) * (X - x[r]) >= (Y - y[r]) * (x[r] - x[r-1])) r--;\n    x[++r] = X, y[r] = Y;\n}\nvoid qry(int X, ll Y) {// 过该点作切线并更新答案\n    if(l > r) return;\n    while(l < r && (Y - y[l]) * (X - x[l+1]) <= (Y - y[l+1]) * (X - x[l])) l++;\n    upd(Y - y[l], X - x[l]);\n}\nint main() {\n    cin >> n >> Q, sz = sqrt(n * 7);\n    For(i, 0, n) a[i] = read() + a[i-1];\n    per(i, (n - 1) / sz, 0) { // 为了压空间，pre, suf 数组合并成 ma 数组 \n        init(); For(j, i * sz, n) qry(j, a[j]), maU[i][j] = U, maD[i][j] = D, ins(j, a[j-1]);\n        init(); per(j, i * sz, 0) qry(j, a[j-1]), maU[i][j] = U, maD[i][j] = D, ins(j, a[j]);\n    }\n    int L, R;\n    while(Q--) {\n        L = read() - 1, R = read() - 1, init();\n        if(L / sz ^ R / sz) {\n            For(i, L, L / sz * sz + sz) qry(i, a[i]), ins(i, a[i-1]);\n            rep(i, R / sz * sz, R) qry(i, a[i]), ins(i, a[i-1]);\n            upd(maU[(L+sz-1)/sz][R], maD[(L+sz-1)/sz][R]);\n            upd(maU[R/sz][L], maD[R/sz][L]);\n        } else rep(i, L, R) qry(i, a[i]), ins(i, a[i-1]);\n        ll d = gcd(llabs(U), D);\n        printf(\"%lld/%lld\\n\", U / d, D / d);\n    }\n    return 0;\n}\n```","source":"_posts/problem1.md","raw":"---\ntitle: 一道题1\ndate: 2021-03-13 22:29:46\nupdated: 2021-03-13 22:29:46\ntags: [数据结构,分块,斜率优化]\ncategories: 考试\n---\n> 给定一个长度为 $n$ 的序列 $a$。有 $q$ 次询问，每次给出区间 $[L,R]$ ,\n>\n> 求 $\\max\\limits_{L\\le l<r\\le R}\\dfrac{\\sum_{i=l}^ra_i}{r-l}$\n>\n> $n\\le 10^5,q\\le 3\\cdot 10^4,|a_i|\\le 10^6$\n\n先把原问题转化成斜率最大值。\n\n记 $s_i=\\sum_{j=1}^ia_j,\\text{点}A_i(i,s_{i-1}),\\text{点}B_i(i,s_i)$\n\n$\\text{原式}=\\max\\limits_{L\\le i < j\\le R}\\text{Slope}_{A_i,B_j}$\n\n考虑 $L=1,R=n$ 时怎么做。\n\n- 从左往右依次扫描，同时维护 $A$ 类点的下凸包，每次二分求出 $B_i$ 过当前凸包上的切点。\n\n  时间复杂度 $O(n\\log n)$。\n\n- **线性做法**：单调队列维护 $A$ 类点的下凸包，一旦发现队首不是当前 $B_i$ 过当前凸包上的切点，就将队首弹出。\n\n  这样做可能会导致之后的一些 $B_i$ 的切点被弹出而失去这些 $B_i$ 的最优解，但可以证明这样做不会错过**全局最优解**。\n\n  **如图**，扫描到 $E$ 时切点已经不是 $A$ 了，弹出 $A$ 后会导致扫到 $F$ 时失去最优解。\n\n  但因为 $F$ 的切线是 $AF$, 所以 $\\text{Slope}_{AF}<\\text{Slope}_{AB}<\\text{Slope}_{BE}$。\n\n  故 $AF$ 劣于 $BE$, $A$ 已经不可能更新最优解。\n\n  \n\n  ![](https://i.loli.net/2020/11/18/ncWZHmCtw2bokxX.png)\n\n考虑分块，令 $sz=\\sqrt n$，每次查询分两类：\n\n- 当 $A_i,B_j$ 都在边角（在同一个块或不同块）中时，直接对所有边角使用线性做法求出这类最优解。\n\n- 当 $A_i,B_j$ 至少有一个在大块中时。\n\n  预处理 $pre_{i,j}=\\max\\limits_{sz\\cdot i\\le I< J \\le j}\\text{Slope}_{A_I,B_J},suf_{i,j}=\\max\\limits_{j\\le I<J\\le sz\\cdot i}\\text{Slope}_{A_I,B_J}$\n\n  预处理方式也使用线性做法。\n\n  用 $pre_{\\lceil\\frac L{sz}\\rceil,R},suf_{\\lfloor\\frac R{sz}\\rfloor,L}$  更新答案。\n\n综上，时间复杂度 $O(n\\sqrt n)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n\nusing namespace std;\nconst int N = 100005, M = 125;\ntypedef long long ll;\nint read() {\n    int c = getchar(), r = 0, f = 1; \n    while(c < 48) { if(c == 45) f = -1; c = getchar(); }\n    while(c > 47) r = r * 10 + c - 48, c = getchar();\n    return r * f;\n}\nint n, Q, sz; ll a[N], maU[M][N]; int maD[M][N];// U 后缀表示分子，D 后缀表示分母\nll gcd(ll a, ll b) { return b ? gcd(b, a % b) : a; }\nint l, r, x[N], D; ll y[N], U;// U/D 是答案\nvoid init() { l = 1, r = 0, U = -1e9, D = 1; }// 清空凸包\nvoid upd(ll u, int d) {// 更新答案\n    if(d < 0) u = -u, d = -d;\n    if(u * D > U * d) U = u, D = d;\n}\nvoid ins(int X, ll Y) {// X 递增时维护的是下凸包，递减时维护的是上凸包\n    while(l < r && (y[r] - y[r-1]) * (X - x[r]) >= (Y - y[r]) * (x[r] - x[r-1])) r--;\n    x[++r] = X, y[r] = Y;\n}\nvoid qry(int X, ll Y) {// 过该点作切线并更新答案\n    if(l > r) return;\n    while(l < r && (Y - y[l]) * (X - x[l+1]) <= (Y - y[l+1]) * (X - x[l])) l++;\n    upd(Y - y[l], X - x[l]);\n}\nint main() {\n    cin >> n >> Q, sz = sqrt(n * 7);\n    For(i, 0, n) a[i] = read() + a[i-1];\n    per(i, (n - 1) / sz, 0) { // 为了压空间，pre, suf 数组合并成 ma 数组 \n        init(); For(j, i * sz, n) qry(j, a[j]), maU[i][j] = U, maD[i][j] = D, ins(j, a[j-1]);\n        init(); per(j, i * sz, 0) qry(j, a[j-1]), maU[i][j] = U, maD[i][j] = D, ins(j, a[j]);\n    }\n    int L, R;\n    while(Q--) {\n        L = read() - 1, R = read() - 1, init();\n        if(L / sz ^ R / sz) {\n            For(i, L, L / sz * sz + sz) qry(i, a[i]), ins(i, a[i-1]);\n            rep(i, R / sz * sz, R) qry(i, a[i]), ins(i, a[i-1]);\n            upd(maU[(L+sz-1)/sz][R], maD[(L+sz-1)/sz][R]);\n            upd(maU[R/sz][L], maD[R/sz][L]);\n        } else rep(i, L, R) qry(i, a[i]), ins(i, a[i-1]);\n        ll d = gcd(llabs(U), D);\n        printf(\"%lld/%lld\\n\", U / d, D / d);\n    }\n    return 0;\n}\n```","slug":"problem1","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh0u003bootn3v3ddjli","content":"<blockquote>\r\n<p>给定一个长度为 <span class=\"math inline\">\\(n\\)</span> 的序列 <span class=\"math inline\">\\(a\\)</span>。有 <span class=\"math inline\">\\(q\\)</span> 次询问，每次给出区间 <span class=\"math inline\">\\([L,R]\\)</span> ,</p>\r\n<p>求 <span class=\"math inline\">\\(\\max\\limits_{L\\le l&lt;r\\le R}\\dfrac{\\sum_{i=l}^ra_i}{r-l}\\)</span></p>\r\n<p><span class=\"math inline\">\\(n\\le 10^5,q\\le 3\\cdot 10^4,|a_i|\\le 10^6\\)</span></p>\r\n</blockquote>\r\n<p>先把原问题转化成斜率最大值。</p>\r\n<p>记 <span class=\"math inline\">\\(s_i=\\sum_{j=1}^ia_j,\\text{点}A_i(i,s_{i-1}),\\text{点}B_i(i,s_i)\\)</span></p>\r\n<p><span class=\"math inline\">\\(\\text{原式}=\\max\\limits_{L\\le i &lt; j\\le R}\\text{Slope}_{A_i,B_j}\\)</span></p>\r\n<p>考虑 <span class=\"math inline\">\\(L=1,R=n\\)</span> 时怎么做。</p>\r\n<ul>\r\n<li><p>从左往右依次扫描，同时维护 <span class=\"math inline\">\\(A\\)</span> 类点的下凸包，每次二分求出 <span class=\"math inline\">\\(B_i\\)</span> 过当前凸包上的切点。</p>\r\n<p>时间复杂度 <span class=\"math inline\">\\(O(n\\log n)\\)</span>。</p></li>\r\n<li><p><strong>线性做法</strong>：单调队列维护 <span class=\"math inline\">\\(A\\)</span> 类点的下凸包，一旦发现队首不是当前 <span class=\"math inline\">\\(B_i\\)</span> 过当前凸包上的切点，就将队首弹出。</p>\r\n<p>这样做可能会导致之后的一些 <span class=\"math inline\">\\(B_i\\)</span> 的切点被弹出而失去这些 <span class=\"math inline\">\\(B_i\\)</span> 的最优解，但可以证明这样做不会错过<strong>全局最优解</strong>。</p>\r\n<p><strong>如图</strong>，扫描到 <span class=\"math inline\">\\(E\\)</span> 时切点已经不是 <span class=\"math inline\">\\(A\\)</span> 了，弹出 <span class=\"math inline\">\\(A\\)</span> 后会导致扫到 <span class=\"math inline\">\\(F\\)</span> 时失去最优解。</p>\r\n<p>但因为 <span class=\"math inline\">\\(F\\)</span> 的切线是 <span class=\"math inline\">\\(AF\\)</span>, 所以 <span class=\"math inline\">\\(\\text{Slope}_{AF}&lt;\\text{Slope}_{AB}&lt;\\text{Slope}_{BE}\\)</span>。</p>\r\n<p>故 <span class=\"math inline\">\\(AF\\)</span> 劣于 <span class=\"math inline\">\\(BE\\)</span>, <span class=\"math inline\">\\(A\\)</span> 已经不可能更新最优解。</p>\r\n<p><img src=\"https://i.loli.net/2020/11/18/ncWZHmCtw2bokxX.png\" /></p></li>\r\n</ul>\r\n<p>考虑分块，令 <span class=\"math inline\">\\(sz=\\sqrt n\\)</span>，每次查询分两类：</p>\r\n<ul>\r\n<li><p>当 <span class=\"math inline\">\\(A_i,B_j\\)</span> 都在边角（在同一个块或不同块）中时，直接对所有边角使用线性做法求出这类最优解。</p></li>\r\n<li><p>当 <span class=\"math inline\">\\(A_i,B_j\\)</span> 至少有一个在大块中时。</p>\r\n<p>预处理 <span class=\"math inline\">\\(pre_{i,j}=\\max\\limits_{sz\\cdot i\\le I&lt; J \\le j}\\text{Slope}_{A_I,B_J},suf_{i,j}=\\max\\limits_{j\\le I&lt;J\\le sz\\cdot i}\\text{Slope}_{A_I,B_J}\\)</span></p>\r\n<p>预处理方式也使用线性做法。</p>\r\n<p>用 <span class=\"math inline\">\\(pre_{\\lceil\\frac L{sz}\\rceil,R},suf_{\\lfloor\\frac R{sz}\\rfloor,L}\\)</span> 更新答案。</p></li>\r\n</ul>\r\n<p>综上，时间复杂度 <span class=\"math inline\">\\(O(n\\sqrt n)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">100005</span>, M = <span class=\"number\">125</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = <span class=\"built_in\">getchar</span>(), r = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &lt; <span class=\"number\">48</span>) &#123; <span class=\"keyword\">if</span>(c == <span class=\"number\">45</span>) f = <span class=\"number\">-1</span>; c = <span class=\"built_in\">getchar</span>(); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &gt; <span class=\"number\">47</span>) r = r * <span class=\"number\">10</span> + c - <span class=\"number\">48</span>, c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, Q, sz; ll a[N], maU[M][N]; <span class=\"keyword\">int</span> maD[M][N];<span class=\"comment\">// U 后缀表示分子，D 后缀表示分母</span></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">gcd</span><span class=\"params\">(ll a, ll b)</span> </span>&#123; <span class=\"keyword\">return</span> b ? <span class=\"built_in\">gcd</span>(b, a % b) : a; &#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> l, r, x[N], D; ll y[N], U;<span class=\"comment\">// U/D 是答案</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123; l = <span class=\"number\">1</span>, r = <span class=\"number\">0</span>, U = <span class=\"number\">-1e9</span>, D = <span class=\"number\">1</span>; &#125;<span class=\"comment\">// 清空凸包</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">upd</span><span class=\"params\">(ll u, <span class=\"keyword\">int</span> d)</span> </span>&#123;<span class=\"comment\">// 更新答案</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d &lt; <span class=\"number\">0</span>) u = -u, d = -d;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u * D &gt; U * d) U = u, D = d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ins</span><span class=\"params\">(<span class=\"keyword\">int</span> X, ll Y)</span> </span>&#123;<span class=\"comment\">// X 递增时维护的是下凸包，递减时维护的是上凸包</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l &lt; r &amp;&amp; (y[r] - y[r<span class=\"number\">-1</span>]) * (X - x[r]) &gt;= (Y - y[r]) * (x[r] - x[r<span class=\"number\">-1</span>])) r--;</span><br><span class=\"line\">    x[++r] = X, y[r] = Y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> X, ll Y)</span> </span>&#123;<span class=\"comment\">// 过该点作切线并更新答案</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt; r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l &lt; r &amp;&amp; (Y - y[l]) * (X - x[l+<span class=\"number\">1</span>]) &lt;= (Y - y[l+<span class=\"number\">1</span>]) * (X - x[l])) l++;</span><br><span class=\"line\">    <span class=\"built_in\">upd</span>(Y - y[l], X - x[l]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; Q, sz = <span class=\"built_in\">sqrt</span>(n * <span class=\"number\">7</span>);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, n) a[i] = <span class=\"built_in\">read</span>() + a[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, (n - <span class=\"number\">1</span>) / sz, <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 为了压空间，pre, suf 数组合并成 ma 数组 </span></span><br><span class=\"line\">        <span class=\"built_in\">init</span>(); <span class=\"built_in\">For</span>(j, i * sz, n) <span class=\"built_in\">qry</span>(j, a[j]), maU[i][j] = U, maD[i][j] = D, <span class=\"built_in\">ins</span>(j, a[j<span class=\"number\">-1</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">init</span>(); <span class=\"built_in\">per</span>(j, i * sz, <span class=\"number\">0</span>) <span class=\"built_in\">qry</span>(j, a[j<span class=\"number\">-1</span>]), maU[i][j] = U, maD[i][j] = D, <span class=\"built_in\">ins</span>(j, a[j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> L, R;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(Q--) &#123;</span><br><span class=\"line\">        L = <span class=\"built_in\">read</span>() - <span class=\"number\">1</span>, R = <span class=\"built_in\">read</span>() - <span class=\"number\">1</span>, <span class=\"built_in\">init</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L / sz ^ R / sz) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">For</span>(i, L, L / sz * sz + sz) <span class=\"built_in\">qry</span>(i, a[i]), <span class=\"built_in\">ins</span>(i, a[i<span class=\"number\">-1</span>]);</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(i, R / sz * sz, R) <span class=\"built_in\">qry</span>(i, a[i]), <span class=\"built_in\">ins</span>(i, a[i<span class=\"number\">-1</span>]);</span><br><span class=\"line\">            <span class=\"built_in\">upd</span>(maU[(L+sz<span class=\"number\">-1</span>)/sz][R], maD[(L+sz<span class=\"number\">-1</span>)/sz][R]);</span><br><span class=\"line\">            <span class=\"built_in\">upd</span>(maU[R/sz][L], maD[R/sz][L]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"built_in\">rep</span>(i, L, R) <span class=\"built_in\">qry</span>(i, a[i]), <span class=\"built_in\">ins</span>(i, a[i<span class=\"number\">-1</span>]);</span><br><span class=\"line\">        ll d = <span class=\"built_in\">gcd</span>(<span class=\"built_in\">llabs</span>(U), D);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld/%lld\\n&quot;</span>, U / d, D / d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":2706,"excerpt":"","more":"<blockquote>\r\n<p>给定一个长度为 <span class=\"math inline\">\\(n\\)</span> 的序列 <span class=\"math inline\">\\(a\\)</span>。有 <span class=\"math inline\">\\(q\\)</span> 次询问，每次给出区间 <span class=\"math inline\">\\([L,R]\\)</span> ,</p>\r\n<p>求 <span class=\"math inline\">\\(\\max\\limits_{L\\le l&lt;r\\le R}\\dfrac{\\sum_{i=l}^ra_i}{r-l}\\)</span></p>\r\n<p><span class=\"math inline\">\\(n\\le 10^5,q\\le 3\\cdot 10^4,|a_i|\\le 10^6\\)</span></p>\r\n</blockquote>\r\n<p>先把原问题转化成斜率最大值。</p>\r\n<p>记 <span class=\"math inline\">\\(s_i=\\sum_{j=1}^ia_j,\\text{点}A_i(i,s_{i-1}),\\text{点}B_i(i,s_i)\\)</span></p>\r\n<p><span class=\"math inline\">\\(\\text{原式}=\\max\\limits_{L\\le i &lt; j\\le R}\\text{Slope}_{A_i,B_j}\\)</span></p>\r\n<p>考虑 <span class=\"math inline\">\\(L=1,R=n\\)</span> 时怎么做。</p>\r\n<ul>\r\n<li><p>从左往右依次扫描，同时维护 <span class=\"math inline\">\\(A\\)</span> 类点的下凸包，每次二分求出 <span class=\"math inline\">\\(B_i\\)</span> 过当前凸包上的切点。</p>\r\n<p>时间复杂度 <span class=\"math inline\">\\(O(n\\log n)\\)</span>。</p></li>\r\n<li><p><strong>线性做法</strong>：单调队列维护 <span class=\"math inline\">\\(A\\)</span> 类点的下凸包，一旦发现队首不是当前 <span class=\"math inline\">\\(B_i\\)</span> 过当前凸包上的切点，就将队首弹出。</p>\r\n<p>这样做可能会导致之后的一些 <span class=\"math inline\">\\(B_i\\)</span> 的切点被弹出而失去这些 <span class=\"math inline\">\\(B_i\\)</span> 的最优解，但可以证明这样做不会错过<strong>全局最优解</strong>。</p>\r\n<p><strong>如图</strong>，扫描到 <span class=\"math inline\">\\(E\\)</span> 时切点已经不是 <span class=\"math inline\">\\(A\\)</span> 了，弹出 <span class=\"math inline\">\\(A\\)</span> 后会导致扫到 <span class=\"math inline\">\\(F\\)</span> 时失去最优解。</p>\r\n<p>但因为 <span class=\"math inline\">\\(F\\)</span> 的切线是 <span class=\"math inline\">\\(AF\\)</span>, 所以 <span class=\"math inline\">\\(\\text{Slope}_{AF}&lt;\\text{Slope}_{AB}&lt;\\text{Slope}_{BE}\\)</span>。</p>\r\n<p>故 <span class=\"math inline\">\\(AF\\)</span> 劣于 <span class=\"math inline\">\\(BE\\)</span>, <span class=\"math inline\">\\(A\\)</span> 已经不可能更新最优解。</p>\r\n<p><img src=\"https://i.loli.net/2020/11/18/ncWZHmCtw2bokxX.png\" /></p></li>\r\n</ul>\r\n<p>考虑分块，令 <span class=\"math inline\">\\(sz=\\sqrt n\\)</span>，每次查询分两类：</p>\r\n<ul>\r\n<li><p>当 <span class=\"math inline\">\\(A_i,B_j\\)</span> 都在边角（在同一个块或不同块）中时，直接对所有边角使用线性做法求出这类最优解。</p></li>\r\n<li><p>当 <span class=\"math inline\">\\(A_i,B_j\\)</span> 至少有一个在大块中时。</p>\r\n<p>预处理 <span class=\"math inline\">\\(pre_{i,j}=\\max\\limits_{sz\\cdot i\\le I&lt; J \\le j}\\text{Slope}_{A_I,B_J},suf_{i,j}=\\max\\limits_{j\\le I&lt;J\\le sz\\cdot i}\\text{Slope}_{A_I,B_J}\\)</span></p>\r\n<p>预处理方式也使用线性做法。</p>\r\n<p>用 <span class=\"math inline\">\\(pre_{\\lceil\\frac L{sz}\\rceil,R},suf_{\\lfloor\\frac R{sz}\\rfloor,L}\\)</span> 更新答案。</p></li>\r\n</ul>\r\n<p>综上，时间复杂度 <span class=\"math inline\">\\(O(n\\sqrt n)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">100005</span>, M = <span class=\"number\">125</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = <span class=\"built_in\">getchar</span>(), r = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &lt; <span class=\"number\">48</span>) &#123; <span class=\"keyword\">if</span>(c == <span class=\"number\">45</span>) f = <span class=\"number\">-1</span>; c = <span class=\"built_in\">getchar</span>(); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &gt; <span class=\"number\">47</span>) r = r * <span class=\"number\">10</span> + c - <span class=\"number\">48</span>, c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, Q, sz; ll a[N], maU[M][N]; <span class=\"keyword\">int</span> maD[M][N];<span class=\"comment\">// U 后缀表示分子，D 后缀表示分母</span></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">gcd</span><span class=\"params\">(ll a, ll b)</span> </span>&#123; <span class=\"keyword\">return</span> b ? <span class=\"built_in\">gcd</span>(b, a % b) : a; &#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> l, r, x[N], D; ll y[N], U;<span class=\"comment\">// U/D 是答案</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123; l = <span class=\"number\">1</span>, r = <span class=\"number\">0</span>, U = <span class=\"number\">-1e9</span>, D = <span class=\"number\">1</span>; &#125;<span class=\"comment\">// 清空凸包</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">upd</span><span class=\"params\">(ll u, <span class=\"keyword\">int</span> d)</span> </span>&#123;<span class=\"comment\">// 更新答案</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d &lt; <span class=\"number\">0</span>) u = -u, d = -d;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u * D &gt; U * d) U = u, D = d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ins</span><span class=\"params\">(<span class=\"keyword\">int</span> X, ll Y)</span> </span>&#123;<span class=\"comment\">// X 递增时维护的是下凸包，递减时维护的是上凸包</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l &lt; r &amp;&amp; (y[r] - y[r<span class=\"number\">-1</span>]) * (X - x[r]) &gt;= (Y - y[r]) * (x[r] - x[r<span class=\"number\">-1</span>])) r--;</span><br><span class=\"line\">    x[++r] = X, y[r] = Y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> X, ll Y)</span> </span>&#123;<span class=\"comment\">// 过该点作切线并更新答案</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt; r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l &lt; r &amp;&amp; (Y - y[l]) * (X - x[l+<span class=\"number\">1</span>]) &lt;= (Y - y[l+<span class=\"number\">1</span>]) * (X - x[l])) l++;</span><br><span class=\"line\">    <span class=\"built_in\">upd</span>(Y - y[l], X - x[l]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; Q, sz = <span class=\"built_in\">sqrt</span>(n * <span class=\"number\">7</span>);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, n) a[i] = <span class=\"built_in\">read</span>() + a[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, (n - <span class=\"number\">1</span>) / sz, <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 为了压空间，pre, suf 数组合并成 ma 数组 </span></span><br><span class=\"line\">        <span class=\"built_in\">init</span>(); <span class=\"built_in\">For</span>(j, i * sz, n) <span class=\"built_in\">qry</span>(j, a[j]), maU[i][j] = U, maD[i][j] = D, <span class=\"built_in\">ins</span>(j, a[j<span class=\"number\">-1</span>]);</span><br><span class=\"line\">        <span class=\"built_in\">init</span>(); <span class=\"built_in\">per</span>(j, i * sz, <span class=\"number\">0</span>) <span class=\"built_in\">qry</span>(j, a[j<span class=\"number\">-1</span>]), maU[i][j] = U, maD[i][j] = D, <span class=\"built_in\">ins</span>(j, a[j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> L, R;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(Q--) &#123;</span><br><span class=\"line\">        L = <span class=\"built_in\">read</span>() - <span class=\"number\">1</span>, R = <span class=\"built_in\">read</span>() - <span class=\"number\">1</span>, <span class=\"built_in\">init</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L / sz ^ R / sz) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">For</span>(i, L, L / sz * sz + sz) <span class=\"built_in\">qry</span>(i, a[i]), <span class=\"built_in\">ins</span>(i, a[i<span class=\"number\">-1</span>]);</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(i, R / sz * sz, R) <span class=\"built_in\">qry</span>(i, a[i]), <span class=\"built_in\">ins</span>(i, a[i<span class=\"number\">-1</span>]);</span><br><span class=\"line\">            <span class=\"built_in\">upd</span>(maU[(L+sz<span class=\"number\">-1</span>)/sz][R], maD[(L+sz<span class=\"number\">-1</span>)/sz][R]);</span><br><span class=\"line\">            <span class=\"built_in\">upd</span>(maU[R/sz][L], maD[R/sz][L]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"built_in\">rep</span>(i, L, R) <span class=\"built_in\">qry</span>(i, a[i]), <span class=\"built_in\">ins</span>(i, a[i<span class=\"number\">-1</span>]);</span><br><span class=\"line\">        ll d = <span class=\"built_in\">gcd</span>(<span class=\"built_in\">llabs</span>(U), D);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld/%lld\\n&quot;</span>, U / d, D / d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"一道题2","date":"2021-03-13T14:33:00.000Z","updated":"2021-03-13T14:33:00.000Z","_content":"> 给定一个长度为 $n$ 的序列 $A$，把 $A$ 划分为两个非空集合，划分的价值为两个集合的异或和加起来，求可能的最大价值。\n>\n> $n \\le 10^5,A_i \\le 10^{18}$\n\n设总异或和为 $sum$ ，若两个集合的异或和分别为 $S_1,S_2$，由 $S_1 \\oplus S_2 = sum$ 知道，若 $sum$ 第 $i$ 位为 $1$，不管怎么划分，第 $i$ 位一定产生一次贡献。若 $sum$ 第 $i$ 位为 $0$，那么 $S_1,S_2$ 在第 $i$ 位上相同。\n\n考虑 $sum$ 为 $0$ 的位，由于 $S_1,S_2$ 在这些位上是相同的，只需要最大化 $S_1$ 就行了，由于 $S_1$ 为全集和空集都不会成为最优解，问题就转化为： \n\n给定n个整数（数字可能重复），求在这些数中选取任意个，使得他们的异或和最大。 \n\n用线性基解决。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\nusing namespace std;\n\nint n;\nlong long a[100005], bas[70], su, ans;\nint main() {\n    cin >> n;\n    rep(i, 1, n) scanf(\"%lld\", &a[i]), su ^= a[i];\n    rep(i, 1, n) a[i] &= ~su;\n    rep(i, 1, n) per(j, 59, 0) if(a[i] >> j & 1) {\n        if(bas[j]) a[i] ^= bas[j];\n        else {\n            per(k, j - 1, 0) if(a[i] >> k & 1) a[i] ^= bas[k];\n            rep(k, j + 1, 59) if(bas[k] >> j & 1) bas[k] ^= a[i];\n            bas[j] = a[i]; break;\n        }\n    }\n    rep(i, 1, 59) ans ^= bas[i];\n    cout << su + ans * 2;\n    return 0;\n}\n```","source":"_posts/problem2.md","raw":"---\ntitle: 一道题2\ndate: 2021-03-13 22:33:00\nupdated: 2021-03-13 22:33:00\ntags: [数论,线性基]\ncategories: 考试\n---\n> 给定一个长度为 $n$ 的序列 $A$，把 $A$ 划分为两个非空集合，划分的价值为两个集合的异或和加起来，求可能的最大价值。\n>\n> $n \\le 10^5,A_i \\le 10^{18}$\n\n设总异或和为 $sum$ ，若两个集合的异或和分别为 $S_1,S_2$，由 $S_1 \\oplus S_2 = sum$ 知道，若 $sum$ 第 $i$ 位为 $1$，不管怎么划分，第 $i$ 位一定产生一次贡献。若 $sum$ 第 $i$ 位为 $0$，那么 $S_1,S_2$ 在第 $i$ 位上相同。\n\n考虑 $sum$ 为 $0$ 的位，由于 $S_1,S_2$ 在这些位上是相同的，只需要最大化 $S_1$ 就行了，由于 $S_1$ 为全集和空集都不会成为最优解，问题就转化为： \n\n给定n个整数（数字可能重复），求在这些数中选取任意个，使得他们的异或和最大。 \n\n用线性基解决。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\nusing namespace std;\n\nint n;\nlong long a[100005], bas[70], su, ans;\nint main() {\n    cin >> n;\n    rep(i, 1, n) scanf(\"%lld\", &a[i]), su ^= a[i];\n    rep(i, 1, n) a[i] &= ~su;\n    rep(i, 1, n) per(j, 59, 0) if(a[i] >> j & 1) {\n        if(bas[j]) a[i] ^= bas[j];\n        else {\n            per(k, j - 1, 0) if(a[i] >> k & 1) a[i] ^= bas[k];\n            rep(k, j + 1, 59) if(bas[k] >> j & 1) bas[k] ^= a[i];\n            bas[j] = a[i]; break;\n        }\n    }\n    rep(i, 1, 59) ans ^= bas[i];\n    cout << su + ans * 2;\n    return 0;\n}\n```","slug":"problem2","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh0v003footnhuc2hs9o","content":"<blockquote>\r\n<p>给定一个长度为 <span class=\"math inline\">\\(n\\)</span> 的序列 <span class=\"math inline\">\\(A\\)</span>，把 <span class=\"math inline\">\\(A\\)</span> 划分为两个非空集合，划分的价值为两个集合的异或和加起来，求可能的最大价值。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^5,A_i \\le 10^{18}\\)</span></p>\r\n</blockquote>\r\n<p>设总异或和为 <span class=\"math inline\">\\(sum\\)</span> ，若两个集合的异或和分别为 <span class=\"math inline\">\\(S_1,S_2\\)</span>，由 <span class=\"math inline\">\\(S_1 \\oplus S_2 = sum\\)</span> 知道，若 <span class=\"math inline\">\\(sum\\)</span> 第 <span class=\"math inline\">\\(i\\)</span> 位为 <span class=\"math inline\">\\(1\\)</span>，不管怎么划分，第 <span class=\"math inline\">\\(i\\)</span> 位一定产生一次贡献。若 <span class=\"math inline\">\\(sum\\)</span> 第 <span class=\"math inline\">\\(i\\)</span> 位为 <span class=\"math inline\">\\(0\\)</span>，那么 <span class=\"math inline\">\\(S_1,S_2\\)</span> 在第 <span class=\"math inline\">\\(i\\)</span> 位上相同。</p>\r\n<p>考虑 <span class=\"math inline\">\\(sum\\)</span> 为 <span class=\"math inline\">\\(0\\)</span> 的位，由于 <span class=\"math inline\">\\(S_1,S_2\\)</span> 在这些位上是相同的，只需要最大化 <span class=\"math inline\">\\(S_1\\)</span> 就行了，由于 <span class=\"math inline\">\\(S_1\\)</span> 为全集和空集都不会成为最优解，问题就转化为：</p>\r\n<p>给定n个整数（数字可能重复），求在这些数中选取任意个，使得他们的异或和最大。</p>\r\n<p>用线性基解决。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a[<span class=\"number\">100005</span>], bas[<span class=\"number\">70</span>], su, ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>, &amp;a[i]), su ^= a[i];</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) a[i] &amp;= ~su;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">per</span>(j, <span class=\"number\">59</span>, <span class=\"number\">0</span>) <span class=\"keyword\">if</span>(a[i] &gt;&gt; j &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(bas[j]) a[i] ^= bas[j];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">per</span>(k, j - <span class=\"number\">1</span>, <span class=\"number\">0</span>) <span class=\"keyword\">if</span>(a[i] &gt;&gt; k &amp; <span class=\"number\">1</span>) a[i] ^= bas[k];</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(k, j + <span class=\"number\">1</span>, <span class=\"number\">59</span>) <span class=\"keyword\">if</span>(bas[k] &gt;&gt; j &amp; <span class=\"number\">1</span>) bas[k] ^= a[i];</span><br><span class=\"line\">            bas[j] = a[i]; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">59</span>) ans ^= bas[i];</span><br><span class=\"line\">    cout &lt;&lt; su + ans * <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":1002,"excerpt":"","more":"<blockquote>\r\n<p>给定一个长度为 <span class=\"math inline\">\\(n\\)</span> 的序列 <span class=\"math inline\">\\(A\\)</span>，把 <span class=\"math inline\">\\(A\\)</span> 划分为两个非空集合，划分的价值为两个集合的异或和加起来，求可能的最大价值。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^5,A_i \\le 10^{18}\\)</span></p>\r\n</blockquote>\r\n<p>设总异或和为 <span class=\"math inline\">\\(sum\\)</span> ，若两个集合的异或和分别为 <span class=\"math inline\">\\(S_1,S_2\\)</span>，由 <span class=\"math inline\">\\(S_1 \\oplus S_2 = sum\\)</span> 知道，若 <span class=\"math inline\">\\(sum\\)</span> 第 <span class=\"math inline\">\\(i\\)</span> 位为 <span class=\"math inline\">\\(1\\)</span>，不管怎么划分，第 <span class=\"math inline\">\\(i\\)</span> 位一定产生一次贡献。若 <span class=\"math inline\">\\(sum\\)</span> 第 <span class=\"math inline\">\\(i\\)</span> 位为 <span class=\"math inline\">\\(0\\)</span>，那么 <span class=\"math inline\">\\(S_1,S_2\\)</span> 在第 <span class=\"math inline\">\\(i\\)</span> 位上相同。</p>\r\n<p>考虑 <span class=\"math inline\">\\(sum\\)</span> 为 <span class=\"math inline\">\\(0\\)</span> 的位，由于 <span class=\"math inline\">\\(S_1,S_2\\)</span> 在这些位上是相同的，只需要最大化 <span class=\"math inline\">\\(S_1\\)</span> 就行了，由于 <span class=\"math inline\">\\(S_1\\)</span> 为全集和空集都不会成为最优解，问题就转化为：</p>\r\n<p>给定n个整数（数字可能重复），求在这些数中选取任意个，使得他们的异或和最大。</p>\r\n<p>用线性基解决。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a[<span class=\"number\">100005</span>], bas[<span class=\"number\">70</span>], su, ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>, &amp;a[i]), su ^= a[i];</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) a[i] &amp;= ~su;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">per</span>(j, <span class=\"number\">59</span>, <span class=\"number\">0</span>) <span class=\"keyword\">if</span>(a[i] &gt;&gt; j &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(bas[j]) a[i] ^= bas[j];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">per</span>(k, j - <span class=\"number\">1</span>, <span class=\"number\">0</span>) <span class=\"keyword\">if</span>(a[i] &gt;&gt; k &amp; <span class=\"number\">1</span>) a[i] ^= bas[k];</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(k, j + <span class=\"number\">1</span>, <span class=\"number\">59</span>) <span class=\"keyword\">if</span>(bas[k] &gt;&gt; j &amp; <span class=\"number\">1</span>) bas[k] ^= a[i];</span><br><span class=\"line\">            bas[j] = a[i]; <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">59</span>) ans ^= bas[i];</span><br><span class=\"line\">    cout &lt;&lt; su + ans * <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"一道题3","date":"2021-04-12T11:59:27.000Z","updated":"2021-04-12T11:59:27.000Z","_content":"> $n$ 个数 $p_i$ 构成一个随机排列。\n>\n> 当你手上的数是 $p_i$ 时，你并不知道 $p_i$ 为多少，但你会获知是否 $p_i = \\min\\{p_1,p_2,\\cdots,p_i\\}$，然后做出以下两种行为之一：\n>\n> - 如果 $i < n$，用 $p_{i+1}$ 换掉 $p_i$。\n> - 带走 $p_i$，并结束。\n>\n> 现在你手上的数是 $p_1$，你想带走 $1$，求在最优决策下你带走 $1$ 的概率。\n>\n> 共 $T$ 组数据。\n>\n> $n \\le 10^6,T \\le 10^5$\n\n设 $f_i$ 表示你手上的数是 $p_i$ 时，在最优决策下你带走 $1$ 的概率。\n\n有 $\\frac 1i$ 的概率你获知了 $p_i = \\min\\{p_1,p_2,\\cdots,p_i\\}$，此时一定采取两种行为中带走 $1$ 的概率较大的一种。\n\n采取第一种行为时带走 $1$ 的概率为 $f_{i+1}$，采取第二种行为时带走 $1$ 的概率为 $\\frac in$。\n\n否则 $p_i \\ne \\min\\{p_1,p_2,\\cdots,p_i\\}$，因为 $p_i$ 一定不为 $1$，所以一定会采取​第一种行为。\n\n即\n$$\nf_i = \\dfrac {\\max\\{f_{i+1},\\frac in\\} + (i-1)f_{i+1}}i\n$$\n初始化 $f_{n+1} = 0$，答案即为 $f_1$。\n\n至此得到一个 $O(Tn)$ 的做法。\n\n注意到 $f_i$ 是单调不增的，而 $\\frac in$ 是单调递增的，并且 $f_1 > \\frac 1n,f_{n+1} < \\frac nn$。\n\n不难证明存在一个 $d$，满足\n$$\n\\begin{cases}\nf_i \\ge \\frac in &(i \\le d)\\\\\nf_i < \\frac in &(i > d)\n\\end{cases}\n$$\n故\n$$\nf_i = \\begin{cases}\nf_{i+1} &(i < d)\\\\\n\\dfrac {\\frac in+(i-1)f_{i+1}}i &(i \\ge d)\n\\end{cases}\n$$\n考虑当 $i \\ge d$ 时\n$$\nf_i=\\frac {i-1}if_{i+1}+\\frac 1n\\\\\n\\frac 1{i-1}f_i=\\frac 1if_{i+1}+\\frac 1{n(i-1)}\n$$\n设 $g_i = \\frac 1{i-1}f_i$，则\n$$\n\\begin{aligned}\n&g_i=g_{i+1}+\\frac 1{n(i-1)}\\\\\n&=\\sum_{j=i-1}^n\\frac 1{nj}\\\\\n&=\\frac 1n\\sum_{j=i-1}^n\\frac 1j\n\\end{aligned}\n\\Rightarrow\nf_i=\\frac {i-1}n\\sum_{j=i-1}^n\\frac 1j\n$$\n预处理调和数列前缀和后，对于每个 $n$，可以二分出 $d$，答案即为\n$$\n\\frac {d-1}n\\sum_{i=d-1}^n\\frac 1i\n$$\n复杂度 $O(n_{\\max}+T)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\n\nconst int N = 1e6 + 5;\ntypedef long long ll;\nconst ll P = 998244353;\nconst double e = exp(1);\nint T, n; ll inv[N], s[N];\ndouble S[N];\nint main() {\n    inv[0] = inv[1] = 1;\n    rep(i, 2, 1000000) inv[i] = P / i * -inv[P % i] % P;\n    rep(i, 1, 1000000) S[i] = S[i - 1] + 1. / i, (s[i] += s[i - 1] + inv[i]) %= P;\n    for(cin >> T; T--;) {\n        scanf(\"%d\", &n);\n        if(n == 1) puts(\"1\");\n        else {\n            int k = upper_bound(S + 1, S + n + 1, S[n - 1] - 1) - S;\n            printf(\"%lld\\n\", ((s[n - 1] - s[k - 1]) * k % P * inv[n] % P + P) % P);\n        }\n    }\n    return 0;\n}\n```","source":"_posts/problem3.md","raw":"---\ntitle: 一道题3\ndate: 2021-04-12 19:59:27\nupdated: 2021-04-12 19:59:27\ntags: [动态规划,概率,数论]\ncategories: 考试\n---\n> $n$ 个数 $p_i$ 构成一个随机排列。\n>\n> 当你手上的数是 $p_i$ 时，你并不知道 $p_i$ 为多少，但你会获知是否 $p_i = \\min\\{p_1,p_2,\\cdots,p_i\\}$，然后做出以下两种行为之一：\n>\n> - 如果 $i < n$，用 $p_{i+1}$ 换掉 $p_i$。\n> - 带走 $p_i$，并结束。\n>\n> 现在你手上的数是 $p_1$，你想带走 $1$，求在最优决策下你带走 $1$ 的概率。\n>\n> 共 $T$ 组数据。\n>\n> $n \\le 10^6,T \\le 10^5$\n\n设 $f_i$ 表示你手上的数是 $p_i$ 时，在最优决策下你带走 $1$ 的概率。\n\n有 $\\frac 1i$ 的概率你获知了 $p_i = \\min\\{p_1,p_2,\\cdots,p_i\\}$，此时一定采取两种行为中带走 $1$ 的概率较大的一种。\n\n采取第一种行为时带走 $1$ 的概率为 $f_{i+1}$，采取第二种行为时带走 $1$ 的概率为 $\\frac in$。\n\n否则 $p_i \\ne \\min\\{p_1,p_2,\\cdots,p_i\\}$，因为 $p_i$ 一定不为 $1$，所以一定会采取​第一种行为。\n\n即\n$$\nf_i = \\dfrac {\\max\\{f_{i+1},\\frac in\\} + (i-1)f_{i+1}}i\n$$\n初始化 $f_{n+1} = 0$，答案即为 $f_1$。\n\n至此得到一个 $O(Tn)$ 的做法。\n\n注意到 $f_i$ 是单调不增的，而 $\\frac in$ 是单调递增的，并且 $f_1 > \\frac 1n,f_{n+1} < \\frac nn$。\n\n不难证明存在一个 $d$，满足\n$$\n\\begin{cases}\nf_i \\ge \\frac in &(i \\le d)\\\\\nf_i < \\frac in &(i > d)\n\\end{cases}\n$$\n故\n$$\nf_i = \\begin{cases}\nf_{i+1} &(i < d)\\\\\n\\dfrac {\\frac in+(i-1)f_{i+1}}i &(i \\ge d)\n\\end{cases}\n$$\n考虑当 $i \\ge d$ 时\n$$\nf_i=\\frac {i-1}if_{i+1}+\\frac 1n\\\\\n\\frac 1{i-1}f_i=\\frac 1if_{i+1}+\\frac 1{n(i-1)}\n$$\n设 $g_i = \\frac 1{i-1}f_i$，则\n$$\n\\begin{aligned}\n&g_i=g_{i+1}+\\frac 1{n(i-1)}\\\\\n&=\\sum_{j=i-1}^n\\frac 1{nj}\\\\\n&=\\frac 1n\\sum_{j=i-1}^n\\frac 1j\n\\end{aligned}\n\\Rightarrow\nf_i=\\frac {i-1}n\\sum_{j=i-1}^n\\frac 1j\n$$\n预处理调和数列前缀和后，对于每个 $n$，可以二分出 $d$，答案即为\n$$\n\\frac {d-1}n\\sum_{i=d-1}^n\\frac 1i\n$$\n复杂度 $O(n_{\\max}+T)$。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\n\nconst int N = 1e6 + 5;\ntypedef long long ll;\nconst ll P = 998244353;\nconst double e = exp(1);\nint T, n; ll inv[N], s[N];\ndouble S[N];\nint main() {\n    inv[0] = inv[1] = 1;\n    rep(i, 2, 1000000) inv[i] = P / i * -inv[P % i] % P;\n    rep(i, 1, 1000000) S[i] = S[i - 1] + 1. / i, (s[i] += s[i - 1] + inv[i]) %= P;\n    for(cin >> T; T--;) {\n        scanf(\"%d\", &n);\n        if(n == 1) puts(\"1\");\n        else {\n            int k = upper_bound(S + 1, S + n + 1, S[n - 1] - 1) - S;\n            printf(\"%lld\\n\", ((s[n - 1] - s[k - 1]) * k % P * inv[n] % P + P) % P);\n        }\n    }\n    return 0;\n}\n```","slug":"problem3","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh0w003gootnfcnb8kol","content":"<blockquote>\r\n<p><span class=\"math inline\">\\(n\\)</span> 个数 <span class=\"math inline\">\\(p_i\\)</span> 构成一个随机排列。</p>\r\n<p>当你手上的数是 <span class=\"math inline\">\\(p_i\\)</span> 时，你并不知道 <span class=\"math inline\">\\(p_i\\)</span> 为多少，但你会获知是否 <span class=\"math inline\">\\(p_i = \\min\\{p_1,p_2,\\cdots,p_i\\}\\)</span>，然后做出以下两种行为之一：</p>\r\n<ul>\r\n<li>如果 <span class=\"math inline\">\\(i &lt; n\\)</span>，用 <span class=\"math inline\">\\(p_{i+1}\\)</span> 换掉 <span class=\"math inline\">\\(p_i\\)</span>。</li>\r\n<li>带走 <span class=\"math inline\">\\(p_i\\)</span>，并结束。</li>\r\n</ul>\r\n<p>现在你手上的数是 <span class=\"math inline\">\\(p_1\\)</span>，你想带走 <span class=\"math inline\">\\(1\\)</span>，求在最优决策下你带走 <span class=\"math inline\">\\(1\\)</span> 的概率。</p>\r\n<p>共 <span class=\"math inline\">\\(T\\)</span> 组数据。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^6,T \\le 10^5\\)</span></p>\r\n</blockquote>\r\n<p>设 <span class=\"math inline\">\\(f_i\\)</span> 表示你手上的数是 <span class=\"math inline\">\\(p_i\\)</span> 时，在最优决策下你带走 <span class=\"math inline\">\\(1\\)</span> 的概率。</p>\r\n<p>有 <span class=\"math inline\">\\(\\frac 1i\\)</span> 的概率你获知了 <span class=\"math inline\">\\(p_i = \\min\\{p_1,p_2,\\cdots,p_i\\}\\)</span>，此时一定采取两种行为中带走 <span class=\"math inline\">\\(1\\)</span> 的概率较大的一种。</p>\r\n<p>采取第一种行为时带走 <span class=\"math inline\">\\(1\\)</span> 的概率为 <span class=\"math inline\">\\(f_{i+1}\\)</span>，采取第二种行为时带走 <span class=\"math inline\">\\(1\\)</span> 的概率为 <span class=\"math inline\">\\(\\frac in\\)</span>。</p>\r\n<p>否则 <span class=\"math inline\">\\(p_i \\ne \\min\\{p_1,p_2,\\cdots,p_i\\}\\)</span>，因为 <span class=\"math inline\">\\(p_i\\)</span> 一定不为 <span class=\"math inline\">\\(1\\)</span>，所以一定会采取​第一种行为。</p>\r\n<p>即 <span class=\"math display\">\\[\r\nf_i = \\dfrac {\\max\\{f_{i+1},\\frac in\\} + (i-1)f_{i+1}}i\r\n\\]</span> 初始化 <span class=\"math inline\">\\(f_{n+1} = 0\\)</span>，答案即为 <span class=\"math inline\">\\(f_1\\)</span>。</p>\r\n<p>至此得到一个 <span class=\"math inline\">\\(O(Tn)\\)</span> 的做法。</p>\r\n<p>注意到 <span class=\"math inline\">\\(f_i\\)</span> 是单调不增的，而 <span class=\"math inline\">\\(\\frac in\\)</span> 是单调递增的，并且 <span class=\"math inline\">\\(f_1 &gt; \\frac 1n,f_{n+1} &lt; \\frac nn\\)</span>。</p>\r\n<p>不难证明存在一个 <span class=\"math inline\">\\(d\\)</span>，满足 <span class=\"math display\">\\[\r\n\\begin{cases}\r\nf_i \\ge \\frac in &amp;(i \\le d)\\\\\r\nf_i &lt; \\frac in &amp;(i &gt; d)\r\n\\end{cases}\r\n\\]</span> 故 <span class=\"math display\">\\[\r\nf_i = \\begin{cases}\r\nf_{i+1} &amp;(i &lt; d)\\\\\r\n\\dfrac {\\frac in+(i-1)f_{i+1}}i &amp;(i \\ge d)\r\n\\end{cases}\r\n\\]</span> 考虑当 <span class=\"math inline\">\\(i \\ge d\\)</span> 时 <span class=\"math display\">\\[\r\nf_i=\\frac {i-1}if_{i+1}+\\frac 1n\\\\\r\n\\frac 1{i-1}f_i=\\frac 1if_{i+1}+\\frac 1{n(i-1)}\r\n\\]</span> 设 <span class=\"math inline\">\\(g_i = \\frac 1{i-1}f_i\\)</span>，则 <span class=\"math display\">\\[\r\n\\begin{aligned}\r\n&amp;g_i=g_{i+1}+\\frac 1{n(i-1)}\\\\\r\n&amp;=\\sum_{j=i-1}^n\\frac 1{nj}\\\\\r\n&amp;=\\frac 1n\\sum_{j=i-1}^n\\frac 1j\r\n\\end{aligned}\r\n\\Rightarrow\r\nf_i=\\frac {i-1}n\\sum_{j=i-1}^n\\frac 1j\r\n\\]</span> 预处理调和数列前缀和后，对于每个 <span class=\"math inline\">\\(n\\)</span>，可以二分出 <span class=\"math inline\">\\(d\\)</span>，答案即为 <span class=\"math display\">\\[\r\n\\frac {d-1}n\\sum_{i=d-1}^n\\frac 1i\r\n\\]</span> 复杂度 <span class=\"math inline\">\\(O(n_{\\max}+T)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e6</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll P = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> e = <span class=\"built_in\">exp</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> T, n; ll inv[N], s[N];</span><br><span class=\"line\"><span class=\"keyword\">double</span> S[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    inv[<span class=\"number\">0</span>] = inv[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, <span class=\"number\">1000000</span>) inv[i] = P / i * -inv[P % i] % P;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">1000000</span>) S[i] = S[i - <span class=\"number\">1</span>] + <span class=\"number\">1.</span> / i, (s[i] += s[i - <span class=\"number\">1</span>] + inv[i]) %= P;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(cin &gt;&gt; T; T--;) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> k = <span class=\"built_in\">upper_bound</span>(S + <span class=\"number\">1</span>, S + n + <span class=\"number\">1</span>, S[n - <span class=\"number\">1</span>] - <span class=\"number\">1</span>) - S;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ((s[n - <span class=\"number\">1</span>] - s[k - <span class=\"number\">1</span>]) * k % P * inv[n] % P + P) % P);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":2002,"excerpt":"","more":"<blockquote>\r\n<p><span class=\"math inline\">\\(n\\)</span> 个数 <span class=\"math inline\">\\(p_i\\)</span> 构成一个随机排列。</p>\r\n<p>当你手上的数是 <span class=\"math inline\">\\(p_i\\)</span> 时，你并不知道 <span class=\"math inline\">\\(p_i\\)</span> 为多少，但你会获知是否 <span class=\"math inline\">\\(p_i = \\min\\{p_1,p_2,\\cdots,p_i\\}\\)</span>，然后做出以下两种行为之一：</p>\r\n<ul>\r\n<li>如果 <span class=\"math inline\">\\(i &lt; n\\)</span>，用 <span class=\"math inline\">\\(p_{i+1}\\)</span> 换掉 <span class=\"math inline\">\\(p_i\\)</span>。</li>\r\n<li>带走 <span class=\"math inline\">\\(p_i\\)</span>，并结束。</li>\r\n</ul>\r\n<p>现在你手上的数是 <span class=\"math inline\">\\(p_1\\)</span>，你想带走 <span class=\"math inline\">\\(1\\)</span>，求在最优决策下你带走 <span class=\"math inline\">\\(1\\)</span> 的概率。</p>\r\n<p>共 <span class=\"math inline\">\\(T\\)</span> 组数据。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^6,T \\le 10^5\\)</span></p>\r\n</blockquote>\r\n<p>设 <span class=\"math inline\">\\(f_i\\)</span> 表示你手上的数是 <span class=\"math inline\">\\(p_i\\)</span> 时，在最优决策下你带走 <span class=\"math inline\">\\(1\\)</span> 的概率。</p>\r\n<p>有 <span class=\"math inline\">\\(\\frac 1i\\)</span> 的概率你获知了 <span class=\"math inline\">\\(p_i = \\min\\{p_1,p_2,\\cdots,p_i\\}\\)</span>，此时一定采取两种行为中带走 <span class=\"math inline\">\\(1\\)</span> 的概率较大的一种。</p>\r\n<p>采取第一种行为时带走 <span class=\"math inline\">\\(1\\)</span> 的概率为 <span class=\"math inline\">\\(f_{i+1}\\)</span>，采取第二种行为时带走 <span class=\"math inline\">\\(1\\)</span> 的概率为 <span class=\"math inline\">\\(\\frac in\\)</span>。</p>\r\n<p>否则 <span class=\"math inline\">\\(p_i \\ne \\min\\{p_1,p_2,\\cdots,p_i\\}\\)</span>，因为 <span class=\"math inline\">\\(p_i\\)</span> 一定不为 <span class=\"math inline\">\\(1\\)</span>，所以一定会采取​第一种行为。</p>\r\n<p>即 <span class=\"math display\">\\[\r\nf_i = \\dfrac {\\max\\{f_{i+1},\\frac in\\} + (i-1)f_{i+1}}i\r\n\\]</span> 初始化 <span class=\"math inline\">\\(f_{n+1} = 0\\)</span>，答案即为 <span class=\"math inline\">\\(f_1\\)</span>。</p>\r\n<p>至此得到一个 <span class=\"math inline\">\\(O(Tn)\\)</span> 的做法。</p>\r\n<p>注意到 <span class=\"math inline\">\\(f_i\\)</span> 是单调不增的，而 <span class=\"math inline\">\\(\\frac in\\)</span> 是单调递增的，并且 <span class=\"math inline\">\\(f_1 &gt; \\frac 1n,f_{n+1} &lt; \\frac nn\\)</span>。</p>\r\n<p>不难证明存在一个 <span class=\"math inline\">\\(d\\)</span>，满足 <span class=\"math display\">\\[\r\n\\begin{cases}\r\nf_i \\ge \\frac in &amp;(i \\le d)\\\\\r\nf_i &lt; \\frac in &amp;(i &gt; d)\r\n\\end{cases}\r\n\\]</span> 故 <span class=\"math display\">\\[\r\nf_i = \\begin{cases}\r\nf_{i+1} &amp;(i &lt; d)\\\\\r\n\\dfrac {\\frac in+(i-1)f_{i+1}}i &amp;(i \\ge d)\r\n\\end{cases}\r\n\\]</span> 考虑当 <span class=\"math inline\">\\(i \\ge d\\)</span> 时 <span class=\"math display\">\\[\r\nf_i=\\frac {i-1}if_{i+1}+\\frac 1n\\\\\r\n\\frac 1{i-1}f_i=\\frac 1if_{i+1}+\\frac 1{n(i-1)}\r\n\\]</span> 设 <span class=\"math inline\">\\(g_i = \\frac 1{i-1}f_i\\)</span>，则 <span class=\"math display\">\\[\r\n\\begin{aligned}\r\n&amp;g_i=g_{i+1}+\\frac 1{n(i-1)}\\\\\r\n&amp;=\\sum_{j=i-1}^n\\frac 1{nj}\\\\\r\n&amp;=\\frac 1n\\sum_{j=i-1}^n\\frac 1j\r\n\\end{aligned}\r\n\\Rightarrow\r\nf_i=\\frac {i-1}n\\sum_{j=i-1}^n\\frac 1j\r\n\\]</span> 预处理调和数列前缀和后，对于每个 <span class=\"math inline\">\\(n\\)</span>，可以二分出 <span class=\"math inline\">\\(d\\)</span>，答案即为 <span class=\"math display\">\\[\r\n\\frac {d-1}n\\sum_{i=d-1}^n\\frac 1i\r\n\\]</span> 复杂度 <span class=\"math inline\">\\(O(n_{\\max}+T)\\)</span>。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e6</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll P = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> e = <span class=\"built_in\">exp</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> T, n; ll inv[N], s[N];</span><br><span class=\"line\"><span class=\"keyword\">double</span> S[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    inv[<span class=\"number\">0</span>] = inv[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, <span class=\"number\">1000000</span>) inv[i] = P / i * -inv[P % i] % P;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">1000000</span>) S[i] = S[i - <span class=\"number\">1</span>] + <span class=\"number\">1.</span> / i, (s[i] += s[i - <span class=\"number\">1</span>] + inv[i]) %= P;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(cin &gt;&gt; T; T--;) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> k = <span class=\"built_in\">upper_bound</span>(S + <span class=\"number\">1</span>, S + n + <span class=\"number\">1</span>, S[n - <span class=\"number\">1</span>] - <span class=\"number\">1</span>) - S;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ((s[n - <span class=\"number\">1</span>] - s[k - <span class=\"number\">1</span>]) * k % P * inv[n] % P + P) % P);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"一道题 4","date":"2021-09-04T08:01:14.000Z","updated":"2021-09-04T08:01:14.000Z","_content":"> 有 $n$ 个数，每个数都是不超过 $m$ 的质数，问有多少种情况它们的异或和等于 $0$。\n>\n> 答案对给定的模数 $p$ 取模。\n>\n> $n \\le 10^9, m \\le 3 \\cdot 10^6$，保证 $p$ 是奇数。\n\n定义一个位向量 $A$，满足\n$$\nA_i =\n\\begin{cases}\n1 &(i \\le m \\land i \\in \\text{Prime})\\\\\n0 &(otherwise)\n\\end{cases}\n$$\n定义乘法为异或卷积，那么 $(A^n)_0$ 就是答案。\n\n用 ```FWT``` + 快速幂可以做到 $O(m \\log m\\log n)$。\n\n但如果先 ```FWT```，再把每个位置上的值变成它的 $n$ 次方，最后 ```IFWT```，复杂度 $O(m(\\log n + \\log m))$。\n\n但还不足以通过此题，因为模数是变量，快速幂极慢，调用 $O(m)$ 次会 ```TLE```。\n\n考虑 ```FWT``` 的定义：\n$$\nFWT(A)_i = \\sum_{2\\ |\\ pop(j \\& i)}A_j - \\sum_{2\\ \\not|\\ pop(j \\& i)}A_j\n$$\n可以知道 $|FWT(A)_i| \\le \\sum_iA_i$，以及 $FWT(A)_0 = \\sum_iA_i$。\n\n$\\sum_iA_i$ 即 $m$ 以内质数个数，是 $O(\\frac m {\\log m})$ 级别的，可以预处理这 $O(\\frac m {\\log m})$ 个值的 $n$ 次方。\n\n这样就只需要做 $O(\\frac m {\\log m})$ 次快速幂。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\n\ntypedef long long ll;\nconst int N = 1 << 22;\n\nint n, m; ll P;\nint pid, f[N], g[N], prm[216900], b, lim = 1;\n\nll Pow(ll a, int n, ll r = 1) {\n    for(; n; n /= 2, a = a * a % P)\n    if(n & 1) r = r * a % P;\n    return r;\n}\nvoid FWT(int a[]) {\n    For(i, 0, b) For(S, 0, lim) if(S >> i & 1) {\n        int& x = a[S ^ 1 << i], y = a[S];\n        a[S] = x - y, x += y;\n    }\n}\n\nint main() {\n    cin >> n >> m >> P;\n    if(P == 1) puts(\"0\"), exit(0);\n    while(lim <= m) lim *= 2, b++;\n    rep(i, 2, m) {\n        if(!f[i]) prm[++pid] = i;\n        for(int j = 1; i * prm[j] <= m; j++) {\n            f[i * prm[j]] = 1;\n            if(i % prm[j] == 0) break;\n        }\n    }\n    mem(f, 0);\n    rep(i, 1, pid) f[prm[i]]++, g[i] = Pow(i, n);\n    FWT(f);\n    int as = 0;\n    For(S, 0, lim) (as += (f[S] < 0 && n % 2 ? -1 : 1) * g[abs(f[S])]) %= P;\n    cout << (as + P) * Pow(P / 2 + 1, b) % P;\n    return 0;\n}\n```\n","source":"_posts/problem4.md","raw":"---\ntitle: 一道题 4\ndate: 2021-09-04 16:01:14\nupdated: 2021-09-04 16:01:14\ntags: []\ncategories: 考试\n---\n> 有 $n$ 个数，每个数都是不超过 $m$ 的质数，问有多少种情况它们的异或和等于 $0$。\n>\n> 答案对给定的模数 $p$ 取模。\n>\n> $n \\le 10^9, m \\le 3 \\cdot 10^6$，保证 $p$ 是奇数。\n\n定义一个位向量 $A$，满足\n$$\nA_i =\n\\begin{cases}\n1 &(i \\le m \\land i \\in \\text{Prime})\\\\\n0 &(otherwise)\n\\end{cases}\n$$\n定义乘法为异或卷积，那么 $(A^n)_0$ 就是答案。\n\n用 ```FWT``` + 快速幂可以做到 $O(m \\log m\\log n)$。\n\n但如果先 ```FWT```，再把每个位置上的值变成它的 $n$ 次方，最后 ```IFWT```，复杂度 $O(m(\\log n + \\log m))$。\n\n但还不足以通过此题，因为模数是变量，快速幂极慢，调用 $O(m)$ 次会 ```TLE```。\n\n考虑 ```FWT``` 的定义：\n$$\nFWT(A)_i = \\sum_{2\\ |\\ pop(j \\& i)}A_j - \\sum_{2\\ \\not|\\ pop(j \\& i)}A_j\n$$\n可以知道 $|FWT(A)_i| \\le \\sum_iA_i$，以及 $FWT(A)_0 = \\sum_iA_i$。\n\n$\\sum_iA_i$ 即 $m$ 以内质数个数，是 $O(\\frac m {\\log m})$ 级别的，可以预处理这 $O(\\frac m {\\log m})$ 个值的 $n$ 次方。\n\n这样就只需要做 $O(\\frac m {\\log m})$ 次快速幂。\n\n代码：\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\n\ntypedef long long ll;\nconst int N = 1 << 22;\n\nint n, m; ll P;\nint pid, f[N], g[N], prm[216900], b, lim = 1;\n\nll Pow(ll a, int n, ll r = 1) {\n    for(; n; n /= 2, a = a * a % P)\n    if(n & 1) r = r * a % P;\n    return r;\n}\nvoid FWT(int a[]) {\n    For(i, 0, b) For(S, 0, lim) if(S >> i & 1) {\n        int& x = a[S ^ 1 << i], y = a[S];\n        a[S] = x - y, x += y;\n    }\n}\n\nint main() {\n    cin >> n >> m >> P;\n    if(P == 1) puts(\"0\"), exit(0);\n    while(lim <= m) lim *= 2, b++;\n    rep(i, 2, m) {\n        if(!f[i]) prm[++pid] = i;\n        for(int j = 1; i * prm[j] <= m; j++) {\n            f[i * prm[j]] = 1;\n            if(i % prm[j] == 0) break;\n        }\n    }\n    mem(f, 0);\n    rep(i, 1, pid) f[prm[i]]++, g[i] = Pow(i, n);\n    FWT(f);\n    int as = 0;\n    For(S, 0, lim) (as += (f[S] < 0 && n % 2 ? -1 : 1) * g[abs(f[S])]) %= P;\n    cout << (as + P) * Pow(P / 2 + 1, b) % P;\n    return 0;\n}\n```\n","slug":"problem4","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh0x003kootn9r6d62kn","content":"<blockquote>\r\n<p>有 <span class=\"math inline\">\\(n\\)</span> 个数，每个数都是不超过 <span class=\"math inline\">\\(m\\)</span> 的质数，问有多少种情况它们的异或和等于 <span class=\"math inline\">\\(0\\)</span>。</p>\r\n<p>答案对给定的模数 <span class=\"math inline\">\\(p\\)</span> 取模。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^9, m \\le 3 \\cdot 10^6\\)</span>，保证 <span class=\"math inline\">\\(p\\)</span> 是奇数。</p>\r\n</blockquote>\r\n<p>定义一个位向量 <span class=\"math inline\">\\(A\\)</span>，满足 <span class=\"math display\">\\[\r\nA_i =\r\n\\begin{cases}\r\n1 &amp;(i \\le m \\land i \\in \\text{Prime})\\\\\r\n0 &amp;(otherwise)\r\n\\end{cases}\r\n\\]</span> 定义乘法为异或卷积，那么 <span class=\"math inline\">\\((A^n)_0\\)</span> 就是答案。</p>\r\n<p>用 <code>FWT</code> + 快速幂可以做到 <span class=\"math inline\">\\(O(m \\log m\\log n)\\)</span>。</p>\r\n<p>但如果先 <code>FWT</code>，再把每个位置上的值变成它的 <span class=\"math inline\">\\(n\\)</span> 次方，最后 <code>IFWT</code>，复杂度 <span class=\"math inline\">\\(O(m(\\log n + \\log m))\\)</span>。</p>\r\n<p>但还不足以通过此题，因为模数是变量，快速幂极慢，调用 <span class=\"math inline\">\\(O(m)\\)</span> 次会 <code>TLE</code>。</p>\r\n<p>考虑 <code>FWT</code> 的定义： <span class=\"math display\">\\[\r\nFWT(A)_i = \\sum_{2\\ |\\ pop(j \\&amp; i)}A_j - \\sum_{2\\ \\not|\\ pop(j \\&amp; i)}A_j\r\n\\]</span> 可以知道 <span class=\"math inline\">\\(|FWT(A)_i| \\le \\sum_iA_i\\)</span>，以及 <span class=\"math inline\">\\(FWT(A)_0 = \\sum_iA_i\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(\\sum_iA_i\\)</span> 即 <span class=\"math inline\">\\(m\\)</span> 以内质数个数，是 <span class=\"math inline\">\\(O(\\frac m {\\log m})\\)</span> 级别的，可以预处理这 <span class=\"math inline\">\\(O(\\frac m {\\log m})\\)</span> 个值的 <span class=\"math inline\">\\(n\\)</span> 次方。</p>\r\n<p>这样就只需要做 <span class=\"math inline\">\\(O(\\frac m {\\log m})\\)</span> 次快速幂。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">22</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m; ll P;</span><br><span class=\"line\"><span class=\"keyword\">int</span> pid, f[N], g[N], prm[<span class=\"number\">216900</span>], b, lim = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">Pow</span><span class=\"params\">(ll a, <span class=\"keyword\">int</span> n, ll r = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; n; n /= <span class=\"number\">2</span>, a = a * a % P)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = r * a % P;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FWT</span><span class=\"params\">(<span class=\"keyword\">int</span> a[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, b) <span class=\"built_in\">For</span>(S, <span class=\"number\">0</span>, lim) <span class=\"keyword\">if</span>(S &gt;&gt; i &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>&amp; x = a[S ^ <span class=\"number\">1</span> &lt;&lt; i], y = a[S];</span><br><span class=\"line\">        a[S] = x - y, x += y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; P;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(P == <span class=\"number\">1</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;0&quot;</span>), <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(lim &lt;= m) lim *= <span class=\"number\">2</span>, b++;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, m) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!f[i]) prm[++pid] = i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; i * prm[j] &lt;= m; j++) &#123;</span><br><span class=\"line\">            f[i * prm[j]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i % prm[j] == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">mem</span>(f, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, pid) f[prm[i]]++, g[i] = <span class=\"built_in\">Pow</span>(i, n);</span><br><span class=\"line\">    <span class=\"built_in\">FWT</span>(f);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> as = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(S, <span class=\"number\">0</span>, lim) (as += (f[S] &lt; <span class=\"number\">0</span> &amp;&amp; n % <span class=\"number\">2</span> ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>) * g[<span class=\"built_in\">abs</span>(f[S])]) %= P;</span><br><span class=\"line\">    cout &lt;&lt; (as + P) * <span class=\"built_in\">Pow</span>(P / <span class=\"number\">2</span> + <span class=\"number\">1</span>, b) % P;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":1645,"excerpt":"","more":"<blockquote>\r\n<p>有 <span class=\"math inline\">\\(n\\)</span> 个数，每个数都是不超过 <span class=\"math inline\">\\(m\\)</span> 的质数，问有多少种情况它们的异或和等于 <span class=\"math inline\">\\(0\\)</span>。</p>\r\n<p>答案对给定的模数 <span class=\"math inline\">\\(p\\)</span> 取模。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^9, m \\le 3 \\cdot 10^6\\)</span>，保证 <span class=\"math inline\">\\(p\\)</span> 是奇数。</p>\r\n</blockquote>\r\n<p>定义一个位向量 <span class=\"math inline\">\\(A\\)</span>，满足 <span class=\"math display\">\\[\r\nA_i =\r\n\\begin{cases}\r\n1 &amp;(i \\le m \\land i \\in \\text{Prime})\\\\\r\n0 &amp;(otherwise)\r\n\\end{cases}\r\n\\]</span> 定义乘法为异或卷积，那么 <span class=\"math inline\">\\((A^n)_0\\)</span> 就是答案。</p>\r\n<p>用 <code>FWT</code> + 快速幂可以做到 <span class=\"math inline\">\\(O(m \\log m\\log n)\\)</span>。</p>\r\n<p>但如果先 <code>FWT</code>，再把每个位置上的值变成它的 <span class=\"math inline\">\\(n\\)</span> 次方，最后 <code>IFWT</code>，复杂度 <span class=\"math inline\">\\(O(m(\\log n + \\log m))\\)</span>。</p>\r\n<p>但还不足以通过此题，因为模数是变量，快速幂极慢，调用 <span class=\"math inline\">\\(O(m)\\)</span> 次会 <code>TLE</code>。</p>\r\n<p>考虑 <code>FWT</code> 的定义： <span class=\"math display\">\\[\r\nFWT(A)_i = \\sum_{2\\ |\\ pop(j \\&amp; i)}A_j - \\sum_{2\\ \\not|\\ pop(j \\&amp; i)}A_j\r\n\\]</span> 可以知道 <span class=\"math inline\">\\(|FWT(A)_i| \\le \\sum_iA_i\\)</span>，以及 <span class=\"math inline\">\\(FWT(A)_0 = \\sum_iA_i\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(\\sum_iA_i\\)</span> 即 <span class=\"math inline\">\\(m\\)</span> 以内质数个数，是 <span class=\"math inline\">\\(O(\\frac m {\\log m})\\)</span> 级别的，可以预处理这 <span class=\"math inline\">\\(O(\\frac m {\\log m})\\)</span> 个值的 <span class=\"math inline\">\\(n\\)</span> 次方。</p>\r\n<p>这样就只需要做 <span class=\"math inline\">\\(O(\\frac m {\\log m})\\)</span> 次快速幂。</p>\r\n<p>代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">22</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m; ll P;</span><br><span class=\"line\"><span class=\"keyword\">int</span> pid, f[N], g[N], prm[<span class=\"number\">216900</span>], b, lim = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">Pow</span><span class=\"params\">(ll a, <span class=\"keyword\">int</span> n, ll r = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; n; n /= <span class=\"number\">2</span>, a = a * a % P)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = r * a % P;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FWT</span><span class=\"params\">(<span class=\"keyword\">int</span> a[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, b) <span class=\"built_in\">For</span>(S, <span class=\"number\">0</span>, lim) <span class=\"keyword\">if</span>(S &gt;&gt; i &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>&amp; x = a[S ^ <span class=\"number\">1</span> &lt;&lt; i], y = a[S];</span><br><span class=\"line\">        a[S] = x - y, x += y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; P;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(P == <span class=\"number\">1</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;0&quot;</span>), <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(lim &lt;= m) lim *= <span class=\"number\">2</span>, b++;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, m) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!f[i]) prm[++pid] = i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; i * prm[j] &lt;= m; j++) &#123;</span><br><span class=\"line\">            f[i * prm[j]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i % prm[j] == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">mem</span>(f, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, pid) f[prm[i]]++, g[i] = <span class=\"built_in\">Pow</span>(i, n);</span><br><span class=\"line\">    <span class=\"built_in\">FWT</span>(f);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> as = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(S, <span class=\"number\">0</span>, lim) (as += (f[S] &lt; <span class=\"number\">0</span> &amp;&amp; n % <span class=\"number\">2</span> ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>) * g[<span class=\"built_in\">abs</span>(f[S])]) %= P;</span><br><span class=\"line\">    cout &lt;&lt; (as + P) * <span class=\"built_in\">Pow</span>(P / <span class=\"number\">2</span> + <span class=\"number\">1</span>, b) % P;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"任意模数 NTT","date":"2021-04-20T01:08:39.000Z","updated":"2021-04-20T01:08:39.000Z","_content":"> 给定一个 $n$ 次多项式 $A$ 和一个 $m$ 次多项式 $B$，计算 $A \\times B$，系数对 $p$ 取模。\n>\n> $n,m \\le 10^5$\n\n常见的有两种做法：\n\n- 先做三模数 ```NTT``` 再用中国剩余定理合并。\n\n<!-- more -->\n\n- 取 $M = \\lceil \\sqrt p \\rceil$，把每个系数 $x$ 拆成 $M \\cdot \\lfloor \\frac Mx \\rfloor$ 和 $M \\bmod x$ 两部分。\n\n这里讲第二种做法及其优化。\n\n### 做法\n\n设\n$$\nA0_i=\\lfloor \\frac {A_i}M \\rfloor,A1_i=A_i \\bmod M\\\\B0_i=\\lfloor \\frac {B_i}M \\rfloor,B1_i=B_i \\bmod M\n$$\n于是\n$$\nA = M \\cdot A0 + A1\\\\B = M \\cdot B0  + B1\n$$\n进一步\n$$\nA \\times B = M^2 \\cdot A0 \\times B0 + M(A0 \\times B1 + A1 \\times B0) + A1 \\times B1\n$$\n先对 $A0,A1,B0,B1$ 做一遍 ```DFT```，求出 $A0 \\times B0, A0 \\times B1 + A1 \\times B0,A1 \\times B1$ 的点值表示后再分别 ```IDFT```，共 $7$ 次。\n\n注意系数可能达到 $10^{14}$，需要用 $w_n^k=\\cos \\frac {2k\\pi}n+i \\cdot \\sin \\frac {2k\\pi}n$ 对 $w_n^k$ 进行预处理保证精度。\n\n### 优化\n\n下面考虑这样两件事：\n\n- 现在要对**实系数**多项式 $A,B$ 进行 ```DFT```。\n\n  我们定义\n  $$\n  P = A + iB\\\\\n  Q = A - iB\n  $$\n  推导可以得到一个很优美的结论：\n  $$\n  \\text {conj}(Q(w_n^k))=P(\\text{conj}({w_n^{k}}))\n  $$\n  于是只需一次 ```DFT``` 就可以求出 $A,B$ 的点值表示。\n\n- 现在已知**实系数**多项式 $A,B$ 的点值表示 $A',B'$，要求 $A,B$。\n\n  我们定义\n  $$\n  P = A' + iB'\n  $$\n  对 $P$ 进行 ```IDFT``` 得到 $P'$，于是\n  $$\n  P' = A + iB\n  $$\n  因此 $P'$ 的实数部分就是 $A$, 虚数部分就是 $B$。\n\n  于是只需一次 ```IDFT``` 就可以达到对 $A',B'$ 分别做 ```IDFT``` 的效果.\n\n将 $7$ 次 ```DFT``` 两两配对可以合并成 $4$ 次 ```DFT```。\n\n定义\n\n```cpp\ntypedef complex <lf> cmp;\nconst lf PI = acos(-1);\nconst cmp I(0, 1);\n\nint n, m, P;\nint M, lim = 1, bit = -1, rev[N];\ncmp w[N], a0[N], a1[N], b0[N], b1[N];\n```\n\n函数\n\n```cpp\nvoid FFT(cmp a[], int t) {\n    if(t) reverse(a + 1, a + lim);\n    For(i, 0, lim) if(i < rev[i]) swap(a[i], a[rev[i]]);\n    for(int i = 1; i < lim; i *= 2) for(int j = 0; j < lim; j += i * 2) For(k, j, j + i) {\n        cmp x = a[k], y = a[i + k] * w[lim / i * (k - j)];\n        a[k] = x + y, a[i + k] = x - y;\n    }\n    if(t) For(i, 0, lim) a[i] *= inv;\n}\nvoid FFT2(cmp a[], cmp b[]) {\n    For(i, 0, lim) a[i] += b[i] * I;\n    FFT(a, 0);\n    For(i, 0, lim) b[i] = conj(a[i ? lim - i : 0]);\n    For(i, 0, lim) {\n        cmp x = a[i], y = b[i];\n        a[i] = (y + x) * 0.5, b[i] = (y - x) * 0.5 * I;\n    }\n}\nll num(cmp x) { return M * ll(real(x) + 0.5) % P + ll(imag(x) + 0.5); }\n```\n\n预处理\n\n```cpp\nM = sqrt(P);\nrep(i, 0, n) a0[i] = A[i] / M, a1[i] = A[i] % M;\nrep(i, 0, m) b0[i] = B[i] / M, b1[i] = B[i] % M;\nwhile(lim <= n + m) lim *= 2, bit++;\ninv = 1. / lim;\nFor(i, 0, lim) {\n    rev[i] = rev[i / 2] / 2 | (i & 1) << bit;\n    w[i] = cmp(cos(PI / lim * i), sin(PI / lim * i));\n}\n```\n\n使用\n\n```cpp\nFFT2(a0, a1), FFT2(b0, b1);\nFor(i, 0, lim) {\n    cmp t = a0[i] + I * a1[i];\n    b0[i] *= t, b1[i] *= t;\n}\nFFT(b0, 1), FFT(b1, 1);\nrep(i, 0, n + m) C[i] = (M * num(b0[i]) + num(b1[i])) % P;\n```","source":"_posts/ren-yi-mo-shu-ntt.md","raw":"---\ntitle: 任意模数 NTT\ndate: 2021-04-20 09:08:39\nupdated: 2021-04-20 09:08:39\ntags: [知识总结,快速傅里叶变换,模板]\ncategories: 算法\n---\n> 给定一个 $n$ 次多项式 $A$ 和一个 $m$ 次多项式 $B$，计算 $A \\times B$，系数对 $p$ 取模。\n>\n> $n,m \\le 10^5$\n\n常见的有两种做法：\n\n- 先做三模数 ```NTT``` 再用中国剩余定理合并。\n\n<!-- more -->\n\n- 取 $M = \\lceil \\sqrt p \\rceil$，把每个系数 $x$ 拆成 $M \\cdot \\lfloor \\frac Mx \\rfloor$ 和 $M \\bmod x$ 两部分。\n\n这里讲第二种做法及其优化。\n\n### 做法\n\n设\n$$\nA0_i=\\lfloor \\frac {A_i}M \\rfloor,A1_i=A_i \\bmod M\\\\B0_i=\\lfloor \\frac {B_i}M \\rfloor,B1_i=B_i \\bmod M\n$$\n于是\n$$\nA = M \\cdot A0 + A1\\\\B = M \\cdot B0  + B1\n$$\n进一步\n$$\nA \\times B = M^2 \\cdot A0 \\times B0 + M(A0 \\times B1 + A1 \\times B0) + A1 \\times B1\n$$\n先对 $A0,A1,B0,B1$ 做一遍 ```DFT```，求出 $A0 \\times B0, A0 \\times B1 + A1 \\times B0,A1 \\times B1$ 的点值表示后再分别 ```IDFT```，共 $7$ 次。\n\n注意系数可能达到 $10^{14}$，需要用 $w_n^k=\\cos \\frac {2k\\pi}n+i \\cdot \\sin \\frac {2k\\pi}n$ 对 $w_n^k$ 进行预处理保证精度。\n\n### 优化\n\n下面考虑这样两件事：\n\n- 现在要对**实系数**多项式 $A,B$ 进行 ```DFT```。\n\n  我们定义\n  $$\n  P = A + iB\\\\\n  Q = A - iB\n  $$\n  推导可以得到一个很优美的结论：\n  $$\n  \\text {conj}(Q(w_n^k))=P(\\text{conj}({w_n^{k}}))\n  $$\n  于是只需一次 ```DFT``` 就可以求出 $A,B$ 的点值表示。\n\n- 现在已知**实系数**多项式 $A,B$ 的点值表示 $A',B'$，要求 $A,B$。\n\n  我们定义\n  $$\n  P = A' + iB'\n  $$\n  对 $P$ 进行 ```IDFT``` 得到 $P'$，于是\n  $$\n  P' = A + iB\n  $$\n  因此 $P'$ 的实数部分就是 $A$, 虚数部分就是 $B$。\n\n  于是只需一次 ```IDFT``` 就可以达到对 $A',B'$ 分别做 ```IDFT``` 的效果.\n\n将 $7$ 次 ```DFT``` 两两配对可以合并成 $4$ 次 ```DFT```。\n\n定义\n\n```cpp\ntypedef complex <lf> cmp;\nconst lf PI = acos(-1);\nconst cmp I(0, 1);\n\nint n, m, P;\nint M, lim = 1, bit = -1, rev[N];\ncmp w[N], a0[N], a1[N], b0[N], b1[N];\n```\n\n函数\n\n```cpp\nvoid FFT(cmp a[], int t) {\n    if(t) reverse(a + 1, a + lim);\n    For(i, 0, lim) if(i < rev[i]) swap(a[i], a[rev[i]]);\n    for(int i = 1; i < lim; i *= 2) for(int j = 0; j < lim; j += i * 2) For(k, j, j + i) {\n        cmp x = a[k], y = a[i + k] * w[lim / i * (k - j)];\n        a[k] = x + y, a[i + k] = x - y;\n    }\n    if(t) For(i, 0, lim) a[i] *= inv;\n}\nvoid FFT2(cmp a[], cmp b[]) {\n    For(i, 0, lim) a[i] += b[i] * I;\n    FFT(a, 0);\n    For(i, 0, lim) b[i] = conj(a[i ? lim - i : 0]);\n    For(i, 0, lim) {\n        cmp x = a[i], y = b[i];\n        a[i] = (y + x) * 0.5, b[i] = (y - x) * 0.5 * I;\n    }\n}\nll num(cmp x) { return M * ll(real(x) + 0.5) % P + ll(imag(x) + 0.5); }\n```\n\n预处理\n\n```cpp\nM = sqrt(P);\nrep(i, 0, n) a0[i] = A[i] / M, a1[i] = A[i] % M;\nrep(i, 0, m) b0[i] = B[i] / M, b1[i] = B[i] % M;\nwhile(lim <= n + m) lim *= 2, bit++;\ninv = 1. / lim;\nFor(i, 0, lim) {\n    rev[i] = rev[i / 2] / 2 | (i & 1) << bit;\n    w[i] = cmp(cos(PI / lim * i), sin(PI / lim * i));\n}\n```\n\n使用\n\n```cpp\nFFT2(a0, a1), FFT2(b0, b1);\nFor(i, 0, lim) {\n    cmp t = a0[i] + I * a1[i];\n    b0[i] *= t, b1[i] *= t;\n}\nFFT(b0, 1), FFT(b1, 1);\nrep(i, 0, n + m) C[i] = (M * num(b0[i]) + num(b1[i])) % P;\n```","slug":"ren-yi-mo-shu-ntt","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh0y003lootn0n0l6xd2","content":"<blockquote>\r\n<p>给定一个 <span class=\"math inline\">\\(n\\)</span> 次多项式 <span class=\"math inline\">\\(A\\)</span> 和一个 <span class=\"math inline\">\\(m\\)</span> 次多项式 <span class=\"math inline\">\\(B\\)</span>，计算 <span class=\"math inline\">\\(A \\times B\\)</span>，系数对 <span class=\"math inline\">\\(p\\)</span> 取模。</p>\r\n<p><span class=\"math inline\">\\(n,m \\le 10^5\\)</span></p>\r\n</blockquote>\r\n<p>常见的有两种做法：</p>\r\n<ul>\r\n<li>先做三模数 <code>NTT</code> 再用中国剩余定理合并。</li>\r\n</ul>\r\n<span id=\"more\"></span>\r\n<ul>\r\n<li>取 <span class=\"math inline\">\\(M = \\lceil \\sqrt p \\rceil\\)</span>，把每个系数 <span class=\"math inline\">\\(x\\)</span> 拆成 <span class=\"math inline\">\\(M \\cdot \\lfloor \\frac Mx \\rfloor\\)</span> 和 <span class=\"math inline\">\\(M \\bmod x\\)</span> 两部分。</li>\r\n</ul>\r\n<p>这里讲第二种做法及其优化。</p>\r\n<h3 id=\"做法\">做法</h3>\r\n<p>设 <span class=\"math display\">\\[\r\nA0_i=\\lfloor \\frac {A_i}M \\rfloor,A1_i=A_i \\bmod M\\\\B0_i=\\lfloor \\frac {B_i}M \\rfloor,B1_i=B_i \\bmod M\r\n\\]</span> 于是 <span class=\"math display\">\\[\r\nA = M \\cdot A0 + A1\\\\B = M \\cdot B0  + B1\r\n\\]</span> 进一步 <span class=\"math display\">\\[\r\nA \\times B = M^2 \\cdot A0 \\times B0 + M(A0 \\times B1 + A1 \\times B0) + A1 \\times B1\r\n\\]</span> 先对 <span class=\"math inline\">\\(A0,A1,B0,B1\\)</span> 做一遍 <code>DFT</code>，求出 <span class=\"math inline\">\\(A0 \\times B0, A0 \\times B1 + A1 \\times B0,A1 \\times B1\\)</span> 的点值表示后再分别 <code>IDFT</code>，共 <span class=\"math inline\">\\(7\\)</span> 次。</p>\r\n<p>注意系数可能达到 <span class=\"math inline\">\\(10^{14}\\)</span>，需要用 <span class=\"math inline\">\\(w_n^k=\\cos \\frac {2k\\pi}n+i \\cdot \\sin \\frac {2k\\pi}n\\)</span> 对 <span class=\"math inline\">\\(w_n^k\\)</span> 进行预处理保证精度。</p>\r\n<h3 id=\"优化\">优化</h3>\r\n<p>下面考虑这样两件事：</p>\r\n<ul>\r\n<li><p>现在要对<strong>实系数</strong>多项式 <span class=\"math inline\">\\(A,B\\)</span> 进行 <code>DFT</code>。</p>\r\n<p>我们定义 <span class=\"math display\">\\[\r\nP = A + iB\\\\\r\nQ = A - iB\r\n\\]</span> 推导可以得到一个很优美的结论： <span class=\"math display\">\\[\r\n\\text {conj}(Q(w_n^k))=P(\\text{conj}({w_n^{k}}))\r\n\\]</span> 于是只需一次 <code>DFT</code> 就可以求出 <span class=\"math inline\">\\(A,B\\)</span> 的点值表示。</p></li>\r\n<li><p>现在已知<strong>实系数</strong>多项式 <span class=\"math inline\">\\(A,B\\)</span> 的点值表示 <span class=\"math inline\">\\(A&#39;,B&#39;\\)</span>，要求 <span class=\"math inline\">\\(A,B\\)</span>。</p>\r\n<p>我们定义 <span class=\"math display\">\\[\r\nP = A&#39; + iB&#39;\r\n\\]</span> 对 <span class=\"math inline\">\\(P\\)</span> 进行 <code>IDFT</code> 得到 <span class=\"math inline\">\\(P&#39;\\)</span>，于是 <span class=\"math display\">\\[\r\nP&#39; = A + iB\r\n\\]</span> 因此 <span class=\"math inline\">\\(P&#39;\\)</span> 的实数部分就是 <span class=\"math inline\">\\(A\\)</span>, 虚数部分就是 <span class=\"math inline\">\\(B\\)</span>。</p>\r\n<p>于是只需一次 <code>IDFT</code> 就可以达到对 <span class=\"math inline\">\\(A&#39;,B&#39;\\)</span> 分别做 <code>IDFT</code> 的效果.</p></li>\r\n</ul>\r\n<p>将 <span class=\"math inline\">\\(7\\)</span> 次 <code>DFT</code> 两两配对可以合并成 <span class=\"math inline\">\\(4\\)</span> 次 <code>DFT</code>。</p>\r\n<p>定义</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> complex &lt;lf&gt; cmp;</span><br><span class=\"line\"><span class=\"keyword\">const</span> lf PI = <span class=\"built_in\">acos</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> cmp <span class=\"title\">I</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, P;</span><br><span class=\"line\"><span class=\"keyword\">int</span> M, lim = <span class=\"number\">1</span>, bit = <span class=\"number\">-1</span>, rev[N];</span><br><span class=\"line\">cmp w[N], a0[N], a1[N], b0[N], b1[N];</span><br></pre></td></tr></table></figure>\r\n<p>函数</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT</span><span class=\"params\">(cmp a[], <span class=\"keyword\">int</span> t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">reverse</span>(a + <span class=\"number\">1</span>, a + lim);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) <span class=\"keyword\">if</span>(i &lt; rev[i]) <span class=\"built_in\">swap</span>(a[i], a[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; lim; i *= <span class=\"number\">2</span>) <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; lim; j += i * <span class=\"number\">2</span>) <span class=\"built_in\">For</span>(k, j, j + i) &#123;</span><br><span class=\"line\">        cmp x = a[k], y = a[i + k] * w[lim / i * (k - j)];</span><br><span class=\"line\">        a[k] = x + y, a[i + k] = x - y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) a[i] *= inv;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT2</span><span class=\"params\">(cmp a[], cmp b[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) a[i] += b[i] * I;</span><br><span class=\"line\">    <span class=\"built_in\">FFT</span>(a, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) b[i] = <span class=\"built_in\">conj</span>(a[i ? lim - i : <span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) &#123;</span><br><span class=\"line\">        cmp x = a[i], y = b[i];</span><br><span class=\"line\">        a[i] = (y + x) * <span class=\"number\">0.5</span>, b[i] = (y - x) * <span class=\"number\">0.5</span> * I;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">num</span><span class=\"params\">(cmp x)</span> </span>&#123; <span class=\"keyword\">return</span> M * <span class=\"built_in\">ll</span>(<span class=\"built_in\">real</span>(x) + <span class=\"number\">0.5</span>) % P + <span class=\"built_in\">ll</span>(<span class=\"built_in\">imag</span>(x) + <span class=\"number\">0.5</span>); &#125;</span><br></pre></td></tr></table></figure>\r\n<p>预处理</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">M = <span class=\"built_in\">sqrt</span>(P);</span><br><span class=\"line\"><span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n) a0[i] = A[i] / M, a1[i] = A[i] % M;</span><br><span class=\"line\"><span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, m) b0[i] = B[i] / M, b1[i] = B[i] % M;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(lim &lt;= n + m) lim *= <span class=\"number\">2</span>, bit++;</span><br><span class=\"line\">inv = <span class=\"number\">1.</span> / lim;</span><br><span class=\"line\"><span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) &#123;</span><br><span class=\"line\">    rev[i] = rev[i / <span class=\"number\">2</span>] / <span class=\"number\">2</span> | (i &amp; <span class=\"number\">1</span>) &lt;&lt; bit;</span><br><span class=\"line\">    w[i] = <span class=\"built_in\">cmp</span>(<span class=\"built_in\">cos</span>(PI / lim * i), <span class=\"built_in\">sin</span>(PI / lim * i));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>使用</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">FFT2</span>(a0, a1), <span class=\"built_in\">FFT2</span>(b0, b1);</span><br><span class=\"line\"><span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) &#123;</span><br><span class=\"line\">    cmp t = a0[i] + I * a1[i];</span><br><span class=\"line\">    b0[i] *= t, b1[i] *= t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">FFT</span>(b0, <span class=\"number\">1</span>), <span class=\"built_in\">FFT</span>(b1, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n + m) C[i] = (M * <span class=\"built_in\">num</span>(b0[i]) + <span class=\"built_in\">num</span>(b1[i])) % P;</span><br></pre></td></tr></table></figure>\r\n","site":{"data":{}},"length":2038,"excerpt":"<blockquote>\r\n<p>给定一个 <span class=\"math inline\">\\(n\\)</span> 次多项式 <span class=\"math inline\">\\(A\\)</span> 和一个 <span class=\"math inline\">\\(m\\)</span> 次多项式 <span class=\"math inline\">\\(B\\)</span>，计算 <span class=\"math inline\">\\(A \\times B\\)</span>，系数对 <span class=\"math inline\">\\(p\\)</span> 取模。</p>\r\n<p><span class=\"math inline\">\\(n,m \\le 10^5\\)</span></p>\r\n</blockquote>\r\n<p>常见的有两种做法：</p>\r\n<ul>\r\n<li>先做三模数 <code>NTT</code> 再用中国剩余定理合并。</li>\r\n</ul>","more":"<ul>\r\n<li>取 <span class=\"math inline\">\\(M = \\lceil \\sqrt p \\rceil\\)</span>，把每个系数 <span class=\"math inline\">\\(x\\)</span> 拆成 <span class=\"math inline\">\\(M \\cdot \\lfloor \\frac Mx \\rfloor\\)</span> 和 <span class=\"math inline\">\\(M \\bmod x\\)</span> 两部分。</li>\r\n</ul>\r\n<p>这里讲第二种做法及其优化。</p>\r\n<h3 id=\"做法\">做法</h3>\r\n<p>设 <span class=\"math display\">\\[\r\nA0_i=\\lfloor \\frac {A_i}M \\rfloor,A1_i=A_i \\bmod M\\\\B0_i=\\lfloor \\frac {B_i}M \\rfloor,B1_i=B_i \\bmod M\r\n\\]</span> 于是 <span class=\"math display\">\\[\r\nA = M \\cdot A0 + A1\\\\B = M \\cdot B0  + B1\r\n\\]</span> 进一步 <span class=\"math display\">\\[\r\nA \\times B = M^2 \\cdot A0 \\times B0 + M(A0 \\times B1 + A1 \\times B0) + A1 \\times B1\r\n\\]</span> 先对 <span class=\"math inline\">\\(A0,A1,B0,B1\\)</span> 做一遍 <code>DFT</code>，求出 <span class=\"math inline\">\\(A0 \\times B0, A0 \\times B1 + A1 \\times B0,A1 \\times B1\\)</span> 的点值表示后再分别 <code>IDFT</code>，共 <span class=\"math inline\">\\(7\\)</span> 次。</p>\r\n<p>注意系数可能达到 <span class=\"math inline\">\\(10^{14}\\)</span>，需要用 <span class=\"math inline\">\\(w_n^k=\\cos \\frac {2k\\pi}n+i \\cdot \\sin \\frac {2k\\pi}n\\)</span> 对 <span class=\"math inline\">\\(w_n^k\\)</span> 进行预处理保证精度。</p>\r\n<h3 id=\"优化\">优化</h3>\r\n<p>下面考虑这样两件事：</p>\r\n<ul>\r\n<li><p>现在要对<strong>实系数</strong>多项式 <span class=\"math inline\">\\(A,B\\)</span> 进行 <code>DFT</code>。</p>\r\n<p>我们定义 <span class=\"math display\">\\[\r\nP = A + iB\\\\\r\nQ = A - iB\r\n\\]</span> 推导可以得到一个很优美的结论： <span class=\"math display\">\\[\r\n\\text {conj}(Q(w_n^k))=P(\\text{conj}({w_n^{k}}))\r\n\\]</span> 于是只需一次 <code>DFT</code> 就可以求出 <span class=\"math inline\">\\(A,B\\)</span> 的点值表示。</p></li>\r\n<li><p>现在已知<strong>实系数</strong>多项式 <span class=\"math inline\">\\(A,B\\)</span> 的点值表示 <span class=\"math inline\">\\(A&#39;,B&#39;\\)</span>，要求 <span class=\"math inline\">\\(A,B\\)</span>。</p>\r\n<p>我们定义 <span class=\"math display\">\\[\r\nP = A&#39; + iB&#39;\r\n\\]</span> 对 <span class=\"math inline\">\\(P\\)</span> 进行 <code>IDFT</code> 得到 <span class=\"math inline\">\\(P&#39;\\)</span>，于是 <span class=\"math display\">\\[\r\nP&#39; = A + iB\r\n\\]</span> 因此 <span class=\"math inline\">\\(P&#39;\\)</span> 的实数部分就是 <span class=\"math inline\">\\(A\\)</span>, 虚数部分就是 <span class=\"math inline\">\\(B\\)</span>。</p>\r\n<p>于是只需一次 <code>IDFT</code> 就可以达到对 <span class=\"math inline\">\\(A&#39;,B&#39;\\)</span> 分别做 <code>IDFT</code> 的效果.</p></li>\r\n</ul>\r\n<p>将 <span class=\"math inline\">\\(7\\)</span> 次 <code>DFT</code> 两两配对可以合并成 <span class=\"math inline\">\\(4\\)</span> 次 <code>DFT</code>。</p>\r\n<p>定义</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> complex &lt;lf&gt; cmp;</span><br><span class=\"line\"><span class=\"keyword\">const</span> lf PI = <span class=\"built_in\">acos</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> cmp <span class=\"title\">I</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, P;</span><br><span class=\"line\"><span class=\"keyword\">int</span> M, lim = <span class=\"number\">1</span>, bit = <span class=\"number\">-1</span>, rev[N];</span><br><span class=\"line\">cmp w[N], a0[N], a1[N], b0[N], b1[N];</span><br></pre></td></tr></table></figure>\r\n<p>函数</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT</span><span class=\"params\">(cmp a[], <span class=\"keyword\">int</span> t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">reverse</span>(a + <span class=\"number\">1</span>, a + lim);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) <span class=\"keyword\">if</span>(i &lt; rev[i]) <span class=\"built_in\">swap</span>(a[i], a[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; lim; i *= <span class=\"number\">2</span>) <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; lim; j += i * <span class=\"number\">2</span>) <span class=\"built_in\">For</span>(k, j, j + i) &#123;</span><br><span class=\"line\">        cmp x = a[k], y = a[i + k] * w[lim / i * (k - j)];</span><br><span class=\"line\">        a[k] = x + y, a[i + k] = x - y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) a[i] *= inv;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT2</span><span class=\"params\">(cmp a[], cmp b[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) a[i] += b[i] * I;</span><br><span class=\"line\">    <span class=\"built_in\">FFT</span>(a, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) b[i] = <span class=\"built_in\">conj</span>(a[i ? lim - i : <span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) &#123;</span><br><span class=\"line\">        cmp x = a[i], y = b[i];</span><br><span class=\"line\">        a[i] = (y + x) * <span class=\"number\">0.5</span>, b[i] = (y - x) * <span class=\"number\">0.5</span> * I;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">num</span><span class=\"params\">(cmp x)</span> </span>&#123; <span class=\"keyword\">return</span> M * <span class=\"built_in\">ll</span>(<span class=\"built_in\">real</span>(x) + <span class=\"number\">0.5</span>) % P + <span class=\"built_in\">ll</span>(<span class=\"built_in\">imag</span>(x) + <span class=\"number\">0.5</span>); &#125;</span><br></pre></td></tr></table></figure>\r\n<p>预处理</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">M = <span class=\"built_in\">sqrt</span>(P);</span><br><span class=\"line\"><span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n) a0[i] = A[i] / M, a1[i] = A[i] % M;</span><br><span class=\"line\"><span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, m) b0[i] = B[i] / M, b1[i] = B[i] % M;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(lim &lt;= n + m) lim *= <span class=\"number\">2</span>, bit++;</span><br><span class=\"line\">inv = <span class=\"number\">1.</span> / lim;</span><br><span class=\"line\"><span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) &#123;</span><br><span class=\"line\">    rev[i] = rev[i / <span class=\"number\">2</span>] / <span class=\"number\">2</span> | (i &amp; <span class=\"number\">1</span>) &lt;&lt; bit;</span><br><span class=\"line\">    w[i] = <span class=\"built_in\">cmp</span>(<span class=\"built_in\">cos</span>(PI / lim * i), <span class=\"built_in\">sin</span>(PI / lim * i));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>使用</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">FFT2</span>(a0, a1), <span class=\"built_in\">FFT2</span>(b0, b1);</span><br><span class=\"line\"><span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) &#123;</span><br><span class=\"line\">    cmp t = a0[i] + I * a1[i];</span><br><span class=\"line\">    b0[i] *= t, b1[i] *= t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">FFT</span>(b0, <span class=\"number\">1</span>), <span class=\"built_in\">FFT</span>(b1, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n + m) C[i] = (M * <span class=\"built_in\">num</span>(b0[i]) + <span class=\"built_in\">num</span>(b1[i])) % P;</span><br></pre></td></tr></table></figure>"},{"title":"杂项","date":"2021-08-23T15:35:20.000Z","updated":"2021-08-23T15:35:20.000Z","_content":"### Barrett reduction 取模优化\n\n> 计算 $ab\\bmod m(0\\le a,b<m<2^{31})$。\n\n如果 $m$ 在编译时已知，那么编译器就会帮你完成这个优化，否则你可以自己实现。\n\n首先，设 $m^{-1}$ 表示浮点数形式的 $\\frac 1m$。\n$$\nab\\bmod m=ab-\\lfloor ab\\cdot m^{-1}\\rfloor m\n$$\n即使预处理了 $m^{-1}$，由于浮点数乘法比整数除法快不了多少，考虑进一步优化，取 $\\frac {m'}{2^k}\\approx m^{-1}$，然后\n$$\n\\lfloor ab\\cdot m^{-1}\\rfloor \\approx \\lfloor \\frac{abm'}{2^k}\\rfloor\n$$\n计算右边就快多了，因为只有整数乘法和右移，如何合理选取 $m'$ 和 $k$？\n\n令 $k=2\\lceil \\log_2 m\\rceil,m'=\\lceil \\frac{2^k}m\\rceil$，下面分析误差：\n\n- 设 $m'm=2^k+r(0\\le r<m)$\n- 设 $ab=cm+d(0\\le c,d<m)$\n- $abm'=(cm+d)m'=cm'm+dm'=c2^k+cr+dm'$\n- $cr+dm'<(m-1)^2+m'm<(m-1)^2+2^k+(m-1)=2^k+m(m-1)<2^k\\cdot 2$\n- $\\lfloor \\frac{abm'}{2^k}\\rfloor=c\\ \\text{or}\\ c+1$\n\n设真实答案为 $ans$，那么 $ab-\\lfloor \\frac{abm'}{2^k}\\rfloor m=ans\\ \\text{or}\\ ans-m$。\n\n更一般的结论是只要 $c \\ge \\max(a, b^2)$，$\\lfloor \\frac{a\\lfloor \\frac cb\\rfloor}c\\rfloor=\\lfloor \\frac ab\\rfloor\\ \\text{or}\\ \\lfloor \\frac ab\\rfloor+1$ 成立。\n\n实践中可以令 $k=64$，可以用 `~0ull / m + 1` 来计算 $m'$。\n\n<details><summary><span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span></summary>\n```cpp\nusing uint = unsigned int;\nusing ull = unsigned long long;\nstruct barrett {\n    uint m; ull im;\n    barrett(uint m) :m(m), im(~0ull / m + 1) {}\n    uint mul(uint a, uint b) const {\n        ull z = (ull)a * b;\n        ull x = (unsigned __int128)z * im >> 64;\n        uint v = z - x * m;\n        return m <= v ? v + m : v;\n    }\n};\n```\n</details>\n\n速度比较：先在 $[0, m)$ 中随机生成 $10^5$ 个数，然后计算两两乘积模 $m$ 的异或和。\n\n测试系统 `ubuntu-21.04`（因为 `Linux` 比较稳定），每个格子前者为直接取模的时间，后者为 `Barrett reduction` 取模的时间。\n\n| 编译选项\\模数 |  998244353  | 1000000007  | 1000000009  |  19260817   |\n| :-----------: | :---------: | :---------: | :---------: | :---------: |\n|      无       | 47.1s/29.6s | 45.7s/30.2s | 46.6s/30.4s | 45.8s/29.2s |\n|      -O2      | 35.8s/6.4s  | 35.2s/6.1s  | 35.0s/6.3s  | 35.4s/6.3s  |\n\n另外，笔者想到了两个可以应用的地方。\n\n- 高精度计算 $ab\\bmod m$，高精度乘法是可以用 `FFT` 优化到 $O(\\log m\\log\\log m)$ 的（严格来讲，如果 $m$ 位数过于巨大，以致于直接求卷积会溢出时，需要用到 `Schönhage-Strassen` 算法，复杂度 $O(\\log m\\log\\log m\\log \\log \\log m)$，这里粗略地分析为 $O(\\log m\\log\\log m)$，后面的复杂度分析也是如此），而取模只能 $O(\\log^2 m)$。当 $m$ 固定时，可以事先 $O(\\log^2 m)$ 计算出 $m'$，然后就可以 $O(\\log m\\log\\log m)$ 地取模了。将此应用于 `Miller Rabin` 素性检验可以将复杂度优化到 $O(k\\log^2n\\log\\log n)$。\n\n- 加速计算 $\\gcd(a,b)$。如果 $a,b$ 都比较小，而次数很多，比如 $a,b\\le 10^7$，要求 $5\\cdot 10^7$ 次 $\\gcd$。\n\n  对于 $m$，令 $k=\\max(24,2\\lceil \\log_2m\\rceil)$，当 $m=b$ 时，$am'$ 在 `long long` 范围内，可以很有效地优化。\n\n### 卡特兰数的两个扩展\n\n本节所有的路径都是指每一步向上或向右走一个单位长度的路径。\n\n> 给定一条直线 $l:y=kx+b$，求从 $(0,0)$ 走到 $(a, l(a))$ 且不越过 $l$ 的路径条数。\n>\n> $k,b,a$ 都是正整数。\n\n记 $G(k,b,a)$ 表示这个路径条数。\n\n考虑从 $(0,0)$ 走到 $(a, l(a))$ 的路径条数，它可能不会越过 $l$，这部分路径条数为 $G(k,b,a)$，否则可以枚举路径第一次越过 $l$ 时的横坐标 $i$，得到 $(1)$ 式：\n$$\n\\binom {l(a)+a}a=G(k,b,a)+\\sum_{i+j=a}G(k,b,i)\\binom{kj+j-1}j\n$$\n\n考虑从 $(0,0)$ 走到 $(a-1,l(a))$ 的路径条数，它一定会越过 $l$，枚举路径第一次越过 $l$ 时的横坐标 $i$，得到 $(2)$ 式：\n$$\n\\binom {l(a)+a}{a-1}=\\sum_{i+j=a}G(k,b,i)\\binom {kj+j-1}{j-1}\n$$\n\n注意到\n$$\n\\frac{\\binom{kj+j-1}j}{\\binom{kj+j-1}{j-1}}=\\frac{kj}j=k\n$$\n$(1)-(2)\\times k$ 得：\n$$\nG(k,b,a)=\\binom{l(a)+a}a-k\\binom{l(a)+a}{a-1}\n$$\n\n>给定一条直线 $l:y=kx+b$，求从 $(0,0)$ 走到 $(x,y)$ 的所有路径与 $l$ 的交点总数。\n>\n>$k,b,a$ 都是正整数，$l(x) \\le y$。\n\n记 $F(k,b,x,y)$ 表示这个交点总数。\n\n考虑每个交点的贡献，枚举交点的横坐标 $i$，得到：\n$$\nF(k,b,x,y)=\\sum_{i+j=x}\\binom{l(i)+i}i\\binom{y-l(i)+j}j\n$$\n进一步\n$$\n\\begin{aligned}\n&F(k,b,x,y)-kF(k,b,x-1,y+1)\\\\\n&=\\sum_{i+j=x}\\binom{l(i)+i}i\\binom{y-l(i)+j}j-k\\binom{l(i)+i}i\\binom{y-l(i)+j}{j-1}\\\\\n&=\\sum_{i+j=x}\\binom{l(i)+i}i\\left(\\binom{y-l(i)+j}j-k\\binom{y-l(i)+j}{j-1}\\right)\\\\\n&=\\sum_{i+j=x}\\binom{l(i)+i}iG(k,y-l(x),j)\n\\end{aligned}\n$$\n注意到 $\\binom{l(i)+i}i$ 是从 $(0,0)$ 走到 $(i,l(i))$ 的路径条数，而 $G(k,y-l(x),j)$ 是从 $(x,y+1)$ **倒着**走到 $(i,l(i)+1)$ 且不越过 $l$ 的路径条数，整体求和就是从 $(0,0)$ 走到 $(x,y+1)$ 的路径条数，因为 $i$  就是在枚举最后一次越过 $l$ 时的横坐标。\n\n于是\n$$\nF(k,b,x,y)=kF(k,b,x-1,y+1)+\\binom{x+y+1}x\n$$\n因为 $F(k,b,x+y,0)=1$\n\n归纳得到\n$$\nF(k,b,x,y)=\\sum_{i+j=x}\\binom{x+y+1}ik^j\n$$\n它甚至和 $b$ 无关。\n\n\n\n### Lucas–Lehmer 素性检验\n\n> 原理：$M_p=2^p-1(p\\in\\text{Odd prime})$ 是质数当且仅当 $M_p|(2+\\sqrt 3)^{2^{p-2}}+(2-\\sqrt 3)^{2^{p-2}}$。\n\n后面有证明。\n\n算法：令 $s_n=(2+\\sqrt 3)^{2^n}+(2-\\sqrt 3)^{2^n}\\bmod M_p$，那么\n$$\ns_n=\\begin{cases}\n4&(i=0)\\\\\ns_{n-1}^2-2\\bmod M_p&(i>1)\n\\end{cases}\n$$\n计算平方可以用 `FFT` 做到 $O(p\\log p)$，由于模数很特殊，取模可以做到线性：\n\n$a \\bmod M_p=(a_0\\cdot 2^p+a_1)\\bmod M_p=(a_0+a_1)\\bmod M_p$\n\n$s_{n-1}^2-2$ 最多展开两遍就行了，复杂度 $O(p^2\\log p)$。\n\n#### 充分性\n\n反证法：假设 $M_p$ 是合数，它的最小质因子为 $q$，定义一个 $q^2$ 个元素的集合 $X=\\{a+b\\sqrt 3|a,b\\in\\mathbb Z_q\\}$，其中 $\\mathbb Z_q$ 表示 $0,1,2\\cdots,q-2,q-1$，定义 $X$ 中的乘法运算为\n$$\n(a+b\\sqrt 3)(c+d\\sqrt 3)=(ac+3bd)\\bmod q+(bc+ad)\\bmod q\\sqrt3\n$$\n$X$ 中任何两个元素的乘积一定也在 $X$ 内，但它不是群，因为不是所有元素都可逆，只保留有逆的元素，就得到了群 $X^*$。因为 $(2+\\sqrt 3)(2+(q-1)\\sqrt 3)\\equiv 1\\pmod q$，所以 $2+\\sqrt 3\\in X^{*}$。\n\n考虑\n$$\n(2+\\sqrt 3)^{2^{p-2}}+(2-\\sqrt 3)^{2^{p-2}} \\equiv 0\\pmod {M_p}\\\\\n(2+\\sqrt 3)^{2^{p-1}}+[(2+\\sqrt 3)(2-\\sqrt 3)]^{2^{p-2}} \\equiv 0\\pmod {M_p}\\\\\n(2+\\sqrt 3)^{2^{p-1}}\\equiv -1\\pmod {M_p}\n$$\n这说明了 $2 + \\sqrt 3$ 的阶为 $2^p$，即 $(2 + \\sqrt 3)^0,(2 + \\sqrt 3)^1,(2 + \\sqrt 3)^2,\\cdots,(2+\\sqrt 3)^{2^p-1}$ 两两不同。\n\n于是有 $2^p \\le |X*| \\le q^2 \\le M_p$，得出矛盾 $2^p \\le M_p$，故 $M_p$ 为质数。\n\n#### 必要性\n\n现在已知 $M_p$ 是质数，要说明 $M_p|(2+\\sqrt 3)^{2^{p-2}}+(2-\\sqrt 3)^{2^{p-2}}$。\n\n可以归纳证明，对于奇数 $p\\ge 3$，有 $2^p-1\\equiv 7\\pmod 8$ 和 $2^p-1\\equiv 7\\pmod {12}$。\n\n对于奇质数 $p$：\n\n- $2^p-1\\equiv 7\\pmod 8\\Rightarrow \\left(\\dfrac 2p\\right)=1\\Rightarrow 2^{\\frac{M_p-1}2}\\equiv 1\\pmod {M_p}$\n- $2^p-1\\equiv 7\\pmod {12}\\Rightarrow \\left(\\dfrac 3p\\right)=-1\\Rightarrow 3^{\\frac{M_p-1}2}\\equiv -1\\pmod {M_p}$\n\n第一步的原理都是二次互反律及其补充，第二步的原理都是欧拉准则。\n\n像前面一样，定义 $X=\\{a+b\\sqrt 3|a,b\\in\\mathbb Z_{M_p}\\}$，保留有逆的元素得到群 $X^*$。\n\n> 引理：$\\forall x,y\\in X^*,(x+y)^{M_p}\\equiv x^{M_p}+y^{M_p}\\pmod{M_p}$。\n\n根据 $M_p|\\binom{M_p}i$。\n\n那么，我们有：\n$$\n\\begin{aligned}\n(6+2\\sqrt 3)^{M_p}&=6^{M_p}+2^{M_p}(\\sqrt 3)^{M_p}\\\\\n&=6+2\\sqrt 3\\cdot 3^{\\frac{M_p-1}2}\\\\\n&=6-2\\sqrt 3\n\\end{aligned}\n$$\n由于 $2+\\sqrt 3=\\frac{(6+2\\sqrt 3)^2}{24}$，进一步\n$$\n\\begin{aligned}\n(2+\\sqrt 3)^{\\frac{M_p+1}2}&=\\frac{(6+2\\sqrt 3)^{M_p+1}}{24^{\\frac{M_p+1}2}}\\\\\n&=\\frac{(6+2\\sqrt 3)(6-2\\sqrt 3)}{24\\cdot (2^{\\frac{M_p-1}2})^3\\cdot 3^{\\frac{M_p-1}2}}\\\\\n&=-1\n\\end{aligned}\n$$\n最后，在两边同乘 $(2-\\sqrt 3)^{\\frac{M_p+1}4}$，并利用 $(2+\\sqrt 3)(2-\\sqrt 3)=1$\n$$\n\\begin{aligned}\n(2+\\sqrt 3)^{\\frac{M_p+1}2}(2-\\sqrt 3)^{\\frac{M_p+1}4}&=-(2-\\sqrt 3)^{\\frac{M_p+1}4}\\\\\n(2+\\sqrt 3)^{\\frac{M_p+1}4}+(2-\\sqrt 3)^{\\frac{M_p+1}4}&=0\\\\\n(2+\\sqrt 3)^{2^{p-2}}+(2-\\sqrt 3)^{2^{p-2}}&=0\n\\end{aligned}\n$$\n\n### 一个非常简单的问题\n\n> 求 $2^n$ 内所有奇数的乘积 $\\bmod 2^n$。\n>\n> $n \\le 10^4$\n\n设 $f_n=\\prod_{i=1}^{2^{n-1}}2i-1\\bmod 2^n$，对于 $n\\ge 2$，有\n$$\n\\begin{aligned}\nf_{n+1}&=(\\prod_{i=1}^{2^{n-1}}2i-1\\bmod 2^{n+1})(\\prod_{i=1}^{2^{n-1}}2i-1+2^n\\bmod 2^{n+1})\\bmod 2^{n+1}\\\\\n&=(\\prod_{i=1}^{2^{n-1}}2i-1\\bmod 2^{n+1})^2\\bmod 2^{n+1}\\\\\n\\end{aligned}\n$$\n设 $\\prod_{i=1}^{2^{n-1}}2i-1\\bmod 2^{n+1}=f_n+k2^n(k\\in\\{0,1\\})$，继续推。\n$$\n\\begin{aligned}\nf_{n+1}&=(f_n+k2^n)^2\\bmod 2^{n+1}\\\\\n&=f_n^2+k2^{n+1}+k^22^{2n}\\bmod 2^{n+1}\\\\\n&=f_n^2\\bmod 2^{n+1}\n\\end{aligned}\n$$\n计算平方可以用 `FFT` 做到 $O(n\\log n)$，总复杂度 $O(n^2\\log n)$。\n\n### 一个非常困难的问题\n\n> 求 $\\frac {p-1}2!\\bmod p$，$p$ 是质数且 $p\\equiv 3\\pmod 4$。\n>\n> $p \\le ???$\n\n快速阶乘算法 $O(\\sqrt p\\log p)$。\n\n其他做法：根据 Wilson 定理，$(p-1)!\\equiv -1\\pmod p$，那么 $\\frac {p-1}2!\\equiv \\pm 1\\pmod p$。准确地，$\\frac {p-1}2!\\equiv 1\\pmod p$ 当且仅当以下之一成立：\n\n- $p\\equiv 3\\pmod 8 \\land h(-p)\\equiv 1\\pmod 4$\n\n- $p\\equiv 7\\pmod 8\\land h(-p)\\equiv 3\\pmod 4$\n\n$h(-p) \\bmod 4$ 怎么快速算？不会。\n","source":"_posts/za-xiang.md","raw":"---\ntitle: 杂项\ndate: 2021-08-23 23:35:20\nupdated: 2021-08-23 23:35:20\ntags: []\ncategories: 算法\n---\n### Barrett reduction 取模优化\n\n> 计算 $ab\\bmod m(0\\le a,b<m<2^{31})$。\n\n如果 $m$ 在编译时已知，那么编译器就会帮你完成这个优化，否则你可以自己实现。\n\n首先，设 $m^{-1}$ 表示浮点数形式的 $\\frac 1m$。\n$$\nab\\bmod m=ab-\\lfloor ab\\cdot m^{-1}\\rfloor m\n$$\n即使预处理了 $m^{-1}$，由于浮点数乘法比整数除法快不了多少，考虑进一步优化，取 $\\frac {m'}{2^k}\\approx m^{-1}$，然后\n$$\n\\lfloor ab\\cdot m^{-1}\\rfloor \\approx \\lfloor \\frac{abm'}{2^k}\\rfloor\n$$\n计算右边就快多了，因为只有整数乘法和右移，如何合理选取 $m'$ 和 $k$？\n\n令 $k=2\\lceil \\log_2 m\\rceil,m'=\\lceil \\frac{2^k}m\\rceil$，下面分析误差：\n\n- 设 $m'm=2^k+r(0\\le r<m)$\n- 设 $ab=cm+d(0\\le c,d<m)$\n- $abm'=(cm+d)m'=cm'm+dm'=c2^k+cr+dm'$\n- $cr+dm'<(m-1)^2+m'm<(m-1)^2+2^k+(m-1)=2^k+m(m-1)<2^k\\cdot 2$\n- $\\lfloor \\frac{abm'}{2^k}\\rfloor=c\\ \\text{or}\\ c+1$\n\n设真实答案为 $ans$，那么 $ab-\\lfloor \\frac{abm'}{2^k}\\rfloor m=ans\\ \\text{or}\\ ans-m$。\n\n更一般的结论是只要 $c \\ge \\max(a, b^2)$，$\\lfloor \\frac{a\\lfloor \\frac cb\\rfloor}c\\rfloor=\\lfloor \\frac ab\\rfloor\\ \\text{or}\\ \\lfloor \\frac ab\\rfloor+1$ 成立。\n\n实践中可以令 $k=64$，可以用 `~0ull / m + 1` 来计算 $m'$。\n\n<details><summary><span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span></summary>\n```cpp\nusing uint = unsigned int;\nusing ull = unsigned long long;\nstruct barrett {\n    uint m; ull im;\n    barrett(uint m) :m(m), im(~0ull / m + 1) {}\n    uint mul(uint a, uint b) const {\n        ull z = (ull)a * b;\n        ull x = (unsigned __int128)z * im >> 64;\n        uint v = z - x * m;\n        return m <= v ? v + m : v;\n    }\n};\n```\n</details>\n\n速度比较：先在 $[0, m)$ 中随机生成 $10^5$ 个数，然后计算两两乘积模 $m$ 的异或和。\n\n测试系统 `ubuntu-21.04`（因为 `Linux` 比较稳定），每个格子前者为直接取模的时间，后者为 `Barrett reduction` 取模的时间。\n\n| 编译选项\\模数 |  998244353  | 1000000007  | 1000000009  |  19260817   |\n| :-----------: | :---------: | :---------: | :---------: | :---------: |\n|      无       | 47.1s/29.6s | 45.7s/30.2s | 46.6s/30.4s | 45.8s/29.2s |\n|      -O2      | 35.8s/6.4s  | 35.2s/6.1s  | 35.0s/6.3s  | 35.4s/6.3s  |\n\n另外，笔者想到了两个可以应用的地方。\n\n- 高精度计算 $ab\\bmod m$，高精度乘法是可以用 `FFT` 优化到 $O(\\log m\\log\\log m)$ 的（严格来讲，如果 $m$ 位数过于巨大，以致于直接求卷积会溢出时，需要用到 `Schönhage-Strassen` 算法，复杂度 $O(\\log m\\log\\log m\\log \\log \\log m)$，这里粗略地分析为 $O(\\log m\\log\\log m)$，后面的复杂度分析也是如此），而取模只能 $O(\\log^2 m)$。当 $m$ 固定时，可以事先 $O(\\log^2 m)$ 计算出 $m'$，然后就可以 $O(\\log m\\log\\log m)$ 地取模了。将此应用于 `Miller Rabin` 素性检验可以将复杂度优化到 $O(k\\log^2n\\log\\log n)$。\n\n- 加速计算 $\\gcd(a,b)$。如果 $a,b$ 都比较小，而次数很多，比如 $a,b\\le 10^7$，要求 $5\\cdot 10^7$ 次 $\\gcd$。\n\n  对于 $m$，令 $k=\\max(24,2\\lceil \\log_2m\\rceil)$，当 $m=b$ 时，$am'$ 在 `long long` 范围内，可以很有效地优化。\n\n### 卡特兰数的两个扩展\n\n本节所有的路径都是指每一步向上或向右走一个单位长度的路径。\n\n> 给定一条直线 $l:y=kx+b$，求从 $(0,0)$ 走到 $(a, l(a))$ 且不越过 $l$ 的路径条数。\n>\n> $k,b,a$ 都是正整数。\n\n记 $G(k,b,a)$ 表示这个路径条数。\n\n考虑从 $(0,0)$ 走到 $(a, l(a))$ 的路径条数，它可能不会越过 $l$，这部分路径条数为 $G(k,b,a)$，否则可以枚举路径第一次越过 $l$ 时的横坐标 $i$，得到 $(1)$ 式：\n$$\n\\binom {l(a)+a}a=G(k,b,a)+\\sum_{i+j=a}G(k,b,i)\\binom{kj+j-1}j\n$$\n\n考虑从 $(0,0)$ 走到 $(a-1,l(a))$ 的路径条数，它一定会越过 $l$，枚举路径第一次越过 $l$ 时的横坐标 $i$，得到 $(2)$ 式：\n$$\n\\binom {l(a)+a}{a-1}=\\sum_{i+j=a}G(k,b,i)\\binom {kj+j-1}{j-1}\n$$\n\n注意到\n$$\n\\frac{\\binom{kj+j-1}j}{\\binom{kj+j-1}{j-1}}=\\frac{kj}j=k\n$$\n$(1)-(2)\\times k$ 得：\n$$\nG(k,b,a)=\\binom{l(a)+a}a-k\\binom{l(a)+a}{a-1}\n$$\n\n>给定一条直线 $l:y=kx+b$，求从 $(0,0)$ 走到 $(x,y)$ 的所有路径与 $l$ 的交点总数。\n>\n>$k,b,a$ 都是正整数，$l(x) \\le y$。\n\n记 $F(k,b,x,y)$ 表示这个交点总数。\n\n考虑每个交点的贡献，枚举交点的横坐标 $i$，得到：\n$$\nF(k,b,x,y)=\\sum_{i+j=x}\\binom{l(i)+i}i\\binom{y-l(i)+j}j\n$$\n进一步\n$$\n\\begin{aligned}\n&F(k,b,x,y)-kF(k,b,x-1,y+1)\\\\\n&=\\sum_{i+j=x}\\binom{l(i)+i}i\\binom{y-l(i)+j}j-k\\binom{l(i)+i}i\\binom{y-l(i)+j}{j-1}\\\\\n&=\\sum_{i+j=x}\\binom{l(i)+i}i\\left(\\binom{y-l(i)+j}j-k\\binom{y-l(i)+j}{j-1}\\right)\\\\\n&=\\sum_{i+j=x}\\binom{l(i)+i}iG(k,y-l(x),j)\n\\end{aligned}\n$$\n注意到 $\\binom{l(i)+i}i$ 是从 $(0,0)$ 走到 $(i,l(i))$ 的路径条数，而 $G(k,y-l(x),j)$ 是从 $(x,y+1)$ **倒着**走到 $(i,l(i)+1)$ 且不越过 $l$ 的路径条数，整体求和就是从 $(0,0)$ 走到 $(x,y+1)$ 的路径条数，因为 $i$  就是在枚举最后一次越过 $l$ 时的横坐标。\n\n于是\n$$\nF(k,b,x,y)=kF(k,b,x-1,y+1)+\\binom{x+y+1}x\n$$\n因为 $F(k,b,x+y,0)=1$\n\n归纳得到\n$$\nF(k,b,x,y)=\\sum_{i+j=x}\\binom{x+y+1}ik^j\n$$\n它甚至和 $b$ 无关。\n\n\n\n### Lucas–Lehmer 素性检验\n\n> 原理：$M_p=2^p-1(p\\in\\text{Odd prime})$ 是质数当且仅当 $M_p|(2+\\sqrt 3)^{2^{p-2}}+(2-\\sqrt 3)^{2^{p-2}}$。\n\n后面有证明。\n\n算法：令 $s_n=(2+\\sqrt 3)^{2^n}+(2-\\sqrt 3)^{2^n}\\bmod M_p$，那么\n$$\ns_n=\\begin{cases}\n4&(i=0)\\\\\ns_{n-1}^2-2\\bmod M_p&(i>1)\n\\end{cases}\n$$\n计算平方可以用 `FFT` 做到 $O(p\\log p)$，由于模数很特殊，取模可以做到线性：\n\n$a \\bmod M_p=(a_0\\cdot 2^p+a_1)\\bmod M_p=(a_0+a_1)\\bmod M_p$\n\n$s_{n-1}^2-2$ 最多展开两遍就行了，复杂度 $O(p^2\\log p)$。\n\n#### 充分性\n\n反证法：假设 $M_p$ 是合数，它的最小质因子为 $q$，定义一个 $q^2$ 个元素的集合 $X=\\{a+b\\sqrt 3|a,b\\in\\mathbb Z_q\\}$，其中 $\\mathbb Z_q$ 表示 $0,1,2\\cdots,q-2,q-1$，定义 $X$ 中的乘法运算为\n$$\n(a+b\\sqrt 3)(c+d\\sqrt 3)=(ac+3bd)\\bmod q+(bc+ad)\\bmod q\\sqrt3\n$$\n$X$ 中任何两个元素的乘积一定也在 $X$ 内，但它不是群，因为不是所有元素都可逆，只保留有逆的元素，就得到了群 $X^*$。因为 $(2+\\sqrt 3)(2+(q-1)\\sqrt 3)\\equiv 1\\pmod q$，所以 $2+\\sqrt 3\\in X^{*}$。\n\n考虑\n$$\n(2+\\sqrt 3)^{2^{p-2}}+(2-\\sqrt 3)^{2^{p-2}} \\equiv 0\\pmod {M_p}\\\\\n(2+\\sqrt 3)^{2^{p-1}}+[(2+\\sqrt 3)(2-\\sqrt 3)]^{2^{p-2}} \\equiv 0\\pmod {M_p}\\\\\n(2+\\sqrt 3)^{2^{p-1}}\\equiv -1\\pmod {M_p}\n$$\n这说明了 $2 + \\sqrt 3$ 的阶为 $2^p$，即 $(2 + \\sqrt 3)^0,(2 + \\sqrt 3)^1,(2 + \\sqrt 3)^2,\\cdots,(2+\\sqrt 3)^{2^p-1}$ 两两不同。\n\n于是有 $2^p \\le |X*| \\le q^2 \\le M_p$，得出矛盾 $2^p \\le M_p$，故 $M_p$ 为质数。\n\n#### 必要性\n\n现在已知 $M_p$ 是质数，要说明 $M_p|(2+\\sqrt 3)^{2^{p-2}}+(2-\\sqrt 3)^{2^{p-2}}$。\n\n可以归纳证明，对于奇数 $p\\ge 3$，有 $2^p-1\\equiv 7\\pmod 8$ 和 $2^p-1\\equiv 7\\pmod {12}$。\n\n对于奇质数 $p$：\n\n- $2^p-1\\equiv 7\\pmod 8\\Rightarrow \\left(\\dfrac 2p\\right)=1\\Rightarrow 2^{\\frac{M_p-1}2}\\equiv 1\\pmod {M_p}$\n- $2^p-1\\equiv 7\\pmod {12}\\Rightarrow \\left(\\dfrac 3p\\right)=-1\\Rightarrow 3^{\\frac{M_p-1}2}\\equiv -1\\pmod {M_p}$\n\n第一步的原理都是二次互反律及其补充，第二步的原理都是欧拉准则。\n\n像前面一样，定义 $X=\\{a+b\\sqrt 3|a,b\\in\\mathbb Z_{M_p}\\}$，保留有逆的元素得到群 $X^*$。\n\n> 引理：$\\forall x,y\\in X^*,(x+y)^{M_p}\\equiv x^{M_p}+y^{M_p}\\pmod{M_p}$。\n\n根据 $M_p|\\binom{M_p}i$。\n\n那么，我们有：\n$$\n\\begin{aligned}\n(6+2\\sqrt 3)^{M_p}&=6^{M_p}+2^{M_p}(\\sqrt 3)^{M_p}\\\\\n&=6+2\\sqrt 3\\cdot 3^{\\frac{M_p-1}2}\\\\\n&=6-2\\sqrt 3\n\\end{aligned}\n$$\n由于 $2+\\sqrt 3=\\frac{(6+2\\sqrt 3)^2}{24}$，进一步\n$$\n\\begin{aligned}\n(2+\\sqrt 3)^{\\frac{M_p+1}2}&=\\frac{(6+2\\sqrt 3)^{M_p+1}}{24^{\\frac{M_p+1}2}}\\\\\n&=\\frac{(6+2\\sqrt 3)(6-2\\sqrt 3)}{24\\cdot (2^{\\frac{M_p-1}2})^3\\cdot 3^{\\frac{M_p-1}2}}\\\\\n&=-1\n\\end{aligned}\n$$\n最后，在两边同乘 $(2-\\sqrt 3)^{\\frac{M_p+1}4}$，并利用 $(2+\\sqrt 3)(2-\\sqrt 3)=1$\n$$\n\\begin{aligned}\n(2+\\sqrt 3)^{\\frac{M_p+1}2}(2-\\sqrt 3)^{\\frac{M_p+1}4}&=-(2-\\sqrt 3)^{\\frac{M_p+1}4}\\\\\n(2+\\sqrt 3)^{\\frac{M_p+1}4}+(2-\\sqrt 3)^{\\frac{M_p+1}4}&=0\\\\\n(2+\\sqrt 3)^{2^{p-2}}+(2-\\sqrt 3)^{2^{p-2}}&=0\n\\end{aligned}\n$$\n\n### 一个非常简单的问题\n\n> 求 $2^n$ 内所有奇数的乘积 $\\bmod 2^n$。\n>\n> $n \\le 10^4$\n\n设 $f_n=\\prod_{i=1}^{2^{n-1}}2i-1\\bmod 2^n$，对于 $n\\ge 2$，有\n$$\n\\begin{aligned}\nf_{n+1}&=(\\prod_{i=1}^{2^{n-1}}2i-1\\bmod 2^{n+1})(\\prod_{i=1}^{2^{n-1}}2i-1+2^n\\bmod 2^{n+1})\\bmod 2^{n+1}\\\\\n&=(\\prod_{i=1}^{2^{n-1}}2i-1\\bmod 2^{n+1})^2\\bmod 2^{n+1}\\\\\n\\end{aligned}\n$$\n设 $\\prod_{i=1}^{2^{n-1}}2i-1\\bmod 2^{n+1}=f_n+k2^n(k\\in\\{0,1\\})$，继续推。\n$$\n\\begin{aligned}\nf_{n+1}&=(f_n+k2^n)^2\\bmod 2^{n+1}\\\\\n&=f_n^2+k2^{n+1}+k^22^{2n}\\bmod 2^{n+1}\\\\\n&=f_n^2\\bmod 2^{n+1}\n\\end{aligned}\n$$\n计算平方可以用 `FFT` 做到 $O(n\\log n)$，总复杂度 $O(n^2\\log n)$。\n\n### 一个非常困难的问题\n\n> 求 $\\frac {p-1}2!\\bmod p$，$p$ 是质数且 $p\\equiv 3\\pmod 4$。\n>\n> $p \\le ???$\n\n快速阶乘算法 $O(\\sqrt p\\log p)$。\n\n其他做法：根据 Wilson 定理，$(p-1)!\\equiv -1\\pmod p$，那么 $\\frac {p-1}2!\\equiv \\pm 1\\pmod p$。准确地，$\\frac {p-1}2!\\equiv 1\\pmod p$ 当且仅当以下之一成立：\n\n- $p\\equiv 3\\pmod 8 \\land h(-p)\\equiv 1\\pmod 4$\n\n- $p\\equiv 7\\pmod 8\\land h(-p)\\equiv 3\\pmod 4$\n\n$h(-p) \\bmod 4$ 怎么快速算？不会。\n","slug":"za-xiang","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh0z003pootn0ff13dh1","content":"<h3 id=\"barrett-reduction-取模优化\">Barrett reduction 取模优化</h3>\r\n<blockquote>\r\n<p>计算 <span class=\"math inline\">\\(ab\\bmod m(0\\le a,b&lt;m&lt;2^{31})\\)</span>。</p>\r\n</blockquote>\r\n<p>如果 <span class=\"math inline\">\\(m\\)</span> 在编译时已知，那么编译器就会帮你完成这个优化，否则你可以自己实现。</p>\r\n<p>首先，设 <span class=\"math inline\">\\(m^{-1}\\)</span> 表示浮点数形式的 <span class=\"math inline\">\\(\\frac 1m\\)</span>。 <span class=\"math display\">\\[\r\nab\\bmod m=ab-\\lfloor ab\\cdot m^{-1}\\rfloor m\r\n\\]</span> 即使预处理了 <span class=\"math inline\">\\(m^{-1}\\)</span>，由于浮点数乘法比整数除法快不了多少，考虑进一步优化，取 <span class=\"math inline\">\\(\\frac {m&#39;}{2^k}\\approx m^{-1}\\)</span>，然后 <span class=\"math display\">\\[\r\n\\lfloor ab\\cdot m^{-1}\\rfloor \\approx \\lfloor \\frac{abm&#39;}{2^k}\\rfloor\r\n\\]</span> 计算右边就快多了，因为只有整数乘法和右移，如何合理选取 <span class=\"math inline\">\\(m&#39;\\)</span> 和 <span class=\"math inline\">\\(k\\)</span>？</p>\r\n<p>令 <span class=\"math inline\">\\(k=2\\lceil \\log_2 m\\rceil,m&#39;=\\lceil \\frac{2^k}m\\rceil\\)</span>，下面分析误差：</p>\r\n<ul>\r\n<li>设 <span class=\"math inline\">\\(m&#39;m=2^k+r(0\\le r&lt;m)\\)</span></li>\r\n<li>设 <span class=\"math inline\">\\(ab=cm+d(0\\le c,d&lt;m)\\)</span></li>\r\n<li><span class=\"math inline\">\\(abm&#39;=(cm+d)m&#39;=cm&#39;m+dm&#39;=c2^k+cr+dm&#39;\\)</span></li>\r\n<li><span class=\"math inline\">\\(cr+dm&#39;&lt;(m-1)^2+m&#39;m&lt;(m-1)^2+2^k+(m-1)=2^k+m(m-1)&lt;2^k\\cdot 2\\)</span></li>\r\n<li><span class=\"math inline\">\\(\\lfloor \\frac{abm&#39;}{2^k}\\rfloor=c\\ \\text{or}\\ c+1\\)</span></li>\r\n</ul>\r\n<p>设真实答案为 <span class=\"math inline\">\\(ans\\)</span>，那么 <span class=\"math inline\">\\(ab-\\lfloor \\frac{abm&#39;}{2^k}\\rfloor m=ans\\ \\text{or}\\ ans-m\\)</span>。</p>\r\n<p>更一般的结论是只要 <span class=\"math inline\">\\(c \\ge \\max(a, b^2)\\)</span>，<span class=\"math inline\">\\(\\lfloor \\frac{a\\lfloor \\frac cb\\rfloor}c\\rfloor=\\lfloor \\frac ab\\rfloor\\ \\text{or}\\ \\lfloor \\frac ab\\rfloor+1\\)</span> 成立。</p>\r\n<p>实践中可以令 <span class=\"math inline\">\\(k=64\\)</span>，可以用 <code>~0ull / m + 1</code> 来计算 <span class=\"math inline\">\\(m&#39;\\)</span>。</p>\r\n<details>\r\n<summary>\r\n<span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span>\r\n</summary>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> uint = <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ull = <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">barrett</span> &#123;</span></span><br><span class=\"line\">    uint m; ull im;</span><br><span class=\"line\">    <span class=\"built_in\">barrett</span>(uint m) :<span class=\"built_in\">m</span>(m), <span class=\"built_in\">im</span>(~<span class=\"number\">0ull</span> / m + <span class=\"number\">1</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\">uint <span class=\"title\">mul</span><span class=\"params\">(uint a, uint b)</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">        ull z = (ull)a * b;</span><br><span class=\"line\">        ull x = (<span class=\"keyword\">unsigned</span> __int128)z * im &gt;&gt; <span class=\"number\">64</span>;</span><br><span class=\"line\">        uint v = z - x * m;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m &lt;= v ? v + m : v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n</details>\r\n<p>速度比较：先在 <span class=\"math inline\">\\([0, m)\\)</span> 中随机生成 <span class=\"math inline\">\\(10^5\\)</span> 个数，然后计算两两乘积模 <span class=\"math inline\">\\(m\\)</span> 的异或和。</p>\r\n<p>测试系统 <code>ubuntu-21.04</code>（因为 <code>Linux</code> 比较稳定），每个格子前者为直接取模的时间，后者为 <code>Barrett reduction</code> 取模的时间。</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">编译选项</th>\r\n<th style=\"text-align: center;\">998244353</th>\r\n<th style=\"text-align: center;\">1000000007</th>\r\n<th style=\"text-align: center;\">1000000009</th>\r\n<th style=\"text-align: center;\">19260817</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">无</td>\r\n<td style=\"text-align: center;\">47.1s/29.6s</td>\r\n<td style=\"text-align: center;\">45.7s/30.2s</td>\r\n<td style=\"text-align: center;\">46.6s/30.4s</td>\r\n<td style=\"text-align: center;\">45.8s/29.2s</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">-O2</td>\r\n<td style=\"text-align: center;\">35.8s/6.4s</td>\r\n<td style=\"text-align: center;\">35.2s/6.1s</td>\r\n<td style=\"text-align: center;\">35.0s/6.3s</td>\r\n<td style=\"text-align: center;\">35.4s/6.3s</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>另外，笔者想到了两个可以应用的地方。</p>\r\n<ul>\r\n<li><p>高精度计算 <span class=\"math inline\">\\(ab\\bmod m\\)</span>，高精度乘法是可以用 <code>FFT</code> 优化到 <span class=\"math inline\">\\(O(\\log m\\log\\log m)\\)</span> 的（严格来讲，如果 <span class=\"math inline\">\\(m\\)</span> 位数过于巨大，以致于直接求卷积会溢出时，需要用到 <code>Schönhage-Strassen</code> 算法，复杂度 <span class=\"math inline\">\\(O(\\log m\\log\\log m\\log \\log \\log m)\\)</span>，这里粗略地分析为 <span class=\"math inline\">\\(O(\\log m\\log\\log m)\\)</span>，后面的复杂度分析也是如此），而取模只能 <span class=\"math inline\">\\(O(\\log^2 m)\\)</span>。当 <span class=\"math inline\">\\(m\\)</span> 固定时，可以事先 <span class=\"math inline\">\\(O(\\log^2 m)\\)</span> 计算出 <span class=\"math inline\">\\(m&#39;\\)</span>，然后就可以 <span class=\"math inline\">\\(O(\\log m\\log\\log m)\\)</span> 地取模了。将此应用于 <code>Miller Rabin</code> 素性检验可以将复杂度优化到 <span class=\"math inline\">\\(O(k\\log^2n\\log\\log n)\\)</span>。</p></li>\r\n<li><p>加速计算 <span class=\"math inline\">\\(\\gcd(a,b)\\)</span>。如果 <span class=\"math inline\">\\(a,b\\)</span> 都比较小，而次数很多，比如 <span class=\"math inline\">\\(a,b\\le 10^7\\)</span>，要求 <span class=\"math inline\">\\(5\\cdot 10^7\\)</span> 次 <span class=\"math inline\">\\(\\gcd\\)</span>。</p>\r\n<p>对于 <span class=\"math inline\">\\(m\\)</span>，令 <span class=\"math inline\">\\(k=\\max(24,2\\lceil \\log_2m\\rceil)\\)</span>，当 <span class=\"math inline\">\\(m=b\\)</span> 时，<span class=\"math inline\">\\(am&#39;\\)</span> 在 <code>long long</code> 范围内，可以很有效地优化。</p></li>\r\n</ul>\r\n<h3 id=\"卡特兰数的两个扩展\">卡特兰数的两个扩展</h3>\r\n<p>本节所有的路径都是指每一步向上或向右走一个单位长度的路径。</p>\r\n<blockquote>\r\n<p>给定一条直线 <span class=\"math inline\">\\(l:y=kx+b\\)</span>，求从 <span class=\"math inline\">\\((0,0)\\)</span> 走到 <span class=\"math inline\">\\((a, l(a))\\)</span> 且不越过 <span class=\"math inline\">\\(l\\)</span> 的路径条数。</p>\r\n<p><span class=\"math inline\">\\(k,b,a\\)</span> 都是正整数。</p>\r\n</blockquote>\r\n<p>记 <span class=\"math inline\">\\(G(k,b,a)\\)</span> 表示这个路径条数。</p>\r\n<p>考虑从 <span class=\"math inline\">\\((0,0)\\)</span> 走到 <span class=\"math inline\">\\((a, l(a))\\)</span> 的路径条数，它可能不会越过 <span class=\"math inline\">\\(l\\)</span>，这部分路径条数为 <span class=\"math inline\">\\(G(k,b,a)\\)</span>，否则可以枚举路径第一次越过 <span class=\"math inline\">\\(l\\)</span> 时的横坐标 <span class=\"math inline\">\\(i\\)</span>，得到 <span class=\"math inline\">\\((1)\\)</span> 式： <span class=\"math display\">\\[\r\n\\binom {l(a)+a}a=G(k,b,a)+\\sum_{i+j=a}G(k,b,i)\\binom{kj+j-1}j\r\n\\]</span></p>\r\n<p>考虑从 <span class=\"math inline\">\\((0,0)\\)</span> 走到 <span class=\"math inline\">\\((a-1,l(a))\\)</span> 的路径条数，它一定会越过 <span class=\"math inline\">\\(l\\)</span>，枚举路径第一次越过 <span class=\"math inline\">\\(l\\)</span> 时的横坐标 <span class=\"math inline\">\\(i\\)</span>，得到 <span class=\"math inline\">\\((2)\\)</span> 式： <span class=\"math display\">\\[\r\n\\binom {l(a)+a}{a-1}=\\sum_{i+j=a}G(k,b,i)\\binom {kj+j-1}{j-1}\r\n\\]</span></p>\r\n<p>注意到 <span class=\"math display\">\\[\r\n\\frac{\\binom{kj+j-1}j}{\\binom{kj+j-1}{j-1}}=\\frac{kj}j=k\r\n\\]</span> <span class=\"math inline\">\\((1)-(2)\\times k\\)</span> 得： <span class=\"math display\">\\[\r\nG(k,b,a)=\\binom{l(a)+a}a-k\\binom{l(a)+a}{a-1}\r\n\\]</span></p>\r\n<blockquote>\r\n<p>给定一条直线 <span class=\"math inline\">\\(l:y=kx+b\\)</span>，求从 <span class=\"math inline\">\\((0,0)\\)</span> 走到 <span class=\"math inline\">\\((x,y)\\)</span> 的所有路径与 <span class=\"math inline\">\\(l\\)</span> 的交点总数。</p>\r\n<p><span class=\"math inline\">\\(k,b,a\\)</span> 都是正整数，<span class=\"math inline\">\\(l(x) \\le y\\)</span>。</p>\r\n</blockquote>\r\n<p>记 <span class=\"math inline\">\\(F(k,b,x,y)\\)</span> 表示这个交点总数。</p>\r\n<p>考虑每个交点的贡献，枚举交点的横坐标 <span class=\"math inline\">\\(i\\)</span>，得到： <span class=\"math display\">\\[\r\nF(k,b,x,y)=\\sum_{i+j=x}\\binom{l(i)+i}i\\binom{y-l(i)+j}j\r\n\\]</span> 进一步 <span class=\"math display\">\\[\r\n\\begin{aligned}\r\n&amp;F(k,b,x,y)-kF(k,b,x-1,y+1)\\\\\r\n&amp;=\\sum_{i+j=x}\\binom{l(i)+i}i\\binom{y-l(i)+j}j-k\\binom{l(i)+i}i\\binom{y-l(i)+j}{j-1}\\\\\r\n&amp;=\\sum_{i+j=x}\\binom{l(i)+i}i\\left(\\binom{y-l(i)+j}j-k\\binom{y-l(i)+j}{j-1}\\right)\\\\\r\n&amp;=\\sum_{i+j=x}\\binom{l(i)+i}iG(k,y-l(x),j)\r\n\\end{aligned}\r\n\\]</span> 注意到 <span class=\"math inline\">\\(\\binom{l(i)+i}i\\)</span> 是从 <span class=\"math inline\">\\((0,0)\\)</span> 走到 <span class=\"math inline\">\\((i,l(i))\\)</span> 的路径条数，而 <span class=\"math inline\">\\(G(k,y-l(x),j)\\)</span> 是从 <span class=\"math inline\">\\((x,y+1)\\)</span> <strong>倒着</strong>走到 <span class=\"math inline\">\\((i,l(i)+1)\\)</span> 且不越过 <span class=\"math inline\">\\(l\\)</span> 的路径条数，整体求和就是从 <span class=\"math inline\">\\((0,0)\\)</span> 走到 <span class=\"math inline\">\\((x,y+1)\\)</span> 的路径条数，因为 <span class=\"math inline\">\\(i\\)</span> 就是在枚举最后一次越过 <span class=\"math inline\">\\(l\\)</span> 时的横坐标。</p>\r\n<p>于是 <span class=\"math display\">\\[\r\nF(k,b,x,y)=kF(k,b,x-1,y+1)+\\binom{x+y+1}x\r\n\\]</span> 因为 <span class=\"math inline\">\\(F(k,b,x+y,0)=1\\)</span></p>\r\n<p>归纳得到 <span class=\"math display\">\\[\r\nF(k,b,x,y)=\\sum_{i+j=x}\\binom{x+y+1}ik^j\r\n\\]</span> 它甚至和 <span class=\"math inline\">\\(b\\)</span> 无关。</p>\r\n<h3 id=\"lucaslehmer-素性检验\">Lucas–Lehmer 素性检验</h3>\r\n<blockquote>\r\n<p>原理：<span class=\"math inline\">\\(M_p=2^p-1(p\\in\\text{Odd prime})\\)</span> 是质数当且仅当 <span class=\"math inline\">\\(M_p|(2+\\sqrt 3)^{2^{p-2}}+(2-\\sqrt 3)^{2^{p-2}}\\)</span>。</p>\r\n</blockquote>\r\n<p>后面有证明。</p>\r\n<p>算法：令 <span class=\"math inline\">\\(s_n=(2+\\sqrt 3)^{2^n}+(2-\\sqrt 3)^{2^n}\\bmod M_p\\)</span>，那么 <span class=\"math display\">\\[\r\ns_n=\\begin{cases}\r\n4&amp;(i=0)\\\\\r\ns_{n-1}^2-2\\bmod M_p&amp;(i&gt;1)\r\n\\end{cases}\r\n\\]</span> 计算平方可以用 <code>FFT</code> 做到 <span class=\"math inline\">\\(O(p\\log p)\\)</span>，由于模数很特殊，取模可以做到线性：</p>\r\n<p><span class=\"math inline\">\\(a \\bmod M_p=(a_0\\cdot 2^p+a_1)\\bmod M_p=(a_0+a_1)\\bmod M_p\\)</span></p>\r\n<p><span class=\"math inline\">\\(s_{n-1}^2-2\\)</span> 最多展开两遍就行了，复杂度 <span class=\"math inline\">\\(O(p^2\\log p)\\)</span>。</p>\r\n<h4 id=\"充分性\">充分性</h4>\r\n<p>反证法：假设 <span class=\"math inline\">\\(M_p\\)</span> 是合数，它的最小质因子为 <span class=\"math inline\">\\(q\\)</span>，定义一个 <span class=\"math inline\">\\(q^2\\)</span> 个元素的集合 <span class=\"math inline\">\\(X=\\{a+b\\sqrt 3|a,b\\in\\mathbb Z_q\\}\\)</span>，其中 <span class=\"math inline\">\\(\\mathbb Z_q\\)</span> 表示 <span class=\"math inline\">\\(0,1,2\\cdots,q-2,q-1\\)</span>，定义 <span class=\"math inline\">\\(X\\)</span> 中的乘法运算为 <span class=\"math display\">\\[\r\n(a+b\\sqrt 3)(c+d\\sqrt 3)=(ac+3bd)\\bmod q+(bc+ad)\\bmod q\\sqrt3\r\n\\]</span> <span class=\"math inline\">\\(X\\)</span> 中任何两个元素的乘积一定也在 <span class=\"math inline\">\\(X\\)</span> 内，但它不是群，因为不是所有元素都可逆，只保留有逆的元素，就得到了群 <span class=\"math inline\">\\(X^*\\)</span>。因为 <span class=\"math inline\">\\((2+\\sqrt 3)(2+(q-1)\\sqrt 3)\\equiv 1\\pmod q\\)</span>，所以 <span class=\"math inline\">\\(2+\\sqrt 3\\in X^{*}\\)</span>。</p>\r\n<p>考虑 <span class=\"math display\">\\[\r\n(2+\\sqrt 3)^{2^{p-2}}+(2-\\sqrt 3)^{2^{p-2}} \\equiv 0\\pmod {M_p}\\\\\r\n(2+\\sqrt 3)^{2^{p-1}}+[(2+\\sqrt 3)(2-\\sqrt 3)]^{2^{p-2}} \\equiv 0\\pmod {M_p}\\\\\r\n(2+\\sqrt 3)^{2^{p-1}}\\equiv -1\\pmod {M_p}\r\n\\]</span> 这说明了 <span class=\"math inline\">\\(2 + \\sqrt 3\\)</span> 的阶为 <span class=\"math inline\">\\(2^p\\)</span>，即 <span class=\"math inline\">\\((2 + \\sqrt 3)^0,(2 + \\sqrt 3)^1,(2 + \\sqrt 3)^2,\\cdots,(2+\\sqrt 3)^{2^p-1}\\)</span> 两两不同。</p>\r\n<p>于是有 <span class=\"math inline\">\\(2^p \\le |X*| \\le q^2 \\le M_p\\)</span>，得出矛盾 <span class=\"math inline\">\\(2^p \\le M_p\\)</span>，故 <span class=\"math inline\">\\(M_p\\)</span> 为质数。</p>\r\n<h4 id=\"必要性\">必要性</h4>\r\n<p>现在已知 <span class=\"math inline\">\\(M_p\\)</span> 是质数，要说明 <span class=\"math inline\">\\(M_p|(2+\\sqrt 3)^{2^{p-2}}+(2-\\sqrt 3)^{2^{p-2}}\\)</span>。</p>\r\n<p>可以归纳证明，对于奇数 <span class=\"math inline\">\\(p\\ge 3\\)</span>，有 <span class=\"math inline\">\\(2^p-1\\equiv 7\\pmod 8\\)</span> 和 <span class=\"math inline\">\\(2^p-1\\equiv 7\\pmod {12}\\)</span>。</p>\r\n<p>对于奇质数 <span class=\"math inline\">\\(p\\)</span>：</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(2^p-1\\equiv 7\\pmod 8\\Rightarrow \\left(\\dfrac 2p\\right)=1\\Rightarrow 2^{\\frac{M_p-1}2}\\equiv 1\\pmod {M_p}\\)</span></li>\r\n<li><span class=\"math inline\">\\(2^p-1\\equiv 7\\pmod {12}\\Rightarrow \\left(\\dfrac 3p\\right)=-1\\Rightarrow 3^{\\frac{M_p-1}2}\\equiv -1\\pmod {M_p}\\)</span></li>\r\n</ul>\r\n<p>第一步的原理都是二次互反律及其补充，第二步的原理都是欧拉准则。</p>\r\n<p>像前面一样，定义 <span class=\"math inline\">\\(X=\\{a+b\\sqrt 3|a,b\\in\\mathbb Z_{M_p}\\}\\)</span>，保留有逆的元素得到群 <span class=\"math inline\">\\(X^*\\)</span>。</p>\r\n<blockquote>\r\n<p>引理：<span class=\"math inline\">\\(\\forall x,y\\in X^*,(x+y)^{M_p}\\equiv x^{M_p}+y^{M_p}\\pmod{M_p}\\)</span>。</p>\r\n</blockquote>\r\n<p>根据 <span class=\"math inline\">\\(M_p|\\binom{M_p}i\\)</span>。</p>\r\n<p>那么，我们有： <span class=\"math display\">\\[\r\n\\begin{aligned}\r\n(6+2\\sqrt 3)^{M_p}&amp;=6^{M_p}+2^{M_p}(\\sqrt 3)^{M_p}\\\\\r\n&amp;=6+2\\sqrt 3\\cdot 3^{\\frac{M_p-1}2}\\\\\r\n&amp;=6-2\\sqrt 3\r\n\\end{aligned}\r\n\\]</span> 由于 <span class=\"math inline\">\\(2+\\sqrt 3=\\frac{(6+2\\sqrt 3)^2}{24}\\)</span>，进一步 <span class=\"math display\">\\[\r\n\\begin{aligned}\r\n(2+\\sqrt 3)^{\\frac{M_p+1}2}&amp;=\\frac{(6+2\\sqrt 3)^{M_p+1}}{24^{\\frac{M_p+1}2}}\\\\\r\n&amp;=\\frac{(6+2\\sqrt 3)(6-2\\sqrt 3)}{24\\cdot (2^{\\frac{M_p-1}2})^3\\cdot 3^{\\frac{M_p-1}2}}\\\\\r\n&amp;=-1\r\n\\end{aligned}\r\n\\]</span> 最后，在两边同乘 <span class=\"math inline\">\\((2-\\sqrt 3)^{\\frac{M_p+1}4}\\)</span>，并利用 <span class=\"math inline\">\\((2+\\sqrt 3)(2-\\sqrt 3)=1\\)</span> <span class=\"math display\">\\[\r\n\\begin{aligned}\r\n(2+\\sqrt 3)^{\\frac{M_p+1}2}(2-\\sqrt 3)^{\\frac{M_p+1}4}&amp;=-(2-\\sqrt 3)^{\\frac{M_p+1}4}\\\\\r\n(2+\\sqrt 3)^{\\frac{M_p+1}4}+(2-\\sqrt 3)^{\\frac{M_p+1}4}&amp;=0\\\\\r\n(2+\\sqrt 3)^{2^{p-2}}+(2-\\sqrt 3)^{2^{p-2}}&amp;=0\r\n\\end{aligned}\r\n\\]</span></p>\r\n<h3 id=\"一个非常简单的问题\">一个非常简单的问题</h3>\r\n<blockquote>\r\n<p>求 <span class=\"math inline\">\\(2^n\\)</span> 内所有奇数的乘积 <span class=\"math inline\">\\(\\bmod 2^n\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^4\\)</span></p>\r\n</blockquote>\r\n<p>设 <span class=\"math inline\">\\(f_n=\\prod_{i=1}^{2^{n-1}}2i-1\\bmod 2^n\\)</span>，对于 <span class=\"math inline\">\\(n\\ge 2\\)</span>，有 <span class=\"math display\">\\[\r\n\\begin{aligned}\r\nf_{n+1}&amp;=(\\prod_{i=1}^{2^{n-1}}2i-1\\bmod 2^{n+1})(\\prod_{i=1}^{2^{n-1}}2i-1+2^n\\bmod 2^{n+1})\\bmod 2^{n+1}\\\\\r\n&amp;=(\\prod_{i=1}^{2^{n-1}}2i-1\\bmod 2^{n+1})^2\\bmod 2^{n+1}\\\\\r\n\\end{aligned}\r\n\\]</span> 设 <span class=\"math inline\">\\(\\prod_{i=1}^{2^{n-1}}2i-1\\bmod 2^{n+1}=f_n+k2^n(k\\in\\{0,1\\})\\)</span>，继续推。 <span class=\"math display\">\\[\r\n\\begin{aligned}\r\nf_{n+1}&amp;=(f_n+k2^n)^2\\bmod 2^{n+1}\\\\\r\n&amp;=f_n^2+k2^{n+1}+k^22^{2n}\\bmod 2^{n+1}\\\\\r\n&amp;=f_n^2\\bmod 2^{n+1}\r\n\\end{aligned}\r\n\\]</span> 计算平方可以用 <code>FFT</code> 做到 <span class=\"math inline\">\\(O(n\\log n)\\)</span>，总复杂度 <span class=\"math inline\">\\(O(n^2\\log n)\\)</span>。</p>\r\n<h3 id=\"一个非常困难的问题\">一个非常困难的问题</h3>\r\n<blockquote>\r\n<p>求 <span class=\"math inline\">\\(\\frac {p-1}2!\\bmod p\\)</span>，<span class=\"math inline\">\\(p\\)</span> 是质数且 <span class=\"math inline\">\\(p\\equiv 3\\pmod 4\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(p \\le ???\\)</span></p>\r\n</blockquote>\r\n<p>快速阶乘算法 <span class=\"math inline\">\\(O(\\sqrt p\\log p)\\)</span>。</p>\r\n<p>其他做法：根据 Wilson 定理，<span class=\"math inline\">\\((p-1)!\\equiv -1\\pmod p\\)</span>，那么 <span class=\"math inline\">\\(\\frac {p-1}2!\\equiv \\pm 1\\pmod p\\)</span>。准确地，<span class=\"math inline\">\\(\\frac {p-1}2!\\equiv 1\\pmod p\\)</span> 当且仅当以下之一成立：</p>\r\n<ul>\r\n<li><p><span class=\"math inline\">\\(p\\equiv 3\\pmod 8 \\land h(-p)\\equiv 1\\pmod 4\\)</span></p></li>\r\n<li><p><span class=\"math inline\">\\(p\\equiv 7\\pmod 8\\land h(-p)\\equiv 3\\pmod 4\\)</span></p></li>\r\n</ul>\r\n<p><span class=\"math inline\">\\(h(-p) \\bmod 4\\)</span> 怎么快速算？不会。</p>\r\n","site":{"data":{}},"length":6567,"excerpt":"","more":"<h3 id=\"barrett-reduction-取模优化\">Barrett reduction 取模优化</h3>\r\n<blockquote>\r\n<p>计算 <span class=\"math inline\">\\(ab\\bmod m(0\\le a,b&lt;m&lt;2^{31})\\)</span>。</p>\r\n</blockquote>\r\n<p>如果 <span class=\"math inline\">\\(m\\)</span> 在编译时已知，那么编译器就会帮你完成这个优化，否则你可以自己实现。</p>\r\n<p>首先，设 <span class=\"math inline\">\\(m^{-1}\\)</span> 表示浮点数形式的 <span class=\"math inline\">\\(\\frac 1m\\)</span>。 <span class=\"math display\">\\[\r\nab\\bmod m=ab-\\lfloor ab\\cdot m^{-1}\\rfloor m\r\n\\]</span> 即使预处理了 <span class=\"math inline\">\\(m^{-1}\\)</span>，由于浮点数乘法比整数除法快不了多少，考虑进一步优化，取 <span class=\"math inline\">\\(\\frac {m&#39;}{2^k}\\approx m^{-1}\\)</span>，然后 <span class=\"math display\">\\[\r\n\\lfloor ab\\cdot m^{-1}\\rfloor \\approx \\lfloor \\frac{abm&#39;}{2^k}\\rfloor\r\n\\]</span> 计算右边就快多了，因为只有整数乘法和右移，如何合理选取 <span class=\"math inline\">\\(m&#39;\\)</span> 和 <span class=\"math inline\">\\(k\\)</span>？</p>\r\n<p>令 <span class=\"math inline\">\\(k=2\\lceil \\log_2 m\\rceil,m&#39;=\\lceil \\frac{2^k}m\\rceil\\)</span>，下面分析误差：</p>\r\n<ul>\r\n<li>设 <span class=\"math inline\">\\(m&#39;m=2^k+r(0\\le r&lt;m)\\)</span></li>\r\n<li>设 <span class=\"math inline\">\\(ab=cm+d(0\\le c,d&lt;m)\\)</span></li>\r\n<li><span class=\"math inline\">\\(abm&#39;=(cm+d)m&#39;=cm&#39;m+dm&#39;=c2^k+cr+dm&#39;\\)</span></li>\r\n<li><span class=\"math inline\">\\(cr+dm&#39;&lt;(m-1)^2+m&#39;m&lt;(m-1)^2+2^k+(m-1)=2^k+m(m-1)&lt;2^k\\cdot 2\\)</span></li>\r\n<li><span class=\"math inline\">\\(\\lfloor \\frac{abm&#39;}{2^k}\\rfloor=c\\ \\text{or}\\ c+1\\)</span></li>\r\n</ul>\r\n<p>设真实答案为 <span class=\"math inline\">\\(ans\\)</span>，那么 <span class=\"math inline\">\\(ab-\\lfloor \\frac{abm&#39;}{2^k}\\rfloor m=ans\\ \\text{or}\\ ans-m\\)</span>。</p>\r\n<p>更一般的结论是只要 <span class=\"math inline\">\\(c \\ge \\max(a, b^2)\\)</span>，<span class=\"math inline\">\\(\\lfloor \\frac{a\\lfloor \\frac cb\\rfloor}c\\rfloor=\\lfloor \\frac ab\\rfloor\\ \\text{or}\\ \\lfloor \\frac ab\\rfloor+1\\)</span> 成立。</p>\r\n<p>实践中可以令 <span class=\"math inline\">\\(k=64\\)</span>，可以用 <code>~0ull / m + 1</code> 来计算 <span class=\"math inline\">\\(m&#39;\\)</span>。</p>\r\n<details>\r\n<summary>\r\n<span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span>\r\n</summary>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> uint = <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ull = <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">barrett</span> &#123;</span></span><br><span class=\"line\">    uint m; ull im;</span><br><span class=\"line\">    <span class=\"built_in\">barrett</span>(uint m) :<span class=\"built_in\">m</span>(m), <span class=\"built_in\">im</span>(~<span class=\"number\">0ull</span> / m + <span class=\"number\">1</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\">uint <span class=\"title\">mul</span><span class=\"params\">(uint a, uint b)</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">        ull z = (ull)a * b;</span><br><span class=\"line\">        ull x = (<span class=\"keyword\">unsigned</span> __int128)z * im &gt;&gt; <span class=\"number\">64</span>;</span><br><span class=\"line\">        uint v = z - x * m;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m &lt;= v ? v + m : v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n</details>\r\n<p>速度比较：先在 <span class=\"math inline\">\\([0, m)\\)</span> 中随机生成 <span class=\"math inline\">\\(10^5\\)</span> 个数，然后计算两两乘积模 <span class=\"math inline\">\\(m\\)</span> 的异或和。</p>\r\n<p>测试系统 <code>ubuntu-21.04</code>（因为 <code>Linux</code> 比较稳定），每个格子前者为直接取模的时间，后者为 <code>Barrett reduction</code> 取模的时间。</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\">编译选项</th>\r\n<th style=\"text-align: center;\">998244353</th>\r\n<th style=\"text-align: center;\">1000000007</th>\r\n<th style=\"text-align: center;\">1000000009</th>\r\n<th style=\"text-align: center;\">19260817</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\">无</td>\r\n<td style=\"text-align: center;\">47.1s/29.6s</td>\r\n<td style=\"text-align: center;\">45.7s/30.2s</td>\r\n<td style=\"text-align: center;\">46.6s/30.4s</td>\r\n<td style=\"text-align: center;\">45.8s/29.2s</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\">-O2</td>\r\n<td style=\"text-align: center;\">35.8s/6.4s</td>\r\n<td style=\"text-align: center;\">35.2s/6.1s</td>\r\n<td style=\"text-align: center;\">35.0s/6.3s</td>\r\n<td style=\"text-align: center;\">35.4s/6.3s</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>另外，笔者想到了两个可以应用的地方。</p>\r\n<ul>\r\n<li><p>高精度计算 <span class=\"math inline\">\\(ab\\bmod m\\)</span>，高精度乘法是可以用 <code>FFT</code> 优化到 <span class=\"math inline\">\\(O(\\log m\\log\\log m)\\)</span> 的（严格来讲，如果 <span class=\"math inline\">\\(m\\)</span> 位数过于巨大，以致于直接求卷积会溢出时，需要用到 <code>Schönhage-Strassen</code> 算法，复杂度 <span class=\"math inline\">\\(O(\\log m\\log\\log m\\log \\log \\log m)\\)</span>，这里粗略地分析为 <span class=\"math inline\">\\(O(\\log m\\log\\log m)\\)</span>，后面的复杂度分析也是如此），而取模只能 <span class=\"math inline\">\\(O(\\log^2 m)\\)</span>。当 <span class=\"math inline\">\\(m\\)</span> 固定时，可以事先 <span class=\"math inline\">\\(O(\\log^2 m)\\)</span> 计算出 <span class=\"math inline\">\\(m&#39;\\)</span>，然后就可以 <span class=\"math inline\">\\(O(\\log m\\log\\log m)\\)</span> 地取模了。将此应用于 <code>Miller Rabin</code> 素性检验可以将复杂度优化到 <span class=\"math inline\">\\(O(k\\log^2n\\log\\log n)\\)</span>。</p></li>\r\n<li><p>加速计算 <span class=\"math inline\">\\(\\gcd(a,b)\\)</span>。如果 <span class=\"math inline\">\\(a,b\\)</span> 都比较小，而次数很多，比如 <span class=\"math inline\">\\(a,b\\le 10^7\\)</span>，要求 <span class=\"math inline\">\\(5\\cdot 10^7\\)</span> 次 <span class=\"math inline\">\\(\\gcd\\)</span>。</p>\r\n<p>对于 <span class=\"math inline\">\\(m\\)</span>，令 <span class=\"math inline\">\\(k=\\max(24,2\\lceil \\log_2m\\rceil)\\)</span>，当 <span class=\"math inline\">\\(m=b\\)</span> 时，<span class=\"math inline\">\\(am&#39;\\)</span> 在 <code>long long</code> 范围内，可以很有效地优化。</p></li>\r\n</ul>\r\n<h3 id=\"卡特兰数的两个扩展\">卡特兰数的两个扩展</h3>\r\n<p>本节所有的路径都是指每一步向上或向右走一个单位长度的路径。</p>\r\n<blockquote>\r\n<p>给定一条直线 <span class=\"math inline\">\\(l:y=kx+b\\)</span>，求从 <span class=\"math inline\">\\((0,0)\\)</span> 走到 <span class=\"math inline\">\\((a, l(a))\\)</span> 且不越过 <span class=\"math inline\">\\(l\\)</span> 的路径条数。</p>\r\n<p><span class=\"math inline\">\\(k,b,a\\)</span> 都是正整数。</p>\r\n</blockquote>\r\n<p>记 <span class=\"math inline\">\\(G(k,b,a)\\)</span> 表示这个路径条数。</p>\r\n<p>考虑从 <span class=\"math inline\">\\((0,0)\\)</span> 走到 <span class=\"math inline\">\\((a, l(a))\\)</span> 的路径条数，它可能不会越过 <span class=\"math inline\">\\(l\\)</span>，这部分路径条数为 <span class=\"math inline\">\\(G(k,b,a)\\)</span>，否则可以枚举路径第一次越过 <span class=\"math inline\">\\(l\\)</span> 时的横坐标 <span class=\"math inline\">\\(i\\)</span>，得到 <span class=\"math inline\">\\((1)\\)</span> 式： <span class=\"math display\">\\[\r\n\\binom {l(a)+a}a=G(k,b,a)+\\sum_{i+j=a}G(k,b,i)\\binom{kj+j-1}j\r\n\\]</span></p>\r\n<p>考虑从 <span class=\"math inline\">\\((0,0)\\)</span> 走到 <span class=\"math inline\">\\((a-1,l(a))\\)</span> 的路径条数，它一定会越过 <span class=\"math inline\">\\(l\\)</span>，枚举路径第一次越过 <span class=\"math inline\">\\(l\\)</span> 时的横坐标 <span class=\"math inline\">\\(i\\)</span>，得到 <span class=\"math inline\">\\((2)\\)</span> 式： <span class=\"math display\">\\[\r\n\\binom {l(a)+a}{a-1}=\\sum_{i+j=a}G(k,b,i)\\binom {kj+j-1}{j-1}\r\n\\]</span></p>\r\n<p>注意到 <span class=\"math display\">\\[\r\n\\frac{\\binom{kj+j-1}j}{\\binom{kj+j-1}{j-1}}=\\frac{kj}j=k\r\n\\]</span> <span class=\"math inline\">\\((1)-(2)\\times k\\)</span> 得： <span class=\"math display\">\\[\r\nG(k,b,a)=\\binom{l(a)+a}a-k\\binom{l(a)+a}{a-1}\r\n\\]</span></p>\r\n<blockquote>\r\n<p>给定一条直线 <span class=\"math inline\">\\(l:y=kx+b\\)</span>，求从 <span class=\"math inline\">\\((0,0)\\)</span> 走到 <span class=\"math inline\">\\((x,y)\\)</span> 的所有路径与 <span class=\"math inline\">\\(l\\)</span> 的交点总数。</p>\r\n<p><span class=\"math inline\">\\(k,b,a\\)</span> 都是正整数，<span class=\"math inline\">\\(l(x) \\le y\\)</span>。</p>\r\n</blockquote>\r\n<p>记 <span class=\"math inline\">\\(F(k,b,x,y)\\)</span> 表示这个交点总数。</p>\r\n<p>考虑每个交点的贡献，枚举交点的横坐标 <span class=\"math inline\">\\(i\\)</span>，得到： <span class=\"math display\">\\[\r\nF(k,b,x,y)=\\sum_{i+j=x}\\binom{l(i)+i}i\\binom{y-l(i)+j}j\r\n\\]</span> 进一步 <span class=\"math display\">\\[\r\n\\begin{aligned}\r\n&amp;F(k,b,x,y)-kF(k,b,x-1,y+1)\\\\\r\n&amp;=\\sum_{i+j=x}\\binom{l(i)+i}i\\binom{y-l(i)+j}j-k\\binom{l(i)+i}i\\binom{y-l(i)+j}{j-1}\\\\\r\n&amp;=\\sum_{i+j=x}\\binom{l(i)+i}i\\left(\\binom{y-l(i)+j}j-k\\binom{y-l(i)+j}{j-1}\\right)\\\\\r\n&amp;=\\sum_{i+j=x}\\binom{l(i)+i}iG(k,y-l(x),j)\r\n\\end{aligned}\r\n\\]</span> 注意到 <span class=\"math inline\">\\(\\binom{l(i)+i}i\\)</span> 是从 <span class=\"math inline\">\\((0,0)\\)</span> 走到 <span class=\"math inline\">\\((i,l(i))\\)</span> 的路径条数，而 <span class=\"math inline\">\\(G(k,y-l(x),j)\\)</span> 是从 <span class=\"math inline\">\\((x,y+1)\\)</span> <strong>倒着</strong>走到 <span class=\"math inline\">\\((i,l(i)+1)\\)</span> 且不越过 <span class=\"math inline\">\\(l\\)</span> 的路径条数，整体求和就是从 <span class=\"math inline\">\\((0,0)\\)</span> 走到 <span class=\"math inline\">\\((x,y+1)\\)</span> 的路径条数，因为 <span class=\"math inline\">\\(i\\)</span> 就是在枚举最后一次越过 <span class=\"math inline\">\\(l\\)</span> 时的横坐标。</p>\r\n<p>于是 <span class=\"math display\">\\[\r\nF(k,b,x,y)=kF(k,b,x-1,y+1)+\\binom{x+y+1}x\r\n\\]</span> 因为 <span class=\"math inline\">\\(F(k,b,x+y,0)=1\\)</span></p>\r\n<p>归纳得到 <span class=\"math display\">\\[\r\nF(k,b,x,y)=\\sum_{i+j=x}\\binom{x+y+1}ik^j\r\n\\]</span> 它甚至和 <span class=\"math inline\">\\(b\\)</span> 无关。</p>\r\n<h3 id=\"lucaslehmer-素性检验\">Lucas–Lehmer 素性检验</h3>\r\n<blockquote>\r\n<p>原理：<span class=\"math inline\">\\(M_p=2^p-1(p\\in\\text{Odd prime})\\)</span> 是质数当且仅当 <span class=\"math inline\">\\(M_p|(2+\\sqrt 3)^{2^{p-2}}+(2-\\sqrt 3)^{2^{p-2}}\\)</span>。</p>\r\n</blockquote>\r\n<p>后面有证明。</p>\r\n<p>算法：令 <span class=\"math inline\">\\(s_n=(2+\\sqrt 3)^{2^n}+(2-\\sqrt 3)^{2^n}\\bmod M_p\\)</span>，那么 <span class=\"math display\">\\[\r\ns_n=\\begin{cases}\r\n4&amp;(i=0)\\\\\r\ns_{n-1}^2-2\\bmod M_p&amp;(i&gt;1)\r\n\\end{cases}\r\n\\]</span> 计算平方可以用 <code>FFT</code> 做到 <span class=\"math inline\">\\(O(p\\log p)\\)</span>，由于模数很特殊，取模可以做到线性：</p>\r\n<p><span class=\"math inline\">\\(a \\bmod M_p=(a_0\\cdot 2^p+a_1)\\bmod M_p=(a_0+a_1)\\bmod M_p\\)</span></p>\r\n<p><span class=\"math inline\">\\(s_{n-1}^2-2\\)</span> 最多展开两遍就行了，复杂度 <span class=\"math inline\">\\(O(p^2\\log p)\\)</span>。</p>\r\n<h4 id=\"充分性\">充分性</h4>\r\n<p>反证法：假设 <span class=\"math inline\">\\(M_p\\)</span> 是合数，它的最小质因子为 <span class=\"math inline\">\\(q\\)</span>，定义一个 <span class=\"math inline\">\\(q^2\\)</span> 个元素的集合 <span class=\"math inline\">\\(X=\\{a+b\\sqrt 3|a,b\\in\\mathbb Z_q\\}\\)</span>，其中 <span class=\"math inline\">\\(\\mathbb Z_q\\)</span> 表示 <span class=\"math inline\">\\(0,1,2\\cdots,q-2,q-1\\)</span>，定义 <span class=\"math inline\">\\(X\\)</span> 中的乘法运算为 <span class=\"math display\">\\[\r\n(a+b\\sqrt 3)(c+d\\sqrt 3)=(ac+3bd)\\bmod q+(bc+ad)\\bmod q\\sqrt3\r\n\\]</span> <span class=\"math inline\">\\(X\\)</span> 中任何两个元素的乘积一定也在 <span class=\"math inline\">\\(X\\)</span> 内，但它不是群，因为不是所有元素都可逆，只保留有逆的元素，就得到了群 <span class=\"math inline\">\\(X^*\\)</span>。因为 <span class=\"math inline\">\\((2+\\sqrt 3)(2+(q-1)\\sqrt 3)\\equiv 1\\pmod q\\)</span>，所以 <span class=\"math inline\">\\(2+\\sqrt 3\\in X^{*}\\)</span>。</p>\r\n<p>考虑 <span class=\"math display\">\\[\r\n(2+\\sqrt 3)^{2^{p-2}}+(2-\\sqrt 3)^{2^{p-2}} \\equiv 0\\pmod {M_p}\\\\\r\n(2+\\sqrt 3)^{2^{p-1}}+[(2+\\sqrt 3)(2-\\sqrt 3)]^{2^{p-2}} \\equiv 0\\pmod {M_p}\\\\\r\n(2+\\sqrt 3)^{2^{p-1}}\\equiv -1\\pmod {M_p}\r\n\\]</span> 这说明了 <span class=\"math inline\">\\(2 + \\sqrt 3\\)</span> 的阶为 <span class=\"math inline\">\\(2^p\\)</span>，即 <span class=\"math inline\">\\((2 + \\sqrt 3)^0,(2 + \\sqrt 3)^1,(2 + \\sqrt 3)^2,\\cdots,(2+\\sqrt 3)^{2^p-1}\\)</span> 两两不同。</p>\r\n<p>于是有 <span class=\"math inline\">\\(2^p \\le |X*| \\le q^2 \\le M_p\\)</span>，得出矛盾 <span class=\"math inline\">\\(2^p \\le M_p\\)</span>，故 <span class=\"math inline\">\\(M_p\\)</span> 为质数。</p>\r\n<h4 id=\"必要性\">必要性</h4>\r\n<p>现在已知 <span class=\"math inline\">\\(M_p\\)</span> 是质数，要说明 <span class=\"math inline\">\\(M_p|(2+\\sqrt 3)^{2^{p-2}}+(2-\\sqrt 3)^{2^{p-2}}\\)</span>。</p>\r\n<p>可以归纳证明，对于奇数 <span class=\"math inline\">\\(p\\ge 3\\)</span>，有 <span class=\"math inline\">\\(2^p-1\\equiv 7\\pmod 8\\)</span> 和 <span class=\"math inline\">\\(2^p-1\\equiv 7\\pmod {12}\\)</span>。</p>\r\n<p>对于奇质数 <span class=\"math inline\">\\(p\\)</span>：</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(2^p-1\\equiv 7\\pmod 8\\Rightarrow \\left(\\dfrac 2p\\right)=1\\Rightarrow 2^{\\frac{M_p-1}2}\\equiv 1\\pmod {M_p}\\)</span></li>\r\n<li><span class=\"math inline\">\\(2^p-1\\equiv 7\\pmod {12}\\Rightarrow \\left(\\dfrac 3p\\right)=-1\\Rightarrow 3^{\\frac{M_p-1}2}\\equiv -1\\pmod {M_p}\\)</span></li>\r\n</ul>\r\n<p>第一步的原理都是二次互反律及其补充，第二步的原理都是欧拉准则。</p>\r\n<p>像前面一样，定义 <span class=\"math inline\">\\(X=\\{a+b\\sqrt 3|a,b\\in\\mathbb Z_{M_p}\\}\\)</span>，保留有逆的元素得到群 <span class=\"math inline\">\\(X^*\\)</span>。</p>\r\n<blockquote>\r\n<p>引理：<span class=\"math inline\">\\(\\forall x,y\\in X^*,(x+y)^{M_p}\\equiv x^{M_p}+y^{M_p}\\pmod{M_p}\\)</span>。</p>\r\n</blockquote>\r\n<p>根据 <span class=\"math inline\">\\(M_p|\\binom{M_p}i\\)</span>。</p>\r\n<p>那么，我们有： <span class=\"math display\">\\[\r\n\\begin{aligned}\r\n(6+2\\sqrt 3)^{M_p}&amp;=6^{M_p}+2^{M_p}(\\sqrt 3)^{M_p}\\\\\r\n&amp;=6+2\\sqrt 3\\cdot 3^{\\frac{M_p-1}2}\\\\\r\n&amp;=6-2\\sqrt 3\r\n\\end{aligned}\r\n\\]</span> 由于 <span class=\"math inline\">\\(2+\\sqrt 3=\\frac{(6+2\\sqrt 3)^2}{24}\\)</span>，进一步 <span class=\"math display\">\\[\r\n\\begin{aligned}\r\n(2+\\sqrt 3)^{\\frac{M_p+1}2}&amp;=\\frac{(6+2\\sqrt 3)^{M_p+1}}{24^{\\frac{M_p+1}2}}\\\\\r\n&amp;=\\frac{(6+2\\sqrt 3)(6-2\\sqrt 3)}{24\\cdot (2^{\\frac{M_p-1}2})^3\\cdot 3^{\\frac{M_p-1}2}}\\\\\r\n&amp;=-1\r\n\\end{aligned}\r\n\\]</span> 最后，在两边同乘 <span class=\"math inline\">\\((2-\\sqrt 3)^{\\frac{M_p+1}4}\\)</span>，并利用 <span class=\"math inline\">\\((2+\\sqrt 3)(2-\\sqrt 3)=1\\)</span> <span class=\"math display\">\\[\r\n\\begin{aligned}\r\n(2+\\sqrt 3)^{\\frac{M_p+1}2}(2-\\sqrt 3)^{\\frac{M_p+1}4}&amp;=-(2-\\sqrt 3)^{\\frac{M_p+1}4}\\\\\r\n(2+\\sqrt 3)^{\\frac{M_p+1}4}+(2-\\sqrt 3)^{\\frac{M_p+1}4}&amp;=0\\\\\r\n(2+\\sqrt 3)^{2^{p-2}}+(2-\\sqrt 3)^{2^{p-2}}&amp;=0\r\n\\end{aligned}\r\n\\]</span></p>\r\n<h3 id=\"一个非常简单的问题\">一个非常简单的问题</h3>\r\n<blockquote>\r\n<p>求 <span class=\"math inline\">\\(2^n\\)</span> 内所有奇数的乘积 <span class=\"math inline\">\\(\\bmod 2^n\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^4\\)</span></p>\r\n</blockquote>\r\n<p>设 <span class=\"math inline\">\\(f_n=\\prod_{i=1}^{2^{n-1}}2i-1\\bmod 2^n\\)</span>，对于 <span class=\"math inline\">\\(n\\ge 2\\)</span>，有 <span class=\"math display\">\\[\r\n\\begin{aligned}\r\nf_{n+1}&amp;=(\\prod_{i=1}^{2^{n-1}}2i-1\\bmod 2^{n+1})(\\prod_{i=1}^{2^{n-1}}2i-1+2^n\\bmod 2^{n+1})\\bmod 2^{n+1}\\\\\r\n&amp;=(\\prod_{i=1}^{2^{n-1}}2i-1\\bmod 2^{n+1})^2\\bmod 2^{n+1}\\\\\r\n\\end{aligned}\r\n\\]</span> 设 <span class=\"math inline\">\\(\\prod_{i=1}^{2^{n-1}}2i-1\\bmod 2^{n+1}=f_n+k2^n(k\\in\\{0,1\\})\\)</span>，继续推。 <span class=\"math display\">\\[\r\n\\begin{aligned}\r\nf_{n+1}&amp;=(f_n+k2^n)^2\\bmod 2^{n+1}\\\\\r\n&amp;=f_n^2+k2^{n+1}+k^22^{2n}\\bmod 2^{n+1}\\\\\r\n&amp;=f_n^2\\bmod 2^{n+1}\r\n\\end{aligned}\r\n\\]</span> 计算平方可以用 <code>FFT</code> 做到 <span class=\"math inline\">\\(O(n\\log n)\\)</span>，总复杂度 <span class=\"math inline\">\\(O(n^2\\log n)\\)</span>。</p>\r\n<h3 id=\"一个非常困难的问题\">一个非常困难的问题</h3>\r\n<blockquote>\r\n<p>求 <span class=\"math inline\">\\(\\frac {p-1}2!\\bmod p\\)</span>，<span class=\"math inline\">\\(p\\)</span> 是质数且 <span class=\"math inline\">\\(p\\equiv 3\\pmod 4\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(p \\le ???\\)</span></p>\r\n</blockquote>\r\n<p>快速阶乘算法 <span class=\"math inline\">\\(O(\\sqrt p\\log p)\\)</span>。</p>\r\n<p>其他做法：根据 Wilson 定理，<span class=\"math inline\">\\((p-1)!\\equiv -1\\pmod p\\)</span>，那么 <span class=\"math inline\">\\(\\frac {p-1}2!\\equiv \\pm 1\\pmod p\\)</span>。准确地，<span class=\"math inline\">\\(\\frac {p-1}2!\\equiv 1\\pmod p\\)</span> 当且仅当以下之一成立：</p>\r\n<ul>\r\n<li><p><span class=\"math inline\">\\(p\\equiv 3\\pmod 8 \\land h(-p)\\equiv 1\\pmod 4\\)</span></p></li>\r\n<li><p><span class=\"math inline\">\\(p\\equiv 7\\pmod 8\\land h(-p)\\equiv 3\\pmod 4\\)</span></p></li>\r\n</ul>\r\n<p><span class=\"math inline\">\\(h(-p) \\bmod 4\\)</span> 怎么快速算？不会。</p>\r\n"},{"title":"自然数等幂求和","date":"2021-03-13T15:15:28.000Z","updated":"2021-03-13T15:15:28.000Z","_content":"### <1> 拉格朗日插值\n\n把 $1,2,\\cdots,m+2$ 插值即可\n$$\n\\sum_{i=1}^ni^m=\\sum_{i=1}^{m+2}S_m(i)\\prod_{j\\ne i}\\frac{n-j}{i-j}\n$$\n预处理\n$$\npre_i=\\prod_{j=1}^in-j,suf_i=\\prod_{j=i}^{m+2}n-j\n$$\n和阶乘逆元。\n\n进一步\n$$\n\\sum_{i=1}^ni^m=\\sum_{i=1}^{m+2}S_m(i)\\frac {pre_{i-1}suf_{i+1}}{(i-1)!(m+2-i)!(-1)^{m+2-i}}\n$$\n复杂度 $O(m\\log P)$ 或 $O(m)$（欧拉筛 $i^k$）。\n\n\n\n### <2> 直接上公式(无需求逆)\n\n$$\n\\sum_{i=1}^ni^{m+1}=\\sum_{k=0}^m\\binom{n+k+1}{m+2}\\sum_{r=0}^k(-1)^r\\binom{m+2}r(k+1-r)^{m+1}\n$$\n\n复杂度 $O(m^2)$。\n\n### <3> 第二类斯特林数\n\n预处理\n$$\n{0 \\brace 0} = 1 \\\\\n{n \\brace m} = {n - 1 \\brace m - 1} + m{n - 1 \\brace m}\n$$\n结论\n$$\n\\sum_{i=1}^mi^m=\\sum_{i=1}^n{m \\brace i}\\frac 1{i+1}(n+1)^{\\underline{i+1}}\n$$\n复杂度 $O(m^2)$ （无需求逆）或 $O(m\\log m)$ （需要求第二类斯特林数-行）。\n\n### <4> 递推\n\n$$\nf_i=\\sum_{j=1}^nj^i\\\\\nf_i=\\frac 1{i+1}\\left((n+1)^{i+1}-\\sum_{j=0}^{i-1}\\binom{i+1}jf_j\\right)\n$$\n\n复杂度 $O(m^2)$。\n\n### <5> 伯努利数\n\n预处理\n$$\nB_0=1\\\\\n\\sum_{i=0}^m\\binom{m+1}iB_i=0\n$$\n结论\n$$\n\\sum_{i=1}^ni^m=\\frac 1{m+1}\\sum_{i=0}^m\\binom{m+1}iB_in^{m+1-i}\n$$\n另外伯努利数的指数型生成函数\n$$\nB(x)=\\frac x{e^x-1}\n$$\n通过多项式求逆\n\n可以优化到 $O(m\\log m)$。","source":"_posts/zi-ran-shu-deng-mi-qiu-he.md","raw":"---\ntitle: 自然数等幂求和\ndate: 2021-03-13 23:15:28\nupdated: 2021-03-13 23:15:28\ntags: [知识总结,数论,自然数等幂求和]\ncategories: 算法\n---\n### <1> 拉格朗日插值\n\n把 $1,2,\\cdots,m+2$ 插值即可\n$$\n\\sum_{i=1}^ni^m=\\sum_{i=1}^{m+2}S_m(i)\\prod_{j\\ne i}\\frac{n-j}{i-j}\n$$\n预处理\n$$\npre_i=\\prod_{j=1}^in-j,suf_i=\\prod_{j=i}^{m+2}n-j\n$$\n和阶乘逆元。\n\n进一步\n$$\n\\sum_{i=1}^ni^m=\\sum_{i=1}^{m+2}S_m(i)\\frac {pre_{i-1}suf_{i+1}}{(i-1)!(m+2-i)!(-1)^{m+2-i}}\n$$\n复杂度 $O(m\\log P)$ 或 $O(m)$（欧拉筛 $i^k$）。\n\n\n\n### <2> 直接上公式(无需求逆)\n\n$$\n\\sum_{i=1}^ni^{m+1}=\\sum_{k=0}^m\\binom{n+k+1}{m+2}\\sum_{r=0}^k(-1)^r\\binom{m+2}r(k+1-r)^{m+1}\n$$\n\n复杂度 $O(m^2)$。\n\n### <3> 第二类斯特林数\n\n预处理\n$$\n{0 \\brace 0} = 1 \\\\\n{n \\brace m} = {n - 1 \\brace m - 1} + m{n - 1 \\brace m}\n$$\n结论\n$$\n\\sum_{i=1}^mi^m=\\sum_{i=1}^n{m \\brace i}\\frac 1{i+1}(n+1)^{\\underline{i+1}}\n$$\n复杂度 $O(m^2)$ （无需求逆）或 $O(m\\log m)$ （需要求第二类斯特林数-行）。\n\n### <4> 递推\n\n$$\nf_i=\\sum_{j=1}^nj^i\\\\\nf_i=\\frac 1{i+1}\\left((n+1)^{i+1}-\\sum_{j=0}^{i-1}\\binom{i+1}jf_j\\right)\n$$\n\n复杂度 $O(m^2)$。\n\n### <5> 伯努利数\n\n预处理\n$$\nB_0=1\\\\\n\\sum_{i=0}^m\\binom{m+1}iB_i=0\n$$\n结论\n$$\n\\sum_{i=1}^ni^m=\\frac 1{m+1}\\sum_{i=0}^m\\binom{m+1}iB_in^{m+1-i}\n$$\n另外伯努利数的指数型生成函数\n$$\nB(x)=\\frac x{e^x-1}\n$$\n通过多项式求逆\n\n可以优化到 $O(m\\log m)$。","slug":"zi-ran-shu-deng-mi-qiu-he","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh1x007hootnfi8gcpa4","content":"<h3 id=\"拉格朗日插值\">&lt;1&gt; 拉格朗日插值</h3>\r\n<p>把 <span class=\"math inline\">\\(1,2,\\cdots,m+2\\)</span> 插值即可 <span class=\"math display\">\\[\r\n\\sum_{i=1}^ni^m=\\sum_{i=1}^{m+2}S_m(i)\\prod_{j\\ne i}\\frac{n-j}{i-j}\r\n\\]</span> 预处理 <span class=\"math display\">\\[\r\npre_i=\\prod_{j=1}^in-j,suf_i=\\prod_{j=i}^{m+2}n-j\r\n\\]</span> 和阶乘逆元。</p>\r\n<p>进一步 <span class=\"math display\">\\[\r\n\\sum_{i=1}^ni^m=\\sum_{i=1}^{m+2}S_m(i)\\frac {pre_{i-1}suf_{i+1}}{(i-1)!(m+2-i)!(-1)^{m+2-i}}\r\n\\]</span> 复杂度 <span class=\"math inline\">\\(O(m\\log P)\\)</span> 或 <span class=\"math inline\">\\(O(m)\\)</span>（欧拉筛 <span class=\"math inline\">\\(i^k\\)</span>）。</p>\r\n<h3 id=\"直接上公式无需求逆\">&lt;2&gt; 直接上公式(无需求逆)</h3>\r\n<p><span class=\"math display\">\\[\r\n\\sum_{i=1}^ni^{m+1}=\\sum_{k=0}^m\\binom{n+k+1}{m+2}\\sum_{r=0}^k(-1)^r\\binom{m+2}r(k+1-r)^{m+1}\r\n\\]</span></p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(m^2)\\)</span>。</p>\r\n<h3 id=\"第二类斯特林数\">&lt;3&gt; 第二类斯特林数</h3>\r\n<p>预处理 <span class=\"math display\">\\[\r\n{0 \\brace 0} = 1 \\\\\r\n{n \\brace m} = {n - 1 \\brace m - 1} + m{n - 1 \\brace m}\r\n\\]</span> 结论 <span class=\"math display\">\\[\r\n\\sum_{i=1}^mi^m=\\sum_{i=1}^n{m \\brace i}\\frac 1{i+1}(n+1)^{\\underline{i+1}}\r\n\\]</span> 复杂度 <span class=\"math inline\">\\(O(m^2)\\)</span> （无需求逆）或 <span class=\"math inline\">\\(O(m\\log m)\\)</span> （需要求第二类斯特林数-行）。</p>\r\n<h3 id=\"递推\">&lt;4&gt; 递推</h3>\r\n<p><span class=\"math display\">\\[\r\nf_i=\\sum_{j=1}^nj^i\\\\\r\nf_i=\\frac 1{i+1}\\left((n+1)^{i+1}-\\sum_{j=0}^{i-1}\\binom{i+1}jf_j\\right)\r\n\\]</span></p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(m^2)\\)</span>。</p>\r\n<h3 id=\"伯努利数\">&lt;5&gt; 伯努利数</h3>\r\n<p>预处理 <span class=\"math display\">\\[\r\nB_0=1\\\\\r\n\\sum_{i=0}^m\\binom{m+1}iB_i=0\r\n\\]</span> 结论 <span class=\"math display\">\\[\r\n\\sum_{i=1}^ni^m=\\frac 1{m+1}\\sum_{i=0}^m\\binom{m+1}iB_in^{m+1-i}\r\n\\]</span> 另外伯努利数的指数型生成函数 <span class=\"math display\">\\[\r\nB(x)=\\frac x{e^x-1}\r\n\\]</span> 通过多项式求逆</p>\r\n<p>可以优化到 <span class=\"math inline\">\\(O(m\\log m)\\)</span>。</p>\r\n","site":{"data":{}},"length":947,"excerpt":"","more":"<h3 id=\"拉格朗日插值\">&lt;1&gt; 拉格朗日插值</h3>\r\n<p>把 <span class=\"math inline\">\\(1,2,\\cdots,m+2\\)</span> 插值即可 <span class=\"math display\">\\[\r\n\\sum_{i=1}^ni^m=\\sum_{i=1}^{m+2}S_m(i)\\prod_{j\\ne i}\\frac{n-j}{i-j}\r\n\\]</span> 预处理 <span class=\"math display\">\\[\r\npre_i=\\prod_{j=1}^in-j,suf_i=\\prod_{j=i}^{m+2}n-j\r\n\\]</span> 和阶乘逆元。</p>\r\n<p>进一步 <span class=\"math display\">\\[\r\n\\sum_{i=1}^ni^m=\\sum_{i=1}^{m+2}S_m(i)\\frac {pre_{i-1}suf_{i+1}}{(i-1)!(m+2-i)!(-1)^{m+2-i}}\r\n\\]</span> 复杂度 <span class=\"math inline\">\\(O(m\\log P)\\)</span> 或 <span class=\"math inline\">\\(O(m)\\)</span>（欧拉筛 <span class=\"math inline\">\\(i^k\\)</span>）。</p>\r\n<h3 id=\"直接上公式无需求逆\">&lt;2&gt; 直接上公式(无需求逆)</h3>\r\n<p><span class=\"math display\">\\[\r\n\\sum_{i=1}^ni^{m+1}=\\sum_{k=0}^m\\binom{n+k+1}{m+2}\\sum_{r=0}^k(-1)^r\\binom{m+2}r(k+1-r)^{m+1}\r\n\\]</span></p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(m^2)\\)</span>。</p>\r\n<h3 id=\"第二类斯特林数\">&lt;3&gt; 第二类斯特林数</h3>\r\n<p>预处理 <span class=\"math display\">\\[\r\n{0 \\brace 0} = 1 \\\\\r\n{n \\brace m} = {n - 1 \\brace m - 1} + m{n - 1 \\brace m}\r\n\\]</span> 结论 <span class=\"math display\">\\[\r\n\\sum_{i=1}^mi^m=\\sum_{i=1}^n{m \\brace i}\\frac 1{i+1}(n+1)^{\\underline{i+1}}\r\n\\]</span> 复杂度 <span class=\"math inline\">\\(O(m^2)\\)</span> （无需求逆）或 <span class=\"math inline\">\\(O(m\\log m)\\)</span> （需要求第二类斯特林数-行）。</p>\r\n<h3 id=\"递推\">&lt;4&gt; 递推</h3>\r\n<p><span class=\"math display\">\\[\r\nf_i=\\sum_{j=1}^nj^i\\\\\r\nf_i=\\frac 1{i+1}\\left((n+1)^{i+1}-\\sum_{j=0}^{i-1}\\binom{i+1}jf_j\\right)\r\n\\]</span></p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(m^2)\\)</span>。</p>\r\n<h3 id=\"伯努利数\">&lt;5&gt; 伯努利数</h3>\r\n<p>预处理 <span class=\"math display\">\\[\r\nB_0=1\\\\\r\n\\sum_{i=0}^m\\binom{m+1}iB_i=0\r\n\\]</span> 结论 <span class=\"math display\">\\[\r\n\\sum_{i=1}^ni^m=\\frac 1{m+1}\\sum_{i=0}^m\\binom{m+1}iB_in^{m+1-i}\r\n\\]</span> 另外伯努利数的指数型生成函数 <span class=\"math display\">\\[\r\nB(x)=\\frac x{e^x-1}\r\n\\]</span> 通过多项式求逆</p>\r\n<p>可以优化到 <span class=\"math inline\">\\(O(m\\log m)\\)</span>。</p>\r\n"},{"title":"模板（持续更新）","date":"2021-04-16T08:45:41.000Z","updated":"2021-04-16T08:45:41.000Z","hidden":true,"_content":"**左手栏有目录。**\n\n出现的宏：\n\n```cpp\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing ll = long long;\nusing lf = double;\n```\n\n# 有用的模板\n\n## Fast IO\n\n#### 非负整数版\n\n##### 函数\n\n```cpp\nint read() {\n    const int M = 1e6;\n    static streambuf* in = cin.rdbuf();\n    #define gc (p1 == p2 && (p2 = (p1 = buf) + in -> sgetn(buf, M), p1 == p2) ? -1 : *p1++)\n    static char buf[M], *p1, *p2;\n    int c = gc, r = 0;\n    while(c < 48) c = gc;\n    while(c > 47) r = r * 10 + (c & 15), c = gc;\n    return r;\n}\nvoid wrt(int x) {\n    static streambuf* out = cout.rdbuf();\n    #define pc out -> sputc\n    static char c[11]; int sz = 0;\n    do c[++sz] = x % 10, x /= 10; while(x);\n    while(sz) pc(c[sz--] + 48);\n    pc(10);\n}\n```\n\n##### 预处理\n\n```cpp\nios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n```\n\n#### 整数版\n\n```cpp\nint read() {\n    const int M = 1e6;\n    static streambuf* in = cin.rdbuf();\n    #define gc (p1 == p2 && (p2 = (p1 = buf) + in -> sgetn(buf, M), p1 == p2) ? -1 : *p1++)\n    static char buf[M], *p1, *p2;\n    int c = gc, r = 0, f = 1;\n    while(c < 48) { if(c == 45) f = -1; c = gc; }\n    while(c > 47) r = r * 10 + (c & 15), c = gc;\n    return r * f;\n}\nvoid wrt(int x) {\n    static streambuf* out = cout.rdbuf();\n    #define pc out -> sputc\n    static char c[11]; int sz = 0;\n    if(x < 0) pc(45), x = -x;\n    do c[++sz] = x % 10, x /= 10; while(x);\n    while(sz) pc(c[sz--] + 48);\n    pc(10);\n}\n```\n\n**注：输出 ```long long``` 时 ```wrt``` 函数中的 ```c``` 数组大小要开到 $20$。**\n\n## AtCoder-modint\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\nusing ll = long long;\nusing uint = unsigned;\nusing ull = unsigned ll;\n\nconstexpr ll safe_mod(ll x, ll m) {\n    return x %= m, x < 0 ? x + m : x;\n}\nconstexpr ll pow_mod_constexpr(ll x, ll n, int m) {\n    if(m == 1) return 0;\n    uint _m = m;\n    ull r = 1, _x = safe_mod(x, m);\n    for(; n; n >>= 1, _x = _x * _x % _m)\n    if(n & 1) r = r * _x % m;\n    return r;\n}\nconstexpr bool is_prime_constexpr(int n) {\n    if(n <= 1) return false;\n    if(n == 2 || n == 7 || n == 61) return true;\n    if(n % 2 == 0) return false;\n    ll d = n - 1;\n    while(~d & 1) d /= 2;\n    for(ll a : {2, 7, 61}) {\n        ll t = d, y = pow_mod_constexpr(a, t, n);\n        while(t != n - 1 && y != 1 && y != n - 1)\n            y = y * y % n, t <<= 1;\n        if(y != n - 1 && t % 2 == 0) return false;\n    }\n    return true;\n}\nconstexpr pair<ll, ll> inv_gcd(ll a, ll b) {\n    a = safe_mod(a, b);\n    if(a == 0) return {b, 0};\n    ll s = b, t = a, m0 = 0, m1 = 1;\n    while(t) {\n        ll u = s / t;\n        s -= t * u, m0 -= m1 * u;\n        ll tmp = s;\n        s = t, t = tmp, tmp = m0, m0 = m1, m1 = tmp;\n    }\n    if(m0 < 0) m0 += b / s;\n    return {s, m0};\n}\nstruct barrett {\n    uint m; ull im;\n    barrett(uint m) :m(m), im(~0ull / m + 1) {}\n    uint mul(uint a, uint b) const {\n        ull z = (ull)a * b;\n        ull x = (unsigned __int128)z * im >> 64;\n        uint v = z - x * m;\n        return m <= v ? v + m : v;\n    }\n};\ntemplate<int m> struct static_modint {\n    using mint = static_modint;\n  public:\n    static mint raw(int v) {\n        mint x;\n        return x._v = v, x;\n    }\n    static_modint() : _v(0) {}\n    template<class T> static_modint(T v) {\n        ll x = v % m;\n        _v = x < 0 ? x + m : x;\n    }\n    uint val() const { return _v; }\n    mint& operator++() {\n        if(++_v == m) _v = 0;\n        return *this;\n    }\n    mint& operator--() {\n        if(!_v--) _v = m - 1;\n        return *this;\n    }\n    mint operator++(int) {\n        mint res = *this;\n        ++*this;\n        return res;\n    }\n    mint operator--(int) {\n        mint res = *this;\n        --*this;\n        return res;\n    }\n    mint& operator+=(const mint& rhs) {\n        _v += rhs._v;\n        if(_v >= m) _v -= m;\n        return *this;\n    }\n    mint& operator-=(const mint& rhs) {\n        _v -= rhs._v;\n        if(_v >= m) _v += m;\n        return *this;\n    }\n    mint& operator*=(const mint& rhs) {\n        ull z = _v;\n        z *= rhs._v, _v = z % m;\n        return *this;\n    }\n    mint& operator/=(const mint& rhs) { return *this = *this * rhs.inv(); }\n    mint operator+() const { return *this; }\n    mint operator-() const { return mint() - *this; }\n\n    mint pow(ll n) const {\n        assert(0 <= n);\n        mint x = *this, r = 1;\n        for(; n; n >>= 1, x *= x) if(n & 1) r *= x;\n        return r;\n    }\n    mint inv() const {\n        if(prime) {\n            assert(_v);\n            return pow(m - 2);\n        } else {\n            auto eg = inv_gcd(_v, m);\n            assert(eg.first == 1);\n            return eg.second;\n        }\n    }\n\n    friend mint operator+(const mint& lhs, const mint& rhs) {\n        return mint(lhs) += rhs;\n    }\n    friend mint operator-(const mint& lhs, const mint& rhs) {\n        return mint(lhs) -= rhs;\n    }\n    friend mint operator*(const mint& lhs, const mint& rhs) {\n        return mint(lhs) *= rhs;\n    }\n    friend mint operator/(const mint& lhs, const mint& rhs) {\n        return mint(lhs) /= rhs;\n    }\n    friend bool operator==(const mint& lhs, const mint& rhs) {\n        return lhs._v == rhs._v;\n    }\n    friend bool operator!=(const mint& lhs, const mint& rhs) {\n        return lhs._v != rhs._v;\n    }\n\n  private:\n    uint _v;\n    static constexpr bool prime = is_prime_constexpr(m);\n};\n\ntemplate<int id> struct dynamic_modint {\n    using mint = dynamic_modint;\n\n  public:\n    static void set_mod(int m) {\n        assert(1 <= m), bt = barrett(m);\n    }\n    static mint raw(int v) {\n        mint x;\n        return x._v = v, x;\n    }\n\n    dynamic_modint() : _v(0) {}\n    template<class T> dynamic_modint(T v) {\n        ll x = v % bt.m;\n        _v = x < 0 ? x + bt.m : x;\n    }\n\n    uint val() const { return _v; }\n\n    mint& operator++() {\n        if(++_v == bt.m) _v = 0;\n        return *this;\n    }\n    mint& operator--() {\n        if(!_v--) _v = bt.m - 1;\n        return *this;\n    }\n    mint operator++(int) {\n        mint res = *this;\n        ++*this;\n        return res;\n    }\n    mint operator--(int) {\n        mint res = *this;\n        --*this;\n        return res;\n    }\n\n    mint& operator+=(const mint& rhs) {\n        _v += rhs._v;\n        if(_v >= bt.m) _v -= bt.m;\n        return *this;\n    }\n    mint& operator-=(const mint& rhs) {\n        _v += bt.m - rhs._v;\n        if(_v >= bt.m) _v -= bt.m;\n        return *this;\n    }\n    mint& operator*=(const mint& rhs) {\n        _v = bt.mul(_v, rhs._v);\n        return *this;\n    }\n    mint& operator/=(const mint& rhs) { return *this = *this * rhs.inv(); }\n\n    mint operator+() const { return *this; }\n    mint operator-() const { return mint() - *this; }\n\n    mint pow(ll n) const {\n        assert(0 <= n);\n        mint x = *this, r = 1;\n        for(; n; n >>= 1, x *= x) if(n & 1) r *= x;\n        return r;\n    }\n    mint inv() const {\n        auto eg = inv_gcd(_v, bt.m);\n        assert(eg.first == 1);\n        return eg.second;\n    }\n\n    friend mint operator+(const mint& lhs, const mint& rhs) {\n        return mint(lhs) += rhs;\n    }\n    friend mint operator-(const mint& lhs, const mint& rhs) {\n        return mint(lhs) -= rhs;\n    }\n    friend mint operator*(const mint& lhs, const mint& rhs) {\n        return mint(lhs) *= rhs;\n    }\n    friend mint operator/(const mint& lhs, const mint& rhs) {\n        return mint(lhs) /= rhs;\n    }\n    friend bool operator==(const mint& lhs, const mint& rhs) {\n        return lhs._v == rhs._v;\n    }\n    friend bool operator!=(const mint& lhs, const mint& rhs) {\n        return lhs._v != rhs._v;\n    }\n\n  private:\n    uint _v;\n    static barrett bt;\n};\ntemplate<int id> barrett dynamic_modint<id>::bt = 998244353;\n```\n\n## 打比赛专用模板\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\nusing ll = long long;\nusing uint = unsigned;\nusing ull = unsigned ll;\n\nconstexpr ll safe_mod(ll x, ll m) { return x %= m, x < 0 ? x + m : x; }\nconstexpr ll pow_mod_constexpr(ll x, ll n, int m) {\n    if(m == 1) return 0;\n    uint _m = m; ull r = 1, _x = safe_mod(x, m);\n    for(; n; n >>= 1, _x = _x * _x % _m) if(n & 1) r = r * _x % m;\n    return r;\n}\nconstexpr bool is_prime_constexpr(int n) {\n    if(n <= 1) return false;\n    if(n == 2 || n == 7 || n == 61) return true;\n    if(n % 2 == 0) return false;\n    ll d = n - 1; while(~d & 1) d /= 2;\n    for(ll a : {2, 7, 61}) {\n        ll t = d, y = pow_mod_constexpr(a, t, n);\n        while(t != n - 1 && y != 1 && y != n - 1) y = y * y % n, t <<= 1;\n        if(y != n - 1 && t % 2 == 0) return false;\n    }\n    return true;\n}\nconstexpr pair<ll, ll> inv_gcd(ll a, ll b) {\n    a = safe_mod(a, b);\n    if(a == 0) return {b, 0};\n    ll s = b, t = a, m0 = 0, m1 = 1;\n    while(t) {\n        ll u = s / t; s -= t * u, m0 -= m1 * u;\n        ll tmp = s; s = t, t = tmp, tmp = m0, m0 = m1, m1 = tmp;\n    }\n    if(m0 < 0) m0 += b / s;\n    return {s, m0};\n}\nstruct barrett {\n    uint m; ull im;\n    barrett(uint m) :m(m), im(~0ull / m + 1) {}\n    uint mul(uint a, uint b) const {\n        ull z = (ull)a * b; ull x = (unsigned __int128)z * im >> 64; uint v = z - x * m;\n        return m <= v ? v + m : v;\n    }\n};\ntemplate<int m> struct static_modint {\n    using mint = static_modint;\n  public:\n    static mint raw(int v) { mint x; return x._v = v, x; }\n    static_modint() : _v(0) {}\n    template<class T> static_modint(T v) { ll x = v % m; _v = x < 0 ? x + m : x; }\n    uint val() const { return _v; }\n    mint& operator++() { if(++_v == m) _v = 0; return *this; }\n    mint& operator--() { if(!_v--) _v = m - 1; return *this; }\n    mint operator++(int) { mint res = *this; ++*this; return res; }\n    mint operator--(int) { mint res = *this; --*this; return res; }\n    mint& operator+=(const mint& rhs) { _v += rhs._v; if(_v >= m) _v -= m; return *this; }\n    mint& operator-=(const mint& rhs) { _v -= rhs._v; if(_v >= m) _v += m; return *this; }\n    mint& operator*=(const mint& rhs) { ull z = _v; z *= rhs._v, _v = z % m; return *this; }\n    mint& operator/=(const mint& rhs) { return *this = *this * rhs.inv(); }\n    mint operator+() const { return *this; }\n    mint operator-() const { return mint() - *this; }\n    mint pow(ll n) const { assert(0 <= n); mint x = *this, r = 1; for(; n; n >>= 1, x *= x) if(n & 1) r *= x; return r; }\n    mint inv() const { if(prime) { assert(_v); return pow(m - 2); } else { auto eg = inv_gcd(_v, m); assert(eg.first == 1); return eg.second; } }\n    friend mint operator+(const mint& lhs, const mint& rhs) { return mint(lhs) += rhs; }\n    friend mint operator-(const mint& lhs, const mint& rhs) { return mint(lhs) -= rhs; }\n    friend mint operator*(const mint& lhs, const mint& rhs) { return mint(lhs) *= rhs; }\n    friend mint operator/(const mint& lhs, const mint& rhs) { return mint(lhs) /= rhs; }\n    friend bool operator==(const mint& lhs, const mint& rhs) { return lhs._v == rhs._v; }\n    friend bool operator!=(const mint& lhs, const mint& rhs) { return lhs._v != rhs._v; }\n  private:\n    uint _v;\n    static constexpr bool prime = is_prime_constexpr(m);\n};\ntemplate<int id> struct dynamic_modint {\n    using mint = dynamic_modint;\n  public:\n    static void set_mod(int m) { assert(1 <= m), bt = barrett(m); }\n    static mint raw(int v) { mint x; return x._v = v, x; }\n    dynamic_modint() : _v(0) {}\n    template<class T> dynamic_modint(T v) { ll x = v % bt.m; _v = x < 0 ? x + bt.m : x; }\n    uint val() const { return _v; }\n    mint& operator++() { if(++_v == bt.m) _v = 0; return *this; }\n    mint& operator--() { if(!_v--) _v = bt.m - 1; return *this; }\n    mint operator++(int) { mint res = *this; ++*this; return res; }\n    mint operator--(int) { mint res = *this; --*this; return res; }\n    mint& operator+=(const mint& rhs) { _v += rhs._v; if(_v >= bt.m) _v -= bt.m; return *this; }\n    mint& operator-=(const mint& rhs) { _v += bt.m - rhs._v; if(_v >= bt.m) _v -= bt.m; return *this; }\n    mint& operator*=(const mint& rhs) { _v = bt.mul(_v, rhs._v); return *this; }\n    mint& operator/=(const mint& rhs) { return *this = *this * rhs.inv(); }\n    mint operator+() const { return *this; }\n    mint operator-() const { return mint() - *this; }\n    mint pow(ll n) const { assert(0 <= n); mint x = *this, r = 1; for(; n; n >>= 1, x *= x) if(n & 1) r *= x; return r; }\n    mint inv() const { auto eg = inv_gcd(_v, bt.m); assert(eg.first == 1); return eg.second; }\n    friend mint operator+(const mint& lhs, const mint& rhs) { return mint(lhs) += rhs; }\n    friend mint operator-(const mint& lhs, const mint& rhs) { return mint(lhs) -= rhs; }\n    friend mint operator*(const mint& lhs, const mint& rhs) { return mint(lhs) *= rhs; }\n    friend mint operator/(const mint& lhs, const mint& rhs) { return mint(lhs) /= rhs; }\n    friend bool operator==(const mint& lhs, const mint& rhs) { return lhs._v == rhs._v; }\n    friend bool operator!=(const mint& lhs, const mint& rhs) { return lhs._v != rhs._v; }\n  private:\n    uint _v;\n    static barrett bt;\n};\ntemplate<int id> barrett dynamic_modint<id>::bt = 998244353;\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n#define eb emplace_back\n#define fi first \n#define se second\n#define all(x) (x).begin(), (x).end()\n#define SZ(x) int((x).size())\n#define mid ((l + r) / 2)\n#define lc o * 2\n#define rc o * 2 + 1\n#define lch l, mid, lc\n#define rch mid + 1, r, rc\n#define cmi(a, b) (a = min(a, b))\n#define cma(a, b) (a = max(a, b))\n#define lb lower_bound\n#define ub upper_bound\n#define bs binary_search\n#define pop __builtin_popcount\n#define llpop __builtin_popcountll\n#define ctz __builtin_ctz\n#define llctz __builtin_ctzll\n#define clz __builtin_clz\n#define llclz __builtin_clzll\n#define par __builtin_parity\n#define llpar __builtin_parityll\n\nusing lf = double;\n// using P = pair<int, int>;\nusing V = vector<int>;\n// using cmp = complex<lf>;\n\nvoid solve() {\n    \n}\nint main() {\n    // ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n#ifdef local\n    // freopen(\".in\", \"r\", stdin);\n#endif\n    int T;\n    for(cin >> T; T--; solve());\n}\n```\n\n## 随机数\n\n### 函数\n\n```cpp\nll gen(ll x) {\n    const ll k = 0x9ddfea08eb382d69ull;\n    rep(i, 1, 3) x *= k, x ^= x >> 47;\n    return x * k;\n}\nll rnd() {\n    static ll s = 2;\n    return (s += gen(s)) & LONG_LONG_MAX;\n}\n```\n\n##  大模数取模\n\n### 函数\n\n```cpp\nll mul(ll a, ll b, ll p) {\n    return (a * b - ll((long double)a / p * b + 0.5) * p + p) % p;\n}\n```\n\n### `bash` 对拍\n\n```bash\n#!/bin/bash\nwhile true; do\n    ./gen > in\n    ./a < in > 1\n    ./b < in > 2\n    diff 1 2\n    if [ $? -ne 0 ] ; then break; fi\ndone\n```\n\n## 简易计算器\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n\nusing namespace std;\nusing ll = long long;\n\nll mul(ll a, ll b, ll p) {\n    return (a * b - ll((long double)a / p * b + 0.5) * p + p) % p;\n}\nll Pow(ll a, ll n, ll p, ll r = 1) {\n    for(; n; n /= 2, a = mul(a, a, p))\n    if(n & 1) r = mul(r, a, p);\n    return r;\n}\n\nnamespace Pollard_Rho {\n    int chk(ll n) {\n        for(ll a : {2, 3, 7, 61, 24251}) {\n            if(n == a) return 1;\n            if(Pow(a, n - 1, n) ^ 1) return 0;\n            ll k = n - 1, t;\n            while(~k & 1) k /= 2;\n            if((t = Pow(a, k, n)) == 1) continue;\n            while(t ^ 1 && t ^ n - 1) t = mul(t, t, n);\n            if(t ^ n - 1) return 0;\n        }\n        return 1;\n    }\n    ll f(ll x, ll c, ll p) { return (mul(x, x, p) + c) % p; }\n    ll PR(ll n) {\n        ll a = 0, b = 0, c = rand() % (n - 1) + 1, v = 1, g;\n        for(int k = 1; ; k *= 2, a = b, v = 1) {\n            rep(i, 1, k) {\n                b = f(b, c, n), v = mul(v, abs(a - b), n);\n                if(!(i & 127) || i == k) {\n                    g = __gcd(v, n);\n                    if(g > 1) return g;\n                }\n            }\n        }\n    }\n    ll ans[100]; int ct;\n    void solve(ll n) {\n        if(chk(n)) return void(ans[++ct] = n);\n        ll d; do d = PR(n); while(d == n);\n        solve(d), solve(n / d);\n    }\n    void work() {\n        ll n;\n        while(cin >> n) {\n            ct = 0;\n            if(chk(n)) { puts(\"Prime\"); continue; }\n            solve(n), sort(ans + 1, ans + ct + 1);\n            int t = 0;\n            rep(i, 1, ct) {\n                if(ans[i] ^ ans[i - 1]) cout << ans[i];\n                t++; if(ans[i] ^ ans[i + 1]) {\n                    if(t > 1) cout << '^' << t;\n                    putchar(32), t = 0;\n                }\n            } putchar(10);\n        }\n    }\n};\nnamespace Inv {\n    void exgcd(ll a, ll b, ll& d, ll& x, ll& y) {\n        if(b) exgcd(b, a % b, d, y, x), y -= a / b * x;\n        else d = a, x = 1, y = 0;\n    }\n    void inv(ll a, ll p) {\n        ll d, x, y; exgcd(a, p, d, x, y);\n        if(d > 1) puts(\"Non-existent!\");\n        else cout << (x % p + p) % p;\n    }\n    void work() {\n        ll a, p;\n        while(cin >> a >> p) inv(a, p);\n    }\n};\nnamespace Prime {\n    void work() {\n        ll n;\n        while(cin >> n) {\n            while(!Pollard_Rho::chk(n)) n++;\n            cout << n << endl;\n        }\n    }\n};\nnamespace Cipolla {\n    ll n, p, II;\n    struct cmp {\n        ll r, i;\n        cmp operator *(const cmp& b) {\n            return {(r * b.r + i * b.i % p * II) % p, (r * b.i + i * b.r) % p };\n        }\n    } U = { 1, 0 };\n    int pow1(ll a, int n, ll r = 1) {\n        for(; n; n /= 2, a = a * a % p)\n        if(n & 1) r = r * a % p;\n        return r;\n    }\n    cmp pow2(cmp a, int n, cmp r = U) {\n        for(; n; n /= 2, a = a * a)\n        if(n & 1) r = r * a;\n        return r;\n    }\n    void work() {\n        while(cin >> n >> p) {\n            if(!n) { puts(\"0\"); continue; }\n            if(p == 2) { cout << n << endl; continue; }\n            if(pow1(n, p / 2) ^ 1) { puts(\"Non-existent!\"); continue; }\n            ll a;\n            do a = rand() % p, II = (a * a - n + p) % p; while(!a || pow1(II, p / 2) == 1);\n            int x1 = pow2({a, 1}, p / 2 + 1).r, x2 = p - x1;\n            if(x1 > x2) swap(x1, x2);\n            printf(\"%d %d\\n\", x1, x2);\n        }\n    }\n}; \nint main() {\n    srand(time(0));\n    puts(\"Press 1 for integer factorization.\");\n    puts(\"Press 2 to calculate the modular multiplicative inverse of a number.\");\n    puts(\"Press 3 to find the first prime number greater than or equal to a number.\");\n    puts(\"Press 4 to calculate the modular square root of a number.\");\n    int op;\n    while(1) {\n        cin >> op;\n        if(op == 1) Pollard_Rho::work();\n        else if(op == 2) Inv::work();\n        else if(op == 3) Prime::work();\n        else if(op == 4) Cipolla::work();\n        else puts(\"Illegal input! Please re-enter your option.\");\n    }\n}\n```\n\n# 数学\n\n## NTT\n\n### 普通版\n\n#### 定义\n\n```cpp\nint lim = 1, bit = -1, rev[N];\n```\n\n#### 函数\n\n```cpp\nll Pow(ll a, int n, ll r = 1) {\n    for(; n; n /= 2, a = a * a % P)\n    if(n & 1) r = r * a % P;\n    return r;\n}\nvoid NTT(ll a[], int t) {\n    if(t) reverse(a + 1, a + lim);\n    For(i, 0, lim) if(rev[i] < i) swap(a[i], a[rev[i]]);\n    for(int i = 1; i < lim; i *= 2) {\n        ll wn = Pow(3, P / 2 / i);\n        for(int j = 0; j < lim; j += i * 2) {\n            ll w = 1;\n            For(k, j, j + i) {\n                ll &x = a[k], y = a[k + i] * w % P;\n                a[k + i] = (x - y) % P, (x += y) %= P, w = w * wn % P;\n            }\n        }\n    }\n    ll inv = Pow(lim, P - 2);\n    if(t) For(i, 0, lim) (a[i] *= inv) %= P;\n}\n```\n\n`modint` 版\n\n```cpp\nvoid NTT(mint a[], int t) {\n    if(t) reverse(a + 1, a + lim);\n    For(i, 0, lim) if(rev[i] < i) swap(a[i], a[rev[i]]);\n    for(int i = 1; i < lim; i *= 2) {\n        mint wn = mint(3).pow(P / 2 / i);\n        for(int j = 0; j < lim; j += i * 2) {\n            mint w = 1;\n            For(k, j, j + i) {\n                mint &x = a[k], y = a[k + i] * w;\n                a[k + i] = x - y, x += y, w *= wn;\n            }\n        }\n    }\n    mint inv = mint(lim).inv();\n    if(t) For(i, 0, lim) a[i] *= inv;\n}\n```\n\n#### 预处理\n\n```cpp\nwhile(lim <= n + m) lim *= 2, bit++;\nFor(i, 0, lim) rev[i] = rev[i / 2] / 2 | (i & 1) << bit;\n```\n\n### 多次做时较快版\n\n#### 定义\n\n```cpp\nll w[N];\nint lim = 1, bit = -1, rev[N]; \n```\n\n`modint` 版\n\n```cpp\nmint w[N];\nint lim = 1, bit = -1, rev[N]; \n```\n\n#### 函数\n\n```cpp\nvoid mod(ll& x) { if(x >= P) x -= P; if(x < 0) x += P; }\nll Pow(ll a, int n, ll r = 1) {\n    for(; n; n /= 2, a = a * a % P)\n    if(n & 1) r = r * a % P;\n    return r;\n}\nvoid NTT(ll a[], int t) {\n    if(t) reverse(a + 1, a + lim);\n    For(i, 0, lim) if(rev[i] < i) swap(a[i], a[rev[i]]);\n    for(int i = 1; i < lim; i *= 2)\n    for(int j = 0; j < lim; j += i * 2) For(k, j, j + i) {\n        ll &x = a[k], y = a[k + i] * w[lim / i * (k - j)] % P;\n        mod(a[k + i] = x - y), mod(x += y);\n    }\n    ll inv = Pow(lim, P - 2);\n    if(t) For(i, 0, lim) (a[i] *= inv) %= P;\n}\n```\n\n`modint` 版\n\n```cpp\nvoid NTT(mint a[], int t) {\n    if(t) reverse(a + 1, a + lim);\n    For(i, 0, lim) if(rev[i] < i) swap(a[i], a[rev[i]]);\n    for(int i = 1; i < lim; i *= 2)\n    for(int j = 0; j < lim; j += i * 2) For(k, j, j + i) {\n        mint &x = a[k], y = a[k + i] * w[lim / i * (k - j)];\n        a[k + i] = x - y, x += y;\n    }\n    mint inv = mint(lim).inv();\n    if(t) For(i, 0, lim) a[i] *= inv;\n}\n```\n\n#### 预处理\n\n```cpp\nwhile(lim <= n + m) lim *= 2, bit++;\nll wn = Pow(3, P / 2 / lim);\nFor(i, 0, lim) {\n    rev[i] = rev[i / 2] / 2 | (i & 1) << bit;\n    w[i] = i ? w[i - 1] * wn % P : 1;\n}\n```\n\n`modint` 版\n\n```cpp\nwhile(lim <= n + m) lim *= 2, bit++;\nmint wn = mint(3).pow(P / 2 / lim);\nFor(i, 0, lim) {\n    rev[i] = rev[i / 2] / 2 | (i & 1) << bit;\n    w[i] = i ? w[i - 1] * wn : 1;\n}\n```\n\n## 任意模数 NTT\n\n### 定义\n\n```cpp\nusing cmp = complex<lf>;\nconst lf PI = acos(-1);\nconst cmp I(0, 1);\n\nint n, m, P;\nint M, lim = 1, bit = -1, rev[N];\ncmp w[N], a0[N], a1[N], b0[N], b1[N];\n```\n\n`modint` 版\n\n```cpp\nusing cmp = complex<lf>;\nconst lf PI = acos(-1);\n\nint n, m, P;\nint M, lim = 1, bit = -1, rev[N];\ncmp w[N], a0[N], a1[N], b0[N], b1[N];\n```\n\n### 函数\n\n```cpp\nvoid FFT(cmp a[], int t) {\n    if(t) reverse(a + 1, a + lim);\n    For(i, 0, lim) if(i < rev[i]) swap(a[i], a[rev[i]]);\n    for(int i = 1; i < lim; i *= 2) for(int j = 0; j < lim; j += i * 2) For(k, j, j + i) {\n        cmp &x = a[k], y = a[i + k] * w[lim / i * (k - j)];\n        a[i + k] = x - y, x += y;\n    }\n    lf inv = 1. / lim;\n    if(t) For(i, 0, lim) a[i] *= inv;\n}\nvoid FFT2(cmp a[], cmp b[]) {\n    For(i, 0, lim) a[i] += b[i] * I;\n    FFT(a, 0);\n    For(i, 0, lim) b[i] = conj(a[i ? lim - i : 0]);\n    For(i, 0, lim) {\n        cmp x = a[i], y = b[i];\n        a[i] = (y + x) * 0.5, b[i] = (y - x) * 0.5 * I;\n    }\n}\nll num(cmp x) { return M * ll(real(x) + 0.5) % P + ll(imag(x) + 0.5); }\n```\n\n`modint` 版\n\n```cpp\nvoid FFT(cmp a[], int t) {\n    if(t) reverse(a + 1, a + lim);\n    For(i, 0, lim) if(i < rev[i]) swap(a[i], a[rev[i]]);\n    for(int i = 1; i < lim; i *= 2) for(int j = 0; j < lim; j += i * 2) For(k, j, j + i) {\n        cmp &x = a[k], y = a[i + k] * w[lim / i * (k - j)];\n        a[i + k] = x - y, x += y;\n    }\n    lf inv = 1. / lim;\n    if(t) For(i, 0, lim) a[i] *= inv;\n}\nvoid FFT2(cmp a[], cmp b[]) {\n    For(i, 0, lim) a[i] += b[i] * 1i;\n    FFT(a, 0);\n    For(i, 0, lim) b[i] = conj(a[i ? lim - i : 0]);\n    For(i, 0, lim) {\n        cmp x = a[i], y = b[i];\n        a[i] = (y + x) * 0.5, b[i] = (y - x) * 0.5i;\n    }\n}\nmint num(cmp x) { return M * (mint)ll(real(x) + 0.5) % P + (mint)ll(imag(x) + 0.5); }\n```\n\n### 预处理\n\n```cpp\nM = sqrt(P);\nrep(i, 0, n) a0[i] = A[i] / M, a1[i] = A[i] % M;\nrep(i, 0, m) b0[i] = B[i] / M, b1[i] = B[i] % M;\nwhile(lim <= n + m) lim *= 2, bit++;\nFor(i, 0, lim) {\n    rev[i] = rev[i / 2] / 2 | (i & 1) << bit;\n    w[i] = cmp(cos(PI / lim * i), sin(PI / lim * i));\n}\n```\n\n### 使用\n\n```cpp\nFFT2(a0, a1), FFT2(b0, b1);\nFor(i, 0, lim) {\n    cmp t = a0[i] + I * a1[i];\n    b0[i] *= t, b1[i] *= t;\n}\nFFT(b0, 1), FFT(b1, 1);\nrep(i, 0, n + m) C[i] = (M * num(b0[i]) + num(b1[i])) % P;\n```\n\n`modint` 版\n\n```cpp\nFFT2(a0, a1), FFT2(b0, b1);\nFor(i, 0, lim) {\n    cmp t = a0[i] + I * a1[i];\n    b0[i] *= t, b1[i] *= t;\n}\nFFT(b0, 1), FFT(b1, 1);\nrep(i, 0, n + m) C[i] = M * num(b0[i]) + num(b1[i]);\n```\n\n## FWT\n\n### 函数\n\n```cpp\nvoid FWT(ll a[]) {\n    For(i, 0, n) For(S, 0, 1 << n) if(S >> i & 1) {\n        ll& x = a[S ^ 1 << i], y = a[S];\n        a[S] = x - y, x += y;\n    }\n}\nvoid IFWT(ll a[]) {\n    For(i, 0, n) For(S, 0, 1 << n) if(S >> i & 1) {\n        ll& x = a[S ^ 1 << i], y = a[S];\n        a[S] = x - y >> 1, x = x + y >> 1;\n    }\n}\n```\n\n## 多项式求逆\n\n### 定义\n\n```cpp\nint n, lim, rev[N];\n```\n\n### 函数\n\n```cpp\nll Pow(ll a, int n, ll r = 1) {\n    for(; n; n /= 2, a = a * a % P)\n    if(n & 1) r = r * a % P;\n    return r;\n}\nvoid bld(int n) {\n    lim = 1 << n--;\n    For(i, 0, lim) rev[i] = rev[i / 2] / 2 | (i & 1) << n;\n}\nvoid NTT(ll a[], int t) {\n    if(t) reverse(a + 1, a + lim);\n    For(i, 0, lim) if(i < rev[i]) swap(a[i], a[rev[i]]);\n    for(int i = 1; i < lim; i *= 2) {\n        ll wn = Pow(g, P / 2 / i);\n        for(int j = 0; j < lim; j += i * 2) {\n            ll w = 1;\n            For(k, j, j + i) {\n                ll &x = a[k], y = a[k + i] * w % P;\n                a[k + i] = (x - y) % P, (x += y) %= P, w = w * wn % P;\n            }\n        }\n    }\n    ll inv = Pow(lim, P - 2);\n    if(t) For(i, 0, lim) (a[i] *= inv) %= P;\n}\nvoid Inv(ll a[], ll b[], int n) {\n    static ll c[N];\n    For(i, 0, 2 << n) b[i] = c[i] = 0;\n    b[0] = Pow(a[0], P - 2);\n    rep(i, 1, n) {\n        For(j, 0, 1 << i) c[j] = a[j];\n        bld(i + 1), NTT(c, 0), NTT(b, 0);\n        For(j, 0, lim) b[j] = (b[j] * 2 - b[j] * b[j] % P * c[j]) % P;\n        NTT(b, 1);\n        For(j, 1 << i, lim) b[j] = 0;\n    }\n}\n```\n\n`modint` 版\n\n```cpp\nvoid bld(int n) {\n    lim = 1 << n--;\n    For(i, 0, lim) rev[i] = rev[i / 2] / 2 | (i & 1) << n;\n}\nvoid NTT(mint a[], int t) {\n    if(t) reverse(a + 1, a + lim);\n    For(i, 0, lim) if(rev[i] < i) swap(a[i], a[rev[i]]);\n    for(int i = 1; i < lim; i *= 2) {\n        mint wn = mint(3).pow(P / 2 / i);\n        for(int j = 0; j < lim; j += i * 2) {\n            mint w = 1;\n            For(k, j, j + i) {\n                mint &x = a[k], y = a[k + i] * w;\n                a[k + i] = x - y, x += y, w *= wn;\n            }\n        }\n    }\n    mint inv = mint(lim).inv();\n    if(t) For(i, 0, lim) a[i] *= inv;\n}\nvoid Inv(mint a[], mint b[], int n) {\n    static mint c[N];\n    For(i, 0, 2 << n) b[i] = c[i] = 0;\n    b[0] = a[0].inv();\n    rep(i, 1, n) {\n        For(j, 0, 1 << i) c[j] = a[j];\n        bld(i + 1), NTT(c, 0), NTT(b, 0);\n        For(j, 0, lim) b[j] = b[j] * 2 - b[j] * b[j] * c[j];\n        NTT(b, 1);\n        For(j, 1 << i, lim) b[j] = 0;\n    }\n}\n```\n\n## 自然数等幂求和\n\n## 中国剩余定理\n\n## 扩展中国剩余定理\n\n```cpp\nll mul(ll a, ll b, ll p) {\n    return (a * b - (ll)((long double)a / p * b + 0.5) * p + p) % p;\n}\nvoid exgcd(ll a, ll b, ll& d, ll& x, ll& y) {\n    if(!b) { d = a, x = 1, y = 0; return; }\n    exgcd(b, a % b, d, y, x), y -= a / b * x;\n}\nvoid exCRT(ll& b1, ll& m1, ll b2, ll m2) {\n    ll d, k1, k2; exgcd(m1, m2, d, k1, k2), m2 /= d;\n    b1 = (b1 + mul(mul(k1 % m2, (b2 - b1) / d % m2, m2), m1, m1 * m2)) % (m1 *= m2);\n}\n```\n\n## 杜教筛\n\n## Min-25 筛\n\n### 定义\n\n```cpp\nll f1[N], f2[N];\n```\n\n### 函数\n\n```cpp\nll min25(ll n) {\n    int lim = sqrt(n);\n    rep(i, 1, lim) f1[i] = i - 1, f2[i] = n / i - 1;\n    rep(p, 2, lim) if (f1[p] ^ f1[p - 1]) {\n        int w1 = lim / p;\n        ll x = f1[p - 1], w3 = (ll)p * p, w2 = min((ll)lim, n / w3), d = n / p;\n        rep(i, 1, w1) f2[i] -= f2[i * p] - x;\n        rep(i, w1 + 1, w2) f2[i] -= f1[d / i] - x;\n        per(i, lim, w3) f1[i] -= f1[i / p] - x;\n    }\n    return f2[1];\n}\n```\n\n## exBSGS\n\n### 定义\n\n```cpp\nmap<int, int> mp;\n```\n\n### 函数\n\n```cpp\nint BSGS(ll pls, ll a, ll b, ll p) {\n    pls %= p, a %= p, b %= p; mp.clear();\n    ll m = ceil(sqrt(p)), ls = 1, rs = 1;\n    For(i, 0, m) mp[ls * b % p] = i, ls = ls * a % p;\n    rep(i, 1, m) {\n        rs = rs * ls % p;\n        if(mp.count(rs * pls % p)) return i * m - mp[rs * pls % p];\n    }\n    return -1;\n}\nint exBSGS(ll a, ll b, ll p) {\n    a %= p, b %= p;\n    int pls = 1, ct = 0, g;\n    while((g = __gcd(a, p)) > 1) {\n        if(b == 1) return ct;\n        p /= g, pls = pls * a / g % p, ct++;\n        if(b % g) return -1; b /= g;\n    }\n    int ret = BSGS(pls, a, b, p);\n    return ~ret ? ret + ct : -1;\n}\n```\n\n## cipolla\n\n### 定义\n\n```cpp\nint n; ll II;\nstruct cmp {\n    ll r, i;\n    cmp operator *(const cmp& b) {\n        return {(r * b.r + i * b.i % P * II) % P, (r * b.i + i * b.r) % P};\n    }\n} U = {1, 0};\n```\n\n`modint` 版\n\n```cpp\nmint n, II;\nstruct cmp {\n    mint r, i;\n    cmp operator *(const cmp& b) {\n        return {r * b.r + i * b.i * II, r * b.i + i * b.r};\n    }\n} U = {1, 0};\n```\n\n### 函数\n\n```cpp\nint pow1(ll a, int n, ll r = 1) {\n    for(; n; n /= 2, a = a * a % P)\n    if(n & 1) r = r * a % P;\n    return r;\n}\ncmp pow2(cmp a, int n, cmp r = U) {\n    for(; n; n /= 2, a = a * a)\n    if(n & 1) r = r * a;\n    return r;\n}\nint cipolla(int n) {\n    if(!n) return 0;\n    if(P == 2) return n;\n    if(pow1(n, P / 2) ^ 1) return -1;\n    ll a;\n    do a = rand() % P, II = (a * a - n + P) % P; while(!a || pow1(II, P / 2) == 1);\n    return pow2({a, 1}, P / 2 + 1).r;\n}\n```\n\n`modint` 版\n\n```cpp\ncmp Pow(cmp a, int n, cmp r = U) {\n    for(; n; n /= 2, a = a * a)\n    if(n & 1) r = r * a;\n    return r;\n}\nint cipolla(mint n) {\n    if(n == 0) return 0;\n    if(P == 2) return n.val();\n    if(n.pow(P / 2) != 1) return -1;\n    mint a;\n    do a = rand(), II = a * a - n; while(a == 0 || II.pow(P / 2) == 1);\n    return Pow({a, 1}, P / 2 + 1).r.val();\n}\n```\n\n## Miller Rabin & Pollard Rho\n\n### 定义\n\n```cpp\nvector<ll> as;\n```\n\n### 函数\n\n```cpp\nll mul(ll a, ll b, ll p) {\n    return (a * b - ll((long double)a / p * b + 0.5) * p + p) % p;\n}\nll Pow(ll a, ll n, ll p, ll r = 1) {\n    for(; n; n /= 2, a = mul(a, a, p))\n    if(n & 1) r = mul(r, a, p);\n    return r;\n}\nint chk(ll n) {\n    for(ll a : {2, 3, 7, 61, 24251}) {\n        if(n == a) return 1;\n        if(Pow(a, n - 1, n) ^ 1) return 0;\n        ll k = n - 1, t;\n        while(~k & 1) k /= 2;\n        if((t = Pow(a, k, n)) == 1) continue;\n        while(t ^ 1 && t ^ n - 1) t = mul(t, t, n);\n        if(t ^ n - 1) return 0;\n    }\n    return 1;\n}\nll f(ll x, ll c, ll p) { return (mul(x, x, p) + c) % p; }\nll PR(ll n) {\n    ll a = 0, b = 0, c = rand() % (n - 1) + 1, v = 1, g;\n    for(int k = 1; ; k *= 2, a = b, v = 1) {\n        rep(i, 1, k) {\n            b = f(b, c, n), v = mul(v, abs(a - b), n);\n            if(!(i & 127) || i == k) {\n                g = __gcd(v, n);\n                if(g > 1) return g;\n            }\n        }\n    }\n}\nvoid solve(ll n) {\n    if(chk(n)) return as.pb(n);\n    ll d; do d = PR(n); while(d == n);\n    solve(d), solve(n / d);\n}\n```\n\n# 数据结构\n\n## 动态树\n\n### 普通版\n\n#### 定义\n\n```cpp\nint c[N][2], f[N], r[N];\n```\n\n#### 函数\n\n```cpp\nint id(int o) { return c[f[o]][1] == o; }\nint nrt(int o) { return f[o] && c[f[o]][id(o)] == o; }\nvoid pu(int o) {\n    \n}\nvoid flip(int o) {\n    swap(c[o][0], c[o][1]), r[o] ^= 1;\n}\nvoid pd(int o) { if(r[o]) flip(c[o][0]), flip(c[o][1]), r[o] = 0; }\nvoid rot(int o, int d) {\n    int k = c[o][!d], &x = c[k][d];\n    if(nrt(o)) c[f[o]][id(o)] = k;\n    pu(x = f[c[o][!d] = x] = o), f[k] = f[o], pu(f[o] = k);\n}\nvoid dfs(int o) { if(nrt(o)) dfs(f[o]); pd(o); }\nvoid splay(int o) {\n    dfs(o);\n    for(int fa; nrt(o); rot(f[o], !id(o)))\n    if(nrt(fa = f[o])) rot(id(o) ^ id(fa) ? fa : f[fa], !id(o));\n}\nvoid acc(int o) {\n    for(int x = 0; o; o = f[x = o])\n        splay(o), c[o][1] = x, pu(o);\n}\nvoid mkrt(int o) { acc(o), splay(o), flip(o); }\nvoid link(int u, int v) {\n    mkrt(u), acc(v), splay(v), pu(f[u] = v);\n}\nvoid cut(int u, int v) {\n    mkrt(u), acc(v), splay(v), c[v][0] = f[u] = 0, pu(v);\n}\n```\n\n### 维护子树 ```size``` 版\n\n#### 定义\n\n```cpp\nint c[N][2], f[N], r[N], s[N], si[N];\n```\n\n#### 函数\n\n```cpp\nint id(int o) { return c[f[o]][1] == o; }\nint nrt(int o) { return f[o] && c[f[o]][id(o)] == o; }\nvoid pu(int o) {\n    s[o] = s[c[o][0]] + s[c[o][1]] + si[o] + 1;\n}\nvoid flip(int o) {\n    swap(c[o][0], c[o][1]), r[o] ^= 1;\n}\nvoid pd(int o) { if(r[o]) flip(c[o][0]), flip(c[o][1]), r[o] = 0; }\nvoid rot(int o, int d) {\n    int k = c[o][!d], &x = c[k][d];\n    if(nrt(o)) c[f[o]][id(o)] = k;\n    pu(x = f[c[o][!d] = x] = o), f[k] = f[o], pu(f[o] = k);\n}\nvoid dfs(int o) { if(nrt(o)) dfs(f[o]); pd(o); }\nvoid splay(int o) {\n    dfs(o);\n    for(int fa; nrt(o); rot(f[o], !id(o)))\n    if(nrt(fa = f[o])) rot(id(o) ^ id(fa) ? fa : f[fa], !id(o));\n}\nvoid acc(int o) {\n    for(int x = 0; o; o = f[x = o])\n        splay(o), si[o] += s[c[o][1]] - s[x], c[o][1] = x, pu(o);\n}\nvoid mkrt(int o) { acc(o), splay(o), flip(o); }\nvoid link(int u, int v) {\n    mkrt(u), acc(v), splay(v), si[v] += s[u], pu(f[u] = v);\n}\nvoid cut(int u, int v) {\n    mkrt(u), acc(v), splay(v), c[v][0] = f[u] = 0, pu(v);\n}\n```\n\n## RBS 树\n\n### 普通版\n\n#### 定义\n\n```cpp\nint rt, sz, ls[N], rs[N], c[N], s[N];\n```\n\n#### 函数\n\n```cpp\nll gen(ll x) {\n    const ll k = 0x9ddfea08eb382d69ull;\n    rep(i, 1, 3) x *= k, x ^= x >> 47;\n    return x * k;\n}\nint rnd() {\n    static ll s = 2;\n    return (s += gen(s)) & INT_MAX;\n}\nint pu(int o) { s[o] = s[ls[o]] + s[rs[o]] + 1; return o; }\nvoid bld(int l, int r, int& o) {\n    if(l > r) return;\n    int mid = l + r >> 1;\n    c[o = ++sz] = a[mid];\n    bld(l, mid - 1, ls[o]), bld(mid + 1, r, rs[o]), pu(o); \n}\nvoid spt(int o, int x, int& u, int& v) {\n    if(!o) u = v = 0;\n    else if(x < c[o]) spt(ls[v = o], x, u, ls[o]), pu(o);\n    else spt(rs[u = o], x, rs[o], v), pu(o);\n}\nint mrg(int u, int v) {\n    if(!u || !v) return u + v;\n    if(rnd() % (s[u] + s[v]) < s[u])\n        return rs[u] = mrg(rs[u], v), pu(u);\n    return ls[v] = mrg(u, ls[v]), pu(v);\n}\nvoid ins(int& o, int x) {\n    if(rnd() % (s[o] + 1) == 0)\n        c[++sz] = x, spt(o, x, ls[sz], rs[sz]), pu(o = sz);\n    else ins(x < c[o] ? ls[o] : rs[o], x), pu(o);\n}\nvoid rmv(int& o, int x) {\n    int t1, t2, t3;\n    spt(o, x, t1, t3), spt(t1, x - 1, t1, t2);\n    o = mrg(mrg(t1, mrg(ls[t2], rs[t2])), t3);\n}\nint rk(int o, int x, int re = 1) {\n    while(o) o = x > c[o] ? re += s[ls[o]] + 1, rs[o] : ls[o]; \n    return re;\n}\nint kth(int o, int k) {\n    while(k != s[ls[o]] + 1)\n        o = k > s[ls[o]] ? k -= s[ls[o]] + 1, rs[o] : ls[o];\n    return c[o];\n}\nint pre(int o, int x, int re = -Inf) {\n    while(o) o = x > c[o] ? re = max(re, c[o]), rs[o] : ls[o];\n    return re;\n}\nint suf(int o, int x, int re = Inf) {\n    while(o) o = x < c[o] ? re = min(re, c[o]), ls[o] : rs[o];\n    return re;\n}\n```\n\n### 可持久化版\n\n```cpp\n#include <cstdio>\n#include <limits>\n#include <vector>\nusing namespace std;\n\ntypedef long long int64;\n\ninline int64 Fingerprint(int64 x) {\n    const int64 kMul = 0x9ddfea08eb382d69ULL;\n    x *= kMul, x ^= x >> 47;\n    x *= kMul, x ^= x >> 47;\n    x *= kMul, x ^= x >> 47;\n    return x * kMul;\n}\n\ninline int64 Random() {\n    static int64 Seed = 2;\n    Seed += Fingerprint(Seed);\n    return Seed & numeric_limits<int64>::max();\n}\n\ntypedef int DataType;\n\nstruct RBST {\n    RBST *ChildL, *ChildR;\n    int Size;\n    DataType Data;\n\n    RBST() { ChildL = ChildR = 0; }\n};\n\nint GetSize(const RBST* root) { return root ? root->Size : 0; }\n\nint LowerBoundIndex(const RBST* root, DataType x) {\n    if (!root) return 0;\n    if (x <= root->Data) return LowerBoundIndex(root->ChildL, x);\n    int sizeL = GetSize(root->ChildL);\n    return LowerBoundIndex(root->ChildR, x) + sizeL + 1;\n}\n\nDataType Select(const RBST* root, int index) {\n    int sizeL = GetSize(root->ChildL);\n    if (index == sizeL) return root->Data;\n    if (index < sizeL) return Select(root->ChildL, index);\n    return Select(root->ChildR, index - sizeL - 1);\n}\n\nRBST* SetSize(RBST* root) {\n    root->Size = GetSize(root->ChildL) + GetSize(root->ChildR) + 1;\n    return root;\n}\n\nstruct RBSTree {\n    vector<RBST*> Nodes;\n\n    RBST* NewNode(RBST* node) {\n        Nodes.push_back(new RBST(*node));\n        return Nodes.back();\n    }\n\n    void Split(RBST* root, DataType x, RBST*& treeL, RBST*& treeR) {\n        if (!root) {\n            treeL = treeR = 0;\n        } else if (x <= root->Data) {\n            RBST *newRoot = NewNode(root);\n            Split(root->ChildL, x, treeL, newRoot->ChildL);\n            treeR = SetSize(newRoot);\n        } else {\n            RBST* newRoot = NewNode(root);\n            Split(root->ChildR, x, newRoot->ChildR, treeR);\n            treeL = SetSize(newRoot);\n        }\n    }\n\n    RBST* Join(RBST* treeL, RBST* treeR) {\n        int sizeL = GetSize(treeL);\n        int sizeR = GetSize(treeR);\n        int size = sizeL + sizeR;\n        if (size == 0) return 0;\n        if (Random() % size < sizeL) {\n            RBST* newRoot = NewNode(treeL);\n            newRoot->ChildR = Join(treeL->ChildR, treeR);\n            return SetSize(newRoot);\n        } else {\n            RBST* newRoot = NewNode(treeR);\n            newRoot->ChildL = Join(treeL, treeR->ChildL);\n            return SetSize(newRoot);\n        }\n    }\n\n    RBST* InsertAsRoot(RBST* root, DataType item) {\n        Nodes.push_back(new RBST);\n        RBST *newRoot = Nodes.back();\n        newRoot->Data = item;\n        Split(root, item + 1, newRoot->ChildL, newRoot->ChildR);\n        return SetSize(newRoot);\n    }\n\n    RBST* Insert(RBST* root, DataType item) {\n        if (Random() % (GetSize(root) + 1) == 0) {\n            return InsertAsRoot(root, item);\n        } else if (item < root->Data) {\n            RBST *newRoot = NewNode(root);\n            newRoot->ChildL = Insert(root->ChildL, item);\n            return SetSize(newRoot);\n        } else {\n            RBST *newRoot = NewNode(root);\n            newRoot->ChildR = Insert(root->ChildR, item);\n            return SetSize(newRoot);\n        }\n    }\n\n    RBST* Remove(RBST* root, DataType item) {\n        RBST *tree1, *tree2, *tree3, *tree4 = 0;\n        Split(root, item, tree1, tree2);\n        Split(tree2, item + 1, tree2, tree3);\n        if (tree2) tree4 = Join(tree2->ChildL, tree2->ChildR);\n        return Join(Join(tree1, tree4), tree3);\n    }\n\n    void Destroy() {\n        for (int i = 0; i < Nodes.size(); ++i) delete Nodes[i];\n    }\n};\n```\n\n## K-D 树\n\n### 定义\n\n```cpp\n#define mid ((l + r) / 2)\n#define lc o * 2\n#define rc o * 2 + 1\n#define lch l, mid, lc\n#define rch mid + 1, r, rc\n\nint D, L[N * 4][K], R[N * 4][K];\nstruct node {\n    int x[K];\n    void read() { For(i, 0, K) scanf(\"%d\", &x[i]); }\n    bool operator <(const node& b)const {\n        return x[D] < b.x[D];\n    }\n} a[N];\n```\n\n### 函数\n\n```cpp\nlf sq(lf x) { return x * x; }\nvoid pu(int o) {\n    rep(i, 0, 1) {\n        L[o][i] = min(L[lc][i], L[rc][i]);\n        R[o][i] = max(R[lc][i], R[rc][i]);\n    }\n}\nvoid bld(int l, int r, int o) {\n    if(l == r) {\n        For(i, 0, K) L[o][i] = R[o][i] = a[l].x[i];\n        return;\n    }\n    lf va[K] = {};\n    For(i, 0, K) {\n        lf av = 0;\n        rep(j, l, r) av += a[j].x[i];\n        av /= r - l + 1;\n        rep(j, l, r) va[i] += sq(a[j].x[i] - av);\n    }\n    D = max_element(va, va + K) - va;\n    nth_element(a + l, a + mid, a + r + 1);\n    bld(lch), bld(rch), pu(o);\n}\n```\n\n### 欧几里得距离平方\n\n```cpp\nll sq(int x) { return 1ll * x * x; }\nll mine(int o, int x[], ll re = 0) {\n    For(i, 0, K) re += sq(max(L[o][i] - x[i], 0)) + sq(max(x[i] - R[o][i], 0));\n    return re;\n}\nll maxe(int o, int x[], ll re = 0) {\n    For(i, 0, K) re += max(sq(x[i] - L[o][i]), sq(x[i] - R[o][i]));\n    return re;\n}\n```\n\n### 曼哈顿距离\n\n```cpp\nint minm(int o, int x[], int re = 0) {\n    For(i, 0, K) re += max(L[o][i] - x[i], 0) + max(x[i] - R[o][i], 0);\n    return re;\n}\nint maxm(int o, int x[], int re = 0) {\n    For(i, 0, K) re += max(abs(x[i] - L[o][i]), abs(x[i] - R[o][i]));\n    return re;\n}\n```\n\n### 切比雪夫距离\n\n```cpp\nint minc(int o, int x[], int re = Inf) {\n    For(i, 0, K) re = max(re, max(L[o][i] - x[i], 0) + max(x[i] - R[o][i], 0));\n    return re;\n}\nint maxc(int o, int x[], int re = 0) {\n    For(i, 0, K) re = max({re, abs(x[i] - L[o][i]), abs(x[i] - R[o][i])});\n    return re;\n}\n```\n\n### 最近点查询\n\n#### 定义\n\n```cpp\nll res;\n```\n\n#### 函数\n\n```cpp\nvoid qry(int x[], int l, int r, int o) {\n    if(l == r) return void(res = mine(o, x));\n    ll dl = mine(lc, x), dr = mine(rc, x);\n    if(dl < dr) {\n        if(dl < res) qry(x, lch);\n        if(dr < res) qry(x, rch);\n    } else {\n        if(dr < res) qry(x, rch);\n        if(dl < res) qry(x, lch);\n    }\n}\n```\n\n#### 初始化\n\n```cpp\nres = Inf;\n```\n### 最远点查询\n\n#### 定义\n\n```cpp\nll res;\n```\n\n#### 函数\n\n```cpp\nvoid qry(int x[], int l, int r, int o) {\n    if(l == r) return void(res = maxe(o, x));\n    ll dl = maxe(lc, x), dr = maxe(rc, x);\n    if(dl > dr) {\n        if(dl > res) qry(x, lch);\n        if(dr > res) qry(x, rch);\n    } else {\n        if(dr > res) qry(x, rch);\n        if(dl > res) qry(x, lch);\n    }\n}\n```\n\n#### 初始化\n\n```cpp\nres = 0;\n```\n\n### 矩形判定\n\n#### 矩形是否包含所有点\n\n```cpp\nint chk1(int l[], int r[], int o, int re = 1) {\n    For(i, 0, K) re &= l[i] <= L[o][i] && R[o][i] <= r[i];\n    return re;\n}\n```\n\n#### 矩形是否可能包含点\n\n```cpp\nint chk2(int l[], int r[], int o, int re = 1) {\n    For(i, 0, K) re &= max(l[i], L[o][i]) <= min(r[i], R[o][i]);\n    return re;\n}\n```\n\n### 圆判定\n\n#### 圆是否包含所有点\n\n```cpp\nint chk1(int x[], int r, int o) {\n    return maxe(x, o) <= 1ll * r * r;\n}\n```\n\n#### 圆是否可能包含点\n\n```cpp\nint chk2(int x[], int r, int o) {\n    return mine(x, o) <= 1ll * r * r;\n}\n```\n\n# 图论\n\n## 虚树\n\n### `vector` 版\n\n#### 定义\n\n```cpp\nint n, a[N], tp, stk[N];\nint idx, dfn[N], d[N], fa[20][N];\nvector<int> G[N], T[N];\n```\n\n#### 函数\n\n```cpp\nvoid dfs(int u) {\n    dfn[u] = ++idx;\n    rep(i, 1, 19) fa[i][u] = fa[i - 1][fa[i - 1][u]];\n    for(int v : G[u]) if(v ^ fa[0][u])\n        d[v] = d[u] + 1, fa[0][v] = u, dfs(v);\n}\nint lca(int u, int v) {\n    if(d[u] < d[v]) swap(u, v);\n    rep(i, 0, 19) if(d[u] - d[v] >> i & 1) u = fa[i][u];\n    if(u == v) return u;\n    per(i, 19, 0) if(fa[i][u] ^ fa[i][v]) u = fa[i][u], v = fa[i][v];\n    return fa[0][u];\n}\nvoid bld(int k) {\n    sort(a + 1, a + k + 1, [](int a, int b) { return dfn[a] < dfn[b]; });\n    stk[++tp] = 1;\n    rep(i, 1, k) if(a[i] > 1) {\n        int x = lca(a[i], stk[tp]);\n        while(d[stk[tp]] > d[x]) tp--, T[d[stk[tp]] > d[x] ? stk[tp] : x].pb(stk[tp + 1]);\n        if(stk[tp] ^ x) stk[++tp] = x;\n        stk[++tp] = a[i];\n    }\n    while(--tp) T[stk[tp]].pb(stk[tp + 1]);\n}\nvoid clr(int u) {\n    for(int v : G[u]) clr(v); T[u].clear();\n}\n```\n\n### 快很多版\n\n#### 定义\n\n```cpp\nint n, a[N], p, stk[N];\nint d[N], fa[N], sz[N], son[N], tp[N], idx, dfn[N];\nvector<int> G[N];\nint eid, he[N];\nstruct edge { int v, nx; } e[N * 2];\n```\n\n#### 函数\n\n```cpp\nvoid dfs(int u) {\n    sz[u] = 1;\n    for(int v : G[u]) {\n        d[v] = d[u] + 1, dfs(v), sz[u] += sz[v];\n        if(sz[v] > sz[son[u]]) son[u] = v;\n    }\n}\nvoid Dfs(int u, int top) {\n    tp[u] = top, dfn[u] = ++idx;\n    if(son[u]) Dfs(son[u], top);\n    for(int v : G[u]) if(v ^ son[u]) Dfs(v, v);\n}\nint lca(int u, int v) {\n    for(; tp[u] ^ tp[v]; d[tp[u]] > d[tp[v]] ? u = fa[tp[u]] : v = fa[tp[v]]);\n    return d[u] < d[v] ? u : v;\n}\nvoid add(int u, int v, int t = 1) {\n    e[++eid] = {v, h1[u]}, h1[u] = eid;\n}\nvoid bld(int k) {\n    sort(a + 1, a + k + 1, [](int a, int b) { return dfn[a] < dfn[b]; });\n    stk[++p] = 1;\n    rep(i, 1, k) if(a[i] > 1) {\n        int x = lca(a[i], stk[p]);\n        while(d[stk[p]] > d[x])\n            p--, add(d[stk[p]] > d[x] ? stk[p] : x, stk[p + 1]);\n        if(stk[p] ^ x) stk[++p] = x;\n        stk[++p] = a[i];\n    }\n    while(--p) add(stk[p], stk[p + 1]);\n}\n```\n\n## 超快版倍增求 ```LCA```\n\n### 定义\n\n```cpp\nint dl[N], dr[N], fa[20][N];\n```\n\n### 函数\n\n```cpp\nint lca(int u, int v) {\n    if(dl[u] < dl[v]) swap(u, v);\n    if(dl[v] <= dl[u] && dl[u] < dr[v]) return v;\n    per(i, 19, 0) {\n        int x = fa[i][u];\n        if(x && dl[x] > dl[v]) u = x;\n    }\n    return fa[0][u];\n}\n```\n\n## 最大流\n\n### ```int``` 版\n\n#### 定义\n\n```cpp\nint n, m, s, t;\nint eid = 1, he[N], nw[N], d[N], q[N];\nstruct edge { int v, nx, c; } e[M * 2];\n```\n\n#### 函数\n\n```cpp\nvoid add(int u, int v, int c) {\n    e[++eid] = {v, he[u], c}, he[u] = eid;\n    e[++eid] = {u, he[v], 0}, he[v] = eid;\n}\nint bfs() {\n    mem(d, 0), memcpy(nw, he, sizeof he);\n    q[1] = s, d[s] = 1;\n    for(int l = 1, r = 1; l <= r; l++) {\n        int u = q[l];\n        for(int i = he[u], v; v = e[i].v; i = e[i].nx)\n        if(e[i].c && !d[v]) q[++r] = v, d[v] = d[u] + 1;\n    }\n    return d[t];\n}\nint dfs(int u, int lim, int re = 0) {\n    if(u == t) return lim;\n    for(int& i = nw[u], v; v = e[i].v; i = e[i].nx)\n    if(e[i].c && d[v] == d[u] + 1) {\n        int t = dfs(v, min(e[i].c, lim));\n        e[i].c -= t, e[i ^ 1].c += t, re += t, lim -= t;\n        if(!lim) break;\n    }\n    if(lim) d[u] = 0;\n    return re;\n}\n```\n\n#### 使用\n\n```cpp\nint flow = 0;\nwhile(bfs()) flow += dfs(s, Inf);\n```\n\n### ```long long``` 版\n\n```cpp\nint bfs() {\n    mem(d, 0), memcpy(nw, he, sizeof he);\n    q[1] = s, d[s] = 1;\n    for(int l = 1, r = 1; l <= r; l++) {\n        int u = q[l];\n        for(int i = he[u], v; v = e[i].v; i = e[i].nx)\n        if(e[i].c && !d[v]) q[++r] = v, d[v] = d[u] + 1;\n    }\n    return d[t];\n}\nll dfs(int u, ll lim, ll re = 0) {\n    if(u == t) return lim;\n    for(int& i = nw[u], v; v = e[i].v; i = e[i].nx)\n    if(e[i].c && d[v] == d[u] + 1) {\n        ll t = dfs(v, min((ll)e[i].c, lim));\n        e[i].c -= t, e[i ^ 1].c += t, re += t, lim -= t;\n        if(!lim) break;\n    }\n    if(lim) d[u] = 0;\n    return re;\n}\n```\n\n## 最小费用最大流\n\n### SSP 算法\n\n#### 定义\n\n```cpp\nint n, m, s, t, flow, cost;\nint eid = 1, he[N], nw[N], q[N], d[N], vs[N];\nstruct edge { int v, nx, c, w; } e[M * 2];\n```\n\n#### 函数\n\n```cpp\nvoid add(int u, int v, int c, int w) {\n    e[++eid] = {v, he[u], c, w}, he[u] = eid;\n    e[++eid] = {u, he[v], 0, -w}, he[v] = eid;\n}\nint spfa() {\n    mem(d, 63), memcpy(nw, he, sizeof he);\n    q[0] = s, d[s] = 0, vs[s] = 1;\n    for(int l = 0, r = 0; l <= r; l++) {\n        int u = q[l % N]; vs[u] = 0;\n        for(int i = he[u], v; v = e[i].v; i = e[i].nx)\n        if(e[i].c && d[u] + e[i].w < d[v]) {\n            d[v] = d[u] + e[i].w;\n            if(!vs[v]) q[++r % N] = v, vs[v] = 1;\n        }\n    }\n    return d[t] < d[0];\n}\nint dfs(int u, int lim, int re = 0) {\n    if(u == t) return lim;\n    vs[u] = 1;\n    for(int& i = nw[u], v; v = e[i].v; i = e[i].nx)\n    if(!vs[v] && e[i].c && d[v] == d[u] + e[i].w) {\n        int t = dfs(v, min(lim, e[i].c));\n        e[i].c -= t, e[i ^ 1].c += t, re += t, lim -= t, cost += t * e[i].w;\n        if(!lim) break;\n    }\n    if(lim) d[u] = d[0];\n    vs[u] = 0;\n    return re;\n}\n```\n\n#### 使用\n\n```cpp\nwhile(spfa()) flow += dfs(s, 1e9);\n```\n\n### Primal-Dual 原始对偶算法\n\n#### 定义\n\n```cpp\nint n, m, s, t, flow, cost;\nint eid = 1, he[N], d[N], pre[N];\nstruct edge { int v, nx, c, w; } e[M * 2];\nstruct node {\n    int d, u;\n    bool operator <(const node& b)const {\n        return d > b.d;\n    }\n};\n```\n\n#### 函数\n\n```cpp\nvoid add(int u, int v, int c, int w) {\n    e[++eid] = {v, he[u], c, w}, he[u] = eid;\n    e[++eid] = {u, he[v], 0, -w}, he[v] = eid;\n}\nint dji() {\n    priority_queue<node> q;\n    mem(d, 63), q.push({d[s] = 0, s});\n    while(q.size()) {\n        auto [dis, u] = q.top(); q.pop();\n        if(dis > d[u]) continue;\n        for(int i = he[u], v; v = e[i].v; i = e[i].nx) if(e[i].c) {\n            int w = d[u] + e[i].w - h[v] + h[u];\n            if(w < d[v]) pre[v] = i ^ 1, q.push({d[v] = w, v});\n        }\n    }\n    rep(i, 1, n) h[i] += d[i];\n    return d[t] < d[0];\n}\n```\n\n#### 使用\n\n```cpp\nwhile(dji()) {\n    int mi = Inf;\n    for(int u = t, i; i = pre[u]; u = e[i].v) mi = min(mi, e[i ^ 1].c);\n    for(int u = t, i; i = pre[u]; u = e[i].v) e[i].c += mi, e[i ^ 1].c -= mi;\n    flow += mi, cost += mi * h[t];\n}\n```\n\n## 二分图最大匹配\n\n### 定义\n\n```cpp\nint n, m, vs[N], mch[N];\nvector<int> G[N];\n```\n\n### 函数\n\n```cpp\nint dfs(int u, int s) {\n    if(vs[u] == s) return 0;\n    vs[u] = s;\n    for(int v : G[u]) if(!mch[v] || dfs(mch[v], s)) return mch[v] = u;\n    return 0;\n}\n```\n\n### 使用\n\n```cpp\nint as = 0;\nrep(i, 1, n) if(dfs(i, i)) as++;\n```\n\n## 2-SAT 问题\n\n### 定义\n\n```cpp\nint n, m, co[N * 2], stk[N * 2], tp;\nvector<int> G[N * 2];\n```\n\n### 函数\n\n```cpp\nvoid add(int u, int a, int v, int b) {\n    G[u * 2 + !a].pb(v * 2 + b);\n    G[v * 2 + !b].pb(u * 2 + a);\n}\nint dfs(int u) {\n    if(co[u] | co[u ^ 1]) return co[u];\n    co[u] = 1, stk[++tp] = u;\n    for(int v : G[u]) if(!dfs(v)) return 0;\n    return 1;\n}\nint twoSat() {\n    rep(i, 1, n) {\n        if(!co[i * 2] && !co[i * 2 + 1] && !dfs(i * 2)) {\n            while(tp) co[stk[tp--]] = 0;\n            if(!dfs(i * 2 + 1)) return 0;\n        }\n        tp = 0;\n    }\n    return 1;\n}\n```\n\n# 字符串\n\n## manacher 求偶回文串\n\n```cpp\nrep(i, 1, n) {\n    int& j = ma > i ? min(R[p * 2 - i], ma - i) : 0;\n    while(s[i - j] == s[i + j + 1]) j++;\n    if(i + j > ma) ma = i + j, p = i;\n}\n```\n\n## 回文自动机\n\n### 普通版\n\n#### 定义\n\n```cpp\nchar s[N];\nint n, sz = 1, nw, len[N], f[N], ch[N][26];\n```\n\n#### 函数\n```cpp\nvoid ins(int i) {\n    auto jmp = [&](int o) {\n        while(s[i - len[o] - 1] != s[i]) o = f[o];\n        return o;\n    };\n    int o = jmp(nw), c = s[i] - 97;\n    if(!ch[o][c]]) {\n        f[++sz] = ch[jmp(f[o])][c];\n        len[ch[o][c] = sz] = len[o] + 2;\n    }\n    nw = ch[o][c];\n}\n```\n\n#### 预处理\n\n```cpp\nlen[1] = -1, f[0] = 1;\n```\n\n### 偶回文版\n\n#### 函数\n\n```cpp\nvoid ins(int i) {\n    auto jmp = [&](int o) {\n        while(o && s[i - len[o] - 1] != s[i]) o = f[o];\n        return o;\n    };\n    int o = jmp(nw), c = s[i] - 97;\n    if(!ch[o][c]]) {\n        f[++sz] = ch[jmp(f[o])][c];\n        len[ch[o][c] = sz] = len[o] + 2;\n    }\n    nw = ch[o][c];\n}\n```\n\n#### 预处理\n\n```cpp\nrep(i, 0, 25) ch[0][i] = 1;\n```\n\n## 后缀数组\n\n### 定义\n\n```cpp\nint n, m = 128, sa[N], rk[N], tp[N], buc[N];\nint h[20][N];\nchar s[N];\n```\n\n### 函数\n\n```cpp\nvoid SA() {\n    rep(i, 1, n) buc[rk[i] = s[i]]++;\n    rep(i, 1, m) buc[i] += buc[i - 1];\n    per(i, n, 1) sa[buc[rk[i]]--] = i;\n    for(int k = 1, p; memset(buc, p = 0, m * 4 + 4); k *= 2) {\n        rep(i, n - k + 1, n) tp[++p] = i;\n        rep(i, 1, n) if(sa[i] > k) tp[++p] = sa[i] - k;\n        rep(i, 1, n) buc[rk[i]]++;\n        rep(i, 1, m) buc[i] += buc[i - 1];\n        per(i, n, 1) sa[buc[rk[tp[i]]]--] = tp[i];\n        memcpy(tp, rk, n * 4 + 4), p = 0;\n        rep(i, 1, n) rk[sa[i]] = p += tp[sa[i]] ^ tp[sa[i - 1]] || tp[sa[i] + k] ^ tp[sa[i - 1] + k];\n        if((m = p) >= n) break;\n    }\n}\nvoid height() {\n    int k = 0;\n    rep(i, 1, n) {\n        for(k ? k-- : 0; s[i + k] == s[sa[rk[i] - 1] + k]; k++);\n        h[0][rk[i]] = k;\n    }\n    rep(i, 1, 19) rep(j, 1, n - (1 << i) + 1)\n        h[i][j] = min(h[i - 1][j], h[i - 1][j + (1 << (i - 1))]);\n}\n```\n\n## 后缀自动机\n\n### 定义\n\n```cpp\nchar s[N];\nint n, sz = 1, nw = 1, f[N], len[N], ch[N][26];\n```\n\n### 函数\n\n```cpp\nvoid ins(int c) {\n    int u = ++sz;\n    len[u] = len[nw] + 1;\n    while(nw && !ch[nw][c]) ch[nw][c] = u, nw = f[nw];\n    if(!nw) f[u] = 1;\n    else {\n        int v = ch[nw][c];\n        if(len[v] > len[nw] + 1) {\n            f[++sz] = f[v], memcpy(ch[sz], ch[v], sizeof ch[v]);\n            f[v] = f[u] = sz, len[sz] = len[nw] + 1;\n            for(int x = nw; ch[x][c] == v; x = f[x]) ch[x][c] = sz;\n        } else f[u] = v;\n    }\n    nw = u;\n}\n```\n\n## 最小表示法\n\n### 函数\n\n```cpp\nint calc(char s[]) {\n    int i = 0, j = 1, k = 0;\n    while(i < n && j < n && k < n)\n    if(s[(i + k) % n] == s[(j + k) % n]) k++;\n    else {\n        if(s[(i + k) % n] > s[(j + k) % n]) swap(i, j);\n        j += k + 1, k = 0;\n        if(i == j) i++;\n    }\n    return min(i, j);\n}\n```\n","source":"_posts/template.md","raw":"---\ntitle: 模板（持续更新）\ndate: 2021-04-16 16:45:41\nupdated: 2021-04-16 16:45:41\ntags: [模板,持续更新]\nhidden: true\n---\n**左手栏有目录。**\n\n出现的宏：\n\n```cpp\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing ll = long long;\nusing lf = double;\n```\n\n# 有用的模板\n\n## Fast IO\n\n#### 非负整数版\n\n##### 函数\n\n```cpp\nint read() {\n    const int M = 1e6;\n    static streambuf* in = cin.rdbuf();\n    #define gc (p1 == p2 && (p2 = (p1 = buf) + in -> sgetn(buf, M), p1 == p2) ? -1 : *p1++)\n    static char buf[M], *p1, *p2;\n    int c = gc, r = 0;\n    while(c < 48) c = gc;\n    while(c > 47) r = r * 10 + (c & 15), c = gc;\n    return r;\n}\nvoid wrt(int x) {\n    static streambuf* out = cout.rdbuf();\n    #define pc out -> sputc\n    static char c[11]; int sz = 0;\n    do c[++sz] = x % 10, x /= 10; while(x);\n    while(sz) pc(c[sz--] + 48);\n    pc(10);\n}\n```\n\n##### 预处理\n\n```cpp\nios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n```\n\n#### 整数版\n\n```cpp\nint read() {\n    const int M = 1e6;\n    static streambuf* in = cin.rdbuf();\n    #define gc (p1 == p2 && (p2 = (p1 = buf) + in -> sgetn(buf, M), p1 == p2) ? -1 : *p1++)\n    static char buf[M], *p1, *p2;\n    int c = gc, r = 0, f = 1;\n    while(c < 48) { if(c == 45) f = -1; c = gc; }\n    while(c > 47) r = r * 10 + (c & 15), c = gc;\n    return r * f;\n}\nvoid wrt(int x) {\n    static streambuf* out = cout.rdbuf();\n    #define pc out -> sputc\n    static char c[11]; int sz = 0;\n    if(x < 0) pc(45), x = -x;\n    do c[++sz] = x % 10, x /= 10; while(x);\n    while(sz) pc(c[sz--] + 48);\n    pc(10);\n}\n```\n\n**注：输出 ```long long``` 时 ```wrt``` 函数中的 ```c``` 数组大小要开到 $20$。**\n\n## AtCoder-modint\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\nusing ll = long long;\nusing uint = unsigned;\nusing ull = unsigned ll;\n\nconstexpr ll safe_mod(ll x, ll m) {\n    return x %= m, x < 0 ? x + m : x;\n}\nconstexpr ll pow_mod_constexpr(ll x, ll n, int m) {\n    if(m == 1) return 0;\n    uint _m = m;\n    ull r = 1, _x = safe_mod(x, m);\n    for(; n; n >>= 1, _x = _x * _x % _m)\n    if(n & 1) r = r * _x % m;\n    return r;\n}\nconstexpr bool is_prime_constexpr(int n) {\n    if(n <= 1) return false;\n    if(n == 2 || n == 7 || n == 61) return true;\n    if(n % 2 == 0) return false;\n    ll d = n - 1;\n    while(~d & 1) d /= 2;\n    for(ll a : {2, 7, 61}) {\n        ll t = d, y = pow_mod_constexpr(a, t, n);\n        while(t != n - 1 && y != 1 && y != n - 1)\n            y = y * y % n, t <<= 1;\n        if(y != n - 1 && t % 2 == 0) return false;\n    }\n    return true;\n}\nconstexpr pair<ll, ll> inv_gcd(ll a, ll b) {\n    a = safe_mod(a, b);\n    if(a == 0) return {b, 0};\n    ll s = b, t = a, m0 = 0, m1 = 1;\n    while(t) {\n        ll u = s / t;\n        s -= t * u, m0 -= m1 * u;\n        ll tmp = s;\n        s = t, t = tmp, tmp = m0, m0 = m1, m1 = tmp;\n    }\n    if(m0 < 0) m0 += b / s;\n    return {s, m0};\n}\nstruct barrett {\n    uint m; ull im;\n    barrett(uint m) :m(m), im(~0ull / m + 1) {}\n    uint mul(uint a, uint b) const {\n        ull z = (ull)a * b;\n        ull x = (unsigned __int128)z * im >> 64;\n        uint v = z - x * m;\n        return m <= v ? v + m : v;\n    }\n};\ntemplate<int m> struct static_modint {\n    using mint = static_modint;\n  public:\n    static mint raw(int v) {\n        mint x;\n        return x._v = v, x;\n    }\n    static_modint() : _v(0) {}\n    template<class T> static_modint(T v) {\n        ll x = v % m;\n        _v = x < 0 ? x + m : x;\n    }\n    uint val() const { return _v; }\n    mint& operator++() {\n        if(++_v == m) _v = 0;\n        return *this;\n    }\n    mint& operator--() {\n        if(!_v--) _v = m - 1;\n        return *this;\n    }\n    mint operator++(int) {\n        mint res = *this;\n        ++*this;\n        return res;\n    }\n    mint operator--(int) {\n        mint res = *this;\n        --*this;\n        return res;\n    }\n    mint& operator+=(const mint& rhs) {\n        _v += rhs._v;\n        if(_v >= m) _v -= m;\n        return *this;\n    }\n    mint& operator-=(const mint& rhs) {\n        _v -= rhs._v;\n        if(_v >= m) _v += m;\n        return *this;\n    }\n    mint& operator*=(const mint& rhs) {\n        ull z = _v;\n        z *= rhs._v, _v = z % m;\n        return *this;\n    }\n    mint& operator/=(const mint& rhs) { return *this = *this * rhs.inv(); }\n    mint operator+() const { return *this; }\n    mint operator-() const { return mint() - *this; }\n\n    mint pow(ll n) const {\n        assert(0 <= n);\n        mint x = *this, r = 1;\n        for(; n; n >>= 1, x *= x) if(n & 1) r *= x;\n        return r;\n    }\n    mint inv() const {\n        if(prime) {\n            assert(_v);\n            return pow(m - 2);\n        } else {\n            auto eg = inv_gcd(_v, m);\n            assert(eg.first == 1);\n            return eg.second;\n        }\n    }\n\n    friend mint operator+(const mint& lhs, const mint& rhs) {\n        return mint(lhs) += rhs;\n    }\n    friend mint operator-(const mint& lhs, const mint& rhs) {\n        return mint(lhs) -= rhs;\n    }\n    friend mint operator*(const mint& lhs, const mint& rhs) {\n        return mint(lhs) *= rhs;\n    }\n    friend mint operator/(const mint& lhs, const mint& rhs) {\n        return mint(lhs) /= rhs;\n    }\n    friend bool operator==(const mint& lhs, const mint& rhs) {\n        return lhs._v == rhs._v;\n    }\n    friend bool operator!=(const mint& lhs, const mint& rhs) {\n        return lhs._v != rhs._v;\n    }\n\n  private:\n    uint _v;\n    static constexpr bool prime = is_prime_constexpr(m);\n};\n\ntemplate<int id> struct dynamic_modint {\n    using mint = dynamic_modint;\n\n  public:\n    static void set_mod(int m) {\n        assert(1 <= m), bt = barrett(m);\n    }\n    static mint raw(int v) {\n        mint x;\n        return x._v = v, x;\n    }\n\n    dynamic_modint() : _v(0) {}\n    template<class T> dynamic_modint(T v) {\n        ll x = v % bt.m;\n        _v = x < 0 ? x + bt.m : x;\n    }\n\n    uint val() const { return _v; }\n\n    mint& operator++() {\n        if(++_v == bt.m) _v = 0;\n        return *this;\n    }\n    mint& operator--() {\n        if(!_v--) _v = bt.m - 1;\n        return *this;\n    }\n    mint operator++(int) {\n        mint res = *this;\n        ++*this;\n        return res;\n    }\n    mint operator--(int) {\n        mint res = *this;\n        --*this;\n        return res;\n    }\n\n    mint& operator+=(const mint& rhs) {\n        _v += rhs._v;\n        if(_v >= bt.m) _v -= bt.m;\n        return *this;\n    }\n    mint& operator-=(const mint& rhs) {\n        _v += bt.m - rhs._v;\n        if(_v >= bt.m) _v -= bt.m;\n        return *this;\n    }\n    mint& operator*=(const mint& rhs) {\n        _v = bt.mul(_v, rhs._v);\n        return *this;\n    }\n    mint& operator/=(const mint& rhs) { return *this = *this * rhs.inv(); }\n\n    mint operator+() const { return *this; }\n    mint operator-() const { return mint() - *this; }\n\n    mint pow(ll n) const {\n        assert(0 <= n);\n        mint x = *this, r = 1;\n        for(; n; n >>= 1, x *= x) if(n & 1) r *= x;\n        return r;\n    }\n    mint inv() const {\n        auto eg = inv_gcd(_v, bt.m);\n        assert(eg.first == 1);\n        return eg.second;\n    }\n\n    friend mint operator+(const mint& lhs, const mint& rhs) {\n        return mint(lhs) += rhs;\n    }\n    friend mint operator-(const mint& lhs, const mint& rhs) {\n        return mint(lhs) -= rhs;\n    }\n    friend mint operator*(const mint& lhs, const mint& rhs) {\n        return mint(lhs) *= rhs;\n    }\n    friend mint operator/(const mint& lhs, const mint& rhs) {\n        return mint(lhs) /= rhs;\n    }\n    friend bool operator==(const mint& lhs, const mint& rhs) {\n        return lhs._v == rhs._v;\n    }\n    friend bool operator!=(const mint& lhs, const mint& rhs) {\n        return lhs._v != rhs._v;\n    }\n\n  private:\n    uint _v;\n    static barrett bt;\n};\ntemplate<int id> barrett dynamic_modint<id>::bt = 998244353;\n```\n\n## 打比赛专用模板\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\nusing ll = long long;\nusing uint = unsigned;\nusing ull = unsigned ll;\n\nconstexpr ll safe_mod(ll x, ll m) { return x %= m, x < 0 ? x + m : x; }\nconstexpr ll pow_mod_constexpr(ll x, ll n, int m) {\n    if(m == 1) return 0;\n    uint _m = m; ull r = 1, _x = safe_mod(x, m);\n    for(; n; n >>= 1, _x = _x * _x % _m) if(n & 1) r = r * _x % m;\n    return r;\n}\nconstexpr bool is_prime_constexpr(int n) {\n    if(n <= 1) return false;\n    if(n == 2 || n == 7 || n == 61) return true;\n    if(n % 2 == 0) return false;\n    ll d = n - 1; while(~d & 1) d /= 2;\n    for(ll a : {2, 7, 61}) {\n        ll t = d, y = pow_mod_constexpr(a, t, n);\n        while(t != n - 1 && y != 1 && y != n - 1) y = y * y % n, t <<= 1;\n        if(y != n - 1 && t % 2 == 0) return false;\n    }\n    return true;\n}\nconstexpr pair<ll, ll> inv_gcd(ll a, ll b) {\n    a = safe_mod(a, b);\n    if(a == 0) return {b, 0};\n    ll s = b, t = a, m0 = 0, m1 = 1;\n    while(t) {\n        ll u = s / t; s -= t * u, m0 -= m1 * u;\n        ll tmp = s; s = t, t = tmp, tmp = m0, m0 = m1, m1 = tmp;\n    }\n    if(m0 < 0) m0 += b / s;\n    return {s, m0};\n}\nstruct barrett {\n    uint m; ull im;\n    barrett(uint m) :m(m), im(~0ull / m + 1) {}\n    uint mul(uint a, uint b) const {\n        ull z = (ull)a * b; ull x = (unsigned __int128)z * im >> 64; uint v = z - x * m;\n        return m <= v ? v + m : v;\n    }\n};\ntemplate<int m> struct static_modint {\n    using mint = static_modint;\n  public:\n    static mint raw(int v) { mint x; return x._v = v, x; }\n    static_modint() : _v(0) {}\n    template<class T> static_modint(T v) { ll x = v % m; _v = x < 0 ? x + m : x; }\n    uint val() const { return _v; }\n    mint& operator++() { if(++_v == m) _v = 0; return *this; }\n    mint& operator--() { if(!_v--) _v = m - 1; return *this; }\n    mint operator++(int) { mint res = *this; ++*this; return res; }\n    mint operator--(int) { mint res = *this; --*this; return res; }\n    mint& operator+=(const mint& rhs) { _v += rhs._v; if(_v >= m) _v -= m; return *this; }\n    mint& operator-=(const mint& rhs) { _v -= rhs._v; if(_v >= m) _v += m; return *this; }\n    mint& operator*=(const mint& rhs) { ull z = _v; z *= rhs._v, _v = z % m; return *this; }\n    mint& operator/=(const mint& rhs) { return *this = *this * rhs.inv(); }\n    mint operator+() const { return *this; }\n    mint operator-() const { return mint() - *this; }\n    mint pow(ll n) const { assert(0 <= n); mint x = *this, r = 1; for(; n; n >>= 1, x *= x) if(n & 1) r *= x; return r; }\n    mint inv() const { if(prime) { assert(_v); return pow(m - 2); } else { auto eg = inv_gcd(_v, m); assert(eg.first == 1); return eg.second; } }\n    friend mint operator+(const mint& lhs, const mint& rhs) { return mint(lhs) += rhs; }\n    friend mint operator-(const mint& lhs, const mint& rhs) { return mint(lhs) -= rhs; }\n    friend mint operator*(const mint& lhs, const mint& rhs) { return mint(lhs) *= rhs; }\n    friend mint operator/(const mint& lhs, const mint& rhs) { return mint(lhs) /= rhs; }\n    friend bool operator==(const mint& lhs, const mint& rhs) { return lhs._v == rhs._v; }\n    friend bool operator!=(const mint& lhs, const mint& rhs) { return lhs._v != rhs._v; }\n  private:\n    uint _v;\n    static constexpr bool prime = is_prime_constexpr(m);\n};\ntemplate<int id> struct dynamic_modint {\n    using mint = dynamic_modint;\n  public:\n    static void set_mod(int m) { assert(1 <= m), bt = barrett(m); }\n    static mint raw(int v) { mint x; return x._v = v, x; }\n    dynamic_modint() : _v(0) {}\n    template<class T> dynamic_modint(T v) { ll x = v % bt.m; _v = x < 0 ? x + bt.m : x; }\n    uint val() const { return _v; }\n    mint& operator++() { if(++_v == bt.m) _v = 0; return *this; }\n    mint& operator--() { if(!_v--) _v = bt.m - 1; return *this; }\n    mint operator++(int) { mint res = *this; ++*this; return res; }\n    mint operator--(int) { mint res = *this; --*this; return res; }\n    mint& operator+=(const mint& rhs) { _v += rhs._v; if(_v >= bt.m) _v -= bt.m; return *this; }\n    mint& operator-=(const mint& rhs) { _v += bt.m - rhs._v; if(_v >= bt.m) _v -= bt.m; return *this; }\n    mint& operator*=(const mint& rhs) { _v = bt.mul(_v, rhs._v); return *this; }\n    mint& operator/=(const mint& rhs) { return *this = *this * rhs.inv(); }\n    mint operator+() const { return *this; }\n    mint operator-() const { return mint() - *this; }\n    mint pow(ll n) const { assert(0 <= n); mint x = *this, r = 1; for(; n; n >>= 1, x *= x) if(n & 1) r *= x; return r; }\n    mint inv() const { auto eg = inv_gcd(_v, bt.m); assert(eg.first == 1); return eg.second; }\n    friend mint operator+(const mint& lhs, const mint& rhs) { return mint(lhs) += rhs; }\n    friend mint operator-(const mint& lhs, const mint& rhs) { return mint(lhs) -= rhs; }\n    friend mint operator*(const mint& lhs, const mint& rhs) { return mint(lhs) *= rhs; }\n    friend mint operator/(const mint& lhs, const mint& rhs) { return mint(lhs) /= rhs; }\n    friend bool operator==(const mint& lhs, const mint& rhs) { return lhs._v == rhs._v; }\n    friend bool operator!=(const mint& lhs, const mint& rhs) { return lhs._v != rhs._v; }\n  private:\n    uint _v;\n    static barrett bt;\n};\ntemplate<int id> barrett dynamic_modint<id>::bt = 998244353;\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n#define eb emplace_back\n#define fi first \n#define se second\n#define all(x) (x).begin(), (x).end()\n#define SZ(x) int((x).size())\n#define mid ((l + r) / 2)\n#define lc o * 2\n#define rc o * 2 + 1\n#define lch l, mid, lc\n#define rch mid + 1, r, rc\n#define cmi(a, b) (a = min(a, b))\n#define cma(a, b) (a = max(a, b))\n#define lb lower_bound\n#define ub upper_bound\n#define bs binary_search\n#define pop __builtin_popcount\n#define llpop __builtin_popcountll\n#define ctz __builtin_ctz\n#define llctz __builtin_ctzll\n#define clz __builtin_clz\n#define llclz __builtin_clzll\n#define par __builtin_parity\n#define llpar __builtin_parityll\n\nusing lf = double;\n// using P = pair<int, int>;\nusing V = vector<int>;\n// using cmp = complex<lf>;\n\nvoid solve() {\n    \n}\nint main() {\n    // ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n#ifdef local\n    // freopen(\".in\", \"r\", stdin);\n#endif\n    int T;\n    for(cin >> T; T--; solve());\n}\n```\n\n## 随机数\n\n### 函数\n\n```cpp\nll gen(ll x) {\n    const ll k = 0x9ddfea08eb382d69ull;\n    rep(i, 1, 3) x *= k, x ^= x >> 47;\n    return x * k;\n}\nll rnd() {\n    static ll s = 2;\n    return (s += gen(s)) & LONG_LONG_MAX;\n}\n```\n\n##  大模数取模\n\n### 函数\n\n```cpp\nll mul(ll a, ll b, ll p) {\n    return (a * b - ll((long double)a / p * b + 0.5) * p + p) % p;\n}\n```\n\n### `bash` 对拍\n\n```bash\n#!/bin/bash\nwhile true; do\n    ./gen > in\n    ./a < in > 1\n    ./b < in > 2\n    diff 1 2\n    if [ $? -ne 0 ] ; then break; fi\ndone\n```\n\n## 简易计算器\n\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n\nusing namespace std;\nusing ll = long long;\n\nll mul(ll a, ll b, ll p) {\n    return (a * b - ll((long double)a / p * b + 0.5) * p + p) % p;\n}\nll Pow(ll a, ll n, ll p, ll r = 1) {\n    for(; n; n /= 2, a = mul(a, a, p))\n    if(n & 1) r = mul(r, a, p);\n    return r;\n}\n\nnamespace Pollard_Rho {\n    int chk(ll n) {\n        for(ll a : {2, 3, 7, 61, 24251}) {\n            if(n == a) return 1;\n            if(Pow(a, n - 1, n) ^ 1) return 0;\n            ll k = n - 1, t;\n            while(~k & 1) k /= 2;\n            if((t = Pow(a, k, n)) == 1) continue;\n            while(t ^ 1 && t ^ n - 1) t = mul(t, t, n);\n            if(t ^ n - 1) return 0;\n        }\n        return 1;\n    }\n    ll f(ll x, ll c, ll p) { return (mul(x, x, p) + c) % p; }\n    ll PR(ll n) {\n        ll a = 0, b = 0, c = rand() % (n - 1) + 1, v = 1, g;\n        for(int k = 1; ; k *= 2, a = b, v = 1) {\n            rep(i, 1, k) {\n                b = f(b, c, n), v = mul(v, abs(a - b), n);\n                if(!(i & 127) || i == k) {\n                    g = __gcd(v, n);\n                    if(g > 1) return g;\n                }\n            }\n        }\n    }\n    ll ans[100]; int ct;\n    void solve(ll n) {\n        if(chk(n)) return void(ans[++ct] = n);\n        ll d; do d = PR(n); while(d == n);\n        solve(d), solve(n / d);\n    }\n    void work() {\n        ll n;\n        while(cin >> n) {\n            ct = 0;\n            if(chk(n)) { puts(\"Prime\"); continue; }\n            solve(n), sort(ans + 1, ans + ct + 1);\n            int t = 0;\n            rep(i, 1, ct) {\n                if(ans[i] ^ ans[i - 1]) cout << ans[i];\n                t++; if(ans[i] ^ ans[i + 1]) {\n                    if(t > 1) cout << '^' << t;\n                    putchar(32), t = 0;\n                }\n            } putchar(10);\n        }\n    }\n};\nnamespace Inv {\n    void exgcd(ll a, ll b, ll& d, ll& x, ll& y) {\n        if(b) exgcd(b, a % b, d, y, x), y -= a / b * x;\n        else d = a, x = 1, y = 0;\n    }\n    void inv(ll a, ll p) {\n        ll d, x, y; exgcd(a, p, d, x, y);\n        if(d > 1) puts(\"Non-existent!\");\n        else cout << (x % p + p) % p;\n    }\n    void work() {\n        ll a, p;\n        while(cin >> a >> p) inv(a, p);\n    }\n};\nnamespace Prime {\n    void work() {\n        ll n;\n        while(cin >> n) {\n            while(!Pollard_Rho::chk(n)) n++;\n            cout << n << endl;\n        }\n    }\n};\nnamespace Cipolla {\n    ll n, p, II;\n    struct cmp {\n        ll r, i;\n        cmp operator *(const cmp& b) {\n            return {(r * b.r + i * b.i % p * II) % p, (r * b.i + i * b.r) % p };\n        }\n    } U = { 1, 0 };\n    int pow1(ll a, int n, ll r = 1) {\n        for(; n; n /= 2, a = a * a % p)\n        if(n & 1) r = r * a % p;\n        return r;\n    }\n    cmp pow2(cmp a, int n, cmp r = U) {\n        for(; n; n /= 2, a = a * a)\n        if(n & 1) r = r * a;\n        return r;\n    }\n    void work() {\n        while(cin >> n >> p) {\n            if(!n) { puts(\"0\"); continue; }\n            if(p == 2) { cout << n << endl; continue; }\n            if(pow1(n, p / 2) ^ 1) { puts(\"Non-existent!\"); continue; }\n            ll a;\n            do a = rand() % p, II = (a * a - n + p) % p; while(!a || pow1(II, p / 2) == 1);\n            int x1 = pow2({a, 1}, p / 2 + 1).r, x2 = p - x1;\n            if(x1 > x2) swap(x1, x2);\n            printf(\"%d %d\\n\", x1, x2);\n        }\n    }\n}; \nint main() {\n    srand(time(0));\n    puts(\"Press 1 for integer factorization.\");\n    puts(\"Press 2 to calculate the modular multiplicative inverse of a number.\");\n    puts(\"Press 3 to find the first prime number greater than or equal to a number.\");\n    puts(\"Press 4 to calculate the modular square root of a number.\");\n    int op;\n    while(1) {\n        cin >> op;\n        if(op == 1) Pollard_Rho::work();\n        else if(op == 2) Inv::work();\n        else if(op == 3) Prime::work();\n        else if(op == 4) Cipolla::work();\n        else puts(\"Illegal input! Please re-enter your option.\");\n    }\n}\n```\n\n# 数学\n\n## NTT\n\n### 普通版\n\n#### 定义\n\n```cpp\nint lim = 1, bit = -1, rev[N];\n```\n\n#### 函数\n\n```cpp\nll Pow(ll a, int n, ll r = 1) {\n    for(; n; n /= 2, a = a * a % P)\n    if(n & 1) r = r * a % P;\n    return r;\n}\nvoid NTT(ll a[], int t) {\n    if(t) reverse(a + 1, a + lim);\n    For(i, 0, lim) if(rev[i] < i) swap(a[i], a[rev[i]]);\n    for(int i = 1; i < lim; i *= 2) {\n        ll wn = Pow(3, P / 2 / i);\n        for(int j = 0; j < lim; j += i * 2) {\n            ll w = 1;\n            For(k, j, j + i) {\n                ll &x = a[k], y = a[k + i] * w % P;\n                a[k + i] = (x - y) % P, (x += y) %= P, w = w * wn % P;\n            }\n        }\n    }\n    ll inv = Pow(lim, P - 2);\n    if(t) For(i, 0, lim) (a[i] *= inv) %= P;\n}\n```\n\n`modint` 版\n\n```cpp\nvoid NTT(mint a[], int t) {\n    if(t) reverse(a + 1, a + lim);\n    For(i, 0, lim) if(rev[i] < i) swap(a[i], a[rev[i]]);\n    for(int i = 1; i < lim; i *= 2) {\n        mint wn = mint(3).pow(P / 2 / i);\n        for(int j = 0; j < lim; j += i * 2) {\n            mint w = 1;\n            For(k, j, j + i) {\n                mint &x = a[k], y = a[k + i] * w;\n                a[k + i] = x - y, x += y, w *= wn;\n            }\n        }\n    }\n    mint inv = mint(lim).inv();\n    if(t) For(i, 0, lim) a[i] *= inv;\n}\n```\n\n#### 预处理\n\n```cpp\nwhile(lim <= n + m) lim *= 2, bit++;\nFor(i, 0, lim) rev[i] = rev[i / 2] / 2 | (i & 1) << bit;\n```\n\n### 多次做时较快版\n\n#### 定义\n\n```cpp\nll w[N];\nint lim = 1, bit = -1, rev[N]; \n```\n\n`modint` 版\n\n```cpp\nmint w[N];\nint lim = 1, bit = -1, rev[N]; \n```\n\n#### 函数\n\n```cpp\nvoid mod(ll& x) { if(x >= P) x -= P; if(x < 0) x += P; }\nll Pow(ll a, int n, ll r = 1) {\n    for(; n; n /= 2, a = a * a % P)\n    if(n & 1) r = r * a % P;\n    return r;\n}\nvoid NTT(ll a[], int t) {\n    if(t) reverse(a + 1, a + lim);\n    For(i, 0, lim) if(rev[i] < i) swap(a[i], a[rev[i]]);\n    for(int i = 1; i < lim; i *= 2)\n    for(int j = 0; j < lim; j += i * 2) For(k, j, j + i) {\n        ll &x = a[k], y = a[k + i] * w[lim / i * (k - j)] % P;\n        mod(a[k + i] = x - y), mod(x += y);\n    }\n    ll inv = Pow(lim, P - 2);\n    if(t) For(i, 0, lim) (a[i] *= inv) %= P;\n}\n```\n\n`modint` 版\n\n```cpp\nvoid NTT(mint a[], int t) {\n    if(t) reverse(a + 1, a + lim);\n    For(i, 0, lim) if(rev[i] < i) swap(a[i], a[rev[i]]);\n    for(int i = 1; i < lim; i *= 2)\n    for(int j = 0; j < lim; j += i * 2) For(k, j, j + i) {\n        mint &x = a[k], y = a[k + i] * w[lim / i * (k - j)];\n        a[k + i] = x - y, x += y;\n    }\n    mint inv = mint(lim).inv();\n    if(t) For(i, 0, lim) a[i] *= inv;\n}\n```\n\n#### 预处理\n\n```cpp\nwhile(lim <= n + m) lim *= 2, bit++;\nll wn = Pow(3, P / 2 / lim);\nFor(i, 0, lim) {\n    rev[i] = rev[i / 2] / 2 | (i & 1) << bit;\n    w[i] = i ? w[i - 1] * wn % P : 1;\n}\n```\n\n`modint` 版\n\n```cpp\nwhile(lim <= n + m) lim *= 2, bit++;\nmint wn = mint(3).pow(P / 2 / lim);\nFor(i, 0, lim) {\n    rev[i] = rev[i / 2] / 2 | (i & 1) << bit;\n    w[i] = i ? w[i - 1] * wn : 1;\n}\n```\n\n## 任意模数 NTT\n\n### 定义\n\n```cpp\nusing cmp = complex<lf>;\nconst lf PI = acos(-1);\nconst cmp I(0, 1);\n\nint n, m, P;\nint M, lim = 1, bit = -1, rev[N];\ncmp w[N], a0[N], a1[N], b0[N], b1[N];\n```\n\n`modint` 版\n\n```cpp\nusing cmp = complex<lf>;\nconst lf PI = acos(-1);\n\nint n, m, P;\nint M, lim = 1, bit = -1, rev[N];\ncmp w[N], a0[N], a1[N], b0[N], b1[N];\n```\n\n### 函数\n\n```cpp\nvoid FFT(cmp a[], int t) {\n    if(t) reverse(a + 1, a + lim);\n    For(i, 0, lim) if(i < rev[i]) swap(a[i], a[rev[i]]);\n    for(int i = 1; i < lim; i *= 2) for(int j = 0; j < lim; j += i * 2) For(k, j, j + i) {\n        cmp &x = a[k], y = a[i + k] * w[lim / i * (k - j)];\n        a[i + k] = x - y, x += y;\n    }\n    lf inv = 1. / lim;\n    if(t) For(i, 0, lim) a[i] *= inv;\n}\nvoid FFT2(cmp a[], cmp b[]) {\n    For(i, 0, lim) a[i] += b[i] * I;\n    FFT(a, 0);\n    For(i, 0, lim) b[i] = conj(a[i ? lim - i : 0]);\n    For(i, 0, lim) {\n        cmp x = a[i], y = b[i];\n        a[i] = (y + x) * 0.5, b[i] = (y - x) * 0.5 * I;\n    }\n}\nll num(cmp x) { return M * ll(real(x) + 0.5) % P + ll(imag(x) + 0.5); }\n```\n\n`modint` 版\n\n```cpp\nvoid FFT(cmp a[], int t) {\n    if(t) reverse(a + 1, a + lim);\n    For(i, 0, lim) if(i < rev[i]) swap(a[i], a[rev[i]]);\n    for(int i = 1; i < lim; i *= 2) for(int j = 0; j < lim; j += i * 2) For(k, j, j + i) {\n        cmp &x = a[k], y = a[i + k] * w[lim / i * (k - j)];\n        a[i + k] = x - y, x += y;\n    }\n    lf inv = 1. / lim;\n    if(t) For(i, 0, lim) a[i] *= inv;\n}\nvoid FFT2(cmp a[], cmp b[]) {\n    For(i, 0, lim) a[i] += b[i] * 1i;\n    FFT(a, 0);\n    For(i, 0, lim) b[i] = conj(a[i ? lim - i : 0]);\n    For(i, 0, lim) {\n        cmp x = a[i], y = b[i];\n        a[i] = (y + x) * 0.5, b[i] = (y - x) * 0.5i;\n    }\n}\nmint num(cmp x) { return M * (mint)ll(real(x) + 0.5) % P + (mint)ll(imag(x) + 0.5); }\n```\n\n### 预处理\n\n```cpp\nM = sqrt(P);\nrep(i, 0, n) a0[i] = A[i] / M, a1[i] = A[i] % M;\nrep(i, 0, m) b0[i] = B[i] / M, b1[i] = B[i] % M;\nwhile(lim <= n + m) lim *= 2, bit++;\nFor(i, 0, lim) {\n    rev[i] = rev[i / 2] / 2 | (i & 1) << bit;\n    w[i] = cmp(cos(PI / lim * i), sin(PI / lim * i));\n}\n```\n\n### 使用\n\n```cpp\nFFT2(a0, a1), FFT2(b0, b1);\nFor(i, 0, lim) {\n    cmp t = a0[i] + I * a1[i];\n    b0[i] *= t, b1[i] *= t;\n}\nFFT(b0, 1), FFT(b1, 1);\nrep(i, 0, n + m) C[i] = (M * num(b0[i]) + num(b1[i])) % P;\n```\n\n`modint` 版\n\n```cpp\nFFT2(a0, a1), FFT2(b0, b1);\nFor(i, 0, lim) {\n    cmp t = a0[i] + I * a1[i];\n    b0[i] *= t, b1[i] *= t;\n}\nFFT(b0, 1), FFT(b1, 1);\nrep(i, 0, n + m) C[i] = M * num(b0[i]) + num(b1[i]);\n```\n\n## FWT\n\n### 函数\n\n```cpp\nvoid FWT(ll a[]) {\n    For(i, 0, n) For(S, 0, 1 << n) if(S >> i & 1) {\n        ll& x = a[S ^ 1 << i], y = a[S];\n        a[S] = x - y, x += y;\n    }\n}\nvoid IFWT(ll a[]) {\n    For(i, 0, n) For(S, 0, 1 << n) if(S >> i & 1) {\n        ll& x = a[S ^ 1 << i], y = a[S];\n        a[S] = x - y >> 1, x = x + y >> 1;\n    }\n}\n```\n\n## 多项式求逆\n\n### 定义\n\n```cpp\nint n, lim, rev[N];\n```\n\n### 函数\n\n```cpp\nll Pow(ll a, int n, ll r = 1) {\n    for(; n; n /= 2, a = a * a % P)\n    if(n & 1) r = r * a % P;\n    return r;\n}\nvoid bld(int n) {\n    lim = 1 << n--;\n    For(i, 0, lim) rev[i] = rev[i / 2] / 2 | (i & 1) << n;\n}\nvoid NTT(ll a[], int t) {\n    if(t) reverse(a + 1, a + lim);\n    For(i, 0, lim) if(i < rev[i]) swap(a[i], a[rev[i]]);\n    for(int i = 1; i < lim; i *= 2) {\n        ll wn = Pow(g, P / 2 / i);\n        for(int j = 0; j < lim; j += i * 2) {\n            ll w = 1;\n            For(k, j, j + i) {\n                ll &x = a[k], y = a[k + i] * w % P;\n                a[k + i] = (x - y) % P, (x += y) %= P, w = w * wn % P;\n            }\n        }\n    }\n    ll inv = Pow(lim, P - 2);\n    if(t) For(i, 0, lim) (a[i] *= inv) %= P;\n}\nvoid Inv(ll a[], ll b[], int n) {\n    static ll c[N];\n    For(i, 0, 2 << n) b[i] = c[i] = 0;\n    b[0] = Pow(a[0], P - 2);\n    rep(i, 1, n) {\n        For(j, 0, 1 << i) c[j] = a[j];\n        bld(i + 1), NTT(c, 0), NTT(b, 0);\n        For(j, 0, lim) b[j] = (b[j] * 2 - b[j] * b[j] % P * c[j]) % P;\n        NTT(b, 1);\n        For(j, 1 << i, lim) b[j] = 0;\n    }\n}\n```\n\n`modint` 版\n\n```cpp\nvoid bld(int n) {\n    lim = 1 << n--;\n    For(i, 0, lim) rev[i] = rev[i / 2] / 2 | (i & 1) << n;\n}\nvoid NTT(mint a[], int t) {\n    if(t) reverse(a + 1, a + lim);\n    For(i, 0, lim) if(rev[i] < i) swap(a[i], a[rev[i]]);\n    for(int i = 1; i < lim; i *= 2) {\n        mint wn = mint(3).pow(P / 2 / i);\n        for(int j = 0; j < lim; j += i * 2) {\n            mint w = 1;\n            For(k, j, j + i) {\n                mint &x = a[k], y = a[k + i] * w;\n                a[k + i] = x - y, x += y, w *= wn;\n            }\n        }\n    }\n    mint inv = mint(lim).inv();\n    if(t) For(i, 0, lim) a[i] *= inv;\n}\nvoid Inv(mint a[], mint b[], int n) {\n    static mint c[N];\n    For(i, 0, 2 << n) b[i] = c[i] = 0;\n    b[0] = a[0].inv();\n    rep(i, 1, n) {\n        For(j, 0, 1 << i) c[j] = a[j];\n        bld(i + 1), NTT(c, 0), NTT(b, 0);\n        For(j, 0, lim) b[j] = b[j] * 2 - b[j] * b[j] * c[j];\n        NTT(b, 1);\n        For(j, 1 << i, lim) b[j] = 0;\n    }\n}\n```\n\n## 自然数等幂求和\n\n## 中国剩余定理\n\n## 扩展中国剩余定理\n\n```cpp\nll mul(ll a, ll b, ll p) {\n    return (a * b - (ll)((long double)a / p * b + 0.5) * p + p) % p;\n}\nvoid exgcd(ll a, ll b, ll& d, ll& x, ll& y) {\n    if(!b) { d = a, x = 1, y = 0; return; }\n    exgcd(b, a % b, d, y, x), y -= a / b * x;\n}\nvoid exCRT(ll& b1, ll& m1, ll b2, ll m2) {\n    ll d, k1, k2; exgcd(m1, m2, d, k1, k2), m2 /= d;\n    b1 = (b1 + mul(mul(k1 % m2, (b2 - b1) / d % m2, m2), m1, m1 * m2)) % (m1 *= m2);\n}\n```\n\n## 杜教筛\n\n## Min-25 筛\n\n### 定义\n\n```cpp\nll f1[N], f2[N];\n```\n\n### 函数\n\n```cpp\nll min25(ll n) {\n    int lim = sqrt(n);\n    rep(i, 1, lim) f1[i] = i - 1, f2[i] = n / i - 1;\n    rep(p, 2, lim) if (f1[p] ^ f1[p - 1]) {\n        int w1 = lim / p;\n        ll x = f1[p - 1], w3 = (ll)p * p, w2 = min((ll)lim, n / w3), d = n / p;\n        rep(i, 1, w1) f2[i] -= f2[i * p] - x;\n        rep(i, w1 + 1, w2) f2[i] -= f1[d / i] - x;\n        per(i, lim, w3) f1[i] -= f1[i / p] - x;\n    }\n    return f2[1];\n}\n```\n\n## exBSGS\n\n### 定义\n\n```cpp\nmap<int, int> mp;\n```\n\n### 函数\n\n```cpp\nint BSGS(ll pls, ll a, ll b, ll p) {\n    pls %= p, a %= p, b %= p; mp.clear();\n    ll m = ceil(sqrt(p)), ls = 1, rs = 1;\n    For(i, 0, m) mp[ls * b % p] = i, ls = ls * a % p;\n    rep(i, 1, m) {\n        rs = rs * ls % p;\n        if(mp.count(rs * pls % p)) return i * m - mp[rs * pls % p];\n    }\n    return -1;\n}\nint exBSGS(ll a, ll b, ll p) {\n    a %= p, b %= p;\n    int pls = 1, ct = 0, g;\n    while((g = __gcd(a, p)) > 1) {\n        if(b == 1) return ct;\n        p /= g, pls = pls * a / g % p, ct++;\n        if(b % g) return -1; b /= g;\n    }\n    int ret = BSGS(pls, a, b, p);\n    return ~ret ? ret + ct : -1;\n}\n```\n\n## cipolla\n\n### 定义\n\n```cpp\nint n; ll II;\nstruct cmp {\n    ll r, i;\n    cmp operator *(const cmp& b) {\n        return {(r * b.r + i * b.i % P * II) % P, (r * b.i + i * b.r) % P};\n    }\n} U = {1, 0};\n```\n\n`modint` 版\n\n```cpp\nmint n, II;\nstruct cmp {\n    mint r, i;\n    cmp operator *(const cmp& b) {\n        return {r * b.r + i * b.i * II, r * b.i + i * b.r};\n    }\n} U = {1, 0};\n```\n\n### 函数\n\n```cpp\nint pow1(ll a, int n, ll r = 1) {\n    for(; n; n /= 2, a = a * a % P)\n    if(n & 1) r = r * a % P;\n    return r;\n}\ncmp pow2(cmp a, int n, cmp r = U) {\n    for(; n; n /= 2, a = a * a)\n    if(n & 1) r = r * a;\n    return r;\n}\nint cipolla(int n) {\n    if(!n) return 0;\n    if(P == 2) return n;\n    if(pow1(n, P / 2) ^ 1) return -1;\n    ll a;\n    do a = rand() % P, II = (a * a - n + P) % P; while(!a || pow1(II, P / 2) == 1);\n    return pow2({a, 1}, P / 2 + 1).r;\n}\n```\n\n`modint` 版\n\n```cpp\ncmp Pow(cmp a, int n, cmp r = U) {\n    for(; n; n /= 2, a = a * a)\n    if(n & 1) r = r * a;\n    return r;\n}\nint cipolla(mint n) {\n    if(n == 0) return 0;\n    if(P == 2) return n.val();\n    if(n.pow(P / 2) != 1) return -1;\n    mint a;\n    do a = rand(), II = a * a - n; while(a == 0 || II.pow(P / 2) == 1);\n    return Pow({a, 1}, P / 2 + 1).r.val();\n}\n```\n\n## Miller Rabin & Pollard Rho\n\n### 定义\n\n```cpp\nvector<ll> as;\n```\n\n### 函数\n\n```cpp\nll mul(ll a, ll b, ll p) {\n    return (a * b - ll((long double)a / p * b + 0.5) * p + p) % p;\n}\nll Pow(ll a, ll n, ll p, ll r = 1) {\n    for(; n; n /= 2, a = mul(a, a, p))\n    if(n & 1) r = mul(r, a, p);\n    return r;\n}\nint chk(ll n) {\n    for(ll a : {2, 3, 7, 61, 24251}) {\n        if(n == a) return 1;\n        if(Pow(a, n - 1, n) ^ 1) return 0;\n        ll k = n - 1, t;\n        while(~k & 1) k /= 2;\n        if((t = Pow(a, k, n)) == 1) continue;\n        while(t ^ 1 && t ^ n - 1) t = mul(t, t, n);\n        if(t ^ n - 1) return 0;\n    }\n    return 1;\n}\nll f(ll x, ll c, ll p) { return (mul(x, x, p) + c) % p; }\nll PR(ll n) {\n    ll a = 0, b = 0, c = rand() % (n - 1) + 1, v = 1, g;\n    for(int k = 1; ; k *= 2, a = b, v = 1) {\n        rep(i, 1, k) {\n            b = f(b, c, n), v = mul(v, abs(a - b), n);\n            if(!(i & 127) || i == k) {\n                g = __gcd(v, n);\n                if(g > 1) return g;\n            }\n        }\n    }\n}\nvoid solve(ll n) {\n    if(chk(n)) return as.pb(n);\n    ll d; do d = PR(n); while(d == n);\n    solve(d), solve(n / d);\n}\n```\n\n# 数据结构\n\n## 动态树\n\n### 普通版\n\n#### 定义\n\n```cpp\nint c[N][2], f[N], r[N];\n```\n\n#### 函数\n\n```cpp\nint id(int o) { return c[f[o]][1] == o; }\nint nrt(int o) { return f[o] && c[f[o]][id(o)] == o; }\nvoid pu(int o) {\n    \n}\nvoid flip(int o) {\n    swap(c[o][0], c[o][1]), r[o] ^= 1;\n}\nvoid pd(int o) { if(r[o]) flip(c[o][0]), flip(c[o][1]), r[o] = 0; }\nvoid rot(int o, int d) {\n    int k = c[o][!d], &x = c[k][d];\n    if(nrt(o)) c[f[o]][id(o)] = k;\n    pu(x = f[c[o][!d] = x] = o), f[k] = f[o], pu(f[o] = k);\n}\nvoid dfs(int o) { if(nrt(o)) dfs(f[o]); pd(o); }\nvoid splay(int o) {\n    dfs(o);\n    for(int fa; nrt(o); rot(f[o], !id(o)))\n    if(nrt(fa = f[o])) rot(id(o) ^ id(fa) ? fa : f[fa], !id(o));\n}\nvoid acc(int o) {\n    for(int x = 0; o; o = f[x = o])\n        splay(o), c[o][1] = x, pu(o);\n}\nvoid mkrt(int o) { acc(o), splay(o), flip(o); }\nvoid link(int u, int v) {\n    mkrt(u), acc(v), splay(v), pu(f[u] = v);\n}\nvoid cut(int u, int v) {\n    mkrt(u), acc(v), splay(v), c[v][0] = f[u] = 0, pu(v);\n}\n```\n\n### 维护子树 ```size``` 版\n\n#### 定义\n\n```cpp\nint c[N][2], f[N], r[N], s[N], si[N];\n```\n\n#### 函数\n\n```cpp\nint id(int o) { return c[f[o]][1] == o; }\nint nrt(int o) { return f[o] && c[f[o]][id(o)] == o; }\nvoid pu(int o) {\n    s[o] = s[c[o][0]] + s[c[o][1]] + si[o] + 1;\n}\nvoid flip(int o) {\n    swap(c[o][0], c[o][1]), r[o] ^= 1;\n}\nvoid pd(int o) { if(r[o]) flip(c[o][0]), flip(c[o][1]), r[o] = 0; }\nvoid rot(int o, int d) {\n    int k = c[o][!d], &x = c[k][d];\n    if(nrt(o)) c[f[o]][id(o)] = k;\n    pu(x = f[c[o][!d] = x] = o), f[k] = f[o], pu(f[o] = k);\n}\nvoid dfs(int o) { if(nrt(o)) dfs(f[o]); pd(o); }\nvoid splay(int o) {\n    dfs(o);\n    for(int fa; nrt(o); rot(f[o], !id(o)))\n    if(nrt(fa = f[o])) rot(id(o) ^ id(fa) ? fa : f[fa], !id(o));\n}\nvoid acc(int o) {\n    for(int x = 0; o; o = f[x = o])\n        splay(o), si[o] += s[c[o][1]] - s[x], c[o][1] = x, pu(o);\n}\nvoid mkrt(int o) { acc(o), splay(o), flip(o); }\nvoid link(int u, int v) {\n    mkrt(u), acc(v), splay(v), si[v] += s[u], pu(f[u] = v);\n}\nvoid cut(int u, int v) {\n    mkrt(u), acc(v), splay(v), c[v][0] = f[u] = 0, pu(v);\n}\n```\n\n## RBS 树\n\n### 普通版\n\n#### 定义\n\n```cpp\nint rt, sz, ls[N], rs[N], c[N], s[N];\n```\n\n#### 函数\n\n```cpp\nll gen(ll x) {\n    const ll k = 0x9ddfea08eb382d69ull;\n    rep(i, 1, 3) x *= k, x ^= x >> 47;\n    return x * k;\n}\nint rnd() {\n    static ll s = 2;\n    return (s += gen(s)) & INT_MAX;\n}\nint pu(int o) { s[o] = s[ls[o]] + s[rs[o]] + 1; return o; }\nvoid bld(int l, int r, int& o) {\n    if(l > r) return;\n    int mid = l + r >> 1;\n    c[o = ++sz] = a[mid];\n    bld(l, mid - 1, ls[o]), bld(mid + 1, r, rs[o]), pu(o); \n}\nvoid spt(int o, int x, int& u, int& v) {\n    if(!o) u = v = 0;\n    else if(x < c[o]) spt(ls[v = o], x, u, ls[o]), pu(o);\n    else spt(rs[u = o], x, rs[o], v), pu(o);\n}\nint mrg(int u, int v) {\n    if(!u || !v) return u + v;\n    if(rnd() % (s[u] + s[v]) < s[u])\n        return rs[u] = mrg(rs[u], v), pu(u);\n    return ls[v] = mrg(u, ls[v]), pu(v);\n}\nvoid ins(int& o, int x) {\n    if(rnd() % (s[o] + 1) == 0)\n        c[++sz] = x, spt(o, x, ls[sz], rs[sz]), pu(o = sz);\n    else ins(x < c[o] ? ls[o] : rs[o], x), pu(o);\n}\nvoid rmv(int& o, int x) {\n    int t1, t2, t3;\n    spt(o, x, t1, t3), spt(t1, x - 1, t1, t2);\n    o = mrg(mrg(t1, mrg(ls[t2], rs[t2])), t3);\n}\nint rk(int o, int x, int re = 1) {\n    while(o) o = x > c[o] ? re += s[ls[o]] + 1, rs[o] : ls[o]; \n    return re;\n}\nint kth(int o, int k) {\n    while(k != s[ls[o]] + 1)\n        o = k > s[ls[o]] ? k -= s[ls[o]] + 1, rs[o] : ls[o];\n    return c[o];\n}\nint pre(int o, int x, int re = -Inf) {\n    while(o) o = x > c[o] ? re = max(re, c[o]), rs[o] : ls[o];\n    return re;\n}\nint suf(int o, int x, int re = Inf) {\n    while(o) o = x < c[o] ? re = min(re, c[o]), ls[o] : rs[o];\n    return re;\n}\n```\n\n### 可持久化版\n\n```cpp\n#include <cstdio>\n#include <limits>\n#include <vector>\nusing namespace std;\n\ntypedef long long int64;\n\ninline int64 Fingerprint(int64 x) {\n    const int64 kMul = 0x9ddfea08eb382d69ULL;\n    x *= kMul, x ^= x >> 47;\n    x *= kMul, x ^= x >> 47;\n    x *= kMul, x ^= x >> 47;\n    return x * kMul;\n}\n\ninline int64 Random() {\n    static int64 Seed = 2;\n    Seed += Fingerprint(Seed);\n    return Seed & numeric_limits<int64>::max();\n}\n\ntypedef int DataType;\n\nstruct RBST {\n    RBST *ChildL, *ChildR;\n    int Size;\n    DataType Data;\n\n    RBST() { ChildL = ChildR = 0; }\n};\n\nint GetSize(const RBST* root) { return root ? root->Size : 0; }\n\nint LowerBoundIndex(const RBST* root, DataType x) {\n    if (!root) return 0;\n    if (x <= root->Data) return LowerBoundIndex(root->ChildL, x);\n    int sizeL = GetSize(root->ChildL);\n    return LowerBoundIndex(root->ChildR, x) + sizeL + 1;\n}\n\nDataType Select(const RBST* root, int index) {\n    int sizeL = GetSize(root->ChildL);\n    if (index == sizeL) return root->Data;\n    if (index < sizeL) return Select(root->ChildL, index);\n    return Select(root->ChildR, index - sizeL - 1);\n}\n\nRBST* SetSize(RBST* root) {\n    root->Size = GetSize(root->ChildL) + GetSize(root->ChildR) + 1;\n    return root;\n}\n\nstruct RBSTree {\n    vector<RBST*> Nodes;\n\n    RBST* NewNode(RBST* node) {\n        Nodes.push_back(new RBST(*node));\n        return Nodes.back();\n    }\n\n    void Split(RBST* root, DataType x, RBST*& treeL, RBST*& treeR) {\n        if (!root) {\n            treeL = treeR = 0;\n        } else if (x <= root->Data) {\n            RBST *newRoot = NewNode(root);\n            Split(root->ChildL, x, treeL, newRoot->ChildL);\n            treeR = SetSize(newRoot);\n        } else {\n            RBST* newRoot = NewNode(root);\n            Split(root->ChildR, x, newRoot->ChildR, treeR);\n            treeL = SetSize(newRoot);\n        }\n    }\n\n    RBST* Join(RBST* treeL, RBST* treeR) {\n        int sizeL = GetSize(treeL);\n        int sizeR = GetSize(treeR);\n        int size = sizeL + sizeR;\n        if (size == 0) return 0;\n        if (Random() % size < sizeL) {\n            RBST* newRoot = NewNode(treeL);\n            newRoot->ChildR = Join(treeL->ChildR, treeR);\n            return SetSize(newRoot);\n        } else {\n            RBST* newRoot = NewNode(treeR);\n            newRoot->ChildL = Join(treeL, treeR->ChildL);\n            return SetSize(newRoot);\n        }\n    }\n\n    RBST* InsertAsRoot(RBST* root, DataType item) {\n        Nodes.push_back(new RBST);\n        RBST *newRoot = Nodes.back();\n        newRoot->Data = item;\n        Split(root, item + 1, newRoot->ChildL, newRoot->ChildR);\n        return SetSize(newRoot);\n    }\n\n    RBST* Insert(RBST* root, DataType item) {\n        if (Random() % (GetSize(root) + 1) == 0) {\n            return InsertAsRoot(root, item);\n        } else if (item < root->Data) {\n            RBST *newRoot = NewNode(root);\n            newRoot->ChildL = Insert(root->ChildL, item);\n            return SetSize(newRoot);\n        } else {\n            RBST *newRoot = NewNode(root);\n            newRoot->ChildR = Insert(root->ChildR, item);\n            return SetSize(newRoot);\n        }\n    }\n\n    RBST* Remove(RBST* root, DataType item) {\n        RBST *tree1, *tree2, *tree3, *tree4 = 0;\n        Split(root, item, tree1, tree2);\n        Split(tree2, item + 1, tree2, tree3);\n        if (tree2) tree4 = Join(tree2->ChildL, tree2->ChildR);\n        return Join(Join(tree1, tree4), tree3);\n    }\n\n    void Destroy() {\n        for (int i = 0; i < Nodes.size(); ++i) delete Nodes[i];\n    }\n};\n```\n\n## K-D 树\n\n### 定义\n\n```cpp\n#define mid ((l + r) / 2)\n#define lc o * 2\n#define rc o * 2 + 1\n#define lch l, mid, lc\n#define rch mid + 1, r, rc\n\nint D, L[N * 4][K], R[N * 4][K];\nstruct node {\n    int x[K];\n    void read() { For(i, 0, K) scanf(\"%d\", &x[i]); }\n    bool operator <(const node& b)const {\n        return x[D] < b.x[D];\n    }\n} a[N];\n```\n\n### 函数\n\n```cpp\nlf sq(lf x) { return x * x; }\nvoid pu(int o) {\n    rep(i, 0, 1) {\n        L[o][i] = min(L[lc][i], L[rc][i]);\n        R[o][i] = max(R[lc][i], R[rc][i]);\n    }\n}\nvoid bld(int l, int r, int o) {\n    if(l == r) {\n        For(i, 0, K) L[o][i] = R[o][i] = a[l].x[i];\n        return;\n    }\n    lf va[K] = {};\n    For(i, 0, K) {\n        lf av = 0;\n        rep(j, l, r) av += a[j].x[i];\n        av /= r - l + 1;\n        rep(j, l, r) va[i] += sq(a[j].x[i] - av);\n    }\n    D = max_element(va, va + K) - va;\n    nth_element(a + l, a + mid, a + r + 1);\n    bld(lch), bld(rch), pu(o);\n}\n```\n\n### 欧几里得距离平方\n\n```cpp\nll sq(int x) { return 1ll * x * x; }\nll mine(int o, int x[], ll re = 0) {\n    For(i, 0, K) re += sq(max(L[o][i] - x[i], 0)) + sq(max(x[i] - R[o][i], 0));\n    return re;\n}\nll maxe(int o, int x[], ll re = 0) {\n    For(i, 0, K) re += max(sq(x[i] - L[o][i]), sq(x[i] - R[o][i]));\n    return re;\n}\n```\n\n### 曼哈顿距离\n\n```cpp\nint minm(int o, int x[], int re = 0) {\n    For(i, 0, K) re += max(L[o][i] - x[i], 0) + max(x[i] - R[o][i], 0);\n    return re;\n}\nint maxm(int o, int x[], int re = 0) {\n    For(i, 0, K) re += max(abs(x[i] - L[o][i]), abs(x[i] - R[o][i]));\n    return re;\n}\n```\n\n### 切比雪夫距离\n\n```cpp\nint minc(int o, int x[], int re = Inf) {\n    For(i, 0, K) re = max(re, max(L[o][i] - x[i], 0) + max(x[i] - R[o][i], 0));\n    return re;\n}\nint maxc(int o, int x[], int re = 0) {\n    For(i, 0, K) re = max({re, abs(x[i] - L[o][i]), abs(x[i] - R[o][i])});\n    return re;\n}\n```\n\n### 最近点查询\n\n#### 定义\n\n```cpp\nll res;\n```\n\n#### 函数\n\n```cpp\nvoid qry(int x[], int l, int r, int o) {\n    if(l == r) return void(res = mine(o, x));\n    ll dl = mine(lc, x), dr = mine(rc, x);\n    if(dl < dr) {\n        if(dl < res) qry(x, lch);\n        if(dr < res) qry(x, rch);\n    } else {\n        if(dr < res) qry(x, rch);\n        if(dl < res) qry(x, lch);\n    }\n}\n```\n\n#### 初始化\n\n```cpp\nres = Inf;\n```\n### 最远点查询\n\n#### 定义\n\n```cpp\nll res;\n```\n\n#### 函数\n\n```cpp\nvoid qry(int x[], int l, int r, int o) {\n    if(l == r) return void(res = maxe(o, x));\n    ll dl = maxe(lc, x), dr = maxe(rc, x);\n    if(dl > dr) {\n        if(dl > res) qry(x, lch);\n        if(dr > res) qry(x, rch);\n    } else {\n        if(dr > res) qry(x, rch);\n        if(dl > res) qry(x, lch);\n    }\n}\n```\n\n#### 初始化\n\n```cpp\nres = 0;\n```\n\n### 矩形判定\n\n#### 矩形是否包含所有点\n\n```cpp\nint chk1(int l[], int r[], int o, int re = 1) {\n    For(i, 0, K) re &= l[i] <= L[o][i] && R[o][i] <= r[i];\n    return re;\n}\n```\n\n#### 矩形是否可能包含点\n\n```cpp\nint chk2(int l[], int r[], int o, int re = 1) {\n    For(i, 0, K) re &= max(l[i], L[o][i]) <= min(r[i], R[o][i]);\n    return re;\n}\n```\n\n### 圆判定\n\n#### 圆是否包含所有点\n\n```cpp\nint chk1(int x[], int r, int o) {\n    return maxe(x, o) <= 1ll * r * r;\n}\n```\n\n#### 圆是否可能包含点\n\n```cpp\nint chk2(int x[], int r, int o) {\n    return mine(x, o) <= 1ll * r * r;\n}\n```\n\n# 图论\n\n## 虚树\n\n### `vector` 版\n\n#### 定义\n\n```cpp\nint n, a[N], tp, stk[N];\nint idx, dfn[N], d[N], fa[20][N];\nvector<int> G[N], T[N];\n```\n\n#### 函数\n\n```cpp\nvoid dfs(int u) {\n    dfn[u] = ++idx;\n    rep(i, 1, 19) fa[i][u] = fa[i - 1][fa[i - 1][u]];\n    for(int v : G[u]) if(v ^ fa[0][u])\n        d[v] = d[u] + 1, fa[0][v] = u, dfs(v);\n}\nint lca(int u, int v) {\n    if(d[u] < d[v]) swap(u, v);\n    rep(i, 0, 19) if(d[u] - d[v] >> i & 1) u = fa[i][u];\n    if(u == v) return u;\n    per(i, 19, 0) if(fa[i][u] ^ fa[i][v]) u = fa[i][u], v = fa[i][v];\n    return fa[0][u];\n}\nvoid bld(int k) {\n    sort(a + 1, a + k + 1, [](int a, int b) { return dfn[a] < dfn[b]; });\n    stk[++tp] = 1;\n    rep(i, 1, k) if(a[i] > 1) {\n        int x = lca(a[i], stk[tp]);\n        while(d[stk[tp]] > d[x]) tp--, T[d[stk[tp]] > d[x] ? stk[tp] : x].pb(stk[tp + 1]);\n        if(stk[tp] ^ x) stk[++tp] = x;\n        stk[++tp] = a[i];\n    }\n    while(--tp) T[stk[tp]].pb(stk[tp + 1]);\n}\nvoid clr(int u) {\n    for(int v : G[u]) clr(v); T[u].clear();\n}\n```\n\n### 快很多版\n\n#### 定义\n\n```cpp\nint n, a[N], p, stk[N];\nint d[N], fa[N], sz[N], son[N], tp[N], idx, dfn[N];\nvector<int> G[N];\nint eid, he[N];\nstruct edge { int v, nx; } e[N * 2];\n```\n\n#### 函数\n\n```cpp\nvoid dfs(int u) {\n    sz[u] = 1;\n    for(int v : G[u]) {\n        d[v] = d[u] + 1, dfs(v), sz[u] += sz[v];\n        if(sz[v] > sz[son[u]]) son[u] = v;\n    }\n}\nvoid Dfs(int u, int top) {\n    tp[u] = top, dfn[u] = ++idx;\n    if(son[u]) Dfs(son[u], top);\n    for(int v : G[u]) if(v ^ son[u]) Dfs(v, v);\n}\nint lca(int u, int v) {\n    for(; tp[u] ^ tp[v]; d[tp[u]] > d[tp[v]] ? u = fa[tp[u]] : v = fa[tp[v]]);\n    return d[u] < d[v] ? u : v;\n}\nvoid add(int u, int v, int t = 1) {\n    e[++eid] = {v, h1[u]}, h1[u] = eid;\n}\nvoid bld(int k) {\n    sort(a + 1, a + k + 1, [](int a, int b) { return dfn[a] < dfn[b]; });\n    stk[++p] = 1;\n    rep(i, 1, k) if(a[i] > 1) {\n        int x = lca(a[i], stk[p]);\n        while(d[stk[p]] > d[x])\n            p--, add(d[stk[p]] > d[x] ? stk[p] : x, stk[p + 1]);\n        if(stk[p] ^ x) stk[++p] = x;\n        stk[++p] = a[i];\n    }\n    while(--p) add(stk[p], stk[p + 1]);\n}\n```\n\n## 超快版倍增求 ```LCA```\n\n### 定义\n\n```cpp\nint dl[N], dr[N], fa[20][N];\n```\n\n### 函数\n\n```cpp\nint lca(int u, int v) {\n    if(dl[u] < dl[v]) swap(u, v);\n    if(dl[v] <= dl[u] && dl[u] < dr[v]) return v;\n    per(i, 19, 0) {\n        int x = fa[i][u];\n        if(x && dl[x] > dl[v]) u = x;\n    }\n    return fa[0][u];\n}\n```\n\n## 最大流\n\n### ```int``` 版\n\n#### 定义\n\n```cpp\nint n, m, s, t;\nint eid = 1, he[N], nw[N], d[N], q[N];\nstruct edge { int v, nx, c; } e[M * 2];\n```\n\n#### 函数\n\n```cpp\nvoid add(int u, int v, int c) {\n    e[++eid] = {v, he[u], c}, he[u] = eid;\n    e[++eid] = {u, he[v], 0}, he[v] = eid;\n}\nint bfs() {\n    mem(d, 0), memcpy(nw, he, sizeof he);\n    q[1] = s, d[s] = 1;\n    for(int l = 1, r = 1; l <= r; l++) {\n        int u = q[l];\n        for(int i = he[u], v; v = e[i].v; i = e[i].nx)\n        if(e[i].c && !d[v]) q[++r] = v, d[v] = d[u] + 1;\n    }\n    return d[t];\n}\nint dfs(int u, int lim, int re = 0) {\n    if(u == t) return lim;\n    for(int& i = nw[u], v; v = e[i].v; i = e[i].nx)\n    if(e[i].c && d[v] == d[u] + 1) {\n        int t = dfs(v, min(e[i].c, lim));\n        e[i].c -= t, e[i ^ 1].c += t, re += t, lim -= t;\n        if(!lim) break;\n    }\n    if(lim) d[u] = 0;\n    return re;\n}\n```\n\n#### 使用\n\n```cpp\nint flow = 0;\nwhile(bfs()) flow += dfs(s, Inf);\n```\n\n### ```long long``` 版\n\n```cpp\nint bfs() {\n    mem(d, 0), memcpy(nw, he, sizeof he);\n    q[1] = s, d[s] = 1;\n    for(int l = 1, r = 1; l <= r; l++) {\n        int u = q[l];\n        for(int i = he[u], v; v = e[i].v; i = e[i].nx)\n        if(e[i].c && !d[v]) q[++r] = v, d[v] = d[u] + 1;\n    }\n    return d[t];\n}\nll dfs(int u, ll lim, ll re = 0) {\n    if(u == t) return lim;\n    for(int& i = nw[u], v; v = e[i].v; i = e[i].nx)\n    if(e[i].c && d[v] == d[u] + 1) {\n        ll t = dfs(v, min((ll)e[i].c, lim));\n        e[i].c -= t, e[i ^ 1].c += t, re += t, lim -= t;\n        if(!lim) break;\n    }\n    if(lim) d[u] = 0;\n    return re;\n}\n```\n\n## 最小费用最大流\n\n### SSP 算法\n\n#### 定义\n\n```cpp\nint n, m, s, t, flow, cost;\nint eid = 1, he[N], nw[N], q[N], d[N], vs[N];\nstruct edge { int v, nx, c, w; } e[M * 2];\n```\n\n#### 函数\n\n```cpp\nvoid add(int u, int v, int c, int w) {\n    e[++eid] = {v, he[u], c, w}, he[u] = eid;\n    e[++eid] = {u, he[v], 0, -w}, he[v] = eid;\n}\nint spfa() {\n    mem(d, 63), memcpy(nw, he, sizeof he);\n    q[0] = s, d[s] = 0, vs[s] = 1;\n    for(int l = 0, r = 0; l <= r; l++) {\n        int u = q[l % N]; vs[u] = 0;\n        for(int i = he[u], v; v = e[i].v; i = e[i].nx)\n        if(e[i].c && d[u] + e[i].w < d[v]) {\n            d[v] = d[u] + e[i].w;\n            if(!vs[v]) q[++r % N] = v, vs[v] = 1;\n        }\n    }\n    return d[t] < d[0];\n}\nint dfs(int u, int lim, int re = 0) {\n    if(u == t) return lim;\n    vs[u] = 1;\n    for(int& i = nw[u], v; v = e[i].v; i = e[i].nx)\n    if(!vs[v] && e[i].c && d[v] == d[u] + e[i].w) {\n        int t = dfs(v, min(lim, e[i].c));\n        e[i].c -= t, e[i ^ 1].c += t, re += t, lim -= t, cost += t * e[i].w;\n        if(!lim) break;\n    }\n    if(lim) d[u] = d[0];\n    vs[u] = 0;\n    return re;\n}\n```\n\n#### 使用\n\n```cpp\nwhile(spfa()) flow += dfs(s, 1e9);\n```\n\n### Primal-Dual 原始对偶算法\n\n#### 定义\n\n```cpp\nint n, m, s, t, flow, cost;\nint eid = 1, he[N], d[N], pre[N];\nstruct edge { int v, nx, c, w; } e[M * 2];\nstruct node {\n    int d, u;\n    bool operator <(const node& b)const {\n        return d > b.d;\n    }\n};\n```\n\n#### 函数\n\n```cpp\nvoid add(int u, int v, int c, int w) {\n    e[++eid] = {v, he[u], c, w}, he[u] = eid;\n    e[++eid] = {u, he[v], 0, -w}, he[v] = eid;\n}\nint dji() {\n    priority_queue<node> q;\n    mem(d, 63), q.push({d[s] = 0, s});\n    while(q.size()) {\n        auto [dis, u] = q.top(); q.pop();\n        if(dis > d[u]) continue;\n        for(int i = he[u], v; v = e[i].v; i = e[i].nx) if(e[i].c) {\n            int w = d[u] + e[i].w - h[v] + h[u];\n            if(w < d[v]) pre[v] = i ^ 1, q.push({d[v] = w, v});\n        }\n    }\n    rep(i, 1, n) h[i] += d[i];\n    return d[t] < d[0];\n}\n```\n\n#### 使用\n\n```cpp\nwhile(dji()) {\n    int mi = Inf;\n    for(int u = t, i; i = pre[u]; u = e[i].v) mi = min(mi, e[i ^ 1].c);\n    for(int u = t, i; i = pre[u]; u = e[i].v) e[i].c += mi, e[i ^ 1].c -= mi;\n    flow += mi, cost += mi * h[t];\n}\n```\n\n## 二分图最大匹配\n\n### 定义\n\n```cpp\nint n, m, vs[N], mch[N];\nvector<int> G[N];\n```\n\n### 函数\n\n```cpp\nint dfs(int u, int s) {\n    if(vs[u] == s) return 0;\n    vs[u] = s;\n    for(int v : G[u]) if(!mch[v] || dfs(mch[v], s)) return mch[v] = u;\n    return 0;\n}\n```\n\n### 使用\n\n```cpp\nint as = 0;\nrep(i, 1, n) if(dfs(i, i)) as++;\n```\n\n## 2-SAT 问题\n\n### 定义\n\n```cpp\nint n, m, co[N * 2], stk[N * 2], tp;\nvector<int> G[N * 2];\n```\n\n### 函数\n\n```cpp\nvoid add(int u, int a, int v, int b) {\n    G[u * 2 + !a].pb(v * 2 + b);\n    G[v * 2 + !b].pb(u * 2 + a);\n}\nint dfs(int u) {\n    if(co[u] | co[u ^ 1]) return co[u];\n    co[u] = 1, stk[++tp] = u;\n    for(int v : G[u]) if(!dfs(v)) return 0;\n    return 1;\n}\nint twoSat() {\n    rep(i, 1, n) {\n        if(!co[i * 2] && !co[i * 2 + 1] && !dfs(i * 2)) {\n            while(tp) co[stk[tp--]] = 0;\n            if(!dfs(i * 2 + 1)) return 0;\n        }\n        tp = 0;\n    }\n    return 1;\n}\n```\n\n# 字符串\n\n## manacher 求偶回文串\n\n```cpp\nrep(i, 1, n) {\n    int& j = ma > i ? min(R[p * 2 - i], ma - i) : 0;\n    while(s[i - j] == s[i + j + 1]) j++;\n    if(i + j > ma) ma = i + j, p = i;\n}\n```\n\n## 回文自动机\n\n### 普通版\n\n#### 定义\n\n```cpp\nchar s[N];\nint n, sz = 1, nw, len[N], f[N], ch[N][26];\n```\n\n#### 函数\n```cpp\nvoid ins(int i) {\n    auto jmp = [&](int o) {\n        while(s[i - len[o] - 1] != s[i]) o = f[o];\n        return o;\n    };\n    int o = jmp(nw), c = s[i] - 97;\n    if(!ch[o][c]]) {\n        f[++sz] = ch[jmp(f[o])][c];\n        len[ch[o][c] = sz] = len[o] + 2;\n    }\n    nw = ch[o][c];\n}\n```\n\n#### 预处理\n\n```cpp\nlen[1] = -1, f[0] = 1;\n```\n\n### 偶回文版\n\n#### 函数\n\n```cpp\nvoid ins(int i) {\n    auto jmp = [&](int o) {\n        while(o && s[i - len[o] - 1] != s[i]) o = f[o];\n        return o;\n    };\n    int o = jmp(nw), c = s[i] - 97;\n    if(!ch[o][c]]) {\n        f[++sz] = ch[jmp(f[o])][c];\n        len[ch[o][c] = sz] = len[o] + 2;\n    }\n    nw = ch[o][c];\n}\n```\n\n#### 预处理\n\n```cpp\nrep(i, 0, 25) ch[0][i] = 1;\n```\n\n## 后缀数组\n\n### 定义\n\n```cpp\nint n, m = 128, sa[N], rk[N], tp[N], buc[N];\nint h[20][N];\nchar s[N];\n```\n\n### 函数\n\n```cpp\nvoid SA() {\n    rep(i, 1, n) buc[rk[i] = s[i]]++;\n    rep(i, 1, m) buc[i] += buc[i - 1];\n    per(i, n, 1) sa[buc[rk[i]]--] = i;\n    for(int k = 1, p; memset(buc, p = 0, m * 4 + 4); k *= 2) {\n        rep(i, n - k + 1, n) tp[++p] = i;\n        rep(i, 1, n) if(sa[i] > k) tp[++p] = sa[i] - k;\n        rep(i, 1, n) buc[rk[i]]++;\n        rep(i, 1, m) buc[i] += buc[i - 1];\n        per(i, n, 1) sa[buc[rk[tp[i]]]--] = tp[i];\n        memcpy(tp, rk, n * 4 + 4), p = 0;\n        rep(i, 1, n) rk[sa[i]] = p += tp[sa[i]] ^ tp[sa[i - 1]] || tp[sa[i] + k] ^ tp[sa[i - 1] + k];\n        if((m = p) >= n) break;\n    }\n}\nvoid height() {\n    int k = 0;\n    rep(i, 1, n) {\n        for(k ? k-- : 0; s[i + k] == s[sa[rk[i] - 1] + k]; k++);\n        h[0][rk[i]] = k;\n    }\n    rep(i, 1, 19) rep(j, 1, n - (1 << i) + 1)\n        h[i][j] = min(h[i - 1][j], h[i - 1][j + (1 << (i - 1))]);\n}\n```\n\n## 后缀自动机\n\n### 定义\n\n```cpp\nchar s[N];\nint n, sz = 1, nw = 1, f[N], len[N], ch[N][26];\n```\n\n### 函数\n\n```cpp\nvoid ins(int c) {\n    int u = ++sz;\n    len[u] = len[nw] + 1;\n    while(nw && !ch[nw][c]) ch[nw][c] = u, nw = f[nw];\n    if(!nw) f[u] = 1;\n    else {\n        int v = ch[nw][c];\n        if(len[v] > len[nw] + 1) {\n            f[++sz] = f[v], memcpy(ch[sz], ch[v], sizeof ch[v]);\n            f[v] = f[u] = sz, len[sz] = len[nw] + 1;\n            for(int x = nw; ch[x][c] == v; x = f[x]) ch[x][c] = sz;\n        } else f[u] = v;\n    }\n    nw = u;\n}\n```\n\n## 最小表示法\n\n### 函数\n\n```cpp\nint calc(char s[]) {\n    int i = 0, j = 1, k = 0;\n    while(i < n && j < n && k < n)\n    if(s[(i + k) % n] == s[(j + k) % n]) k++;\n    else {\n        if(s[(i + k) % n] > s[(j + k) % n]) swap(i, j);\n        j += k + 1, k = 0;\n        if(i == j) i++;\n    }\n    return min(i, j);\n}\n```\n","slug":"template","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh2o007mootn92qa0hgs","content":"<p><strong>左手栏有目录。</strong></p>\r\n<p>出现的宏：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> lf = <span class=\"keyword\">double</span>;</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"有用的模板\">有用的模板</h1>\r\n<h2 id=\"fast-io\">Fast IO</h2>\r\n<h4 id=\"非负整数版\">非负整数版</h4>\r\n<h5 id=\"函数\">函数</h5>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> M = <span class=\"number\">1e6</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> streambuf* in = cin.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + in -&gt; sgetn(buf, M), p1 == p2) ? -1 : *p1++)</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> buf[M], *p1, *p2;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = gc, r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &lt; <span class=\"number\">48</span>) c = gc;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &gt; <span class=\"number\">47</span>) r = r * <span class=\"number\">10</span> + (c &amp; <span class=\"number\">15</span>), c = gc;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">wrt</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> streambuf* out = cout.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc out -&gt; sputc</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> c[<span class=\"number\">11</span>]; <span class=\"keyword\">int</span> sz = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> c[++sz] = x % <span class=\"number\">10</span>, x /= <span class=\"number\">10</span>; <span class=\"keyword\">while</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(sz) <span class=\"built_in\">pc</span>(c[sz--] + <span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"built_in\">pc</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h5 id=\"预处理\">预处理</h5>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"整数版\">整数版</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> M = <span class=\"number\">1e6</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> streambuf* in = cin.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + in -&gt; sgetn(buf, M), p1 == p2) ? -1 : *p1++)</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> buf[M], *p1, *p2;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = gc, r = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &lt; <span class=\"number\">48</span>) &#123; <span class=\"keyword\">if</span>(c == <span class=\"number\">45</span>) f = <span class=\"number\">-1</span>; c = gc; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &gt; <span class=\"number\">47</span>) r = r * <span class=\"number\">10</span> + (c &amp; <span class=\"number\">15</span>), c = gc;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">wrt</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> streambuf* out = cout.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc out -&gt; sputc</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> c[<span class=\"number\">11</span>]; <span class=\"keyword\">int</span> sz = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>) <span class=\"built_in\">pc</span>(<span class=\"number\">45</span>), x = -x;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> c[++sz] = x % <span class=\"number\">10</span>, x /= <span class=\"number\">10</span>; <span class=\"keyword\">while</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(sz) <span class=\"built_in\">pc</span>(c[sz--] + <span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"built_in\">pc</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>注：输出 <code>long long</code> 时 <code>wrt</code> 函数中的 <code>c</code> 数组大小要开到 <span class=\"math inline\">\\(20\\)</span>。</strong></p>\r\n<h2 id=\"atcoder-modint\">AtCoder-modint</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> uint = <span class=\"keyword\">unsigned</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ull = <span class=\"keyword\">unsigned</span> ll;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> ll <span class=\"title\">safe_mod</span><span class=\"params\">(ll x, ll m)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x %= m, x &lt; <span class=\"number\">0</span> ? x + m : x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> ll <span class=\"title\">pow_mod_constexpr</span><span class=\"params\">(ll x, ll n, <span class=\"keyword\">int</span> m)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    uint _m = m;</span><br><span class=\"line\">    ull r = <span class=\"number\">1</span>, _x = <span class=\"built_in\">safe_mod</span>(x, m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; n; n &gt;&gt;= <span class=\"number\">1</span>, _x = _x * _x % _m)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = r * _x % m;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"keyword\">bool</span> <span class=\"title\">is_prime_constexpr</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">2</span> || n == <span class=\"number\">7</span> || n == <span class=\"number\">61</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n % <span class=\"number\">2</span> == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    ll d = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~d &amp; <span class=\"number\">1</span>) d /= <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(ll a : &#123;<span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">61</span>&#125;) &#123;</span><br><span class=\"line\">        ll t = d, y = <span class=\"built_in\">pow_mod_constexpr</span>(a, t, n);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(t != n - <span class=\"number\">1</span> &amp;&amp; y != <span class=\"number\">1</span> &amp;&amp; y != n - <span class=\"number\">1</span>)</span><br><span class=\"line\">            y = y * y % n, t &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y != n - <span class=\"number\">1</span> &amp;&amp; t % <span class=\"number\">2</span> == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> pair&lt;ll, ll&gt; <span class=\"title\">inv_gcd</span><span class=\"params\">(ll a, ll b)</span> </span>&#123;</span><br><span class=\"line\">    a = <span class=\"built_in\">safe_mod</span>(a, b);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> &#123;b, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    ll s = b, t = a, m0 = <span class=\"number\">0</span>, m1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t) &#123;</span><br><span class=\"line\">        ll u = s / t;</span><br><span class=\"line\">        s -= t * u, m0 -= m1 * u;</span><br><span class=\"line\">        ll tmp = s;</span><br><span class=\"line\">        s = t, t = tmp, tmp = m0, m0 = m1, m1 = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m0 &lt; <span class=\"number\">0</span>) m0 += b / s;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;s, m0&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">barrett</span> &#123;</span></span><br><span class=\"line\">    uint m; ull im;</span><br><span class=\"line\">    <span class=\"built_in\">barrett</span>(uint m) :<span class=\"built_in\">m</span>(m), <span class=\"built_in\">im</span>(~<span class=\"number\">0ull</span> / m + <span class=\"number\">1</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\">uint <span class=\"title\">mul</span><span class=\"params\">(uint a, uint b)</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">        ull z = (ull)a * b;</span><br><span class=\"line\">        ull x = (<span class=\"keyword\">unsigned</span> __int128)z * im &gt;&gt; <span class=\"number\">64</span>;</span><br><span class=\"line\">        uint v = z - x * m;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m &lt;= v ? v + m : v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">int</span> m&gt; <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">static_modint</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">using</span> mint = static_modint;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> mint <span class=\"title\">raw</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">        mint x;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x._v = v, x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">static_modint</span>() : _v(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;class T&gt; <span class=\"title\">static_modint</span><span class=\"params\">(T v)</span> </span>&#123;</span><br><span class=\"line\">        ll x = v % m;</span><br><span class=\"line\">        _v = x &lt; <span class=\"number\">0</span> ? x + m : x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">uint <span class=\"title\">val</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> _v; &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>++() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(++_v == m) _v = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>--() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!_v--) _v = m - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>++(<span class=\"keyword\">int</span>) &#123;</span><br><span class=\"line\">        mint res = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        ++*<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>--(<span class=\"keyword\">int</span>) &#123;</span><br><span class=\"line\">        mint res = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        --*<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>+=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        _v += rhs._v;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_v &gt;= m) _v -= m;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>-=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        _v -= rhs._v;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_v &gt;= m) _v += m;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>*=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        ull z = _v;</span><br><span class=\"line\">        z *= rhs._v, _v = z % m;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>/=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span> = *<span class=\"keyword\">this</span> * rhs.<span class=\"built_in\">inv</span>(); &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>+() <span class=\"keyword\">const</span> &#123; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>-() <span class=\"keyword\">const</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>() - *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">mint <span class=\"title\">pow</span><span class=\"params\">(ll n)</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(<span class=\"number\">0</span> &lt;= n);</span><br><span class=\"line\">        mint x = *<span class=\"keyword\">this</span>, r = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(; n; n &gt;&gt;= <span class=\"number\">1</span>, x *= x) <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r *= x;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">mint <span class=\"title\">inv</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(prime) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(_v);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">pow</span>(m - <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> eg = <span class=\"built_in\">inv_gcd</span>(_v, m);</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(eg.first == <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> eg.second;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) += rhs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>-(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) -= rhs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>*(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) *= rhs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>/(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) /= rhs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lhs._v == rhs._v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>!=(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lhs._v != rhs._v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    uint _v;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">constexpr</span> <span class=\"keyword\">bool</span> prime = <span class=\"built_in\">is_prime_constexpr</span>(m);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">int</span> id&gt; <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dynamic_modint</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">using</span> mint = dynamic_modint;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">set_mod</span><span class=\"params\">(<span class=\"keyword\">int</span> m)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(<span class=\"number\">1</span> &lt;= m), bt = <span class=\"built_in\">barrett</span>(m);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> mint <span class=\"title\">raw</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">        mint x;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x._v = v, x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">dynamic_modint</span>() : _v(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;class T&gt; <span class=\"title\">dynamic_modint</span><span class=\"params\">(T v)</span> </span>&#123;</span><br><span class=\"line\">        ll x = v % bt.m;</span><br><span class=\"line\">        _v = x &lt; <span class=\"number\">0</span> ? x + bt.m : x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">uint <span class=\"title\">val</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> _v; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>++() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(++_v == bt.m) _v = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>--() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!_v--) _v = bt.m - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>++(<span class=\"keyword\">int</span>) &#123;</span><br><span class=\"line\">        mint res = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        ++*<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>--(<span class=\"keyword\">int</span>) &#123;</span><br><span class=\"line\">        mint res = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        --*<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>+=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        _v += rhs._v;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_v &gt;= bt.m) _v -= bt.m;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>-=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        _v += bt.m - rhs._v;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_v &gt;= bt.m) _v -= bt.m;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>*=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        _v = bt.<span class=\"built_in\">mul</span>(_v, rhs._v);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>/=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span> = *<span class=\"keyword\">this</span> * rhs.<span class=\"built_in\">inv</span>(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>+() <span class=\"keyword\">const</span> &#123; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>-() <span class=\"keyword\">const</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>() - *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">mint <span class=\"title\">pow</span><span class=\"params\">(ll n)</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(<span class=\"number\">0</span> &lt;= n);</span><br><span class=\"line\">        mint x = *<span class=\"keyword\">this</span>, r = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(; n; n &gt;&gt;= <span class=\"number\">1</span>, x *= x) <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r *= x;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">mint <span class=\"title\">inv</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> eg = <span class=\"built_in\">inv_gcd</span>(_v, bt.m);</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(eg.first == <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> eg.second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) += rhs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>-(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) -= rhs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>*(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) *= rhs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>/(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) /= rhs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lhs._v == rhs._v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>!=(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lhs._v != rhs._v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    uint _v;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> barrett bt;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">int</span> id&gt; barrett dynamic_modint&lt;id&gt;::bt = <span class=\"number\">998244353</span>;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"打比赛专用模板\">打比赛专用模板</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> uint = <span class=\"keyword\">unsigned</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ull = <span class=\"keyword\">unsigned</span> ll;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> ll <span class=\"title\">safe_mod</span><span class=\"params\">(ll x, ll m)</span> </span>&#123; <span class=\"keyword\">return</span> x %= m, x &lt; <span class=\"number\">0</span> ? x + m : x; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> ll <span class=\"title\">pow_mod_constexpr</span><span class=\"params\">(ll x, ll n, <span class=\"keyword\">int</span> m)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    uint _m = m; ull r = <span class=\"number\">1</span>, _x = <span class=\"built_in\">safe_mod</span>(x, m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; n; n &gt;&gt;= <span class=\"number\">1</span>, _x = _x * _x % _m) <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = r * _x % m;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"keyword\">bool</span> <span class=\"title\">is_prime_constexpr</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">2</span> || n == <span class=\"number\">7</span> || n == <span class=\"number\">61</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n % <span class=\"number\">2</span> == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    ll d = n - <span class=\"number\">1</span>; <span class=\"keyword\">while</span>(~d &amp; <span class=\"number\">1</span>) d /= <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(ll a : &#123;<span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">61</span>&#125;) &#123;</span><br><span class=\"line\">        ll t = d, y = <span class=\"built_in\">pow_mod_constexpr</span>(a, t, n);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(t != n - <span class=\"number\">1</span> &amp;&amp; y != <span class=\"number\">1</span> &amp;&amp; y != n - <span class=\"number\">1</span>) y = y * y % n, t &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y != n - <span class=\"number\">1</span> &amp;&amp; t % <span class=\"number\">2</span> == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> pair&lt;ll, ll&gt; <span class=\"title\">inv_gcd</span><span class=\"params\">(ll a, ll b)</span> </span>&#123;</span><br><span class=\"line\">    a = <span class=\"built_in\">safe_mod</span>(a, b);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> &#123;b, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    ll s = b, t = a, m0 = <span class=\"number\">0</span>, m1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t) &#123;</span><br><span class=\"line\">        ll u = s / t; s -= t * u, m0 -= m1 * u;</span><br><span class=\"line\">        ll tmp = s; s = t, t = tmp, tmp = m0, m0 = m1, m1 = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m0 &lt; <span class=\"number\">0</span>) m0 += b / s;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;s, m0&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">barrett</span> &#123;</span></span><br><span class=\"line\">    uint m; ull im;</span><br><span class=\"line\">    <span class=\"built_in\">barrett</span>(uint m) :<span class=\"built_in\">m</span>(m), <span class=\"built_in\">im</span>(~<span class=\"number\">0ull</span> / m + <span class=\"number\">1</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\">uint <span class=\"title\">mul</span><span class=\"params\">(uint a, uint b)</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">        ull z = (ull)a * b; ull x = (<span class=\"keyword\">unsigned</span> __int128)z * im &gt;&gt; <span class=\"number\">64</span>; uint v = z - x * m;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m &lt;= v ? v + m : v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">int</span> m&gt; <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">static_modint</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">using</span> mint = static_modint;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> mint <span class=\"title\">raw</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span> </span>&#123; mint x; <span class=\"keyword\">return</span> x._v = v, x; &#125;</span><br><span class=\"line\">    <span class=\"built_in\">static_modint</span>() : _v(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;class T&gt; <span class=\"title\">static_modint</span><span class=\"params\">(T v)</span> </span>&#123; ll x = v % m; _v = x &lt; <span class=\"number\">0</span> ? x + m : x; &#125;</span><br><span class=\"line\">    <span class=\"function\">uint <span class=\"title\">val</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> _v; &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>++() &#123; <span class=\"keyword\">if</span>(++_v == m) _v = <span class=\"number\">0</span>; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>--() &#123; <span class=\"keyword\">if</span>(!_v--) _v = m - <span class=\"number\">1</span>; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>++(<span class=\"keyword\">int</span>) &#123; mint res = *<span class=\"keyword\">this</span>; ++*<span class=\"keyword\">this</span>; <span class=\"keyword\">return</span> res; &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>--(<span class=\"keyword\">int</span>) &#123; mint res = *<span class=\"keyword\">this</span>; --*<span class=\"keyword\">this</span>; <span class=\"keyword\">return</span> res; &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>+=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123; _v += rhs._v; <span class=\"keyword\">if</span>(_v &gt;= m) _v -= m; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>-=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123; _v -= rhs._v; <span class=\"keyword\">if</span>(_v &gt;= m) _v += m; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>*=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123; ull z = _v; z *= rhs._v, _v = z % m; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>/=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span> = *<span class=\"keyword\">this</span> * rhs.<span class=\"built_in\">inv</span>(); &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>+() <span class=\"keyword\">const</span> &#123; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>-() <span class=\"keyword\">const</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>() - *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    <span class=\"function\">mint <span class=\"title\">pow</span><span class=\"params\">(ll n)</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"built_in\">assert</span>(<span class=\"number\">0</span> &lt;= n); mint x = *<span class=\"keyword\">this</span>, r = <span class=\"number\">1</span>; <span class=\"keyword\">for</span>(; n; n &gt;&gt;= <span class=\"number\">1</span>, x *= x) <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r *= x; <span class=\"keyword\">return</span> r; &#125;</span><br><span class=\"line\">    <span class=\"function\">mint <span class=\"title\">inv</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">if</span>(prime) &#123; <span class=\"built_in\">assert</span>(_v); <span class=\"keyword\">return</span> <span class=\"built_in\">pow</span>(m - <span class=\"number\">2</span>); &#125; <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">auto</span> eg = <span class=\"built_in\">inv_gcd</span>(_v, m); <span class=\"built_in\">assert</span>(eg.first == <span class=\"number\">1</span>); <span class=\"keyword\">return</span> eg.second; &#125; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) += rhs; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>-(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) -= rhs; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>*(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) *= rhs; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>/(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) /= rhs; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> lhs._v == rhs._v; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>!=(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> lhs._v != rhs._v; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    uint _v;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">constexpr</span> <span class=\"keyword\">bool</span> prime = <span class=\"built_in\">is_prime_constexpr</span>(m);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">int</span> id&gt; <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dynamic_modint</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">using</span> mint = dynamic_modint;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">set_mod</span><span class=\"params\">(<span class=\"keyword\">int</span> m)</span> </span>&#123; <span class=\"built_in\">assert</span>(<span class=\"number\">1</span> &lt;= m), bt = <span class=\"built_in\">barrett</span>(m); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> mint <span class=\"title\">raw</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span> </span>&#123; mint x; <span class=\"keyword\">return</span> x._v = v, x; &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dynamic_modint</span>() : _v(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;class T&gt; <span class=\"title\">dynamic_modint</span><span class=\"params\">(T v)</span> </span>&#123; ll x = v % bt.m; _v = x &lt; <span class=\"number\">0</span> ? x + bt.m : x; &#125;</span><br><span class=\"line\">    <span class=\"function\">uint <span class=\"title\">val</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> _v; &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>++() &#123; <span class=\"keyword\">if</span>(++_v == bt.m) _v = <span class=\"number\">0</span>; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>--() &#123; <span class=\"keyword\">if</span>(!_v--) _v = bt.m - <span class=\"number\">1</span>; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>++(<span class=\"keyword\">int</span>) &#123; mint res = *<span class=\"keyword\">this</span>; ++*<span class=\"keyword\">this</span>; <span class=\"keyword\">return</span> res; &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>--(<span class=\"keyword\">int</span>) &#123; mint res = *<span class=\"keyword\">this</span>; --*<span class=\"keyword\">this</span>; <span class=\"keyword\">return</span> res; &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>+=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123; _v += rhs._v; <span class=\"keyword\">if</span>(_v &gt;= bt.m) _v -= bt.m; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>-=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123; _v += bt.m - rhs._v; <span class=\"keyword\">if</span>(_v &gt;= bt.m) _v -= bt.m; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>*=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123; _v = bt.<span class=\"built_in\">mul</span>(_v, rhs._v); <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>/=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span> = *<span class=\"keyword\">this</span> * rhs.<span class=\"built_in\">inv</span>(); &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>+() <span class=\"keyword\">const</span> &#123; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>-() <span class=\"keyword\">const</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>() - *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    <span class=\"function\">mint <span class=\"title\">pow</span><span class=\"params\">(ll n)</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"built_in\">assert</span>(<span class=\"number\">0</span> &lt;= n); mint x = *<span class=\"keyword\">this</span>, r = <span class=\"number\">1</span>; <span class=\"keyword\">for</span>(; n; n &gt;&gt;= <span class=\"number\">1</span>, x *= x) <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r *= x; <span class=\"keyword\">return</span> r; &#125;</span><br><span class=\"line\">    <span class=\"function\">mint <span class=\"title\">inv</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">auto</span> eg = <span class=\"built_in\">inv_gcd</span>(_v, bt.m); <span class=\"built_in\">assert</span>(eg.first == <span class=\"number\">1</span>); <span class=\"keyword\">return</span> eg.second; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) += rhs; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>-(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) -= rhs; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>*(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) *= rhs; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>/(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) /= rhs; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> lhs._v == rhs._v; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>!=(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> lhs._v != rhs._v; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    uint _v;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> barrett bt;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">int</span> id&gt; barrett dynamic_modint&lt;id&gt;::bt = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eb emplace_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SZ(x) int((x).size())</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l + r) / 2)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lc o * 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rc o * 2 + 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lch l, mid, lc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rch mid + 1, r, rc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> cmi(a, b) (a = min(a, b))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> cma(a, b) (a = max(a, b))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lb lower_bound</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ub upper_bound</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> bs binary_search</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pop __builtin_popcount</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> llpop __builtin_popcountll</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ctz __builtin_ctz</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> llctz __builtin_ctzll</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clz __builtin_clz</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> llclz __builtin_clzll</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> par __builtin_parity</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> llpar __builtin_parityll</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> lf = <span class=\"keyword\">double</span>;</span><br><span class=\"line\"><span class=\"comment\">// using P = pair&lt;int, int&gt;;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> V = vector&lt;<span class=\"keyword\">int</span>&gt;;</span><br><span class=\"line\"><span class=\"comment\">// using cmp = complex&lt;lf&gt;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> local</span></span><br><span class=\"line\">    <span class=\"comment\">// freopen(&quot;.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(cin &gt;&gt; T; T--; <span class=\"built_in\">solve</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"随机数\">随机数</h2>\r\n<h3 id=\"函数-1\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">gen</span><span class=\"params\">(ll x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ll k = <span class=\"number\">0x9ddfea08eb382d69</span>ull;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">3</span>) x *= k, x ^= x &gt;&gt; <span class=\"number\">47</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * k;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">rnd</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> ll s = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (s += <span class=\"built_in\">gen</span>(s)) &amp; LONG_LONG_MAX;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"大模数取模\">大模数取模</h2>\r\n<h3 id=\"函数-2\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">mul</span><span class=\"params\">(ll a, ll b, ll p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a * b - <span class=\"built_in\">ll</span>((<span class=\"keyword\">long</span> <span class=\"keyword\">double</span>)a / p * b + <span class=\"number\">0.5</span>) * p + p) % p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"bash-对拍\"><code>bash</code> 对拍</h3>\r\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">    ./gen &gt; <span class=\"keyword\">in</span></span><br><span class=\"line\">    ./a &lt; <span class=\"keyword\">in</span> &gt; 1</span><br><span class=\"line\">    ./b &lt; <span class=\"keyword\">in</span> &gt; 2</span><br><span class=\"line\">    diff 1 2</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ $? -ne 0 ] ; <span class=\"keyword\">then</span> <span class=\"built_in\">break</span>; <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"简易计算器\">简易计算器</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">mul</span><span class=\"params\">(ll a, ll b, ll p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a * b - <span class=\"built_in\">ll</span>((<span class=\"keyword\">long</span> <span class=\"keyword\">double</span>)a / p * b + <span class=\"number\">0.5</span>) * p + p) % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">Pow</span><span class=\"params\">(ll a, ll n, ll p, ll r = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; n; n /= <span class=\"number\">2</span>, a = <span class=\"built_in\">mul</span>(a, a, p))</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = <span class=\"built_in\">mul</span>(r, a, p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> Pollard_Rho &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">chk</span><span class=\"params\">(ll n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(ll a : &#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">61</span>, <span class=\"number\">24251</span>&#125;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(n == a) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">Pow</span>(a, n - <span class=\"number\">1</span>, n) ^ <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            ll k = n - <span class=\"number\">1</span>, t;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(~k &amp; <span class=\"number\">1</span>) k /= <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((t = <span class=\"built_in\">Pow</span>(a, k, n)) == <span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(t ^ <span class=\"number\">1</span> &amp;&amp; t ^ n - <span class=\"number\">1</span>) t = <span class=\"built_in\">mul</span>(t, t, n);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(t ^ n - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">ll <span class=\"title\">f</span><span class=\"params\">(ll x, ll c, ll p)</span> </span>&#123; <span class=\"keyword\">return</span> (<span class=\"built_in\">mul</span>(x, x, p) + c) % p; &#125;</span><br><span class=\"line\">    <span class=\"function\">ll <span class=\"title\">PR</span><span class=\"params\">(ll n)</span> </span>&#123;</span><br><span class=\"line\">        ll a = <span class=\"number\">0</span>, b = <span class=\"number\">0</span>, c = <span class=\"built_in\">rand</span>() % (n - <span class=\"number\">1</span>) + <span class=\"number\">1</span>, v = <span class=\"number\">1</span>, g;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; ; k *= <span class=\"number\">2</span>, a = b, v = <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, k) &#123;</span><br><span class=\"line\">                b = <span class=\"built_in\">f</span>(b, c, n), v = <span class=\"built_in\">mul</span>(v, <span class=\"built_in\">abs</span>(a - b), n);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!(i &amp; <span class=\"number\">127</span>) || i == k) &#123;</span><br><span class=\"line\">                    g = __gcd(v, n);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(g &gt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> g;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll ans[<span class=\"number\">100</span>]; <span class=\"keyword\">int</span> ct;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(ll n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">chk</span>(n)) <span class=\"keyword\">return</span> <span class=\"built_in\"><span class=\"keyword\">void</span></span>(ans[++ct] = n);</span><br><span class=\"line\">        ll d; <span class=\"keyword\">do</span> d = <span class=\"built_in\">PR</span>(n); <span class=\"keyword\">while</span>(d == n);</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>(d), <span class=\"built_in\">solve</span>(n / d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ll n;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cin &gt;&gt; n) &#123;</span><br><span class=\"line\">            ct = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">chk</span>(n)) &#123; <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Prime&quot;</span>); <span class=\"keyword\">continue</span>; &#125;</span><br><span class=\"line\">            <span class=\"built_in\">solve</span>(n), <span class=\"built_in\">sort</span>(ans + <span class=\"number\">1</span>, ans + ct + <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, ct) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(ans[i] ^ ans[i - <span class=\"number\">1</span>]) cout &lt;&lt; ans[i];</span><br><span class=\"line\">                t++; <span class=\"keyword\">if</span>(ans[i] ^ ans[i + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(t &gt; <span class=\"number\">1</span>) cout &lt;&lt; <span class=\"string\">&#x27;^&#x27;</span> &lt;&lt; t;</span><br><span class=\"line\">                    <span class=\"built_in\">putchar</span>(<span class=\"number\">32</span>), t = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"built_in\">putchar</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> Inv &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">exgcd</span><span class=\"params\">(ll a, ll b, ll&amp; d, ll&amp; x, ll&amp; y)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b) <span class=\"built_in\">exgcd</span>(b, a % b, d, y, x), y -= a / b * x;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> d = a, x = <span class=\"number\">1</span>, y = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inv</span><span class=\"params\">(ll a, ll p)</span> </span>&#123;</span><br><span class=\"line\">        ll d, x, y; <span class=\"built_in\">exgcd</span>(a, p, d, x, y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d &gt; <span class=\"number\">1</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Non-existent!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> cout &lt;&lt; (x % p + p) % p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ll a, p;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cin &gt;&gt; a &gt;&gt; p) <span class=\"built_in\">inv</span>(a, p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> Prime &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ll n;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cin &gt;&gt; n) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!Pollard_Rho::<span class=\"built_in\">chk</span>(n)) n++;</span><br><span class=\"line\">            cout &lt;&lt; n &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> Cipolla &#123;</span><br><span class=\"line\">    ll n, p, II;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cmp</span> &#123;</span></span><br><span class=\"line\">        ll r, i;</span><br><span class=\"line\">        cmp <span class=\"keyword\">operator</span> *(<span class=\"keyword\">const</span> cmp&amp; b) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;(r * b.r + i * b.i % p * II) % p, (r * b.i + i * b.r) % p &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; U = &#123; <span class=\"number\">1</span>, <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pow1</span><span class=\"params\">(ll a, <span class=\"keyword\">int</span> n, ll r = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(; n; n /= <span class=\"number\">2</span>, a = a * a % p)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = r * a % p;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">cmp <span class=\"title\">pow2</span><span class=\"params\">(cmp a, <span class=\"keyword\">int</span> n, cmp r = U)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(; n; n /= <span class=\"number\">2</span>, a = a * a)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = r * a;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cin &gt;&gt; n &gt;&gt; p) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!n) &#123; <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;0&quot;</span>); <span class=\"keyword\">continue</span>; &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p == <span class=\"number\">2</span>) &#123; cout &lt;&lt; n &lt;&lt; endl; <span class=\"keyword\">continue</span>; &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">pow1</span>(n, p / <span class=\"number\">2</span>) ^ <span class=\"number\">1</span>) &#123; <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Non-existent!&quot;</span>); <span class=\"keyword\">continue</span>; &#125;</span><br><span class=\"line\">            ll a;</span><br><span class=\"line\">            <span class=\"keyword\">do</span> a = <span class=\"built_in\">rand</span>() % p, II = (a * a - n + p) % p; <span class=\"keyword\">while</span>(!a || <span class=\"built_in\">pow1</span>(II, p / <span class=\"number\">2</span>) == <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x1 = <span class=\"built_in\">pow2</span>(&#123;a, <span class=\"number\">1</span>&#125;, p / <span class=\"number\">2</span> + <span class=\"number\">1</span>).r, x2 = p - x1;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x1 &gt; x2) <span class=\"built_in\">swap</span>(x1, x2);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d\\n&quot;</span>, x1, x2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">srand</span>(<span class=\"built_in\">time</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Press 1 for integer factorization.&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Press 2 to calculate the modular multiplicative inverse of a number.&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Press 3 to find the first prime number greater than or equal to a number.&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Press 4 to calculate the modular square root of a number.&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> op;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        cin &gt;&gt; op;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">1</span>) Pollard_Rho::<span class=\"built_in\">work</span>();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op == <span class=\"number\">2</span>) Inv::<span class=\"built_in\">work</span>();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op == <span class=\"number\">3</span>) Prime::<span class=\"built_in\">work</span>();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op == <span class=\"number\">4</span>) Cipolla::<span class=\"built_in\">work</span>();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Illegal input! Please re-enter your option.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"数学\">数学</h1>\r\n<h2 id=\"ntt\">NTT</h2>\r\n<h3 id=\"普通版\">普通版</h3>\r\n<h4 id=\"定义\">定义</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> lim = <span class=\"number\">1</span>, bit = <span class=\"number\">-1</span>, rev[N];</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"函数-3\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">Pow</span><span class=\"params\">(ll a, <span class=\"keyword\">int</span> n, ll r = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; n; n /= <span class=\"number\">2</span>, a = a * a % P)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = r * a % P;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">NTT</span><span class=\"params\">(ll a[], <span class=\"keyword\">int</span> t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">reverse</span>(a + <span class=\"number\">1</span>, a + lim);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) <span class=\"keyword\">if</span>(rev[i] &lt; i) <span class=\"built_in\">swap</span>(a[i], a[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; lim; i *= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        ll wn = <span class=\"built_in\">Pow</span>(<span class=\"number\">3</span>, P / <span class=\"number\">2</span> / i);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; lim; j += i * <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            ll w = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">For</span>(k, j, j + i) &#123;</span><br><span class=\"line\">                ll &amp;x = a[k], y = a[k + i] * w % P;</span><br><span class=\"line\">                a[k + i] = (x - y) % P, (x += y) %= P, w = w * wn % P;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll inv = <span class=\"built_in\">Pow</span>(lim, P - <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) (a[i] *= inv) %= P;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><code>modint</code> 版</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">NTT</span><span class=\"params\">(mint a[], <span class=\"keyword\">int</span> t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">reverse</span>(a + <span class=\"number\">1</span>, a + lim);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) <span class=\"keyword\">if</span>(rev[i] &lt; i) <span class=\"built_in\">swap</span>(a[i], a[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; lim; i *= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        mint wn = <span class=\"built_in\">mint</span>(<span class=\"number\">3</span>).<span class=\"built_in\">pow</span>(P / <span class=\"number\">2</span> / i);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; lim; j += i * <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            mint w = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">For</span>(k, j, j + i) &#123;</span><br><span class=\"line\">                mint &amp;x = a[k], y = a[k + i] * w;</span><br><span class=\"line\">                a[k + i] = x - y, x += y, w *= wn;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint inv = <span class=\"built_in\">mint</span>(lim).<span class=\"built_in\">inv</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) a[i] *= inv;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"预处理-1\">预处理</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(lim &lt;= n + m) lim *= <span class=\"number\">2</span>, bit++;</span><br><span class=\"line\"><span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) rev[i] = rev[i / <span class=\"number\">2</span>] / <span class=\"number\">2</span> | (i &amp; <span class=\"number\">1</span>) &lt;&lt; bit;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"多次做时较快版\">多次做时较快版</h3>\r\n<h4 id=\"定义-1\">定义</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll w[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> lim = <span class=\"number\">1</span>, bit = <span class=\"number\">-1</span>, rev[N]; </span><br></pre></td></tr></table></figure>\r\n<p><code>modint</code> 版</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mint w[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> lim = <span class=\"number\">1</span>, bit = <span class=\"number\">-1</span>, rev[N]; </span><br></pre></td></tr></table></figure>\r\n<h4 id=\"函数-4\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mod</span><span class=\"params\">(ll&amp; x)</span> </span>&#123; <span class=\"keyword\">if</span>(x &gt;= P) x -= P; <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>) x += P; &#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">Pow</span><span class=\"params\">(ll a, <span class=\"keyword\">int</span> n, ll r = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; n; n /= <span class=\"number\">2</span>, a = a * a % P)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = r * a % P;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">NTT</span><span class=\"params\">(ll a[], <span class=\"keyword\">int</span> t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">reverse</span>(a + <span class=\"number\">1</span>, a + lim);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) <span class=\"keyword\">if</span>(rev[i] &lt; i) <span class=\"built_in\">swap</span>(a[i], a[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; lim; i *= <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; lim; j += i * <span class=\"number\">2</span>) <span class=\"built_in\">For</span>(k, j, j + i) &#123;</span><br><span class=\"line\">        ll &amp;x = a[k], y = a[k + i] * w[lim / i * (k - j)] % P;</span><br><span class=\"line\">        <span class=\"built_in\">mod</span>(a[k + i] = x - y), <span class=\"built_in\">mod</span>(x += y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll inv = <span class=\"built_in\">Pow</span>(lim, P - <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) (a[i] *= inv) %= P;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><code>modint</code> 版</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">NTT</span><span class=\"params\">(mint a[], <span class=\"keyword\">int</span> t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">reverse</span>(a + <span class=\"number\">1</span>, a + lim);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) <span class=\"keyword\">if</span>(rev[i] &lt; i) <span class=\"built_in\">swap</span>(a[i], a[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; lim; i *= <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; lim; j += i * <span class=\"number\">2</span>) <span class=\"built_in\">For</span>(k, j, j + i) &#123;</span><br><span class=\"line\">        mint &amp;x = a[k], y = a[k + i] * w[lim / i * (k - j)];</span><br><span class=\"line\">        a[k + i] = x - y, x += y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint inv = <span class=\"built_in\">mint</span>(lim).<span class=\"built_in\">inv</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) a[i] *= inv;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"预处理-2\">预处理</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(lim &lt;= n + m) lim *= <span class=\"number\">2</span>, bit++;</span><br><span class=\"line\">ll wn = <span class=\"built_in\">Pow</span>(<span class=\"number\">3</span>, P / <span class=\"number\">2</span> / lim);</span><br><span class=\"line\"><span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) &#123;</span><br><span class=\"line\">    rev[i] = rev[i / <span class=\"number\">2</span>] / <span class=\"number\">2</span> | (i &amp; <span class=\"number\">1</span>) &lt;&lt; bit;</span><br><span class=\"line\">    w[i] = i ? w[i - <span class=\"number\">1</span>] * wn % P : <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><code>modint</code> 版</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(lim &lt;= n + m) lim *= <span class=\"number\">2</span>, bit++;</span><br><span class=\"line\">mint wn = <span class=\"built_in\">mint</span>(<span class=\"number\">3</span>).<span class=\"built_in\">pow</span>(P / <span class=\"number\">2</span> / lim);</span><br><span class=\"line\"><span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) &#123;</span><br><span class=\"line\">    rev[i] = rev[i / <span class=\"number\">2</span>] / <span class=\"number\">2</span> | (i &amp; <span class=\"number\">1</span>) &lt;&lt; bit;</span><br><span class=\"line\">    w[i] = i ? w[i - <span class=\"number\">1</span>] * wn : <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"任意模数-ntt\">任意模数 NTT</h2>\r\n<h3 id=\"定义-2\">定义</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> cmp = complex&lt;lf&gt;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> lf PI = <span class=\"built_in\">acos</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> cmp <span class=\"title\">I</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, P;</span><br><span class=\"line\"><span class=\"keyword\">int</span> M, lim = <span class=\"number\">1</span>, bit = <span class=\"number\">-1</span>, rev[N];</span><br><span class=\"line\">cmp w[N], a0[N], a1[N], b0[N], b1[N];</span><br></pre></td></tr></table></figure>\r\n<p><code>modint</code> 版</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> cmp = complex&lt;lf&gt;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> lf PI = <span class=\"built_in\">acos</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, P;</span><br><span class=\"line\"><span class=\"keyword\">int</span> M, lim = <span class=\"number\">1</span>, bit = <span class=\"number\">-1</span>, rev[N];</span><br><span class=\"line\">cmp w[N], a0[N], a1[N], b0[N], b1[N];</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数-5\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT</span><span class=\"params\">(cmp a[], <span class=\"keyword\">int</span> t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">reverse</span>(a + <span class=\"number\">1</span>, a + lim);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) <span class=\"keyword\">if</span>(i &lt; rev[i]) <span class=\"built_in\">swap</span>(a[i], a[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; lim; i *= <span class=\"number\">2</span>) <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; lim; j += i * <span class=\"number\">2</span>) <span class=\"built_in\">For</span>(k, j, j + i) &#123;</span><br><span class=\"line\">        cmp &amp;x = a[k], y = a[i + k] * w[lim / i * (k - j)];</span><br><span class=\"line\">        a[i + k] = x - y, x += y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lf inv = <span class=\"number\">1.</span> / lim;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) a[i] *= inv;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT2</span><span class=\"params\">(cmp a[], cmp b[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) a[i] += b[i] * I;</span><br><span class=\"line\">    <span class=\"built_in\">FFT</span>(a, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) b[i] = <span class=\"built_in\">conj</span>(a[i ? lim - i : <span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) &#123;</span><br><span class=\"line\">        cmp x = a[i], y = b[i];</span><br><span class=\"line\">        a[i] = (y + x) * <span class=\"number\">0.5</span>, b[i] = (y - x) * <span class=\"number\">0.5</span> * I;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">num</span><span class=\"params\">(cmp x)</span> </span>&#123; <span class=\"keyword\">return</span> M * <span class=\"built_in\">ll</span>(<span class=\"built_in\">real</span>(x) + <span class=\"number\">0.5</span>) % P + <span class=\"built_in\">ll</span>(<span class=\"built_in\">imag</span>(x) + <span class=\"number\">0.5</span>); &#125;</span><br></pre></td></tr></table></figure>\r\n<p><code>modint</code> 版</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT</span><span class=\"params\">(cmp a[], <span class=\"keyword\">int</span> t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">reverse</span>(a + <span class=\"number\">1</span>, a + lim);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) <span class=\"keyword\">if</span>(i &lt; rev[i]) <span class=\"built_in\">swap</span>(a[i], a[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; lim; i *= <span class=\"number\">2</span>) <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; lim; j += i * <span class=\"number\">2</span>) <span class=\"built_in\">For</span>(k, j, j + i) &#123;</span><br><span class=\"line\">        cmp &amp;x = a[k], y = a[i + k] * w[lim / i * (k - j)];</span><br><span class=\"line\">        a[i + k] = x - y, x += y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lf inv = <span class=\"number\">1.</span> / lim;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) a[i] *= inv;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT2</span><span class=\"params\">(cmp a[], cmp b[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) a[i] += b[i] * <span class=\"number\">1</span>i;</span><br><span class=\"line\">    <span class=\"built_in\">FFT</span>(a, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) b[i] = <span class=\"built_in\">conj</span>(a[i ? lim - i : <span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) &#123;</span><br><span class=\"line\">        cmp x = a[i], y = b[i];</span><br><span class=\"line\">        a[i] = (y + x) * <span class=\"number\">0.5</span>, b[i] = (y - x) * <span class=\"number\">0.5</span>i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">mint <span class=\"title\">num</span><span class=\"params\">(cmp x)</span> </span>&#123; <span class=\"keyword\">return</span> M * (mint)<span class=\"built_in\">ll</span>(<span class=\"built_in\">real</span>(x) + <span class=\"number\">0.5</span>) % P + (mint)<span class=\"built_in\">ll</span>(<span class=\"built_in\">imag</span>(x) + <span class=\"number\">0.5</span>); &#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"预处理-3\">预处理</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">M = <span class=\"built_in\">sqrt</span>(P);</span><br><span class=\"line\"><span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n) a0[i] = A[i] / M, a1[i] = A[i] % M;</span><br><span class=\"line\"><span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, m) b0[i] = B[i] / M, b1[i] = B[i] % M;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(lim &lt;= n + m) lim *= <span class=\"number\">2</span>, bit++;</span><br><span class=\"line\"><span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) &#123;</span><br><span class=\"line\">    rev[i] = rev[i / <span class=\"number\">2</span>] / <span class=\"number\">2</span> | (i &amp; <span class=\"number\">1</span>) &lt;&lt; bit;</span><br><span class=\"line\">    w[i] = <span class=\"built_in\">cmp</span>(<span class=\"built_in\">cos</span>(PI / lim * i), <span class=\"built_in\">sin</span>(PI / lim * i));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"使用\">使用</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">FFT2</span>(a0, a1), <span class=\"built_in\">FFT2</span>(b0, b1);</span><br><span class=\"line\"><span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) &#123;</span><br><span class=\"line\">    cmp t = a0[i] + I * a1[i];</span><br><span class=\"line\">    b0[i] *= t, b1[i] *= t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">FFT</span>(b0, <span class=\"number\">1</span>), <span class=\"built_in\">FFT</span>(b1, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n + m) C[i] = (M * <span class=\"built_in\">num</span>(b0[i]) + <span class=\"built_in\">num</span>(b1[i])) % P;</span><br></pre></td></tr></table></figure>\r\n<p><code>modint</code> 版</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">FFT2</span>(a0, a1), <span class=\"built_in\">FFT2</span>(b0, b1);</span><br><span class=\"line\"><span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) &#123;</span><br><span class=\"line\">    cmp t = a0[i] + I * a1[i];</span><br><span class=\"line\">    b0[i] *= t, b1[i] *= t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">FFT</span>(b0, <span class=\"number\">1</span>), <span class=\"built_in\">FFT</span>(b1, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n + m) C[i] = M * <span class=\"built_in\">num</span>(b0[i]) + <span class=\"built_in\">num</span>(b1[i]);</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"fwt\">FWT</h2>\r\n<h3 id=\"函数-6\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FWT</span><span class=\"params\">(ll a[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, n) <span class=\"built_in\">For</span>(S, <span class=\"number\">0</span>, <span class=\"number\">1</span> &lt;&lt; n) <span class=\"keyword\">if</span>(S &gt;&gt; i &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        ll&amp; x = a[S ^ <span class=\"number\">1</span> &lt;&lt; i], y = a[S];</span><br><span class=\"line\">        a[S] = x - y, x += y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">IFWT</span><span class=\"params\">(ll a[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, n) <span class=\"built_in\">For</span>(S, <span class=\"number\">0</span>, <span class=\"number\">1</span> &lt;&lt; n) <span class=\"keyword\">if</span>(S &gt;&gt; i &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        ll&amp; x = a[S ^ <span class=\"number\">1</span> &lt;&lt; i], y = a[S];</span><br><span class=\"line\">        a[S] = x - y &gt;&gt; <span class=\"number\">1</span>, x = x + y &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"多项式求逆\">多项式求逆</h2>\r\n<h3 id=\"定义-3\">定义</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n, lim, rev[N];</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数-7\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">Pow</span><span class=\"params\">(ll a, <span class=\"keyword\">int</span> n, ll r = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; n; n /= <span class=\"number\">2</span>, a = a * a % P)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = r * a % P;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bld</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    lim = <span class=\"number\">1</span> &lt;&lt; n--;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) rev[i] = rev[i / <span class=\"number\">2</span>] / <span class=\"number\">2</span> | (i &amp; <span class=\"number\">1</span>) &lt;&lt; n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">NTT</span><span class=\"params\">(ll a[], <span class=\"keyword\">int</span> t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">reverse</span>(a + <span class=\"number\">1</span>, a + lim);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) <span class=\"keyword\">if</span>(i &lt; rev[i]) <span class=\"built_in\">swap</span>(a[i], a[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; lim; i *= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        ll wn = <span class=\"built_in\">Pow</span>(g, P / <span class=\"number\">2</span> / i);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; lim; j += i * <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            ll w = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">For</span>(k, j, j + i) &#123;</span><br><span class=\"line\">                ll &amp;x = a[k], y = a[k + i] * w % P;</span><br><span class=\"line\">                a[k + i] = (x - y) % P, (x += y) %= P, w = w * wn % P;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll inv = <span class=\"built_in\">Pow</span>(lim, P - <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) (a[i] *= inv) %= P;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Inv</span><span class=\"params\">(ll a[], ll b[], <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> ll c[N];</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, <span class=\"number\">2</span> &lt;&lt; n) b[i] = c[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    b[<span class=\"number\">0</span>] = <span class=\"built_in\">Pow</span>(a[<span class=\"number\">0</span>], P - <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">For</span>(j, <span class=\"number\">0</span>, <span class=\"number\">1</span> &lt;&lt; i) c[j] = a[j];</span><br><span class=\"line\">        <span class=\"built_in\">bld</span>(i + <span class=\"number\">1</span>), <span class=\"built_in\">NTT</span>(c, <span class=\"number\">0</span>), <span class=\"built_in\">NTT</span>(b, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">For</span>(j, <span class=\"number\">0</span>, lim) b[j] = (b[j] * <span class=\"number\">2</span> - b[j] * b[j] % P * c[j]) % P;</span><br><span class=\"line\">        <span class=\"built_in\">NTT</span>(b, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">For</span>(j, <span class=\"number\">1</span> &lt;&lt; i, lim) b[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><code>modint</code> 版</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bld</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    lim = <span class=\"number\">1</span> &lt;&lt; n--;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) rev[i] = rev[i / <span class=\"number\">2</span>] / <span class=\"number\">2</span> | (i &amp; <span class=\"number\">1</span>) &lt;&lt; n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">NTT</span><span class=\"params\">(mint a[], <span class=\"keyword\">int</span> t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">reverse</span>(a + <span class=\"number\">1</span>, a + lim);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) <span class=\"keyword\">if</span>(rev[i] &lt; i) <span class=\"built_in\">swap</span>(a[i], a[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; lim; i *= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        mint wn = <span class=\"built_in\">mint</span>(<span class=\"number\">3</span>).<span class=\"built_in\">pow</span>(P / <span class=\"number\">2</span> / i);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; lim; j += i * <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            mint w = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">For</span>(k, j, j + i) &#123;</span><br><span class=\"line\">                mint &amp;x = a[k], y = a[k + i] * w;</span><br><span class=\"line\">                a[k + i] = x - y, x += y, w *= wn;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint inv = <span class=\"built_in\">mint</span>(lim).<span class=\"built_in\">inv</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) a[i] *= inv;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Inv</span><span class=\"params\">(mint a[], mint b[], <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> mint c[N];</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, <span class=\"number\">2</span> &lt;&lt; n) b[i] = c[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    b[<span class=\"number\">0</span>] = a[<span class=\"number\">0</span>].<span class=\"built_in\">inv</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">For</span>(j, <span class=\"number\">0</span>, <span class=\"number\">1</span> &lt;&lt; i) c[j] = a[j];</span><br><span class=\"line\">        <span class=\"built_in\">bld</span>(i + <span class=\"number\">1</span>), <span class=\"built_in\">NTT</span>(c, <span class=\"number\">0</span>), <span class=\"built_in\">NTT</span>(b, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">For</span>(j, <span class=\"number\">0</span>, lim) b[j] = b[j] * <span class=\"number\">2</span> - b[j] * b[j] * c[j];</span><br><span class=\"line\">        <span class=\"built_in\">NTT</span>(b, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">For</span>(j, <span class=\"number\">1</span> &lt;&lt; i, lim) b[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"自然数等幂求和\">自然数等幂求和</h2>\r\n<h2 id=\"中国剩余定理\">中国剩余定理</h2>\r\n<h2 id=\"扩展中国剩余定理\">扩展中国剩余定理</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">mul</span><span class=\"params\">(ll a, ll b, ll p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a * b - (ll)((<span class=\"keyword\">long</span> <span class=\"keyword\">double</span>)a / p * b + <span class=\"number\">0.5</span>) * p + p) % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">exgcd</span><span class=\"params\">(ll a, ll b, ll&amp; d, ll&amp; x, ll&amp; y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!b) &#123; d = a, x = <span class=\"number\">1</span>, y = <span class=\"number\">0</span>; <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\">    <span class=\"built_in\">exgcd</span>(b, a % b, d, y, x), y -= a / b * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">exCRT</span><span class=\"params\">(ll&amp; b1, ll&amp; m1, ll b2, ll m2)</span> </span>&#123;</span><br><span class=\"line\">    ll d, k1, k2; <span class=\"built_in\">exgcd</span>(m1, m2, d, k1, k2), m2 /= d;</span><br><span class=\"line\">    b1 = (b1 + <span class=\"built_in\">mul</span>(<span class=\"built_in\">mul</span>(k1 % m2, (b2 - b1) / d % m2, m2), m1, m1 * m2)) % (m1 *= m2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"杜教筛\">杜教筛</h2>\r\n<h2 id=\"min-25-筛\">Min-25 筛</h2>\r\n<h3 id=\"定义-4\">定义</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll f1[N], f2[N];</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数-8\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">min25</span><span class=\"params\">(ll n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lim = <span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, lim) f1[i] = i - <span class=\"number\">1</span>, f2[i] = n / i - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(p, <span class=\"number\">2</span>, lim) <span class=\"keyword\">if</span> (f1[p] ^ f1[p - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> w1 = lim / p;</span><br><span class=\"line\">        ll x = f1[p - <span class=\"number\">1</span>], w3 = (ll)p * p, w2 = <span class=\"built_in\">min</span>((ll)lim, n / w3), d = n / p;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, w1) f2[i] -= f2[i * p] - x;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, w1 + <span class=\"number\">1</span>, w2) f2[i] -= f1[d / i] - x;</span><br><span class=\"line\">        <span class=\"built_in\">per</span>(i, lim, w3) f1[i] -= f1[i / p] - x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f2[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"exbsgs\">exBSGS</h2>\r\n<h3 id=\"定义-5\">定义</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; mp;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数-9\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">BSGS</span><span class=\"params\">(ll pls, ll a, ll b, ll p)</span> </span>&#123;</span><br><span class=\"line\">    pls %= p, a %= p, b %= p; mp.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    ll m = <span class=\"built_in\">ceil</span>(<span class=\"built_in\">sqrt</span>(p)), ls = <span class=\"number\">1</span>, rs = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, m) mp[ls * b % p] = i, ls = ls * a % p;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">        rs = rs * ls % p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mp.<span class=\"built_in\">count</span>(rs * pls % p)) <span class=\"keyword\">return</span> i * m - mp[rs * pls % p];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">exBSGS</span><span class=\"params\">(ll a, ll b, ll p)</span> </span>&#123;</span><br><span class=\"line\">    a %= p, b %= p;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pls = <span class=\"number\">1</span>, ct = <span class=\"number\">0</span>, g;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((g = __gcd(a, p)) &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> ct;</span><br><span class=\"line\">        p /= g, pls = pls * a / g % p, ct++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b % g) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; b /= g;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"built_in\">BSGS</span>(pls, a, b, p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ~ret ? ret + ct : <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"cipolla\">cipolla</h2>\r\n<h3 id=\"定义-6\">定义</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n; ll II;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cmp</span> &#123;</span></span><br><span class=\"line\">    ll r, i;</span><br><span class=\"line\">    cmp <span class=\"keyword\">operator</span> *(<span class=\"keyword\">const</span> cmp&amp; b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;(r * b.r + i * b.i % P * II) % P, (r * b.i + i * b.r) % P&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; U = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;;</span><br></pre></td></tr></table></figure>\r\n<p><code>modint</code> 版</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mint n, II;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cmp</span> &#123;</span></span><br><span class=\"line\">    mint r, i;</span><br><span class=\"line\">    cmp <span class=\"keyword\">operator</span> *(<span class=\"keyword\">const</span> cmp&amp; b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;r * b.r + i * b.i * II, r * b.i + i * b.r&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; U = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数-10\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pow1</span><span class=\"params\">(ll a, <span class=\"keyword\">int</span> n, ll r = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; n; n /= <span class=\"number\">2</span>, a = a * a % P)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = r * a % P;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">cmp <span class=\"title\">pow2</span><span class=\"params\">(cmp a, <span class=\"keyword\">int</span> n, cmp r = U)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; n; n /= <span class=\"number\">2</span>, a = a * a)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = r * a;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cipolla</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!n) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(P == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">pow1</span>(n, P / <span class=\"number\">2</span>) ^ <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    ll a;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> a = <span class=\"built_in\">rand</span>() % P, II = (a * a - n + P) % P; <span class=\"keyword\">while</span>(!a || <span class=\"built_in\">pow1</span>(II, P / <span class=\"number\">2</span>) == <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">pow2</span>(&#123;a, <span class=\"number\">1</span>&#125;, P / <span class=\"number\">2</span> + <span class=\"number\">1</span>).r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><code>modint</code> 版</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">cmp <span class=\"title\">Pow</span><span class=\"params\">(cmp a, <span class=\"keyword\">int</span> n, cmp r = U)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; n; n /= <span class=\"number\">2</span>, a = a * a)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = r * a;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cipolla</span><span class=\"params\">(mint n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(P == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> n.<span class=\"built_in\">val</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n.<span class=\"built_in\">pow</span>(P / <span class=\"number\">2</span>) != <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    mint a;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> a = <span class=\"built_in\">rand</span>(), II = a * a - n; <span class=\"keyword\">while</span>(a == <span class=\"number\">0</span> || II.<span class=\"built_in\">pow</span>(P / <span class=\"number\">2</span>) == <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Pow</span>(&#123;a, <span class=\"number\">1</span>&#125;, P / <span class=\"number\">2</span> + <span class=\"number\">1</span>).r.<span class=\"built_in\">val</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"miller-rabin-pollard-rho\">Miller Rabin &amp; Pollard Rho</h2>\r\n<h3 id=\"定义-7\">定义</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;ll&gt; as;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数-11\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">mul</span><span class=\"params\">(ll a, ll b, ll p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a * b - <span class=\"built_in\">ll</span>((<span class=\"keyword\">long</span> <span class=\"keyword\">double</span>)a / p * b + <span class=\"number\">0.5</span>) * p + p) % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">Pow</span><span class=\"params\">(ll a, ll n, ll p, ll r = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; n; n /= <span class=\"number\">2</span>, a = <span class=\"built_in\">mul</span>(a, a, p))</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = <span class=\"built_in\">mul</span>(r, a, p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">chk</span><span class=\"params\">(ll n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(ll a : &#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">61</span>, <span class=\"number\">24251</span>&#125;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == a) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">Pow</span>(a, n - <span class=\"number\">1</span>, n) ^ <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        ll k = n - <span class=\"number\">1</span>, t;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(~k &amp; <span class=\"number\">1</span>) k /= <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((t = <span class=\"built_in\">Pow</span>(a, k, n)) == <span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(t ^ <span class=\"number\">1</span> &amp;&amp; t ^ n - <span class=\"number\">1</span>) t = <span class=\"built_in\">mul</span>(t, t, n);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t ^ n - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">f</span><span class=\"params\">(ll x, ll c, ll p)</span> </span>&#123; <span class=\"keyword\">return</span> (<span class=\"built_in\">mul</span>(x, x, p) + c) % p; &#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">PR</span><span class=\"params\">(ll n)</span> </span>&#123;</span><br><span class=\"line\">    ll a = <span class=\"number\">0</span>, b = <span class=\"number\">0</span>, c = <span class=\"built_in\">rand</span>() % (n - <span class=\"number\">1</span>) + <span class=\"number\">1</span>, v = <span class=\"number\">1</span>, g;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; ; k *= <span class=\"number\">2</span>, a = b, v = <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, k) &#123;</span><br><span class=\"line\">            b = <span class=\"built_in\">f</span>(b, c, n), v = <span class=\"built_in\">mul</span>(v, <span class=\"built_in\">abs</span>(a - b), n);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!(i &amp; <span class=\"number\">127</span>) || i == k) &#123;</span><br><span class=\"line\">                g = __gcd(v, n);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(g &gt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> g;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(ll n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">chk</span>(n)) <span class=\"keyword\">return</span> as.<span class=\"built_in\">pb</span>(n);</span><br><span class=\"line\">    ll d; <span class=\"keyword\">do</span> d = <span class=\"built_in\">PR</span>(n); <span class=\"keyword\">while</span>(d == n);</span><br><span class=\"line\">    <span class=\"built_in\">solve</span>(d), <span class=\"built_in\">solve</span>(n / d);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"数据结构\">数据结构</h1>\r\n<h2 id=\"动态树\">动态树</h2>\r\n<h3 id=\"普通版-1\">普通版</h3>\r\n<h4 id=\"定义-8\">定义</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> c[N][<span class=\"number\">2</span>], f[N], r[N];</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"函数-12\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">id</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123; <span class=\"keyword\">return</span> c[f[o]][<span class=\"number\">1</span>] == o; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">nrt</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123; <span class=\"keyword\">return</span> f[o] &amp;&amp; c[f[o]][<span class=\"built_in\">id</span>(o)] == o; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pu</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">flip</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">swap</span>(c[o][<span class=\"number\">0</span>], c[o][<span class=\"number\">1</span>]), r[o] ^= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pd</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123; <span class=\"keyword\">if</span>(r[o]) <span class=\"built_in\">flip</span>(c[o][<span class=\"number\">0</span>]), <span class=\"built_in\">flip</span>(c[o][<span class=\"number\">1</span>]), r[o] = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rot</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> d)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = c[o][!d], &amp;x = c[k][d];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">nrt</span>(o)) c[f[o]][<span class=\"built_in\">id</span>(o)] = k;</span><br><span class=\"line\">    <span class=\"built_in\">pu</span>(x = f[c[o][!d] = x] = o), f[k] = f[o], <span class=\"built_in\">pu</span>(f[o] = k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123; <span class=\"keyword\">if</span>(<span class=\"built_in\">nrt</span>(o)) <span class=\"built_in\">dfs</span>(f[o]); <span class=\"built_in\">pd</span>(o); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">splay</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(o);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> fa; <span class=\"built_in\">nrt</span>(o); <span class=\"built_in\">rot</span>(f[o], !<span class=\"built_in\">id</span>(o)))</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">nrt</span>(fa = f[o])) <span class=\"built_in\">rot</span>(<span class=\"built_in\">id</span>(o) ^ <span class=\"built_in\">id</span>(fa) ? fa : f[fa], !<span class=\"built_in\">id</span>(o));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">acc</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; o; o = f[x = o])</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(o), c[o][<span class=\"number\">1</span>] = x, <span class=\"built_in\">pu</span>(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mkrt</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123; <span class=\"built_in\">acc</span>(o), <span class=\"built_in\">splay</span>(o), <span class=\"built_in\">flip</span>(o); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">link</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">mkrt</span>(u), <span class=\"built_in\">acc</span>(v), <span class=\"built_in\">splay</span>(v), <span class=\"built_in\">pu</span>(f[u] = v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cut</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">mkrt</span>(u), <span class=\"built_in\">acc</span>(v), <span class=\"built_in\">splay</span>(v), c[v][<span class=\"number\">0</span>] = f[u] = <span class=\"number\">0</span>, <span class=\"built_in\">pu</span>(v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"维护子树-size-版\">维护子树 <code>size</code> 版</h3>\r\n<h4 id=\"定义-9\">定义</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> c[N][<span class=\"number\">2</span>], f[N], r[N], s[N], si[N];</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"函数-13\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">id</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123; <span class=\"keyword\">return</span> c[f[o]][<span class=\"number\">1</span>] == o; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">nrt</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123; <span class=\"keyword\">return</span> f[o] &amp;&amp; c[f[o]][<span class=\"built_in\">id</span>(o)] == o; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pu</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    s[o] = s[c[o][<span class=\"number\">0</span>]] + s[c[o][<span class=\"number\">1</span>]] + si[o] + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">flip</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">swap</span>(c[o][<span class=\"number\">0</span>], c[o][<span class=\"number\">1</span>]), r[o] ^= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pd</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123; <span class=\"keyword\">if</span>(r[o]) <span class=\"built_in\">flip</span>(c[o][<span class=\"number\">0</span>]), <span class=\"built_in\">flip</span>(c[o][<span class=\"number\">1</span>]), r[o] = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rot</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> d)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = c[o][!d], &amp;x = c[k][d];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">nrt</span>(o)) c[f[o]][<span class=\"built_in\">id</span>(o)] = k;</span><br><span class=\"line\">    <span class=\"built_in\">pu</span>(x = f[c[o][!d] = x] = o), f[k] = f[o], <span class=\"built_in\">pu</span>(f[o] = k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123; <span class=\"keyword\">if</span>(<span class=\"built_in\">nrt</span>(o)) <span class=\"built_in\">dfs</span>(f[o]); <span class=\"built_in\">pd</span>(o); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">splay</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(o);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> fa; <span class=\"built_in\">nrt</span>(o); <span class=\"built_in\">rot</span>(f[o], !<span class=\"built_in\">id</span>(o)))</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">nrt</span>(fa = f[o])) <span class=\"built_in\">rot</span>(<span class=\"built_in\">id</span>(o) ^ <span class=\"built_in\">id</span>(fa) ? fa : f[fa], !<span class=\"built_in\">id</span>(o));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">acc</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; o; o = f[x = o])</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(o), si[o] += s[c[o][<span class=\"number\">1</span>]] - s[x], c[o][<span class=\"number\">1</span>] = x, <span class=\"built_in\">pu</span>(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mkrt</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123; <span class=\"built_in\">acc</span>(o), <span class=\"built_in\">splay</span>(o), <span class=\"built_in\">flip</span>(o); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">link</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">mkrt</span>(u), <span class=\"built_in\">acc</span>(v), <span class=\"built_in\">splay</span>(v), si[v] += s[u], <span class=\"built_in\">pu</span>(f[u] = v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cut</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">mkrt</span>(u), <span class=\"built_in\">acc</span>(v), <span class=\"built_in\">splay</span>(v), c[v][<span class=\"number\">0</span>] = f[u] = <span class=\"number\">0</span>, <span class=\"built_in\">pu</span>(v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"rbs-树\">RBS 树</h2>\r\n<h3 id=\"普通版-2\">普通版</h3>\r\n<h4 id=\"定义-10\">定义</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> rt, sz, ls[N], rs[N], c[N], s[N];</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"函数-14\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">gen</span><span class=\"params\">(ll x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ll k = <span class=\"number\">0x9ddfea08eb382d69</span>ull;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">3</span>) x *= k, x ^= x &gt;&gt; <span class=\"number\">47</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * k;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rnd</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> ll s = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (s += <span class=\"built_in\">gen</span>(s)) &amp; INT_MAX;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pu</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123; s[o] = s[ls[o]] + s[rs[o]] + <span class=\"number\">1</span>; <span class=\"keyword\">return</span> o; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bld</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span>&amp; o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt; r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    c[o = ++sz] = a[mid];</span><br><span class=\"line\">    <span class=\"built_in\">bld</span>(l, mid - <span class=\"number\">1</span>, ls[o]), <span class=\"built_in\">bld</span>(mid + <span class=\"number\">1</span>, r, rs[o]), <span class=\"built_in\">pu</span>(o); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">spt</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span>&amp; u, <span class=\"keyword\">int</span>&amp; v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!o) u = v = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x &lt; c[o]) <span class=\"built_in\">spt</span>(ls[v = o], x, u, ls[o]), <span class=\"built_in\">pu</span>(o);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">spt</span>(rs[u = o], x, rs[o], v), <span class=\"built_in\">pu</span>(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mrg</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!u || !v) <span class=\"keyword\">return</span> u + v;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">rnd</span>() % (s[u] + s[v]) &lt; s[u])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rs[u] = <span class=\"built_in\">mrg</span>(rs[u], v), <span class=\"built_in\">pu</span>(u);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ls[v] = <span class=\"built_in\">mrg</span>(u, ls[v]), <span class=\"built_in\">pu</span>(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ins</span><span class=\"params\">(<span class=\"keyword\">int</span>&amp; o, <span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">rnd</span>() % (s[o] + <span class=\"number\">1</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        c[++sz] = x, <span class=\"built_in\">spt</span>(o, x, ls[sz], rs[sz]), <span class=\"built_in\">pu</span>(o = sz);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">ins</span>(x &lt; c[o] ? ls[o] : rs[o], x), <span class=\"built_in\">pu</span>(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rmv</span><span class=\"params\">(<span class=\"keyword\">int</span>&amp; o, <span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t1, t2, t3;</span><br><span class=\"line\">    <span class=\"built_in\">spt</span>(o, x, t1, t3), <span class=\"built_in\">spt</span>(t1, x - <span class=\"number\">1</span>, t1, t2);</span><br><span class=\"line\">    o = <span class=\"built_in\">mrg</span>(<span class=\"built_in\">mrg</span>(t1, <span class=\"built_in\">mrg</span>(ls[t2], rs[t2])), t3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rk</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> re = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(o) o = x &gt; c[o] ? re += s[ls[o]] + <span class=\"number\">1</span>, rs[o] : ls[o]; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">kth</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k != s[ls[o]] + <span class=\"number\">1</span>)</span><br><span class=\"line\">        o = k &gt; s[ls[o]] ? k -= s[ls[o]] + <span class=\"number\">1</span>, rs[o] : ls[o];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c[o];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pre</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> re = -Inf)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(o) o = x &gt; c[o] ? re = <span class=\"built_in\">max</span>(re, c[o]), rs[o] : ls[o];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">suf</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> re = Inf)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(o) o = x &lt; c[o] ? re = <span class=\"built_in\">min</span>(re, c[o]), ls[o] : rs[o];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"可持久化版\">可持久化版</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;limits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> int64;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> int64 <span class=\"title\">Fingerprint</span><span class=\"params\">(int64 x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> int64 kMul = <span class=\"number\">0x9ddfea08eb382d69</span>ULL;</span><br><span class=\"line\">    x *= kMul, x ^= x &gt;&gt; <span class=\"number\">47</span>;</span><br><span class=\"line\">    x *= kMul, x ^= x &gt;&gt; <span class=\"number\">47</span>;</span><br><span class=\"line\">    x *= kMul, x ^= x &gt;&gt; <span class=\"number\">47</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * kMul;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> int64 <span class=\"title\">Random</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> int64 Seed = <span class=\"number\">2</span>;</span><br><span class=\"line\">    Seed += <span class=\"built_in\">Fingerprint</span>(Seed);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Seed &amp; numeric_limits&lt;int64&gt;::<span class=\"built_in\">max</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> DataType;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">RBST</span> &#123;</span></span><br><span class=\"line\">    RBST *ChildL, *ChildR;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Size;</span><br><span class=\"line\">    DataType Data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">RBST</span>() &#123; ChildL = ChildR = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">GetSize</span><span class=\"params\">(<span class=\"keyword\">const</span> RBST* root)</span> </span>&#123; <span class=\"keyword\">return</span> root ? root-&gt;Size : <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">LowerBoundIndex</span><span class=\"params\">(<span class=\"keyword\">const</span> RBST* root, DataType x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt;= root-&gt;Data) <span class=\"keyword\">return</span> <span class=\"built_in\">LowerBoundIndex</span>(root-&gt;ChildL, x);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sizeL = <span class=\"built_in\">GetSize</span>(root-&gt;ChildL);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">LowerBoundIndex</span>(root-&gt;ChildR, x) + sizeL + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">DataType <span class=\"title\">Select</span><span class=\"params\">(<span class=\"keyword\">const</span> RBST* root, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sizeL = <span class=\"built_in\">GetSize</span>(root-&gt;ChildL);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index == sizeL) <span class=\"keyword\">return</span> root-&gt;Data;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt; sizeL) <span class=\"keyword\">return</span> <span class=\"built_in\">Select</span>(root-&gt;ChildL, index);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Select</span>(root-&gt;ChildR, index - sizeL - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">RBST* <span class=\"title\">SetSize</span><span class=\"params\">(RBST* root)</span> </span>&#123;</span><br><span class=\"line\">    root-&gt;Size = <span class=\"built_in\">GetSize</span>(root-&gt;ChildL) + <span class=\"built_in\">GetSize</span>(root-&gt;ChildR) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">RBSTree</span> &#123;</span></span><br><span class=\"line\">    vector&lt;RBST*&gt; Nodes;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">RBST* <span class=\"title\">NewNode</span><span class=\"params\">(RBST* node)</span> </span>&#123;</span><br><span class=\"line\">        Nodes.<span class=\"built_in\">push_back</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">RBST</span>(*node));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Nodes.<span class=\"built_in\">back</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Split</span><span class=\"params\">(RBST* root, DataType x, RBST*&amp; treeL, RBST*&amp; treeR)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">            treeL = treeR = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x &lt;= root-&gt;Data) &#123;</span><br><span class=\"line\">            RBST *newRoot = <span class=\"built_in\">NewNode</span>(root);</span><br><span class=\"line\">            <span class=\"built_in\">Split</span>(root-&gt;ChildL, x, treeL, newRoot-&gt;ChildL);</span><br><span class=\"line\">            treeR = <span class=\"built_in\">SetSize</span>(newRoot);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            RBST* newRoot = <span class=\"built_in\">NewNode</span>(root);</span><br><span class=\"line\">            <span class=\"built_in\">Split</span>(root-&gt;ChildR, x, newRoot-&gt;ChildR, treeR);</span><br><span class=\"line\">            treeL = <span class=\"built_in\">SetSize</span>(newRoot);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">RBST* <span class=\"title\">Join</span><span class=\"params\">(RBST* treeL, RBST* treeR)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sizeL = <span class=\"built_in\">GetSize</span>(treeL);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sizeR = <span class=\"built_in\">GetSize</span>(treeR);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = sizeL + sizeR;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Random</span>() % size &lt; sizeL) &#123;</span><br><span class=\"line\">            RBST* newRoot = <span class=\"built_in\">NewNode</span>(treeL);</span><br><span class=\"line\">            newRoot-&gt;ChildR = <span class=\"built_in\">Join</span>(treeL-&gt;ChildR, treeR);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">SetSize</span>(newRoot);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            RBST* newRoot = <span class=\"built_in\">NewNode</span>(treeR);</span><br><span class=\"line\">            newRoot-&gt;ChildL = <span class=\"built_in\">Join</span>(treeL, treeR-&gt;ChildL);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">SetSize</span>(newRoot);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">RBST* <span class=\"title\">InsertAsRoot</span><span class=\"params\">(RBST* root, DataType item)</span> </span>&#123;</span><br><span class=\"line\">        Nodes.<span class=\"built_in\">push_back</span>(<span class=\"keyword\">new</span> RBST);</span><br><span class=\"line\">        RBST *newRoot = Nodes.<span class=\"built_in\">back</span>();</span><br><span class=\"line\">        newRoot-&gt;Data = item;</span><br><span class=\"line\">        <span class=\"built_in\">Split</span>(root, item + <span class=\"number\">1</span>, newRoot-&gt;ChildL, newRoot-&gt;ChildR);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">SetSize</span>(newRoot);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">RBST* <span class=\"title\">Insert</span><span class=\"params\">(RBST* root, DataType item)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Random</span>() % (<span class=\"built_in\">GetSize</span>(root) + <span class=\"number\">1</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">InsertAsRoot</span>(root, item);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item &lt; root-&gt;Data) &#123;</span><br><span class=\"line\">            RBST *newRoot = <span class=\"built_in\">NewNode</span>(root);</span><br><span class=\"line\">            newRoot-&gt;ChildL = <span class=\"built_in\">Insert</span>(root-&gt;ChildL, item);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">SetSize</span>(newRoot);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            RBST *newRoot = <span class=\"built_in\">NewNode</span>(root);</span><br><span class=\"line\">            newRoot-&gt;ChildR = <span class=\"built_in\">Insert</span>(root-&gt;ChildR, item);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">SetSize</span>(newRoot);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">RBST* <span class=\"title\">Remove</span><span class=\"params\">(RBST* root, DataType item)</span> </span>&#123;</span><br><span class=\"line\">        RBST *tree1, *tree2, *tree3, *tree4 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">Split</span>(root, item, tree1, tree2);</span><br><span class=\"line\">        <span class=\"built_in\">Split</span>(tree2, item + <span class=\"number\">1</span>, tree2, tree3);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree2) tree4 = <span class=\"built_in\">Join</span>(tree2-&gt;ChildL, tree2-&gt;ChildR);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Join</span>(<span class=\"built_in\">Join</span>(tree1, tree4), tree3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; Nodes.<span class=\"built_in\">size</span>(); ++i) <span class=\"keyword\">delete</span> Nodes[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"k-d-树\">K-D 树</h2>\r\n<h3 id=\"定义-11\">定义</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l + r) / 2)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lc o * 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rc o * 2 + 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lch l, mid, lc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rch mid + 1, r, rc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> D, L[N * <span class=\"number\">4</span>][K], R[N * <span class=\"number\">4</span>][K];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x[K];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, K) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x[i]); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"keyword\">const</span> node&amp; b)<span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x[D] &lt; b.x[D];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; a[N];</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数-15\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">lf <span class=\"title\">sq</span><span class=\"params\">(lf x)</span> </span>&#123; <span class=\"keyword\">return</span> x * x; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pu</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        L[o][i] = <span class=\"built_in\">min</span>(L[lc][i], L[rc][i]);</span><br><span class=\"line\">        R[o][i] = <span class=\"built_in\">max</span>(R[lc][i], R[rc][i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bld</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, K) L[o][i] = R[o][i] = a[l].x[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lf va[K] = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, K) &#123;</span><br><span class=\"line\">        lf av = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, l, r) av += a[j].x[i];</span><br><span class=\"line\">        av /= r - l + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, l, r) va[i] += <span class=\"built_in\">sq</span>(a[j].x[i] - av);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    D = <span class=\"built_in\">max_element</span>(va, va + K) - va;</span><br><span class=\"line\">    <span class=\"built_in\">nth_element</span>(a + l, a + mid, a + r + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">bld</span>(lch), <span class=\"built_in\">bld</span>(rch), <span class=\"built_in\">pu</span>(o);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"欧几里得距离平方\">欧几里得距离平方</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">sq</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">1ll</span> * x * x; &#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">mine</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> x[], ll re = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, K) re += <span class=\"built_in\">sq</span>(<span class=\"built_in\">max</span>(L[o][i] - x[i], <span class=\"number\">0</span>)) + <span class=\"built_in\">sq</span>(<span class=\"built_in\">max</span>(x[i] - R[o][i], <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">maxe</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> x[], ll re = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, K) re += <span class=\"built_in\">max</span>(<span class=\"built_in\">sq</span>(x[i] - L[o][i]), <span class=\"built_in\">sq</span>(x[i] - R[o][i]));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"曼哈顿距离\">曼哈顿距离</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">minm</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> x[], <span class=\"keyword\">int</span> re = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, K) re += <span class=\"built_in\">max</span>(L[o][i] - x[i], <span class=\"number\">0</span>) + <span class=\"built_in\">max</span>(x[i] - R[o][i], <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxm</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> x[], <span class=\"keyword\">int</span> re = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, K) re += <span class=\"built_in\">max</span>(<span class=\"built_in\">abs</span>(x[i] - L[o][i]), <span class=\"built_in\">abs</span>(x[i] - R[o][i]));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"切比雪夫距离\">切比雪夫距离</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">minc</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> x[], <span class=\"keyword\">int</span> re = Inf)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, K) re = <span class=\"built_in\">max</span>(re, <span class=\"built_in\">max</span>(L[o][i] - x[i], <span class=\"number\">0</span>) + <span class=\"built_in\">max</span>(x[i] - R[o][i], <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxc</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> x[], <span class=\"keyword\">int</span> re = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, K) re = <span class=\"built_in\">max</span>(&#123;re, <span class=\"built_in\">abs</span>(x[i] - L[o][i]), <span class=\"built_in\">abs</span>(x[i] - R[o][i])&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"最近点查询\">最近点查询</h3>\r\n<h4 id=\"定义-12\">定义</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll res;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"函数-16\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> x[], <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r) <span class=\"keyword\">return</span> <span class=\"built_in\"><span class=\"keyword\">void</span></span>(res = <span class=\"built_in\">mine</span>(o, x));</span><br><span class=\"line\">    ll dl = <span class=\"built_in\">mine</span>(lc, x), dr = <span class=\"built_in\">mine</span>(rc, x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dl &lt; dr) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dl &lt; res) <span class=\"built_in\">qry</span>(x, lch);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dr &lt; res) <span class=\"built_in\">qry</span>(x, rch);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dr &lt; res) <span class=\"built_in\">qry</span>(x, rch);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dl &lt; res) <span class=\"built_in\">qry</span>(x, lch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"初始化\">初始化</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res = Inf;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"最远点查询\">最远点查询</h3>\r\n<h4 id=\"定义-13\">定义</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll res;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"函数-17\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> x[], <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r) <span class=\"keyword\">return</span> <span class=\"built_in\"><span class=\"keyword\">void</span></span>(res = <span class=\"built_in\">maxe</span>(o, x));</span><br><span class=\"line\">    ll dl = <span class=\"built_in\">maxe</span>(lc, x), dr = <span class=\"built_in\">maxe</span>(rc, x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dl &gt; dr) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dl &gt; res) <span class=\"built_in\">qry</span>(x, lch);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dr &gt; res) <span class=\"built_in\">qry</span>(x, rch);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dr &gt; res) <span class=\"built_in\">qry</span>(x, rch);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dl &gt; res) <span class=\"built_in\">qry</span>(x, lch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"初始化-1\">初始化</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"矩形判定\">矩形判定</h3>\r\n<h4 id=\"矩形是否包含所有点\">矩形是否包含所有点</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">chk1</span><span class=\"params\">(<span class=\"keyword\">int</span> l[], <span class=\"keyword\">int</span> r[], <span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> re = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, K) re &amp;= l[i] &lt;= L[o][i] &amp;&amp; R[o][i] &lt;= r[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"矩形是否可能包含点\">矩形是否可能包含点</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">chk2</span><span class=\"params\">(<span class=\"keyword\">int</span> l[], <span class=\"keyword\">int</span> r[], <span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> re = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, K) re &amp;= <span class=\"built_in\">max</span>(l[i], L[o][i]) &lt;= <span class=\"built_in\">min</span>(r[i], R[o][i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"圆判定\">圆判定</h3>\r\n<h4 id=\"圆是否包含所有点\">圆是否包含所有点</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">chk1</span><span class=\"params\">(<span class=\"keyword\">int</span> x[], <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">maxe</span>(x, o) &lt;= <span class=\"number\">1ll</span> * r * r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"圆是否可能包含点\">圆是否可能包含点</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">chk2</span><span class=\"params\">(<span class=\"keyword\">int</span> x[], <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mine</span>(x, o) &lt;= <span class=\"number\">1ll</span> * r * r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"图论\">图论</h1>\r\n<h2 id=\"虚树\">虚树</h2>\r\n<h3 id=\"vector-版\"><code>vector</code> 版</h3>\r\n<h4 id=\"定义-14\">定义</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n, a[N], tp, stk[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> idx, dfn[N], d[N], fa[<span class=\"number\">20</span>][N];</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; G[N], T[N];</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"函数-18\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">    dfn[u] = ++idx;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">19</span>) fa[i][u] = fa[i - <span class=\"number\">1</span>][fa[i - <span class=\"number\">1</span>][u]];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) <span class=\"keyword\">if</span>(v ^ fa[<span class=\"number\">0</span>][u])</span><br><span class=\"line\">        d[v] = d[u] + <span class=\"number\">1</span>, fa[<span class=\"number\">0</span>][v] = u, <span class=\"built_in\">dfs</span>(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d[u] &lt; d[v]) <span class=\"built_in\">swap</span>(u, v);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, <span class=\"number\">19</span>) <span class=\"keyword\">if</span>(d[u] - d[v] &gt;&gt; i &amp; <span class=\"number\">1</span>) u = fa[i][u];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u == v) <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, <span class=\"number\">19</span>, <span class=\"number\">0</span>) <span class=\"keyword\">if</span>(fa[i][u] ^ fa[i][v]) u = fa[i][u], v = fa[i][v];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fa[<span class=\"number\">0</span>][u];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bld</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(a + <span class=\"number\">1</span>, a + k + <span class=\"number\">1</span>, [](<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123; <span class=\"keyword\">return</span> dfn[a] &lt; dfn[b]; &#125;);</span><br><span class=\"line\">    stk[++tp] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, k) <span class=\"keyword\">if</span>(a[i] &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"built_in\">lca</span>(a[i], stk[tp]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(d[stk[tp]] &gt; d[x]) tp--, T[d[stk[tp]] &gt; d[x] ? stk[tp] : x].<span class=\"built_in\">pb</span>(stk[tp + <span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(stk[tp] ^ x) stk[++tp] = x;</span><br><span class=\"line\">        stk[++tp] = a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(--tp) T[stk[tp]].<span class=\"built_in\">pb</span>(stk[tp + <span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clr</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) <span class=\"built_in\">clr</span>(v); T[u].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"快很多版\">快很多版</h3>\r\n<h4 id=\"定义-15\">定义</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n, a[N], p, stk[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[N], fa[N], sz[N], son[N], tp[N], idx, dfn[N];</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; G[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> eid, he[N];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge</span> &#123;</span> <span class=\"keyword\">int</span> v, nx; &#125; e[N * <span class=\"number\">2</span>];</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"函数-19\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">    sz[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) &#123;</span><br><span class=\"line\">        d[v] = d[u] + <span class=\"number\">1</span>, <span class=\"built_in\">dfs</span>(v), sz[u] += sz[v];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sz[v] &gt; sz[son[u]]) son[u] = v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> top)</span> </span>&#123;</span><br><span class=\"line\">    tp[u] = top, dfn[u] = ++idx;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(son[u]) <span class=\"built_in\">Dfs</span>(son[u], top);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) <span class=\"keyword\">if</span>(v ^ son[u]) <span class=\"built_in\">Dfs</span>(v, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; tp[u] ^ tp[v]; d[tp[u]] &gt; d[tp[v]] ? u = fa[tp[u]] : v = fa[tp[v]]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d[u] &lt; d[v] ? u : v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> t = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    e[++eid] = &#123;v, h1[u]&#125;, h1[u] = eid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bld</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(a + <span class=\"number\">1</span>, a + k + <span class=\"number\">1</span>, [](<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123; <span class=\"keyword\">return</span> dfn[a] &lt; dfn[b]; &#125;);</span><br><span class=\"line\">    stk[++p] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, k) <span class=\"keyword\">if</span>(a[i] &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"built_in\">lca</span>(a[i], stk[p]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(d[stk[p]] &gt; d[x])</span><br><span class=\"line\">            p--, <span class=\"built_in\">add</span>(d[stk[p]] &gt; d[x] ? stk[p] : x, stk[p + <span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(stk[p] ^ x) stk[++p] = x;</span><br><span class=\"line\">        stk[++p] = a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(--p) <span class=\"built_in\">add</span>(stk[p], stk[p + <span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"超快版倍增求-lca\">超快版倍增求 <code>LCA</code></h2>\r\n<h3 id=\"定义-16\">定义</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> dl[N], dr[N], fa[<span class=\"number\">20</span>][N];</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数-20\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dl[u] &lt; dl[v]) <span class=\"built_in\">swap</span>(u, v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dl[v] &lt;= dl[u] &amp;&amp; dl[u] &lt; dr[v]) <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, <span class=\"number\">19</span>, <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = fa[i][u];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x &amp;&amp; dl[x] &gt; dl[v]) u = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fa[<span class=\"number\">0</span>][u];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"最大流\">最大流</h2>\r\n<h3 id=\"int-版\"><code>int</code> 版</h3>\r\n<h4 id=\"定义-17\">定义</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n, m, s, t;</span><br><span class=\"line\"><span class=\"keyword\">int</span> eid = <span class=\"number\">1</span>, he[N], nw[N], d[N], q[N];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge</span> &#123;</span> <span class=\"keyword\">int</span> v, nx, c; &#125; e[M * <span class=\"number\">2</span>];</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"函数-21\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> c)</span> </span>&#123;</span><br><span class=\"line\">    e[++eid] = &#123;v, he[u], c&#125;, he[u] = eid;</span><br><span class=\"line\">    e[++eid] = &#123;u, he[v], <span class=\"number\">0</span>&#125;, he[v] = eid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bfs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">mem</span>(d, <span class=\"number\">0</span>), <span class=\"built_in\">memcpy</span>(nw, he, <span class=\"keyword\">sizeof</span> he);</span><br><span class=\"line\">    q[<span class=\"number\">1</span>] = s, d[s] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">1</span>, r = <span class=\"number\">1</span>; l &lt;= r; l++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = q[l];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = he[u], v; v = e[i].v; i = e[i].nx)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(e[i].c &amp;&amp; !d[v]) q[++r] = v, d[v] = d[u] + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d[t];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> lim, <span class=\"keyword\">int</span> re = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u == t) <span class=\"keyword\">return</span> lim;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>&amp; i = nw[u], v; v = e[i].v; i = e[i].nx)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(e[i].c &amp;&amp; d[v] == d[u] + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> t = <span class=\"built_in\">dfs</span>(v, <span class=\"built_in\">min</span>(e[i].c, lim));</span><br><span class=\"line\">        e[i].c -= t, e[i ^ <span class=\"number\">1</span>].c += t, re += t, lim -= t;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!lim) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lim) d[u] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"使用-1\">使用</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> flow = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>()) flow += <span class=\"built_in\">dfs</span>(s, Inf);</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"long-long-版\"><code>long long</code> 版</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bfs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">mem</span>(d, <span class=\"number\">0</span>), <span class=\"built_in\">memcpy</span>(nw, he, <span class=\"keyword\">sizeof</span> he);</span><br><span class=\"line\">    q[<span class=\"number\">1</span>] = s, d[s] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">1</span>, r = <span class=\"number\">1</span>; l &lt;= r; l++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = q[l];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = he[u], v; v = e[i].v; i = e[i].nx)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(e[i].c &amp;&amp; !d[v]) q[++r] = v, d[v] = d[u] + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d[t];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, ll lim, ll re = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u == t) <span class=\"keyword\">return</span> lim;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>&amp; i = nw[u], v; v = e[i].v; i = e[i].nx)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(e[i].c &amp;&amp; d[v] == d[u] + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        ll t = <span class=\"built_in\">dfs</span>(v, <span class=\"built_in\">min</span>((ll)e[i].c, lim));</span><br><span class=\"line\">        e[i].c -= t, e[i ^ <span class=\"number\">1</span>].c += t, re += t, lim -= t;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!lim) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lim) d[u] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"最小费用最大流\">最小费用最大流</h2>\r\n<h3 id=\"ssp-算法\">SSP 算法</h3>\r\n<h4 id=\"定义-18\">定义</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n, m, s, t, flow, cost;</span><br><span class=\"line\"><span class=\"keyword\">int</span> eid = <span class=\"number\">1</span>, he[N], nw[N], q[N], d[N], vs[N];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge</span> &#123;</span> <span class=\"keyword\">int</span> v, nx, c, w; &#125; e[M * <span class=\"number\">2</span>];</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"函数-22\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> c, <span class=\"keyword\">int</span> w)</span> </span>&#123;</span><br><span class=\"line\">    e[++eid] = &#123;v, he[u], c, w&#125;, he[u] = eid;</span><br><span class=\"line\">    e[++eid] = &#123;u, he[v], <span class=\"number\">0</span>, -w&#125;, he[v] = eid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">spfa</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">mem</span>(d, <span class=\"number\">63</span>), <span class=\"built_in\">memcpy</span>(nw, he, <span class=\"keyword\">sizeof</span> he);</span><br><span class=\"line\">    q[<span class=\"number\">0</span>] = s, d[s] = <span class=\"number\">0</span>, vs[s] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">0</span>, r = <span class=\"number\">0</span>; l &lt;= r; l++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = q[l % N]; vs[u] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = he[u], v; v = e[i].v; i = e[i].nx)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(e[i].c &amp;&amp; d[u] + e[i].w &lt; d[v]) &#123;</span><br><span class=\"line\">            d[v] = d[u] + e[i].w;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!vs[v]) q[++r % N] = v, vs[v] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d[t] &lt; d[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> lim, <span class=\"keyword\">int</span> re = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u == t) <span class=\"keyword\">return</span> lim;</span><br><span class=\"line\">    vs[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>&amp; i = nw[u], v; v = e[i].v; i = e[i].nx)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vs[v] &amp;&amp; e[i].c &amp;&amp; d[v] == d[u] + e[i].w) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> t = <span class=\"built_in\">dfs</span>(v, <span class=\"built_in\">min</span>(lim, e[i].c));</span><br><span class=\"line\">        e[i].c -= t, e[i ^ <span class=\"number\">1</span>].c += t, re += t, lim -= t, cost += t * e[i].w;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!lim) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lim) d[u] = d[<span class=\"number\">0</span>];</span><br><span class=\"line\">    vs[u] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"使用-2\">使用</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"built_in\">spfa</span>()) flow += <span class=\"built_in\">dfs</span>(s, <span class=\"number\">1e9</span>);</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"primal-dual-原始对偶算法\">Primal-Dual 原始对偶算法</h3>\r\n<h4 id=\"定义-19\">定义</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n, m, s, t, flow, cost;</span><br><span class=\"line\"><span class=\"keyword\">int</span> eid = <span class=\"number\">1</span>, he[N], d[N], pre[N];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge</span> &#123;</span> <span class=\"keyword\">int</span> v, nx, c, w; &#125; e[M * <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> d, u;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"keyword\">const</span> node&amp; b)<span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d &gt; b.d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"函数-23\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> c, <span class=\"keyword\">int</span> w)</span> </span>&#123;</span><br><span class=\"line\">    e[++eid] = &#123;v, he[u], c, w&#125;, he[u] = eid;</span><br><span class=\"line\">    e[++eid] = &#123;u, he[v], <span class=\"number\">0</span>, -w&#125;, he[v] = eid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dji</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    priority_queue&lt;node&gt; q;</span><br><span class=\"line\">    <span class=\"built_in\">mem</span>(d, <span class=\"number\">63</span>), q.<span class=\"built_in\">push</span>(&#123;d[s] = <span class=\"number\">0</span>, s&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> [dis, u] = q.<span class=\"built_in\">top</span>(); q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dis &gt; d[u]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = he[u], v; v = e[i].v; i = e[i].nx) <span class=\"keyword\">if</span>(e[i].c) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> w = d[u] + e[i].w - h[v] + h[u];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(w &lt; d[v]) pre[v] = i ^ <span class=\"number\">1</span>, q.<span class=\"built_in\">push</span>(&#123;d[v] = w, v&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) h[i] += d[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d[t] &lt; d[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"使用-3\">使用</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"built_in\">dji</span>()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mi = Inf;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> u = t, i; i = pre[u]; u = e[i].v) mi = <span class=\"built_in\">min</span>(mi, e[i ^ <span class=\"number\">1</span>].c);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> u = t, i; i = pre[u]; u = e[i].v) e[i].c += mi, e[i ^ <span class=\"number\">1</span>].c -= mi;</span><br><span class=\"line\">    flow += mi, cost += mi * h[t];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"二分图最大匹配\">二分图最大匹配</h2>\r\n<h3 id=\"定义-20\">定义</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n, m, vs[N], mch[N];</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; G[N];</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数-24\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vs[u] == s) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    vs[u] = s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) <span class=\"keyword\">if</span>(!mch[v] || <span class=\"built_in\">dfs</span>(mch[v], s)) <span class=\"keyword\">return</span> mch[v] = u;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"使用-4\">使用</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> as = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"keyword\">if</span>(<span class=\"built_in\">dfs</span>(i, i)) as++;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"sat-问题\">2-SAT 问题</h2>\r\n<h3 id=\"定义-21\">定义</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n, m, co[N * <span class=\"number\">2</span>], stk[N * <span class=\"number\">2</span>], tp;</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; G[N * <span class=\"number\">2</span>];</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数-25\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">    G[u * <span class=\"number\">2</span> + !a].<span class=\"built_in\">pb</span>(v * <span class=\"number\">2</span> + b);</span><br><span class=\"line\">    G[v * <span class=\"number\">2</span> + !b].<span class=\"built_in\">pb</span>(u * <span class=\"number\">2</span> + a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(co[u] | co[u ^ <span class=\"number\">1</span>]) <span class=\"keyword\">return</span> co[u];</span><br><span class=\"line\">    co[u] = <span class=\"number\">1</span>, stk[++tp] = u;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) <span class=\"keyword\">if</span>(!<span class=\"built_in\">dfs</span>(v)) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">twoSat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!co[i * <span class=\"number\">2</span>] &amp;&amp; !co[i * <span class=\"number\">2</span> + <span class=\"number\">1</span>] &amp;&amp; !<span class=\"built_in\">dfs</span>(i * <span class=\"number\">2</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(tp) co[stk[tp--]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!<span class=\"built_in\">dfs</span>(i * <span class=\"number\">2</span> + <span class=\"number\">1</span>)) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"字符串\">字符串</h1>\r\n<h2 id=\"manacher-求偶回文串\">manacher 求偶回文串</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>&amp; j = ma &gt; i ? <span class=\"built_in\">min</span>(R[p * <span class=\"number\">2</span> - i], ma - i) : <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(s[i - j] == s[i + j + <span class=\"number\">1</span>]) j++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i + j &gt; ma) ma = i + j, p = i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"回文自动机\">回文自动机</h2>\r\n<h3 id=\"普通版-3\">普通版</h3>\r\n<h4 id=\"定义-22\">定义</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> s[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, sz = <span class=\"number\">1</span>, nw, len[N], f[N], ch[N][<span class=\"number\">26</span>];</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"函数-26\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ins</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> jmp = [&amp;](<span class=\"keyword\">int</span> o) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(s[i - len[o] - <span class=\"number\">1</span>] != s[i]) o = f[o];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> o = <span class=\"built_in\">jmp</span>(nw), c = s[i] - <span class=\"number\">97</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!ch[o][c]]) &#123;</span><br><span class=\"line\">        f[++sz] = ch[<span class=\"built_in\">jmp</span>(f[o])][c];</span><br><span class=\"line\">        len[ch[o][c] = sz] = len[o] + <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nw = ch[o][c];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"预处理-4\">预处理</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">len[<span class=\"number\">1</span>] = <span class=\"number\">-1</span>, f[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"偶回文版\">偶回文版</h3>\r\n<h4 id=\"函数-27\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ins</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> jmp = [&amp;](<span class=\"keyword\">int</span> o) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(o &amp;&amp; s[i - len[o] - <span class=\"number\">1</span>] != s[i]) o = f[o];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> o = <span class=\"built_in\">jmp</span>(nw), c = s[i] - <span class=\"number\">97</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!ch[o][c]]) &#123;</span><br><span class=\"line\">        f[++sz] = ch[<span class=\"built_in\">jmp</span>(f[o])][c];</span><br><span class=\"line\">        len[ch[o][c] = sz] = len[o] + <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nw = ch[o][c];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"预处理-5\">预处理</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, <span class=\"number\">25</span>) ch[<span class=\"number\">0</span>][i] = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"后缀数组\">后缀数组</h2>\r\n<h3 id=\"定义-23\">定义</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n, m = <span class=\"number\">128</span>, sa[N], rk[N], tp[N], buc[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> h[<span class=\"number\">20</span>][N];</span><br><span class=\"line\"><span class=\"keyword\">char</span> s[N];</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数-28\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) buc[rk[i] = s[i]]++;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) buc[i] += buc[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, n, <span class=\"number\">1</span>) sa[buc[rk[i]]--] = i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>, p; <span class=\"built_in\">memset</span>(buc, p = <span class=\"number\">0</span>, m * <span class=\"number\">4</span> + <span class=\"number\">4</span>); k *= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, n - k + <span class=\"number\">1</span>, n) tp[++p] = i;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"keyword\">if</span>(sa[i] &gt; k) tp[++p] = sa[i] - k;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) buc[rk[i]]++;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) buc[i] += buc[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"built_in\">per</span>(i, n, <span class=\"number\">1</span>) sa[buc[rk[tp[i]]]--] = tp[i];</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(tp, rk, n * <span class=\"number\">4</span> + <span class=\"number\">4</span>), p = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) rk[sa[i]] = p += tp[sa[i]] ^ tp[sa[i - <span class=\"number\">1</span>]] || tp[sa[i] + k] ^ tp[sa[i - <span class=\"number\">1</span>] + k];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((m = p) &gt;= n) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">height</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(k ? k-- : <span class=\"number\">0</span>; s[i + k] == s[sa[rk[i] - <span class=\"number\">1</span>] + k]; k++);</span><br><span class=\"line\">        h[<span class=\"number\">0</span>][rk[i]] = k;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">19</span>) <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, n - (<span class=\"number\">1</span> &lt;&lt; i) + <span class=\"number\">1</span>)</span><br><span class=\"line\">        h[i][j] = <span class=\"built_in\">min</span>(h[i - <span class=\"number\">1</span>][j], h[i - <span class=\"number\">1</span>][j + (<span class=\"number\">1</span> &lt;&lt; (i - <span class=\"number\">1</span>))]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"后缀自动机\">后缀自动机</h2>\r\n<h3 id=\"定义-24\">定义</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> s[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, sz = <span class=\"number\">1</span>, nw = <span class=\"number\">1</span>, f[N], len[N], ch[N][<span class=\"number\">26</span>];</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数-29\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ins</span><span class=\"params\">(<span class=\"keyword\">int</span> c)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u = ++sz;</span><br><span class=\"line\">    len[u] = len[nw] + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nw &amp;&amp; !ch[nw][c]) ch[nw][c] = u, nw = f[nw];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!nw) f[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = ch[nw][c];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len[v] &gt; len[nw] + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            f[++sz] = f[v], <span class=\"built_in\">memcpy</span>(ch[sz], ch[v], <span class=\"keyword\">sizeof</span> ch[v]);</span><br><span class=\"line\">            f[v] = f[u] = sz, len[sz] = len[nw] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = nw; ch[x][c] == v; x = f[x]) ch[x][c] = sz;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> f[u] = v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nw = u;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"最小表示法\">最小表示法</h2>\r\n<h3 id=\"函数-30\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">char</span> s[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">1</span>, k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; n &amp;&amp; j &lt; n &amp;&amp; k &lt; n)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s[(i + k) % n] == s[(j + k) % n]) k++;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[(i + k) % n] &gt; s[(j + k) % n]) <span class=\"built_in\">swap</span>(i, j);</span><br><span class=\"line\">        j += k + <span class=\"number\">1</span>, k = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == j) i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(i, j);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<!-- flag of hidden posts -->","site":{"data":{}},"length":42331,"excerpt":"","more":"<p><strong>左手栏有目录。</strong></p>\r\n<p>出现的宏：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> lf = <span class=\"keyword\">double</span>;</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"有用的模板\">有用的模板</h1>\r\n<h2 id=\"fast-io\">Fast IO</h2>\r\n<h4 id=\"非负整数版\">非负整数版</h4>\r\n<h5 id=\"函数\">函数</h5>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> M = <span class=\"number\">1e6</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> streambuf* in = cin.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + in -&gt; sgetn(buf, M), p1 == p2) ? -1 : *p1++)</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> buf[M], *p1, *p2;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = gc, r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &lt; <span class=\"number\">48</span>) c = gc;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &gt; <span class=\"number\">47</span>) r = r * <span class=\"number\">10</span> + (c &amp; <span class=\"number\">15</span>), c = gc;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">wrt</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> streambuf* out = cout.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc out -&gt; sputc</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> c[<span class=\"number\">11</span>]; <span class=\"keyword\">int</span> sz = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> c[++sz] = x % <span class=\"number\">10</span>, x /= <span class=\"number\">10</span>; <span class=\"keyword\">while</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(sz) <span class=\"built_in\">pc</span>(c[sz--] + <span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"built_in\">pc</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h5 id=\"预处理\">预处理</h5>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"整数版\">整数版</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> M = <span class=\"number\">1e6</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> streambuf* in = cin.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc (p1 == p2 &amp;&amp; (p2 = (p1 = buf) + in -&gt; sgetn(buf, M), p1 == p2) ? -1 : *p1++)</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> buf[M], *p1, *p2;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = gc, r = <span class=\"number\">0</span>, f = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &lt; <span class=\"number\">48</span>) &#123; <span class=\"keyword\">if</span>(c == <span class=\"number\">45</span>) f = <span class=\"number\">-1</span>; c = gc; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &gt; <span class=\"number\">47</span>) r = r * <span class=\"number\">10</span> + (c &amp; <span class=\"number\">15</span>), c = gc;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r * f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">wrt</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> streambuf* out = cout.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc out -&gt; sputc</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> c[<span class=\"number\">11</span>]; <span class=\"keyword\">int</span> sz = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>) <span class=\"built_in\">pc</span>(<span class=\"number\">45</span>), x = -x;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> c[++sz] = x % <span class=\"number\">10</span>, x /= <span class=\"number\">10</span>; <span class=\"keyword\">while</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(sz) <span class=\"built_in\">pc</span>(c[sz--] + <span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"built_in\">pc</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>注：输出 <code>long long</code> 时 <code>wrt</code> 函数中的 <code>c</code> 数组大小要开到 <span class=\"math inline\">\\(20\\)</span>。</strong></p>\r\n<h2 id=\"atcoder-modint\">AtCoder-modint</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> uint = <span class=\"keyword\">unsigned</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ull = <span class=\"keyword\">unsigned</span> ll;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> ll <span class=\"title\">safe_mod</span><span class=\"params\">(ll x, ll m)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x %= m, x &lt; <span class=\"number\">0</span> ? x + m : x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> ll <span class=\"title\">pow_mod_constexpr</span><span class=\"params\">(ll x, ll n, <span class=\"keyword\">int</span> m)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    uint _m = m;</span><br><span class=\"line\">    ull r = <span class=\"number\">1</span>, _x = <span class=\"built_in\">safe_mod</span>(x, m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; n; n &gt;&gt;= <span class=\"number\">1</span>, _x = _x * _x % _m)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = r * _x % m;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"keyword\">bool</span> <span class=\"title\">is_prime_constexpr</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">2</span> || n == <span class=\"number\">7</span> || n == <span class=\"number\">61</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n % <span class=\"number\">2</span> == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    ll d = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~d &amp; <span class=\"number\">1</span>) d /= <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(ll a : &#123;<span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">61</span>&#125;) &#123;</span><br><span class=\"line\">        ll t = d, y = <span class=\"built_in\">pow_mod_constexpr</span>(a, t, n);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(t != n - <span class=\"number\">1</span> &amp;&amp; y != <span class=\"number\">1</span> &amp;&amp; y != n - <span class=\"number\">1</span>)</span><br><span class=\"line\">            y = y * y % n, t &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y != n - <span class=\"number\">1</span> &amp;&amp; t % <span class=\"number\">2</span> == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> pair&lt;ll, ll&gt; <span class=\"title\">inv_gcd</span><span class=\"params\">(ll a, ll b)</span> </span>&#123;</span><br><span class=\"line\">    a = <span class=\"built_in\">safe_mod</span>(a, b);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> &#123;b, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    ll s = b, t = a, m0 = <span class=\"number\">0</span>, m1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t) &#123;</span><br><span class=\"line\">        ll u = s / t;</span><br><span class=\"line\">        s -= t * u, m0 -= m1 * u;</span><br><span class=\"line\">        ll tmp = s;</span><br><span class=\"line\">        s = t, t = tmp, tmp = m0, m0 = m1, m1 = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m0 &lt; <span class=\"number\">0</span>) m0 += b / s;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;s, m0&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">barrett</span> &#123;</span></span><br><span class=\"line\">    uint m; ull im;</span><br><span class=\"line\">    <span class=\"built_in\">barrett</span>(uint m) :<span class=\"built_in\">m</span>(m), <span class=\"built_in\">im</span>(~<span class=\"number\">0ull</span> / m + <span class=\"number\">1</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\">uint <span class=\"title\">mul</span><span class=\"params\">(uint a, uint b)</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">        ull z = (ull)a * b;</span><br><span class=\"line\">        ull x = (<span class=\"keyword\">unsigned</span> __int128)z * im &gt;&gt; <span class=\"number\">64</span>;</span><br><span class=\"line\">        uint v = z - x * m;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m &lt;= v ? v + m : v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">int</span> m&gt; <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">static_modint</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">using</span> mint = static_modint;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> mint <span class=\"title\">raw</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">        mint x;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x._v = v, x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">static_modint</span>() : _v(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;class T&gt; <span class=\"title\">static_modint</span><span class=\"params\">(T v)</span> </span>&#123;</span><br><span class=\"line\">        ll x = v % m;</span><br><span class=\"line\">        _v = x &lt; <span class=\"number\">0</span> ? x + m : x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">uint <span class=\"title\">val</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> _v; &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>++() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(++_v == m) _v = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>--() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!_v--) _v = m - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>++(<span class=\"keyword\">int</span>) &#123;</span><br><span class=\"line\">        mint res = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        ++*<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>--(<span class=\"keyword\">int</span>) &#123;</span><br><span class=\"line\">        mint res = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        --*<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>+=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        _v += rhs._v;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_v &gt;= m) _v -= m;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>-=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        _v -= rhs._v;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_v &gt;= m) _v += m;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>*=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        ull z = _v;</span><br><span class=\"line\">        z *= rhs._v, _v = z % m;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>/=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span> = *<span class=\"keyword\">this</span> * rhs.<span class=\"built_in\">inv</span>(); &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>+() <span class=\"keyword\">const</span> &#123; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>-() <span class=\"keyword\">const</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>() - *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">mint <span class=\"title\">pow</span><span class=\"params\">(ll n)</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(<span class=\"number\">0</span> &lt;= n);</span><br><span class=\"line\">        mint x = *<span class=\"keyword\">this</span>, r = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(; n; n &gt;&gt;= <span class=\"number\">1</span>, x *= x) <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r *= x;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">mint <span class=\"title\">inv</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(prime) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(_v);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">pow</span>(m - <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> eg = <span class=\"built_in\">inv_gcd</span>(_v, m);</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(eg.first == <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> eg.second;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) += rhs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>-(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) -= rhs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>*(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) *= rhs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>/(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) /= rhs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lhs._v == rhs._v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>!=(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lhs._v != rhs._v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    uint _v;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">constexpr</span> <span class=\"keyword\">bool</span> prime = <span class=\"built_in\">is_prime_constexpr</span>(m);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">int</span> id&gt; <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dynamic_modint</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">using</span> mint = dynamic_modint;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">set_mod</span><span class=\"params\">(<span class=\"keyword\">int</span> m)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(<span class=\"number\">1</span> &lt;= m), bt = <span class=\"built_in\">barrett</span>(m);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> mint <span class=\"title\">raw</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">        mint x;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x._v = v, x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">dynamic_modint</span>() : _v(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;class T&gt; <span class=\"title\">dynamic_modint</span><span class=\"params\">(T v)</span> </span>&#123;</span><br><span class=\"line\">        ll x = v % bt.m;</span><br><span class=\"line\">        _v = x &lt; <span class=\"number\">0</span> ? x + bt.m : x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">uint <span class=\"title\">val</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> _v; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>++() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(++_v == bt.m) _v = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>--() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!_v--) _v = bt.m - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>++(<span class=\"keyword\">int</span>) &#123;</span><br><span class=\"line\">        mint res = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        ++*<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>--(<span class=\"keyword\">int</span>) &#123;</span><br><span class=\"line\">        mint res = *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        --*<span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>+=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        _v += rhs._v;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_v &gt;= bt.m) _v -= bt.m;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>-=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        _v += bt.m - rhs._v;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_v &gt;= bt.m) _v -= bt.m;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>*=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        _v = bt.<span class=\"built_in\">mul</span>(_v, rhs._v);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>/=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span> = *<span class=\"keyword\">this</span> * rhs.<span class=\"built_in\">inv</span>(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>+() <span class=\"keyword\">const</span> &#123; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>-() <span class=\"keyword\">const</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>() - *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">mint <span class=\"title\">pow</span><span class=\"params\">(ll n)</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(<span class=\"number\">0</span> &lt;= n);</span><br><span class=\"line\">        mint x = *<span class=\"keyword\">this</span>, r = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(; n; n &gt;&gt;= <span class=\"number\">1</span>, x *= x) <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r *= x;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">mint <span class=\"title\">inv</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> eg = <span class=\"built_in\">inv_gcd</span>(_v, bt.m);</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(eg.first == <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> eg.second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) += rhs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>-(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) -= rhs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>*(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) *= rhs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>/(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) /= rhs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lhs._v == rhs._v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>!=(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lhs._v != rhs._v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    uint _v;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> barrett bt;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">int</span> id&gt; barrett dynamic_modint&lt;id&gt;::bt = <span class=\"number\">998244353</span>;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"打比赛专用模板\">打比赛专用模板</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> uint = <span class=\"keyword\">unsigned</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ull = <span class=\"keyword\">unsigned</span> ll;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> ll <span class=\"title\">safe_mod</span><span class=\"params\">(ll x, ll m)</span> </span>&#123; <span class=\"keyword\">return</span> x %= m, x &lt; <span class=\"number\">0</span> ? x + m : x; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> ll <span class=\"title\">pow_mod_constexpr</span><span class=\"params\">(ll x, ll n, <span class=\"keyword\">int</span> m)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    uint _m = m; ull r = <span class=\"number\">1</span>, _x = <span class=\"built_in\">safe_mod</span>(x, m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; n; n &gt;&gt;= <span class=\"number\">1</span>, _x = _x * _x % _m) <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = r * _x % m;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> <span class=\"keyword\">bool</span> <span class=\"title\">is_prime_constexpr</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">2</span> || n == <span class=\"number\">7</span> || n == <span class=\"number\">61</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n % <span class=\"number\">2</span> == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    ll d = n - <span class=\"number\">1</span>; <span class=\"keyword\">while</span>(~d &amp; <span class=\"number\">1</span>) d /= <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(ll a : &#123;<span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">61</span>&#125;) &#123;</span><br><span class=\"line\">        ll t = d, y = <span class=\"built_in\">pow_mod_constexpr</span>(a, t, n);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(t != n - <span class=\"number\">1</span> &amp;&amp; y != <span class=\"number\">1</span> &amp;&amp; y != n - <span class=\"number\">1</span>) y = y * y % n, t &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(y != n - <span class=\"number\">1</span> &amp;&amp; t % <span class=\"number\">2</span> == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">constexpr</span> pair&lt;ll, ll&gt; <span class=\"title\">inv_gcd</span><span class=\"params\">(ll a, ll b)</span> </span>&#123;</span><br><span class=\"line\">    a = <span class=\"built_in\">safe_mod</span>(a, b);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> &#123;b, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    ll s = b, t = a, m0 = <span class=\"number\">0</span>, m1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t) &#123;</span><br><span class=\"line\">        ll u = s / t; s -= t * u, m0 -= m1 * u;</span><br><span class=\"line\">        ll tmp = s; s = t, t = tmp, tmp = m0, m0 = m1, m1 = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m0 &lt; <span class=\"number\">0</span>) m0 += b / s;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;s, m0&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">barrett</span> &#123;</span></span><br><span class=\"line\">    uint m; ull im;</span><br><span class=\"line\">    <span class=\"built_in\">barrett</span>(uint m) :<span class=\"built_in\">m</span>(m), <span class=\"built_in\">im</span>(~<span class=\"number\">0ull</span> / m + <span class=\"number\">1</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\">uint <span class=\"title\">mul</span><span class=\"params\">(uint a, uint b)</span> <span class=\"keyword\">const</span> </span>&#123;</span><br><span class=\"line\">        ull z = (ull)a * b; ull x = (<span class=\"keyword\">unsigned</span> __int128)z * im &gt;&gt; <span class=\"number\">64</span>; uint v = z - x * m;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> m &lt;= v ? v + m : v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">int</span> m&gt; <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">static_modint</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">using</span> mint = static_modint;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> mint <span class=\"title\">raw</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span> </span>&#123; mint x; <span class=\"keyword\">return</span> x._v = v, x; &#125;</span><br><span class=\"line\">    <span class=\"built_in\">static_modint</span>() : _v(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;class T&gt; <span class=\"title\">static_modint</span><span class=\"params\">(T v)</span> </span>&#123; ll x = v % m; _v = x &lt; <span class=\"number\">0</span> ? x + m : x; &#125;</span><br><span class=\"line\">    <span class=\"function\">uint <span class=\"title\">val</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> _v; &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>++() &#123; <span class=\"keyword\">if</span>(++_v == m) _v = <span class=\"number\">0</span>; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>--() &#123; <span class=\"keyword\">if</span>(!_v--) _v = m - <span class=\"number\">1</span>; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>++(<span class=\"keyword\">int</span>) &#123; mint res = *<span class=\"keyword\">this</span>; ++*<span class=\"keyword\">this</span>; <span class=\"keyword\">return</span> res; &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>--(<span class=\"keyword\">int</span>) &#123; mint res = *<span class=\"keyword\">this</span>; --*<span class=\"keyword\">this</span>; <span class=\"keyword\">return</span> res; &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>+=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123; _v += rhs._v; <span class=\"keyword\">if</span>(_v &gt;= m) _v -= m; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>-=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123; _v -= rhs._v; <span class=\"keyword\">if</span>(_v &gt;= m) _v += m; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>*=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123; ull z = _v; z *= rhs._v, _v = z % m; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>/=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span> = *<span class=\"keyword\">this</span> * rhs.<span class=\"built_in\">inv</span>(); &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>+() <span class=\"keyword\">const</span> &#123; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>-() <span class=\"keyword\">const</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>() - *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    <span class=\"function\">mint <span class=\"title\">pow</span><span class=\"params\">(ll n)</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"built_in\">assert</span>(<span class=\"number\">0</span> &lt;= n); mint x = *<span class=\"keyword\">this</span>, r = <span class=\"number\">1</span>; <span class=\"keyword\">for</span>(; n; n &gt;&gt;= <span class=\"number\">1</span>, x *= x) <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r *= x; <span class=\"keyword\">return</span> r; &#125;</span><br><span class=\"line\">    <span class=\"function\">mint <span class=\"title\">inv</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">if</span>(prime) &#123; <span class=\"built_in\">assert</span>(_v); <span class=\"keyword\">return</span> <span class=\"built_in\">pow</span>(m - <span class=\"number\">2</span>); &#125; <span class=\"keyword\">else</span> &#123; <span class=\"keyword\">auto</span> eg = <span class=\"built_in\">inv_gcd</span>(_v, m); <span class=\"built_in\">assert</span>(eg.first == <span class=\"number\">1</span>); <span class=\"keyword\">return</span> eg.second; &#125; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) += rhs; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>-(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) -= rhs; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>*(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) *= rhs; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>/(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) /= rhs; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> lhs._v == rhs._v; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>!=(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> lhs._v != rhs._v; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    uint _v;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">constexpr</span> <span class=\"keyword\">bool</span> prime = <span class=\"built_in\">is_prime_constexpr</span>(m);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">int</span> id&gt; <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dynamic_modint</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">using</span> mint = dynamic_modint;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">set_mod</span><span class=\"params\">(<span class=\"keyword\">int</span> m)</span> </span>&#123; <span class=\"built_in\">assert</span>(<span class=\"number\">1</span> &lt;= m), bt = <span class=\"built_in\">barrett</span>(m); &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> mint <span class=\"title\">raw</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span> </span>&#123; mint x; <span class=\"keyword\">return</span> x._v = v, x; &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dynamic_modint</span>() : _v(<span class=\"number\">0</span>) &#123;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">template</span>&lt;class T&gt; <span class=\"title\">dynamic_modint</span><span class=\"params\">(T v)</span> </span>&#123; ll x = v % bt.m; _v = x &lt; <span class=\"number\">0</span> ? x + bt.m : x; &#125;</span><br><span class=\"line\">    <span class=\"function\">uint <span class=\"title\">val</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">return</span> _v; &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>++() &#123; <span class=\"keyword\">if</span>(++_v == bt.m) _v = <span class=\"number\">0</span>; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>--() &#123; <span class=\"keyword\">if</span>(!_v--) _v = bt.m - <span class=\"number\">1</span>; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>++(<span class=\"keyword\">int</span>) &#123; mint res = *<span class=\"keyword\">this</span>; ++*<span class=\"keyword\">this</span>; <span class=\"keyword\">return</span> res; &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>--(<span class=\"keyword\">int</span>) &#123; mint res = *<span class=\"keyword\">this</span>; --*<span class=\"keyword\">this</span>; <span class=\"keyword\">return</span> res; &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>+=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123; _v += rhs._v; <span class=\"keyword\">if</span>(_v &gt;= bt.m) _v -= bt.m; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>-=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123; _v += bt.m - rhs._v; <span class=\"keyword\">if</span>(_v &gt;= bt.m) _v -= bt.m; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>*=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123; _v = bt.<span class=\"built_in\">mul</span>(_v, rhs._v); <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint&amp; <span class=\"keyword\">operator</span>/=(<span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span> = *<span class=\"keyword\">this</span> * rhs.<span class=\"built_in\">inv</span>(); &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>+() <span class=\"keyword\">const</span> &#123; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    mint <span class=\"keyword\">operator</span>-() <span class=\"keyword\">const</span> &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>() - *<span class=\"keyword\">this</span>; &#125;</span><br><span class=\"line\">    <span class=\"function\">mint <span class=\"title\">pow</span><span class=\"params\">(ll n)</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"built_in\">assert</span>(<span class=\"number\">0</span> &lt;= n); mint x = *<span class=\"keyword\">this</span>, r = <span class=\"number\">1</span>; <span class=\"keyword\">for</span>(; n; n &gt;&gt;= <span class=\"number\">1</span>, x *= x) <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r *= x; <span class=\"keyword\">return</span> r; &#125;</span><br><span class=\"line\">    <span class=\"function\">mint <span class=\"title\">inv</span><span class=\"params\">()</span> <span class=\"keyword\">const</span> </span>&#123; <span class=\"keyword\">auto</span> eg = <span class=\"built_in\">inv_gcd</span>(_v, bt.m); <span class=\"built_in\">assert</span>(eg.first == <span class=\"number\">1</span>); <span class=\"keyword\">return</span> eg.second; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) += rhs; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>-(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) -= rhs; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>*(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) *= rhs; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> mint <span class=\"keyword\">operator</span>/(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">mint</span>(lhs) /= rhs; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> lhs._v == rhs._v; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>!=(<span class=\"keyword\">const</span> mint&amp; lhs, <span class=\"keyword\">const</span> mint&amp; rhs) &#123; <span class=\"keyword\">return</span> lhs._v != rhs._v; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    uint _v;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> barrett bt;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">int</span> id&gt; barrett dynamic_modint&lt;id&gt;::bt = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eb emplace_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SZ(x) int((x).size())</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l + r) / 2)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lc o * 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rc o * 2 + 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lch l, mid, lc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rch mid + 1, r, rc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> cmi(a, b) (a = min(a, b))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> cma(a, b) (a = max(a, b))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lb lower_bound</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ub upper_bound</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> bs binary_search</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pop __builtin_popcount</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> llpop __builtin_popcountll</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ctz __builtin_ctz</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> llctz __builtin_ctzll</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clz __builtin_clz</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> llclz __builtin_clzll</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> par __builtin_parity</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> llpar __builtin_parityll</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> lf = <span class=\"keyword\">double</span>;</span><br><span class=\"line\"><span class=\"comment\">// using P = pair&lt;int, int&gt;;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> V = vector&lt;<span class=\"keyword\">int</span>&gt;;</span><br><span class=\"line\"><span class=\"comment\">// using cmp = complex&lt;lf&gt;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> local</span></span><br><span class=\"line\">    <span class=\"comment\">// freopen(&quot;.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(cin &gt;&gt; T; T--; <span class=\"built_in\">solve</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"随机数\">随机数</h2>\r\n<h3 id=\"函数-1\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">gen</span><span class=\"params\">(ll x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ll k = <span class=\"number\">0x9ddfea08eb382d69</span>ull;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">3</span>) x *= k, x ^= x &gt;&gt; <span class=\"number\">47</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * k;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">rnd</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> ll s = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (s += <span class=\"built_in\">gen</span>(s)) &amp; LONG_LONG_MAX;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"大模数取模\">大模数取模</h2>\r\n<h3 id=\"函数-2\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">mul</span><span class=\"params\">(ll a, ll b, ll p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a * b - <span class=\"built_in\">ll</span>((<span class=\"keyword\">long</span> <span class=\"keyword\">double</span>)a / p * b + <span class=\"number\">0.5</span>) * p + p) % p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"bash-对拍\"><code>bash</code> 对拍</h3>\r\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">    ./gen &gt; <span class=\"keyword\">in</span></span><br><span class=\"line\">    ./a &lt; <span class=\"keyword\">in</span> &gt; 1</span><br><span class=\"line\">    ./b &lt; <span class=\"keyword\">in</span> &gt; 2</span><br><span class=\"line\">    diff 1 2</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ $? -ne 0 ] ; <span class=\"keyword\">then</span> <span class=\"built_in\">break</span>; <span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"简易计算器\">简易计算器</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">mul</span><span class=\"params\">(ll a, ll b, ll p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a * b - <span class=\"built_in\">ll</span>((<span class=\"keyword\">long</span> <span class=\"keyword\">double</span>)a / p * b + <span class=\"number\">0.5</span>) * p + p) % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">Pow</span><span class=\"params\">(ll a, ll n, ll p, ll r = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; n; n /= <span class=\"number\">2</span>, a = <span class=\"built_in\">mul</span>(a, a, p))</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = <span class=\"built_in\">mul</span>(r, a, p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> Pollard_Rho &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">chk</span><span class=\"params\">(ll n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(ll a : &#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">61</span>, <span class=\"number\">24251</span>&#125;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(n == a) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">Pow</span>(a, n - <span class=\"number\">1</span>, n) ^ <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            ll k = n - <span class=\"number\">1</span>, t;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(~k &amp; <span class=\"number\">1</span>) k /= <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((t = <span class=\"built_in\">Pow</span>(a, k, n)) == <span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(t ^ <span class=\"number\">1</span> &amp;&amp; t ^ n - <span class=\"number\">1</span>) t = <span class=\"built_in\">mul</span>(t, t, n);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(t ^ n - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">ll <span class=\"title\">f</span><span class=\"params\">(ll x, ll c, ll p)</span> </span>&#123; <span class=\"keyword\">return</span> (<span class=\"built_in\">mul</span>(x, x, p) + c) % p; &#125;</span><br><span class=\"line\">    <span class=\"function\">ll <span class=\"title\">PR</span><span class=\"params\">(ll n)</span> </span>&#123;</span><br><span class=\"line\">        ll a = <span class=\"number\">0</span>, b = <span class=\"number\">0</span>, c = <span class=\"built_in\">rand</span>() % (n - <span class=\"number\">1</span>) + <span class=\"number\">1</span>, v = <span class=\"number\">1</span>, g;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; ; k *= <span class=\"number\">2</span>, a = b, v = <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, k) &#123;</span><br><span class=\"line\">                b = <span class=\"built_in\">f</span>(b, c, n), v = <span class=\"built_in\">mul</span>(v, <span class=\"built_in\">abs</span>(a - b), n);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!(i &amp; <span class=\"number\">127</span>) || i == k) &#123;</span><br><span class=\"line\">                    g = __gcd(v, n);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(g &gt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> g;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll ans[<span class=\"number\">100</span>]; <span class=\"keyword\">int</span> ct;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(ll n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">chk</span>(n)) <span class=\"keyword\">return</span> <span class=\"built_in\"><span class=\"keyword\">void</span></span>(ans[++ct] = n);</span><br><span class=\"line\">        ll d; <span class=\"keyword\">do</span> d = <span class=\"built_in\">PR</span>(n); <span class=\"keyword\">while</span>(d == n);</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>(d), <span class=\"built_in\">solve</span>(n / d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ll n;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cin &gt;&gt; n) &#123;</span><br><span class=\"line\">            ct = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">chk</span>(n)) &#123; <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Prime&quot;</span>); <span class=\"keyword\">continue</span>; &#125;</span><br><span class=\"line\">            <span class=\"built_in\">solve</span>(n), <span class=\"built_in\">sort</span>(ans + <span class=\"number\">1</span>, ans + ct + <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, ct) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(ans[i] ^ ans[i - <span class=\"number\">1</span>]) cout &lt;&lt; ans[i];</span><br><span class=\"line\">                t++; <span class=\"keyword\">if</span>(ans[i] ^ ans[i + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(t &gt; <span class=\"number\">1</span>) cout &lt;&lt; <span class=\"string\">&#x27;^&#x27;</span> &lt;&lt; t;</span><br><span class=\"line\">                    <span class=\"built_in\">putchar</span>(<span class=\"number\">32</span>), t = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"built_in\">putchar</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> Inv &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">exgcd</span><span class=\"params\">(ll a, ll b, ll&amp; d, ll&amp; x, ll&amp; y)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b) <span class=\"built_in\">exgcd</span>(b, a % b, d, y, x), y -= a / b * x;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> d = a, x = <span class=\"number\">1</span>, y = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inv</span><span class=\"params\">(ll a, ll p)</span> </span>&#123;</span><br><span class=\"line\">        ll d, x, y; <span class=\"built_in\">exgcd</span>(a, p, d, x, y);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d &gt; <span class=\"number\">1</span>) <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Non-existent!&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> cout &lt;&lt; (x % p + p) % p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ll a, p;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cin &gt;&gt; a &gt;&gt; p) <span class=\"built_in\">inv</span>(a, p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> Prime &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ll n;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cin &gt;&gt; n) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!Pollard_Rho::<span class=\"built_in\">chk</span>(n)) n++;</span><br><span class=\"line\">            cout &lt;&lt; n &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> Cipolla &#123;</span><br><span class=\"line\">    ll n, p, II;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cmp</span> &#123;</span></span><br><span class=\"line\">        ll r, i;</span><br><span class=\"line\">        cmp <span class=\"keyword\">operator</span> *(<span class=\"keyword\">const</span> cmp&amp; b) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;(r * b.r + i * b.i % p * II) % p, (r * b.i + i * b.r) % p &#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; U = &#123; <span class=\"number\">1</span>, <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pow1</span><span class=\"params\">(ll a, <span class=\"keyword\">int</span> n, ll r = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(; n; n /= <span class=\"number\">2</span>, a = a * a % p)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = r * a % p;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">cmp <span class=\"title\">pow2</span><span class=\"params\">(cmp a, <span class=\"keyword\">int</span> n, cmp r = U)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(; n; n /= <span class=\"number\">2</span>, a = a * a)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = r * a;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(cin &gt;&gt; n &gt;&gt; p) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!n) &#123; <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;0&quot;</span>); <span class=\"keyword\">continue</span>; &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p == <span class=\"number\">2</span>) &#123; cout &lt;&lt; n &lt;&lt; endl; <span class=\"keyword\">continue</span>; &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">pow1</span>(n, p / <span class=\"number\">2</span>) ^ <span class=\"number\">1</span>) &#123; <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Non-existent!&quot;</span>); <span class=\"keyword\">continue</span>; &#125;</span><br><span class=\"line\">            ll a;</span><br><span class=\"line\">            <span class=\"keyword\">do</span> a = <span class=\"built_in\">rand</span>() % p, II = (a * a - n + p) % p; <span class=\"keyword\">while</span>(!a || <span class=\"built_in\">pow1</span>(II, p / <span class=\"number\">2</span>) == <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x1 = <span class=\"built_in\">pow2</span>(&#123;a, <span class=\"number\">1</span>&#125;, p / <span class=\"number\">2</span> + <span class=\"number\">1</span>).r, x2 = p - x1;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x1 &gt; x2) <span class=\"built_in\">swap</span>(x1, x2);</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d\\n&quot;</span>, x1, x2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">srand</span>(<span class=\"built_in\">time</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Press 1 for integer factorization.&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Press 2 to calculate the modular multiplicative inverse of a number.&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Press 3 to find the first prime number greater than or equal to a number.&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Press 4 to calculate the modular square root of a number.&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> op;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        cin &gt;&gt; op;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">1</span>) Pollard_Rho::<span class=\"built_in\">work</span>();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op == <span class=\"number\">2</span>) Inv::<span class=\"built_in\">work</span>();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op == <span class=\"number\">3</span>) Prime::<span class=\"built_in\">work</span>();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op == <span class=\"number\">4</span>) Cipolla::<span class=\"built_in\">work</span>();</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Illegal input! Please re-enter your option.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"数学\">数学</h1>\r\n<h2 id=\"ntt\">NTT</h2>\r\n<h3 id=\"普通版\">普通版</h3>\r\n<h4 id=\"定义\">定义</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> lim = <span class=\"number\">1</span>, bit = <span class=\"number\">-1</span>, rev[N];</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"函数-3\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">Pow</span><span class=\"params\">(ll a, <span class=\"keyword\">int</span> n, ll r = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; n; n /= <span class=\"number\">2</span>, a = a * a % P)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = r * a % P;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">NTT</span><span class=\"params\">(ll a[], <span class=\"keyword\">int</span> t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">reverse</span>(a + <span class=\"number\">1</span>, a + lim);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) <span class=\"keyword\">if</span>(rev[i] &lt; i) <span class=\"built_in\">swap</span>(a[i], a[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; lim; i *= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        ll wn = <span class=\"built_in\">Pow</span>(<span class=\"number\">3</span>, P / <span class=\"number\">2</span> / i);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; lim; j += i * <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            ll w = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">For</span>(k, j, j + i) &#123;</span><br><span class=\"line\">                ll &amp;x = a[k], y = a[k + i] * w % P;</span><br><span class=\"line\">                a[k + i] = (x - y) % P, (x += y) %= P, w = w * wn % P;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll inv = <span class=\"built_in\">Pow</span>(lim, P - <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) (a[i] *= inv) %= P;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><code>modint</code> 版</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">NTT</span><span class=\"params\">(mint a[], <span class=\"keyword\">int</span> t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">reverse</span>(a + <span class=\"number\">1</span>, a + lim);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) <span class=\"keyword\">if</span>(rev[i] &lt; i) <span class=\"built_in\">swap</span>(a[i], a[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; lim; i *= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        mint wn = <span class=\"built_in\">mint</span>(<span class=\"number\">3</span>).<span class=\"built_in\">pow</span>(P / <span class=\"number\">2</span> / i);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; lim; j += i * <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            mint w = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">For</span>(k, j, j + i) &#123;</span><br><span class=\"line\">                mint &amp;x = a[k], y = a[k + i] * w;</span><br><span class=\"line\">                a[k + i] = x - y, x += y, w *= wn;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint inv = <span class=\"built_in\">mint</span>(lim).<span class=\"built_in\">inv</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) a[i] *= inv;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"预处理-1\">预处理</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(lim &lt;= n + m) lim *= <span class=\"number\">2</span>, bit++;</span><br><span class=\"line\"><span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) rev[i] = rev[i / <span class=\"number\">2</span>] / <span class=\"number\">2</span> | (i &amp; <span class=\"number\">1</span>) &lt;&lt; bit;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"多次做时较快版\">多次做时较快版</h3>\r\n<h4 id=\"定义-1\">定义</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll w[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> lim = <span class=\"number\">1</span>, bit = <span class=\"number\">-1</span>, rev[N]; </span><br></pre></td></tr></table></figure>\r\n<p><code>modint</code> 版</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mint w[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> lim = <span class=\"number\">1</span>, bit = <span class=\"number\">-1</span>, rev[N]; </span><br></pre></td></tr></table></figure>\r\n<h4 id=\"函数-4\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mod</span><span class=\"params\">(ll&amp; x)</span> </span>&#123; <span class=\"keyword\">if</span>(x &gt;= P) x -= P; <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>) x += P; &#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">Pow</span><span class=\"params\">(ll a, <span class=\"keyword\">int</span> n, ll r = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; n; n /= <span class=\"number\">2</span>, a = a * a % P)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = r * a % P;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">NTT</span><span class=\"params\">(ll a[], <span class=\"keyword\">int</span> t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">reverse</span>(a + <span class=\"number\">1</span>, a + lim);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) <span class=\"keyword\">if</span>(rev[i] &lt; i) <span class=\"built_in\">swap</span>(a[i], a[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; lim; i *= <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; lim; j += i * <span class=\"number\">2</span>) <span class=\"built_in\">For</span>(k, j, j + i) &#123;</span><br><span class=\"line\">        ll &amp;x = a[k], y = a[k + i] * w[lim / i * (k - j)] % P;</span><br><span class=\"line\">        <span class=\"built_in\">mod</span>(a[k + i] = x - y), <span class=\"built_in\">mod</span>(x += y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll inv = <span class=\"built_in\">Pow</span>(lim, P - <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) (a[i] *= inv) %= P;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><code>modint</code> 版</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">NTT</span><span class=\"params\">(mint a[], <span class=\"keyword\">int</span> t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">reverse</span>(a + <span class=\"number\">1</span>, a + lim);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) <span class=\"keyword\">if</span>(rev[i] &lt; i) <span class=\"built_in\">swap</span>(a[i], a[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; lim; i *= <span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; lim; j += i * <span class=\"number\">2</span>) <span class=\"built_in\">For</span>(k, j, j + i) &#123;</span><br><span class=\"line\">        mint &amp;x = a[k], y = a[k + i] * w[lim / i * (k - j)];</span><br><span class=\"line\">        a[k + i] = x - y, x += y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint inv = <span class=\"built_in\">mint</span>(lim).<span class=\"built_in\">inv</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) a[i] *= inv;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"预处理-2\">预处理</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(lim &lt;= n + m) lim *= <span class=\"number\">2</span>, bit++;</span><br><span class=\"line\">ll wn = <span class=\"built_in\">Pow</span>(<span class=\"number\">3</span>, P / <span class=\"number\">2</span> / lim);</span><br><span class=\"line\"><span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) &#123;</span><br><span class=\"line\">    rev[i] = rev[i / <span class=\"number\">2</span>] / <span class=\"number\">2</span> | (i &amp; <span class=\"number\">1</span>) &lt;&lt; bit;</span><br><span class=\"line\">    w[i] = i ? w[i - <span class=\"number\">1</span>] * wn % P : <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><code>modint</code> 版</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(lim &lt;= n + m) lim *= <span class=\"number\">2</span>, bit++;</span><br><span class=\"line\">mint wn = <span class=\"built_in\">mint</span>(<span class=\"number\">3</span>).<span class=\"built_in\">pow</span>(P / <span class=\"number\">2</span> / lim);</span><br><span class=\"line\"><span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) &#123;</span><br><span class=\"line\">    rev[i] = rev[i / <span class=\"number\">2</span>] / <span class=\"number\">2</span> | (i &amp; <span class=\"number\">1</span>) &lt;&lt; bit;</span><br><span class=\"line\">    w[i] = i ? w[i - <span class=\"number\">1</span>] * wn : <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"任意模数-ntt\">任意模数 NTT</h2>\r\n<h3 id=\"定义-2\">定义</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> cmp = complex&lt;lf&gt;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> lf PI = <span class=\"built_in\">acos</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> cmp <span class=\"title\">I</span><span class=\"params\">(<span class=\"number\">0</span>, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, P;</span><br><span class=\"line\"><span class=\"keyword\">int</span> M, lim = <span class=\"number\">1</span>, bit = <span class=\"number\">-1</span>, rev[N];</span><br><span class=\"line\">cmp w[N], a0[N], a1[N], b0[N], b1[N];</span><br></pre></td></tr></table></figure>\r\n<p><code>modint</code> 版</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> cmp = complex&lt;lf&gt;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> lf PI = <span class=\"built_in\">acos</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, P;</span><br><span class=\"line\"><span class=\"keyword\">int</span> M, lim = <span class=\"number\">1</span>, bit = <span class=\"number\">-1</span>, rev[N];</span><br><span class=\"line\">cmp w[N], a0[N], a1[N], b0[N], b1[N];</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数-5\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT</span><span class=\"params\">(cmp a[], <span class=\"keyword\">int</span> t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">reverse</span>(a + <span class=\"number\">1</span>, a + lim);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) <span class=\"keyword\">if</span>(i &lt; rev[i]) <span class=\"built_in\">swap</span>(a[i], a[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; lim; i *= <span class=\"number\">2</span>) <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; lim; j += i * <span class=\"number\">2</span>) <span class=\"built_in\">For</span>(k, j, j + i) &#123;</span><br><span class=\"line\">        cmp &amp;x = a[k], y = a[i + k] * w[lim / i * (k - j)];</span><br><span class=\"line\">        a[i + k] = x - y, x += y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lf inv = <span class=\"number\">1.</span> / lim;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) a[i] *= inv;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT2</span><span class=\"params\">(cmp a[], cmp b[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) a[i] += b[i] * I;</span><br><span class=\"line\">    <span class=\"built_in\">FFT</span>(a, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) b[i] = <span class=\"built_in\">conj</span>(a[i ? lim - i : <span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) &#123;</span><br><span class=\"line\">        cmp x = a[i], y = b[i];</span><br><span class=\"line\">        a[i] = (y + x) * <span class=\"number\">0.5</span>, b[i] = (y - x) * <span class=\"number\">0.5</span> * I;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">num</span><span class=\"params\">(cmp x)</span> </span>&#123; <span class=\"keyword\">return</span> M * <span class=\"built_in\">ll</span>(<span class=\"built_in\">real</span>(x) + <span class=\"number\">0.5</span>) % P + <span class=\"built_in\">ll</span>(<span class=\"built_in\">imag</span>(x) + <span class=\"number\">0.5</span>); &#125;</span><br></pre></td></tr></table></figure>\r\n<p><code>modint</code> 版</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT</span><span class=\"params\">(cmp a[], <span class=\"keyword\">int</span> t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">reverse</span>(a + <span class=\"number\">1</span>, a + lim);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) <span class=\"keyword\">if</span>(i &lt; rev[i]) <span class=\"built_in\">swap</span>(a[i], a[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; lim; i *= <span class=\"number\">2</span>) <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; lim; j += i * <span class=\"number\">2</span>) <span class=\"built_in\">For</span>(k, j, j + i) &#123;</span><br><span class=\"line\">        cmp &amp;x = a[k], y = a[i + k] * w[lim / i * (k - j)];</span><br><span class=\"line\">        a[i + k] = x - y, x += y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lf inv = <span class=\"number\">1.</span> / lim;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) a[i] *= inv;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT2</span><span class=\"params\">(cmp a[], cmp b[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) a[i] += b[i] * <span class=\"number\">1</span>i;</span><br><span class=\"line\">    <span class=\"built_in\">FFT</span>(a, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) b[i] = <span class=\"built_in\">conj</span>(a[i ? lim - i : <span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) &#123;</span><br><span class=\"line\">        cmp x = a[i], y = b[i];</span><br><span class=\"line\">        a[i] = (y + x) * <span class=\"number\">0.5</span>, b[i] = (y - x) * <span class=\"number\">0.5</span>i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">mint <span class=\"title\">num</span><span class=\"params\">(cmp x)</span> </span>&#123; <span class=\"keyword\">return</span> M * (mint)<span class=\"built_in\">ll</span>(<span class=\"built_in\">real</span>(x) + <span class=\"number\">0.5</span>) % P + (mint)<span class=\"built_in\">ll</span>(<span class=\"built_in\">imag</span>(x) + <span class=\"number\">0.5</span>); &#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"预处理-3\">预处理</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">M = <span class=\"built_in\">sqrt</span>(P);</span><br><span class=\"line\"><span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n) a0[i] = A[i] / M, a1[i] = A[i] % M;</span><br><span class=\"line\"><span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, m) b0[i] = B[i] / M, b1[i] = B[i] % M;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(lim &lt;= n + m) lim *= <span class=\"number\">2</span>, bit++;</span><br><span class=\"line\"><span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) &#123;</span><br><span class=\"line\">    rev[i] = rev[i / <span class=\"number\">2</span>] / <span class=\"number\">2</span> | (i &amp; <span class=\"number\">1</span>) &lt;&lt; bit;</span><br><span class=\"line\">    w[i] = <span class=\"built_in\">cmp</span>(<span class=\"built_in\">cos</span>(PI / lim * i), <span class=\"built_in\">sin</span>(PI / lim * i));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"使用\">使用</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">FFT2</span>(a0, a1), <span class=\"built_in\">FFT2</span>(b0, b1);</span><br><span class=\"line\"><span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) &#123;</span><br><span class=\"line\">    cmp t = a0[i] + I * a1[i];</span><br><span class=\"line\">    b0[i] *= t, b1[i] *= t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">FFT</span>(b0, <span class=\"number\">1</span>), <span class=\"built_in\">FFT</span>(b1, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n + m) C[i] = (M * <span class=\"built_in\">num</span>(b0[i]) + <span class=\"built_in\">num</span>(b1[i])) % P;</span><br></pre></td></tr></table></figure>\r\n<p><code>modint</code> 版</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">FFT2</span>(a0, a1), <span class=\"built_in\">FFT2</span>(b0, b1);</span><br><span class=\"line\"><span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) &#123;</span><br><span class=\"line\">    cmp t = a0[i] + I * a1[i];</span><br><span class=\"line\">    b0[i] *= t, b1[i] *= t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">FFT</span>(b0, <span class=\"number\">1</span>), <span class=\"built_in\">FFT</span>(b1, <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n + m) C[i] = M * <span class=\"built_in\">num</span>(b0[i]) + <span class=\"built_in\">num</span>(b1[i]);</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"fwt\">FWT</h2>\r\n<h3 id=\"函数-6\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FWT</span><span class=\"params\">(ll a[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, n) <span class=\"built_in\">For</span>(S, <span class=\"number\">0</span>, <span class=\"number\">1</span> &lt;&lt; n) <span class=\"keyword\">if</span>(S &gt;&gt; i &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        ll&amp; x = a[S ^ <span class=\"number\">1</span> &lt;&lt; i], y = a[S];</span><br><span class=\"line\">        a[S] = x - y, x += y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">IFWT</span><span class=\"params\">(ll a[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, n) <span class=\"built_in\">For</span>(S, <span class=\"number\">0</span>, <span class=\"number\">1</span> &lt;&lt; n) <span class=\"keyword\">if</span>(S &gt;&gt; i &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        ll&amp; x = a[S ^ <span class=\"number\">1</span> &lt;&lt; i], y = a[S];</span><br><span class=\"line\">        a[S] = x - y &gt;&gt; <span class=\"number\">1</span>, x = x + y &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"多项式求逆\">多项式求逆</h2>\r\n<h3 id=\"定义-3\">定义</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n, lim, rev[N];</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数-7\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">Pow</span><span class=\"params\">(ll a, <span class=\"keyword\">int</span> n, ll r = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; n; n /= <span class=\"number\">2</span>, a = a * a % P)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = r * a % P;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bld</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    lim = <span class=\"number\">1</span> &lt;&lt; n--;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) rev[i] = rev[i / <span class=\"number\">2</span>] / <span class=\"number\">2</span> | (i &amp; <span class=\"number\">1</span>) &lt;&lt; n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">NTT</span><span class=\"params\">(ll a[], <span class=\"keyword\">int</span> t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">reverse</span>(a + <span class=\"number\">1</span>, a + lim);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) <span class=\"keyword\">if</span>(i &lt; rev[i]) <span class=\"built_in\">swap</span>(a[i], a[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; lim; i *= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        ll wn = <span class=\"built_in\">Pow</span>(g, P / <span class=\"number\">2</span> / i);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; lim; j += i * <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            ll w = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">For</span>(k, j, j + i) &#123;</span><br><span class=\"line\">                ll &amp;x = a[k], y = a[k + i] * w % P;</span><br><span class=\"line\">                a[k + i] = (x - y) % P, (x += y) %= P, w = w * wn % P;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll inv = <span class=\"built_in\">Pow</span>(lim, P - <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) (a[i] *= inv) %= P;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Inv</span><span class=\"params\">(ll a[], ll b[], <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> ll c[N];</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, <span class=\"number\">2</span> &lt;&lt; n) b[i] = c[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    b[<span class=\"number\">0</span>] = <span class=\"built_in\">Pow</span>(a[<span class=\"number\">0</span>], P - <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">For</span>(j, <span class=\"number\">0</span>, <span class=\"number\">1</span> &lt;&lt; i) c[j] = a[j];</span><br><span class=\"line\">        <span class=\"built_in\">bld</span>(i + <span class=\"number\">1</span>), <span class=\"built_in\">NTT</span>(c, <span class=\"number\">0</span>), <span class=\"built_in\">NTT</span>(b, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">For</span>(j, <span class=\"number\">0</span>, lim) b[j] = (b[j] * <span class=\"number\">2</span> - b[j] * b[j] % P * c[j]) % P;</span><br><span class=\"line\">        <span class=\"built_in\">NTT</span>(b, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">For</span>(j, <span class=\"number\">1</span> &lt;&lt; i, lim) b[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><code>modint</code> 版</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bld</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    lim = <span class=\"number\">1</span> &lt;&lt; n--;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) rev[i] = rev[i / <span class=\"number\">2</span>] / <span class=\"number\">2</span> | (i &amp; <span class=\"number\">1</span>) &lt;&lt; n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">NTT</span><span class=\"params\">(mint a[], <span class=\"keyword\">int</span> t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">reverse</span>(a + <span class=\"number\">1</span>, a + lim);</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) <span class=\"keyword\">if</span>(rev[i] &lt; i) <span class=\"built_in\">swap</span>(a[i], a[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; lim; i *= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        mint wn = <span class=\"built_in\">mint</span>(<span class=\"number\">3</span>).<span class=\"built_in\">pow</span>(P / <span class=\"number\">2</span> / i);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; lim; j += i * <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            mint w = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">For</span>(k, j, j + i) &#123;</span><br><span class=\"line\">                mint &amp;x = a[k], y = a[k + i] * w;</span><br><span class=\"line\">                a[k + i] = x - y, x += y, w *= wn;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mint inv = <span class=\"built_in\">mint</span>(lim).<span class=\"built_in\">inv</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t) <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, lim) a[i] *= inv;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Inv</span><span class=\"params\">(mint a[], mint b[], <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> mint c[N];</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, <span class=\"number\">2</span> &lt;&lt; n) b[i] = c[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    b[<span class=\"number\">0</span>] = a[<span class=\"number\">0</span>].<span class=\"built_in\">inv</span>();</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">For</span>(j, <span class=\"number\">0</span>, <span class=\"number\">1</span> &lt;&lt; i) c[j] = a[j];</span><br><span class=\"line\">        <span class=\"built_in\">bld</span>(i + <span class=\"number\">1</span>), <span class=\"built_in\">NTT</span>(c, <span class=\"number\">0</span>), <span class=\"built_in\">NTT</span>(b, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">For</span>(j, <span class=\"number\">0</span>, lim) b[j] = b[j] * <span class=\"number\">2</span> - b[j] * b[j] * c[j];</span><br><span class=\"line\">        <span class=\"built_in\">NTT</span>(b, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">For</span>(j, <span class=\"number\">1</span> &lt;&lt; i, lim) b[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"自然数等幂求和\">自然数等幂求和</h2>\r\n<h2 id=\"中国剩余定理\">中国剩余定理</h2>\r\n<h2 id=\"扩展中国剩余定理\">扩展中国剩余定理</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">mul</span><span class=\"params\">(ll a, ll b, ll p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a * b - (ll)((<span class=\"keyword\">long</span> <span class=\"keyword\">double</span>)a / p * b + <span class=\"number\">0.5</span>) * p + p) % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">exgcd</span><span class=\"params\">(ll a, ll b, ll&amp; d, ll&amp; x, ll&amp; y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!b) &#123; d = a, x = <span class=\"number\">1</span>, y = <span class=\"number\">0</span>; <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\">    <span class=\"built_in\">exgcd</span>(b, a % b, d, y, x), y -= a / b * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">exCRT</span><span class=\"params\">(ll&amp; b1, ll&amp; m1, ll b2, ll m2)</span> </span>&#123;</span><br><span class=\"line\">    ll d, k1, k2; <span class=\"built_in\">exgcd</span>(m1, m2, d, k1, k2), m2 /= d;</span><br><span class=\"line\">    b1 = (b1 + <span class=\"built_in\">mul</span>(<span class=\"built_in\">mul</span>(k1 % m2, (b2 - b1) / d % m2, m2), m1, m1 * m2)) % (m1 *= m2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"杜教筛\">杜教筛</h2>\r\n<h2 id=\"min-25-筛\">Min-25 筛</h2>\r\n<h3 id=\"定义-4\">定义</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll f1[N], f2[N];</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数-8\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">min25</span><span class=\"params\">(ll n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lim = <span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, lim) f1[i] = i - <span class=\"number\">1</span>, f2[i] = n / i - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(p, <span class=\"number\">2</span>, lim) <span class=\"keyword\">if</span> (f1[p] ^ f1[p - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> w1 = lim / p;</span><br><span class=\"line\">        ll x = f1[p - <span class=\"number\">1</span>], w3 = (ll)p * p, w2 = <span class=\"built_in\">min</span>((ll)lim, n / w3), d = n / p;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, w1) f2[i] -= f2[i * p] - x;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, w1 + <span class=\"number\">1</span>, w2) f2[i] -= f1[d / i] - x;</span><br><span class=\"line\">        <span class=\"built_in\">per</span>(i, lim, w3) f1[i] -= f1[i / p] - x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f2[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"exbsgs\">exBSGS</h2>\r\n<h3 id=\"定义-5\">定义</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; mp;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数-9\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">BSGS</span><span class=\"params\">(ll pls, ll a, ll b, ll p)</span> </span>&#123;</span><br><span class=\"line\">    pls %= p, a %= p, b %= p; mp.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    ll m = <span class=\"built_in\">ceil</span>(<span class=\"built_in\">sqrt</span>(p)), ls = <span class=\"number\">1</span>, rs = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, m) mp[ls * b % p] = i, ls = ls * a % p;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">        rs = rs * ls % p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mp.<span class=\"built_in\">count</span>(rs * pls % p)) <span class=\"keyword\">return</span> i * m - mp[rs * pls % p];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">exBSGS</span><span class=\"params\">(ll a, ll b, ll p)</span> </span>&#123;</span><br><span class=\"line\">    a %= p, b %= p;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pls = <span class=\"number\">1</span>, ct = <span class=\"number\">0</span>, g;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((g = __gcd(a, p)) &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> ct;</span><br><span class=\"line\">        p /= g, pls = pls * a / g % p, ct++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b % g) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; b /= g;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"built_in\">BSGS</span>(pls, a, b, p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ~ret ? ret + ct : <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"cipolla\">cipolla</h2>\r\n<h3 id=\"定义-6\">定义</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n; ll II;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cmp</span> &#123;</span></span><br><span class=\"line\">    ll r, i;</span><br><span class=\"line\">    cmp <span class=\"keyword\">operator</span> *(<span class=\"keyword\">const</span> cmp&amp; b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;(r * b.r + i * b.i % P * II) % P, (r * b.i + i * b.r) % P&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; U = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;;</span><br></pre></td></tr></table></figure>\r\n<p><code>modint</code> 版</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mint n, II;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cmp</span> &#123;</span></span><br><span class=\"line\">    mint r, i;</span><br><span class=\"line\">    cmp <span class=\"keyword\">operator</span> *(<span class=\"keyword\">const</span> cmp&amp; b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;r * b.r + i * b.i * II, r * b.i + i * b.r&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; U = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数-10\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pow1</span><span class=\"params\">(ll a, <span class=\"keyword\">int</span> n, ll r = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; n; n /= <span class=\"number\">2</span>, a = a * a % P)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = r * a % P;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">cmp <span class=\"title\">pow2</span><span class=\"params\">(cmp a, <span class=\"keyword\">int</span> n, cmp r = U)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; n; n /= <span class=\"number\">2</span>, a = a * a)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = r * a;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cipolla</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!n) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(P == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">pow1</span>(n, P / <span class=\"number\">2</span>) ^ <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    ll a;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> a = <span class=\"built_in\">rand</span>() % P, II = (a * a - n + P) % P; <span class=\"keyword\">while</span>(!a || <span class=\"built_in\">pow1</span>(II, P / <span class=\"number\">2</span>) == <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">pow2</span>(&#123;a, <span class=\"number\">1</span>&#125;, P / <span class=\"number\">2</span> + <span class=\"number\">1</span>).r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><code>modint</code> 版</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">cmp <span class=\"title\">Pow</span><span class=\"params\">(cmp a, <span class=\"keyword\">int</span> n, cmp r = U)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; n; n /= <span class=\"number\">2</span>, a = a * a)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = r * a;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cipolla</span><span class=\"params\">(mint n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(P == <span class=\"number\">2</span>) <span class=\"keyword\">return</span> n.<span class=\"built_in\">val</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n.<span class=\"built_in\">pow</span>(P / <span class=\"number\">2</span>) != <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    mint a;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> a = <span class=\"built_in\">rand</span>(), II = a * a - n; <span class=\"keyword\">while</span>(a == <span class=\"number\">0</span> || II.<span class=\"built_in\">pow</span>(P / <span class=\"number\">2</span>) == <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Pow</span>(&#123;a, <span class=\"number\">1</span>&#125;, P / <span class=\"number\">2</span> + <span class=\"number\">1</span>).r.<span class=\"built_in\">val</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"miller-rabin-pollard-rho\">Miller Rabin &amp; Pollard Rho</h2>\r\n<h3 id=\"定义-7\">定义</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;ll&gt; as;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数-11\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">mul</span><span class=\"params\">(ll a, ll b, ll p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a * b - <span class=\"built_in\">ll</span>((<span class=\"keyword\">long</span> <span class=\"keyword\">double</span>)a / p * b + <span class=\"number\">0.5</span>) * p + p) % p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">Pow</span><span class=\"params\">(ll a, ll n, ll p, ll r = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; n; n /= <span class=\"number\">2</span>, a = <span class=\"built_in\">mul</span>(a, a, p))</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) r = <span class=\"built_in\">mul</span>(r, a, p);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">chk</span><span class=\"params\">(ll n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(ll a : &#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">7</span>, <span class=\"number\">61</span>, <span class=\"number\">24251</span>&#125;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == a) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">Pow</span>(a, n - <span class=\"number\">1</span>, n) ^ <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        ll k = n - <span class=\"number\">1</span>, t;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(~k &amp; <span class=\"number\">1</span>) k /= <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((t = <span class=\"built_in\">Pow</span>(a, k, n)) == <span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(t ^ <span class=\"number\">1</span> &amp;&amp; t ^ n - <span class=\"number\">1</span>) t = <span class=\"built_in\">mul</span>(t, t, n);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t ^ n - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">f</span><span class=\"params\">(ll x, ll c, ll p)</span> </span>&#123; <span class=\"keyword\">return</span> (<span class=\"built_in\">mul</span>(x, x, p) + c) % p; &#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">PR</span><span class=\"params\">(ll n)</span> </span>&#123;</span><br><span class=\"line\">    ll a = <span class=\"number\">0</span>, b = <span class=\"number\">0</span>, c = <span class=\"built_in\">rand</span>() % (n - <span class=\"number\">1</span>) + <span class=\"number\">1</span>, v = <span class=\"number\">1</span>, g;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; ; k *= <span class=\"number\">2</span>, a = b, v = <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, k) &#123;</span><br><span class=\"line\">            b = <span class=\"built_in\">f</span>(b, c, n), v = <span class=\"built_in\">mul</span>(v, <span class=\"built_in\">abs</span>(a - b), n);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!(i &amp; <span class=\"number\">127</span>) || i == k) &#123;</span><br><span class=\"line\">                g = __gcd(v, n);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(g &gt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> g;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(ll n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">chk</span>(n)) <span class=\"keyword\">return</span> as.<span class=\"built_in\">pb</span>(n);</span><br><span class=\"line\">    ll d; <span class=\"keyword\">do</span> d = <span class=\"built_in\">PR</span>(n); <span class=\"keyword\">while</span>(d == n);</span><br><span class=\"line\">    <span class=\"built_in\">solve</span>(d), <span class=\"built_in\">solve</span>(n / d);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"数据结构\">数据结构</h1>\r\n<h2 id=\"动态树\">动态树</h2>\r\n<h3 id=\"普通版-1\">普通版</h3>\r\n<h4 id=\"定义-8\">定义</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> c[N][<span class=\"number\">2</span>], f[N], r[N];</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"函数-12\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">id</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123; <span class=\"keyword\">return</span> c[f[o]][<span class=\"number\">1</span>] == o; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">nrt</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123; <span class=\"keyword\">return</span> f[o] &amp;&amp; c[f[o]][<span class=\"built_in\">id</span>(o)] == o; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pu</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">flip</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">swap</span>(c[o][<span class=\"number\">0</span>], c[o][<span class=\"number\">1</span>]), r[o] ^= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pd</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123; <span class=\"keyword\">if</span>(r[o]) <span class=\"built_in\">flip</span>(c[o][<span class=\"number\">0</span>]), <span class=\"built_in\">flip</span>(c[o][<span class=\"number\">1</span>]), r[o] = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rot</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> d)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = c[o][!d], &amp;x = c[k][d];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">nrt</span>(o)) c[f[o]][<span class=\"built_in\">id</span>(o)] = k;</span><br><span class=\"line\">    <span class=\"built_in\">pu</span>(x = f[c[o][!d] = x] = o), f[k] = f[o], <span class=\"built_in\">pu</span>(f[o] = k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123; <span class=\"keyword\">if</span>(<span class=\"built_in\">nrt</span>(o)) <span class=\"built_in\">dfs</span>(f[o]); <span class=\"built_in\">pd</span>(o); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">splay</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(o);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> fa; <span class=\"built_in\">nrt</span>(o); <span class=\"built_in\">rot</span>(f[o], !<span class=\"built_in\">id</span>(o)))</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">nrt</span>(fa = f[o])) <span class=\"built_in\">rot</span>(<span class=\"built_in\">id</span>(o) ^ <span class=\"built_in\">id</span>(fa) ? fa : f[fa], !<span class=\"built_in\">id</span>(o));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">acc</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; o; o = f[x = o])</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(o), c[o][<span class=\"number\">1</span>] = x, <span class=\"built_in\">pu</span>(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mkrt</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123; <span class=\"built_in\">acc</span>(o), <span class=\"built_in\">splay</span>(o), <span class=\"built_in\">flip</span>(o); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">link</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">mkrt</span>(u), <span class=\"built_in\">acc</span>(v), <span class=\"built_in\">splay</span>(v), <span class=\"built_in\">pu</span>(f[u] = v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cut</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">mkrt</span>(u), <span class=\"built_in\">acc</span>(v), <span class=\"built_in\">splay</span>(v), c[v][<span class=\"number\">0</span>] = f[u] = <span class=\"number\">0</span>, <span class=\"built_in\">pu</span>(v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"维护子树-size-版\">维护子树 <code>size</code> 版</h3>\r\n<h4 id=\"定义-9\">定义</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> c[N][<span class=\"number\">2</span>], f[N], r[N], s[N], si[N];</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"函数-13\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">id</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123; <span class=\"keyword\">return</span> c[f[o]][<span class=\"number\">1</span>] == o; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">nrt</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123; <span class=\"keyword\">return</span> f[o] &amp;&amp; c[f[o]][<span class=\"built_in\">id</span>(o)] == o; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pu</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    s[o] = s[c[o][<span class=\"number\">0</span>]] + s[c[o][<span class=\"number\">1</span>]] + si[o] + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">flip</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">swap</span>(c[o][<span class=\"number\">0</span>], c[o][<span class=\"number\">1</span>]), r[o] ^= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pd</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123; <span class=\"keyword\">if</span>(r[o]) <span class=\"built_in\">flip</span>(c[o][<span class=\"number\">0</span>]), <span class=\"built_in\">flip</span>(c[o][<span class=\"number\">1</span>]), r[o] = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rot</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> d)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = c[o][!d], &amp;x = c[k][d];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">nrt</span>(o)) c[f[o]][<span class=\"built_in\">id</span>(o)] = k;</span><br><span class=\"line\">    <span class=\"built_in\">pu</span>(x = f[c[o][!d] = x] = o), f[k] = f[o], <span class=\"built_in\">pu</span>(f[o] = k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123; <span class=\"keyword\">if</span>(<span class=\"built_in\">nrt</span>(o)) <span class=\"built_in\">dfs</span>(f[o]); <span class=\"built_in\">pd</span>(o); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">splay</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(o);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> fa; <span class=\"built_in\">nrt</span>(o); <span class=\"built_in\">rot</span>(f[o], !<span class=\"built_in\">id</span>(o)))</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">nrt</span>(fa = f[o])) <span class=\"built_in\">rot</span>(<span class=\"built_in\">id</span>(o) ^ <span class=\"built_in\">id</span>(fa) ? fa : f[fa], !<span class=\"built_in\">id</span>(o));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">acc</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; o; o = f[x = o])</span><br><span class=\"line\">        <span class=\"built_in\">splay</span>(o), si[o] += s[c[o][<span class=\"number\">1</span>]] - s[x], c[o][<span class=\"number\">1</span>] = x, <span class=\"built_in\">pu</span>(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mkrt</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123; <span class=\"built_in\">acc</span>(o), <span class=\"built_in\">splay</span>(o), <span class=\"built_in\">flip</span>(o); &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">link</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">mkrt</span>(u), <span class=\"built_in\">acc</span>(v), <span class=\"built_in\">splay</span>(v), si[v] += s[u], <span class=\"built_in\">pu</span>(f[u] = v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">cut</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">mkrt</span>(u), <span class=\"built_in\">acc</span>(v), <span class=\"built_in\">splay</span>(v), c[v][<span class=\"number\">0</span>] = f[u] = <span class=\"number\">0</span>, <span class=\"built_in\">pu</span>(v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"rbs-树\">RBS 树</h2>\r\n<h3 id=\"普通版-2\">普通版</h3>\r\n<h4 id=\"定义-10\">定义</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> rt, sz, ls[N], rs[N], c[N], s[N];</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"函数-14\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">gen</span><span class=\"params\">(ll x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ll k = <span class=\"number\">0x9ddfea08eb382d69</span>ull;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">3</span>) x *= k, x ^= x &gt;&gt; <span class=\"number\">47</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * k;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rnd</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> ll s = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (s += <span class=\"built_in\">gen</span>(s)) &amp; INT_MAX;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pu</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123; s[o] = s[ls[o]] + s[rs[o]] + <span class=\"number\">1</span>; <span class=\"keyword\">return</span> o; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bld</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span>&amp; o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &gt; r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    c[o = ++sz] = a[mid];</span><br><span class=\"line\">    <span class=\"built_in\">bld</span>(l, mid - <span class=\"number\">1</span>, ls[o]), <span class=\"built_in\">bld</span>(mid + <span class=\"number\">1</span>, r, rs[o]), <span class=\"built_in\">pu</span>(o); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">spt</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span>&amp; u, <span class=\"keyword\">int</span>&amp; v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!o) u = v = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x &lt; c[o]) <span class=\"built_in\">spt</span>(ls[v = o], x, u, ls[o]), <span class=\"built_in\">pu</span>(o);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">spt</span>(rs[u = o], x, rs[o], v), <span class=\"built_in\">pu</span>(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mrg</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!u || !v) <span class=\"keyword\">return</span> u + v;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">rnd</span>() % (s[u] + s[v]) &lt; s[u])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rs[u] = <span class=\"built_in\">mrg</span>(rs[u], v), <span class=\"built_in\">pu</span>(u);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ls[v] = <span class=\"built_in\">mrg</span>(u, ls[v]), <span class=\"built_in\">pu</span>(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ins</span><span class=\"params\">(<span class=\"keyword\">int</span>&amp; o, <span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">rnd</span>() % (s[o] + <span class=\"number\">1</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        c[++sz] = x, <span class=\"built_in\">spt</span>(o, x, ls[sz], rs[sz]), <span class=\"built_in\">pu</span>(o = sz);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">ins</span>(x &lt; c[o] ? ls[o] : rs[o], x), <span class=\"built_in\">pu</span>(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rmv</span><span class=\"params\">(<span class=\"keyword\">int</span>&amp; o, <span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t1, t2, t3;</span><br><span class=\"line\">    <span class=\"built_in\">spt</span>(o, x, t1, t3), <span class=\"built_in\">spt</span>(t1, x - <span class=\"number\">1</span>, t1, t2);</span><br><span class=\"line\">    o = <span class=\"built_in\">mrg</span>(<span class=\"built_in\">mrg</span>(t1, <span class=\"built_in\">mrg</span>(ls[t2], rs[t2])), t3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rk</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> re = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(o) o = x &gt; c[o] ? re += s[ls[o]] + <span class=\"number\">1</span>, rs[o] : ls[o]; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">kth</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k != s[ls[o]] + <span class=\"number\">1</span>)</span><br><span class=\"line\">        o = k &gt; s[ls[o]] ? k -= s[ls[o]] + <span class=\"number\">1</span>, rs[o] : ls[o];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c[o];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pre</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> re = -Inf)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(o) o = x &gt; c[o] ? re = <span class=\"built_in\">max</span>(re, c[o]), rs[o] : ls[o];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">suf</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> re = Inf)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(o) o = x &lt; c[o] ? re = <span class=\"built_in\">min</span>(re, c[o]), ls[o] : rs[o];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"可持久化版\">可持久化版</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;limits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> int64;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> int64 <span class=\"title\">Fingerprint</span><span class=\"params\">(int64 x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> int64 kMul = <span class=\"number\">0x9ddfea08eb382d69</span>ULL;</span><br><span class=\"line\">    x *= kMul, x ^= x &gt;&gt; <span class=\"number\">47</span>;</span><br><span class=\"line\">    x *= kMul, x ^= x &gt;&gt; <span class=\"number\">47</span>;</span><br><span class=\"line\">    x *= kMul, x ^= x &gt;&gt; <span class=\"number\">47</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * kMul;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> int64 <span class=\"title\">Random</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> int64 Seed = <span class=\"number\">2</span>;</span><br><span class=\"line\">    Seed += <span class=\"built_in\">Fingerprint</span>(Seed);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Seed &amp; numeric_limits&lt;int64&gt;::<span class=\"built_in\">max</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> DataType;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">RBST</span> &#123;</span></span><br><span class=\"line\">    RBST *ChildL, *ChildR;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> Size;</span><br><span class=\"line\">    DataType Data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">RBST</span>() &#123; ChildL = ChildR = <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">GetSize</span><span class=\"params\">(<span class=\"keyword\">const</span> RBST* root)</span> </span>&#123; <span class=\"keyword\">return</span> root ? root-&gt;Size : <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">LowerBoundIndex</span><span class=\"params\">(<span class=\"keyword\">const</span> RBST* root, DataType x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt;= root-&gt;Data) <span class=\"keyword\">return</span> <span class=\"built_in\">LowerBoundIndex</span>(root-&gt;ChildL, x);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sizeL = <span class=\"built_in\">GetSize</span>(root-&gt;ChildL);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">LowerBoundIndex</span>(root-&gt;ChildR, x) + sizeL + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">DataType <span class=\"title\">Select</span><span class=\"params\">(<span class=\"keyword\">const</span> RBST* root, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sizeL = <span class=\"built_in\">GetSize</span>(root-&gt;ChildL);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index == sizeL) <span class=\"keyword\">return</span> root-&gt;Data;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt; sizeL) <span class=\"keyword\">return</span> <span class=\"built_in\">Select</span>(root-&gt;ChildL, index);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Select</span>(root-&gt;ChildR, index - sizeL - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">RBST* <span class=\"title\">SetSize</span><span class=\"params\">(RBST* root)</span> </span>&#123;</span><br><span class=\"line\">    root-&gt;Size = <span class=\"built_in\">GetSize</span>(root-&gt;ChildL) + <span class=\"built_in\">GetSize</span>(root-&gt;ChildR) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">RBSTree</span> &#123;</span></span><br><span class=\"line\">    vector&lt;RBST*&gt; Nodes;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">RBST* <span class=\"title\">NewNode</span><span class=\"params\">(RBST* node)</span> </span>&#123;</span><br><span class=\"line\">        Nodes.<span class=\"built_in\">push_back</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">RBST</span>(*node));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Nodes.<span class=\"built_in\">back</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Split</span><span class=\"params\">(RBST* root, DataType x, RBST*&amp; treeL, RBST*&amp; treeR)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!root) &#123;</span><br><span class=\"line\">            treeL = treeR = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x &lt;= root-&gt;Data) &#123;</span><br><span class=\"line\">            RBST *newRoot = <span class=\"built_in\">NewNode</span>(root);</span><br><span class=\"line\">            <span class=\"built_in\">Split</span>(root-&gt;ChildL, x, treeL, newRoot-&gt;ChildL);</span><br><span class=\"line\">            treeR = <span class=\"built_in\">SetSize</span>(newRoot);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            RBST* newRoot = <span class=\"built_in\">NewNode</span>(root);</span><br><span class=\"line\">            <span class=\"built_in\">Split</span>(root-&gt;ChildR, x, newRoot-&gt;ChildR, treeR);</span><br><span class=\"line\">            treeL = <span class=\"built_in\">SetSize</span>(newRoot);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">RBST* <span class=\"title\">Join</span><span class=\"params\">(RBST* treeL, RBST* treeR)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sizeL = <span class=\"built_in\">GetSize</span>(treeL);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sizeR = <span class=\"built_in\">GetSize</span>(treeR);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size = sizeL + sizeR;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Random</span>() % size &lt; sizeL) &#123;</span><br><span class=\"line\">            RBST* newRoot = <span class=\"built_in\">NewNode</span>(treeL);</span><br><span class=\"line\">            newRoot-&gt;ChildR = <span class=\"built_in\">Join</span>(treeL-&gt;ChildR, treeR);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">SetSize</span>(newRoot);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            RBST* newRoot = <span class=\"built_in\">NewNode</span>(treeR);</span><br><span class=\"line\">            newRoot-&gt;ChildL = <span class=\"built_in\">Join</span>(treeL, treeR-&gt;ChildL);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">SetSize</span>(newRoot);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">RBST* <span class=\"title\">InsertAsRoot</span><span class=\"params\">(RBST* root, DataType item)</span> </span>&#123;</span><br><span class=\"line\">        Nodes.<span class=\"built_in\">push_back</span>(<span class=\"keyword\">new</span> RBST);</span><br><span class=\"line\">        RBST *newRoot = Nodes.<span class=\"built_in\">back</span>();</span><br><span class=\"line\">        newRoot-&gt;Data = item;</span><br><span class=\"line\">        <span class=\"built_in\">Split</span>(root, item + <span class=\"number\">1</span>, newRoot-&gt;ChildL, newRoot-&gt;ChildR);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">SetSize</span>(newRoot);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">RBST* <span class=\"title\">Insert</span><span class=\"params\">(RBST* root, DataType item)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Random</span>() % (<span class=\"built_in\">GetSize</span>(root) + <span class=\"number\">1</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">InsertAsRoot</span>(root, item);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item &lt; root-&gt;Data) &#123;</span><br><span class=\"line\">            RBST *newRoot = <span class=\"built_in\">NewNode</span>(root);</span><br><span class=\"line\">            newRoot-&gt;ChildL = <span class=\"built_in\">Insert</span>(root-&gt;ChildL, item);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">SetSize</span>(newRoot);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            RBST *newRoot = <span class=\"built_in\">NewNode</span>(root);</span><br><span class=\"line\">            newRoot-&gt;ChildR = <span class=\"built_in\">Insert</span>(root-&gt;ChildR, item);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">SetSize</span>(newRoot);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">RBST* <span class=\"title\">Remove</span><span class=\"params\">(RBST* root, DataType item)</span> </span>&#123;</span><br><span class=\"line\">        RBST *tree1, *tree2, *tree3, *tree4 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">Split</span>(root, item, tree1, tree2);</span><br><span class=\"line\">        <span class=\"built_in\">Split</span>(tree2, item + <span class=\"number\">1</span>, tree2, tree3);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree2) tree4 = <span class=\"built_in\">Join</span>(tree2-&gt;ChildL, tree2-&gt;ChildR);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Join</span>(<span class=\"built_in\">Join</span>(tree1, tree4), tree3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; Nodes.<span class=\"built_in\">size</span>(); ++i) <span class=\"keyword\">delete</span> Nodes[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"k-d-树\">K-D 树</h2>\r\n<h3 id=\"定义-11\">定义</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l + r) / 2)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lc o * 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rc o * 2 + 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lch l, mid, lc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rch mid + 1, r, rc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> D, L[N * <span class=\"number\">4</span>][K], R[N * <span class=\"number\">4</span>][K];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x[K];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123; <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, K) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x[i]); &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"keyword\">const</span> node&amp; b)<span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x[D] &lt; b.x[D];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; a[N];</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数-15\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">lf <span class=\"title\">sq</span><span class=\"params\">(lf x)</span> </span>&#123; <span class=\"keyword\">return</span> x * x; &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pu</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        L[o][i] = <span class=\"built_in\">min</span>(L[lc][i], L[rc][i]);</span><br><span class=\"line\">        R[o][i] = <span class=\"built_in\">max</span>(R[lc][i], R[rc][i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bld</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, K) L[o][i] = R[o][i] = a[l].x[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    lf va[K] = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, K) &#123;</span><br><span class=\"line\">        lf av = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, l, r) av += a[j].x[i];</span><br><span class=\"line\">        av /= r - l + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, l, r) va[i] += <span class=\"built_in\">sq</span>(a[j].x[i] - av);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    D = <span class=\"built_in\">max_element</span>(va, va + K) - va;</span><br><span class=\"line\">    <span class=\"built_in\">nth_element</span>(a + l, a + mid, a + r + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">bld</span>(lch), <span class=\"built_in\">bld</span>(rch), <span class=\"built_in\">pu</span>(o);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"欧几里得距离平方\">欧几里得距离平方</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">sq</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">1ll</span> * x * x; &#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">mine</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> x[], ll re = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, K) re += <span class=\"built_in\">sq</span>(<span class=\"built_in\">max</span>(L[o][i] - x[i], <span class=\"number\">0</span>)) + <span class=\"built_in\">sq</span>(<span class=\"built_in\">max</span>(x[i] - R[o][i], <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">maxe</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> x[], ll re = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, K) re += <span class=\"built_in\">max</span>(<span class=\"built_in\">sq</span>(x[i] - L[o][i]), <span class=\"built_in\">sq</span>(x[i] - R[o][i]));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"曼哈顿距离\">曼哈顿距离</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">minm</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> x[], <span class=\"keyword\">int</span> re = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, K) re += <span class=\"built_in\">max</span>(L[o][i] - x[i], <span class=\"number\">0</span>) + <span class=\"built_in\">max</span>(x[i] - R[o][i], <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxm</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> x[], <span class=\"keyword\">int</span> re = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, K) re += <span class=\"built_in\">max</span>(<span class=\"built_in\">abs</span>(x[i] - L[o][i]), <span class=\"built_in\">abs</span>(x[i] - R[o][i]));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"切比雪夫距离\">切比雪夫距离</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">minc</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> x[], <span class=\"keyword\">int</span> re = Inf)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, K) re = <span class=\"built_in\">max</span>(re, <span class=\"built_in\">max</span>(L[o][i] - x[i], <span class=\"number\">0</span>) + <span class=\"built_in\">max</span>(x[i] - R[o][i], <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxc</span><span class=\"params\">(<span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> x[], <span class=\"keyword\">int</span> re = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, K) re = <span class=\"built_in\">max</span>(&#123;re, <span class=\"built_in\">abs</span>(x[i] - L[o][i]), <span class=\"built_in\">abs</span>(x[i] - R[o][i])&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"最近点查询\">最近点查询</h3>\r\n<h4 id=\"定义-12\">定义</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll res;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"函数-16\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> x[], <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r) <span class=\"keyword\">return</span> <span class=\"built_in\"><span class=\"keyword\">void</span></span>(res = <span class=\"built_in\">mine</span>(o, x));</span><br><span class=\"line\">    ll dl = <span class=\"built_in\">mine</span>(lc, x), dr = <span class=\"built_in\">mine</span>(rc, x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dl &lt; dr) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dl &lt; res) <span class=\"built_in\">qry</span>(x, lch);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dr &lt; res) <span class=\"built_in\">qry</span>(x, rch);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dr &lt; res) <span class=\"built_in\">qry</span>(x, rch);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dl &lt; res) <span class=\"built_in\">qry</span>(x, lch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"初始化\">初始化</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res = Inf;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"最远点查询\">最远点查询</h3>\r\n<h4 id=\"定义-13\">定义</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ll res;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"函数-17\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">qry</span><span class=\"params\">(<span class=\"keyword\">int</span> x[], <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r) <span class=\"keyword\">return</span> <span class=\"built_in\"><span class=\"keyword\">void</span></span>(res = <span class=\"built_in\">maxe</span>(o, x));</span><br><span class=\"line\">    ll dl = <span class=\"built_in\">maxe</span>(lc, x), dr = <span class=\"built_in\">maxe</span>(rc, x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dl &gt; dr) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dl &gt; res) <span class=\"built_in\">qry</span>(x, lch);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dr &gt; res) <span class=\"built_in\">qry</span>(x, rch);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dr &gt; res) <span class=\"built_in\">qry</span>(x, rch);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dl &gt; res) <span class=\"built_in\">qry</span>(x, lch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"初始化-1\">初始化</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"矩形判定\">矩形判定</h3>\r\n<h4 id=\"矩形是否包含所有点\">矩形是否包含所有点</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">chk1</span><span class=\"params\">(<span class=\"keyword\">int</span> l[], <span class=\"keyword\">int</span> r[], <span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> re = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, K) re &amp;= l[i] &lt;= L[o][i] &amp;&amp; R[o][i] &lt;= r[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"矩形是否可能包含点\">矩形是否可能包含点</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">chk2</span><span class=\"params\">(<span class=\"keyword\">int</span> l[], <span class=\"keyword\">int</span> r[], <span class=\"keyword\">int</span> o, <span class=\"keyword\">int</span> re = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">0</span>, K) re &amp;= <span class=\"built_in\">max</span>(l[i], L[o][i]) &lt;= <span class=\"built_in\">min</span>(r[i], R[o][i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"圆判定\">圆判定</h3>\r\n<h4 id=\"圆是否包含所有点\">圆是否包含所有点</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">chk1</span><span class=\"params\">(<span class=\"keyword\">int</span> x[], <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">maxe</span>(x, o) &lt;= <span class=\"number\">1ll</span> * r * r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"圆是否可能包含点\">圆是否可能包含点</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">chk2</span><span class=\"params\">(<span class=\"keyword\">int</span> x[], <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mine</span>(x, o) &lt;= <span class=\"number\">1ll</span> * r * r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"图论\">图论</h1>\r\n<h2 id=\"虚树\">虚树</h2>\r\n<h3 id=\"vector-版\"><code>vector</code> 版</h3>\r\n<h4 id=\"定义-14\">定义</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n, a[N], tp, stk[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> idx, dfn[N], d[N], fa[<span class=\"number\">20</span>][N];</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; G[N], T[N];</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"函数-18\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">    dfn[u] = ++idx;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">19</span>) fa[i][u] = fa[i - <span class=\"number\">1</span>][fa[i - <span class=\"number\">1</span>][u]];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) <span class=\"keyword\">if</span>(v ^ fa[<span class=\"number\">0</span>][u])</span><br><span class=\"line\">        d[v] = d[u] + <span class=\"number\">1</span>, fa[<span class=\"number\">0</span>][v] = u, <span class=\"built_in\">dfs</span>(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d[u] &lt; d[v]) <span class=\"built_in\">swap</span>(u, v);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, <span class=\"number\">19</span>) <span class=\"keyword\">if</span>(d[u] - d[v] &gt;&gt; i &amp; <span class=\"number\">1</span>) u = fa[i][u];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u == v) <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, <span class=\"number\">19</span>, <span class=\"number\">0</span>) <span class=\"keyword\">if</span>(fa[i][u] ^ fa[i][v]) u = fa[i][u], v = fa[i][v];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fa[<span class=\"number\">0</span>][u];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bld</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(a + <span class=\"number\">1</span>, a + k + <span class=\"number\">1</span>, [](<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123; <span class=\"keyword\">return</span> dfn[a] &lt; dfn[b]; &#125;);</span><br><span class=\"line\">    stk[++tp] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, k) <span class=\"keyword\">if</span>(a[i] &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"built_in\">lca</span>(a[i], stk[tp]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(d[stk[tp]] &gt; d[x]) tp--, T[d[stk[tp]] &gt; d[x] ? stk[tp] : x].<span class=\"built_in\">pb</span>(stk[tp + <span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(stk[tp] ^ x) stk[++tp] = x;</span><br><span class=\"line\">        stk[++tp] = a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(--tp) T[stk[tp]].<span class=\"built_in\">pb</span>(stk[tp + <span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clr</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) <span class=\"built_in\">clr</span>(v); T[u].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"快很多版\">快很多版</h3>\r\n<h4 id=\"定义-15\">定义</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n, a[N], p, stk[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[N], fa[N], sz[N], son[N], tp[N], idx, dfn[N];</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; G[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> eid, he[N];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge</span> &#123;</span> <span class=\"keyword\">int</span> v, nx; &#125; e[N * <span class=\"number\">2</span>];</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"函数-19\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">    sz[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) &#123;</span><br><span class=\"line\">        d[v] = d[u] + <span class=\"number\">1</span>, <span class=\"built_in\">dfs</span>(v), sz[u] += sz[v];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sz[v] &gt; sz[son[u]]) son[u] = v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> top)</span> </span>&#123;</span><br><span class=\"line\">    tp[u] = top, dfn[u] = ++idx;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(son[u]) <span class=\"built_in\">Dfs</span>(son[u], top);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) <span class=\"keyword\">if</span>(v ^ son[u]) <span class=\"built_in\">Dfs</span>(v, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; tp[u] ^ tp[v]; d[tp[u]] &gt; d[tp[v]] ? u = fa[tp[u]] : v = fa[tp[v]]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d[u] &lt; d[v] ? u : v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> t = <span class=\"number\">1</span>)</span> </span>&#123;</span><br><span class=\"line\">    e[++eid] = &#123;v, h1[u]&#125;, h1[u] = eid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bld</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(a + <span class=\"number\">1</span>, a + k + <span class=\"number\">1</span>, [](<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123; <span class=\"keyword\">return</span> dfn[a] &lt; dfn[b]; &#125;);</span><br><span class=\"line\">    stk[++p] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, k) <span class=\"keyword\">if</span>(a[i] &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"built_in\">lca</span>(a[i], stk[p]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(d[stk[p]] &gt; d[x])</span><br><span class=\"line\">            p--, <span class=\"built_in\">add</span>(d[stk[p]] &gt; d[x] ? stk[p] : x, stk[p + <span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(stk[p] ^ x) stk[++p] = x;</span><br><span class=\"line\">        stk[++p] = a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(--p) <span class=\"built_in\">add</span>(stk[p], stk[p + <span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"超快版倍增求-lca\">超快版倍增求 <code>LCA</code></h2>\r\n<h3 id=\"定义-16\">定义</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> dl[N], dr[N], fa[<span class=\"number\">20</span>][N];</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数-20\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dl[u] &lt; dl[v]) <span class=\"built_in\">swap</span>(u, v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dl[v] &lt;= dl[u] &amp;&amp; dl[u] &lt; dr[v]) <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, <span class=\"number\">19</span>, <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = fa[i][u];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x &amp;&amp; dl[x] &gt; dl[v]) u = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fa[<span class=\"number\">0</span>][u];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"最大流\">最大流</h2>\r\n<h3 id=\"int-版\"><code>int</code> 版</h3>\r\n<h4 id=\"定义-17\">定义</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n, m, s, t;</span><br><span class=\"line\"><span class=\"keyword\">int</span> eid = <span class=\"number\">1</span>, he[N], nw[N], d[N], q[N];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge</span> &#123;</span> <span class=\"keyword\">int</span> v, nx, c; &#125; e[M * <span class=\"number\">2</span>];</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"函数-21\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> c)</span> </span>&#123;</span><br><span class=\"line\">    e[++eid] = &#123;v, he[u], c&#125;, he[u] = eid;</span><br><span class=\"line\">    e[++eid] = &#123;u, he[v], <span class=\"number\">0</span>&#125;, he[v] = eid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bfs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">mem</span>(d, <span class=\"number\">0</span>), <span class=\"built_in\">memcpy</span>(nw, he, <span class=\"keyword\">sizeof</span> he);</span><br><span class=\"line\">    q[<span class=\"number\">1</span>] = s, d[s] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">1</span>, r = <span class=\"number\">1</span>; l &lt;= r; l++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = q[l];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = he[u], v; v = e[i].v; i = e[i].nx)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(e[i].c &amp;&amp; !d[v]) q[++r] = v, d[v] = d[u] + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d[t];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> lim, <span class=\"keyword\">int</span> re = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u == t) <span class=\"keyword\">return</span> lim;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>&amp; i = nw[u], v; v = e[i].v; i = e[i].nx)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(e[i].c &amp;&amp; d[v] == d[u] + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> t = <span class=\"built_in\">dfs</span>(v, <span class=\"built_in\">min</span>(e[i].c, lim));</span><br><span class=\"line\">        e[i].c -= t, e[i ^ <span class=\"number\">1</span>].c += t, re += t, lim -= t;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!lim) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lim) d[u] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"使用-1\">使用</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> flow = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"built_in\">bfs</span>()) flow += <span class=\"built_in\">dfs</span>(s, Inf);</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"long-long-版\"><code>long long</code> 版</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bfs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">mem</span>(d, <span class=\"number\">0</span>), <span class=\"built_in\">memcpy</span>(nw, he, <span class=\"keyword\">sizeof</span> he);</span><br><span class=\"line\">    q[<span class=\"number\">1</span>] = s, d[s] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">1</span>, r = <span class=\"number\">1</span>; l &lt;= r; l++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = q[l];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = he[u], v; v = e[i].v; i = e[i].nx)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(e[i].c &amp;&amp; !d[v]) q[++r] = v, d[v] = d[u] + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d[t];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, ll lim, ll re = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u == t) <span class=\"keyword\">return</span> lim;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>&amp; i = nw[u], v; v = e[i].v; i = e[i].nx)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(e[i].c &amp;&amp; d[v] == d[u] + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        ll t = <span class=\"built_in\">dfs</span>(v, <span class=\"built_in\">min</span>((ll)e[i].c, lim));</span><br><span class=\"line\">        e[i].c -= t, e[i ^ <span class=\"number\">1</span>].c += t, re += t, lim -= t;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!lim) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lim) d[u] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"最小费用最大流\">最小费用最大流</h2>\r\n<h3 id=\"ssp-算法\">SSP 算法</h3>\r\n<h4 id=\"定义-18\">定义</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n, m, s, t, flow, cost;</span><br><span class=\"line\"><span class=\"keyword\">int</span> eid = <span class=\"number\">1</span>, he[N], nw[N], q[N], d[N], vs[N];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge</span> &#123;</span> <span class=\"keyword\">int</span> v, nx, c, w; &#125; e[M * <span class=\"number\">2</span>];</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"函数-22\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> c, <span class=\"keyword\">int</span> w)</span> </span>&#123;</span><br><span class=\"line\">    e[++eid] = &#123;v, he[u], c, w&#125;, he[u] = eid;</span><br><span class=\"line\">    e[++eid] = &#123;u, he[v], <span class=\"number\">0</span>, -w&#125;, he[v] = eid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">spfa</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">mem</span>(d, <span class=\"number\">63</span>), <span class=\"built_in\">memcpy</span>(nw, he, <span class=\"keyword\">sizeof</span> he);</span><br><span class=\"line\">    q[<span class=\"number\">0</span>] = s, d[s] = <span class=\"number\">0</span>, vs[s] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = <span class=\"number\">0</span>, r = <span class=\"number\">0</span>; l &lt;= r; l++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = q[l % N]; vs[u] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = he[u], v; v = e[i].v; i = e[i].nx)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(e[i].c &amp;&amp; d[u] + e[i].w &lt; d[v]) &#123;</span><br><span class=\"line\">            d[v] = d[u] + e[i].w;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!vs[v]) q[++r % N] = v, vs[v] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d[t] &lt; d[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> lim, <span class=\"keyword\">int</span> re = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u == t) <span class=\"keyword\">return</span> lim;</span><br><span class=\"line\">    vs[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span>&amp; i = nw[u], v; v = e[i].v; i = e[i].nx)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!vs[v] &amp;&amp; e[i].c &amp;&amp; d[v] == d[u] + e[i].w) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> t = <span class=\"built_in\">dfs</span>(v, <span class=\"built_in\">min</span>(lim, e[i].c));</span><br><span class=\"line\">        e[i].c -= t, e[i ^ <span class=\"number\">1</span>].c += t, re += t, lim -= t, cost += t * e[i].w;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!lim) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lim) d[u] = d[<span class=\"number\">0</span>];</span><br><span class=\"line\">    vs[u] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"使用-2\">使用</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"built_in\">spfa</span>()) flow += <span class=\"built_in\">dfs</span>(s, <span class=\"number\">1e9</span>);</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"primal-dual-原始对偶算法\">Primal-Dual 原始对偶算法</h3>\r\n<h4 id=\"定义-19\">定义</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n, m, s, t, flow, cost;</span><br><span class=\"line\"><span class=\"keyword\">int</span> eid = <span class=\"number\">1</span>, he[N], d[N], pre[N];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge</span> &#123;</span> <span class=\"keyword\">int</span> v, nx, c, w; &#125; e[M * <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> d, u;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"keyword\">const</span> node&amp; b)<span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d &gt; b.d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"函数-23\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> c, <span class=\"keyword\">int</span> w)</span> </span>&#123;</span><br><span class=\"line\">    e[++eid] = &#123;v, he[u], c, w&#125;, he[u] = eid;</span><br><span class=\"line\">    e[++eid] = &#123;u, he[v], <span class=\"number\">0</span>, -w&#125;, he[v] = eid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dji</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    priority_queue&lt;node&gt; q;</span><br><span class=\"line\">    <span class=\"built_in\">mem</span>(d, <span class=\"number\">63</span>), q.<span class=\"built_in\">push</span>(&#123;d[s] = <span class=\"number\">0</span>, s&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> [dis, u] = q.<span class=\"built_in\">top</span>(); q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dis &gt; d[u]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = he[u], v; v = e[i].v; i = e[i].nx) <span class=\"keyword\">if</span>(e[i].c) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> w = d[u] + e[i].w - h[v] + h[u];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(w &lt; d[v]) pre[v] = i ^ <span class=\"number\">1</span>, q.<span class=\"built_in\">push</span>(&#123;d[v] = w, v&#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) h[i] += d[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d[t] &lt; d[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"使用-3\">使用</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"built_in\">dji</span>()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mi = Inf;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> u = t, i; i = pre[u]; u = e[i].v) mi = <span class=\"built_in\">min</span>(mi, e[i ^ <span class=\"number\">1</span>].c);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> u = t, i; i = pre[u]; u = e[i].v) e[i].c += mi, e[i ^ <span class=\"number\">1</span>].c -= mi;</span><br><span class=\"line\">    flow += mi, cost += mi * h[t];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"二分图最大匹配\">二分图最大匹配</h2>\r\n<h3 id=\"定义-20\">定义</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n, m, vs[N], mch[N];</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; G[N];</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数-24\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vs[u] == s) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    vs[u] = s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) <span class=\"keyword\">if</span>(!mch[v] || <span class=\"built_in\">dfs</span>(mch[v], s)) <span class=\"keyword\">return</span> mch[v] = u;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"使用-4\">使用</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> as = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"keyword\">if</span>(<span class=\"built_in\">dfs</span>(i, i)) as++;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"sat-问题\">2-SAT 问题</h2>\r\n<h3 id=\"定义-21\">定义</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n, m, co[N * <span class=\"number\">2</span>], stk[N * <span class=\"number\">2</span>], tp;</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; G[N * <span class=\"number\">2</span>];</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数-25\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">    G[u * <span class=\"number\">2</span> + !a].<span class=\"built_in\">pb</span>(v * <span class=\"number\">2</span> + b);</span><br><span class=\"line\">    G[v * <span class=\"number\">2</span> + !b].<span class=\"built_in\">pb</span>(u * <span class=\"number\">2</span> + a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(co[u] | co[u ^ <span class=\"number\">1</span>]) <span class=\"keyword\">return</span> co[u];</span><br><span class=\"line\">    co[u] = <span class=\"number\">1</span>, stk[++tp] = u;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) <span class=\"keyword\">if</span>(!<span class=\"built_in\">dfs</span>(v)) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">twoSat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!co[i * <span class=\"number\">2</span>] &amp;&amp; !co[i * <span class=\"number\">2</span> + <span class=\"number\">1</span>] &amp;&amp; !<span class=\"built_in\">dfs</span>(i * <span class=\"number\">2</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(tp) co[stk[tp--]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!<span class=\"built_in\">dfs</span>(i * <span class=\"number\">2</span> + <span class=\"number\">1</span>)) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"字符串\">字符串</h1>\r\n<h2 id=\"manacher-求偶回文串\">manacher 求偶回文串</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>&amp; j = ma &gt; i ? <span class=\"built_in\">min</span>(R[p * <span class=\"number\">2</span> - i], ma - i) : <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(s[i - j] == s[i + j + <span class=\"number\">1</span>]) j++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i + j &gt; ma) ma = i + j, p = i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"回文自动机\">回文自动机</h2>\r\n<h3 id=\"普通版-3\">普通版</h3>\r\n<h4 id=\"定义-22\">定义</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> s[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, sz = <span class=\"number\">1</span>, nw, len[N], f[N], ch[N][<span class=\"number\">26</span>];</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"函数-26\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ins</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> jmp = [&amp;](<span class=\"keyword\">int</span> o) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(s[i - len[o] - <span class=\"number\">1</span>] != s[i]) o = f[o];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> o = <span class=\"built_in\">jmp</span>(nw), c = s[i] - <span class=\"number\">97</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!ch[o][c]]) &#123;</span><br><span class=\"line\">        f[++sz] = ch[<span class=\"built_in\">jmp</span>(f[o])][c];</span><br><span class=\"line\">        len[ch[o][c] = sz] = len[o] + <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nw = ch[o][c];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"预处理-4\">预处理</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">len[<span class=\"number\">1</span>] = <span class=\"number\">-1</span>, f[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"偶回文版\">偶回文版</h3>\r\n<h4 id=\"函数-27\">函数</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ins</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> jmp = [&amp;](<span class=\"keyword\">int</span> o) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(o &amp;&amp; s[i - len[o] - <span class=\"number\">1</span>] != s[i]) o = f[o];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> o = <span class=\"built_in\">jmp</span>(nw), c = s[i] - <span class=\"number\">97</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!ch[o][c]]) &#123;</span><br><span class=\"line\">        f[++sz] = ch[<span class=\"built_in\">jmp</span>(f[o])][c];</span><br><span class=\"line\">        len[ch[o][c] = sz] = len[o] + <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nw = ch[o][c];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"预处理-5\">预处理</h4>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, <span class=\"number\">25</span>) ch[<span class=\"number\">0</span>][i] = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"后缀数组\">后缀数组</h2>\r\n<h3 id=\"定义-23\">定义</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n, m = <span class=\"number\">128</span>, sa[N], rk[N], tp[N], buc[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> h[<span class=\"number\">20</span>][N];</span><br><span class=\"line\"><span class=\"keyword\">char</span> s[N];</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数-28\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SA</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) buc[rk[i] = s[i]]++;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) buc[i] += buc[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, n, <span class=\"number\">1</span>) sa[buc[rk[i]]--] = i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>, p; <span class=\"built_in\">memset</span>(buc, p = <span class=\"number\">0</span>, m * <span class=\"number\">4</span> + <span class=\"number\">4</span>); k *= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, n - k + <span class=\"number\">1</span>, n) tp[++p] = i;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"keyword\">if</span>(sa[i] &gt; k) tp[++p] = sa[i] - k;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) buc[rk[i]]++;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) buc[i] += buc[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"built_in\">per</span>(i, n, <span class=\"number\">1</span>) sa[buc[rk[tp[i]]]--] = tp[i];</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(tp, rk, n * <span class=\"number\">4</span> + <span class=\"number\">4</span>), p = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) rk[sa[i]] = p += tp[sa[i]] ^ tp[sa[i - <span class=\"number\">1</span>]] || tp[sa[i] + k] ^ tp[sa[i - <span class=\"number\">1</span>] + k];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((m = p) &gt;= n) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">height</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(k ? k-- : <span class=\"number\">0</span>; s[i + k] == s[sa[rk[i] - <span class=\"number\">1</span>] + k]; k++);</span><br><span class=\"line\">        h[<span class=\"number\">0</span>][rk[i]] = k;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">19</span>) <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, n - (<span class=\"number\">1</span> &lt;&lt; i) + <span class=\"number\">1</span>)</span><br><span class=\"line\">        h[i][j] = <span class=\"built_in\">min</span>(h[i - <span class=\"number\">1</span>][j], h[i - <span class=\"number\">1</span>][j + (<span class=\"number\">1</span> &lt;&lt; (i - <span class=\"number\">1</span>))]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"后缀自动机\">后缀自动机</h2>\r\n<h3 id=\"定义-24\">定义</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> s[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, sz = <span class=\"number\">1</span>, nw = <span class=\"number\">1</span>, f[N], len[N], ch[N][<span class=\"number\">26</span>];</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数-29\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ins</span><span class=\"params\">(<span class=\"keyword\">int</span> c)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u = ++sz;</span><br><span class=\"line\">    len[u] = len[nw] + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(nw &amp;&amp; !ch[nw][c]) ch[nw][c] = u, nw = f[nw];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!nw) f[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = ch[nw][c];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len[v] &gt; len[nw] + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            f[++sz] = f[v], <span class=\"built_in\">memcpy</span>(ch[sz], ch[v], <span class=\"keyword\">sizeof</span> ch[v]);</span><br><span class=\"line\">            f[v] = f[u] = sz, len[sz] = len[nw] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = nw; ch[x][c] == v; x = f[x]) ch[x][c] = sz;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> f[u] = v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nw = u;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"最小表示法\">最小表示法</h2>\r\n<h3 id=\"函数-30\">函数</h3>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">char</span> s[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">1</span>, k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; n &amp;&amp; j &lt; n &amp;&amp; k &lt; n)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s[(i + k) % n] == s[(j + k) % n]) k++;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[(i + k) % n] &gt; s[(j + k) % n]) <span class=\"built_in\">swap</span>(i, j);</span><br><span class=\"line\">        j += k + <span class=\"number\">1</span>, k = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == j) i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(i, j);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"部分题解合集","date":"2021-09-08T07:09:11.000Z","updated":"2021-09-08T07:09:11.000Z","top":1,"_content":"懒得分开写咕咕咕。\n\n### TC13459\n\n“1”的限制分两种，在同一行或在同一列，但 “1” 的数量很多，不能枚举每个“1”是哪一种，设“在同一行”的边为白边，“在同一列的”的边为黑白，考虑边之间的约束关系。\n\n考虑两条边 $(i,j),(i,k)$，当边 $(j,k)$ 存在时说明 $(i,j)$ 和 $(i,k)$ 的颜色相同，反之亦然。\n\n这样就可以表示出所有的约束，必要性显然，充分性是因为合法解中同色边一定构成了若干不含公共点的团，这种对于相邻两条边的约束关系就很充分了。\n\n在所有的约束条件下，所有的边及其约束关系构成类似二分图的结构，联通块分两类，一类是整个连通块一定同色，另一类是一定包含两种颜色。\n\n设第一类连通块有 $x$ 个，第二类连通块有 $y$ 个，枚举第一类连通块有 $i$ 个白色，即可得到答案：\n$$\n\\sum_{i=0}^x\\binom xi2^yn^{\\underline{i+y}}n^{\\underline{x-i+y}}\n$$\n复杂度 $O(n^3)$（DFS 求连通块）或 $O(n^3\\alpha(n^2))$（并查集求连通块）。\n\n### TC12909\n\n任意时刻局面的样子都是若干个连续段，我们只关心每个连续段的样子和它们在环上的相对顺序，而不关心空白的位置，因为只有知道前者的方案数，当前局面的方案数是可以算的。\n\n设 $f_{i,j}$ 表示当前已经来了 $i$ 个朋友，共构成 $j$ 个连续段的方案数，转移分三种：\n\n- 第 $i+1$ 个朋友新开一个连续段，$f_{i+1,j+1} \\leftarrow j \\cdot f_{i,j}$。\n- 第 $i+1$ 个朋友加入一个连续段的开头或结尾，$f_{i+1,j} \\leftarrow 2j \\cdot f_{i,j}$。\n- 第 $i+1$ 个朋友将两个连续段接在了一起，$f_{i+1,j-1} \\leftarrow j \\cdot f_{i,j}$。\n\n只需要保证 $j \\le G$ 就行了，而不需要考虑连续段过多而导致前两种转移不合法，因为不合法了贡献系数一定为 $0$。\n\n最后是贡献系数，假设 $K$ 个人到齐后有 $x$ 个连续段，则贡献系数为 $N\\binom{N-K-1}{K-1}$。\n\n复杂度 $O(N^2)$。\n\n### TC13692\n\n搬家具的排列很像拓扑序，但又有点区别。\n\n枚举 $S_1-S_2$ 路径上第一个选的点 $u$，再对每条边定向定向，然后就转化成了一张图的拓扑序，记这个东西为   $f_u$。当 $u=S_1$ 或 $S_2$ 时这张图就是树，否则这张图和树唯一的区别是点 $u$ 有两个父亲，但这张图的拓扑序并不好算，单次复杂度只能做到 $O(n^2)$，无法通过。\n\n注意到这题只需要求出 $S_1-S_2$ 路径上每个点 $f$ 的总和。\n\n枚举 $S_1-S_2$ 路径上的一条边 $(u,v)$，然后断开 $(u,v)$，再对每条边定向定向，然后就转化成了两棵树的拓扑序，这个是可以 $O(n)$ 算的，发现算出来的正好是 $f_u+f_v$。\n\n最后把前一步骤的计算结果加起来，再加上 $f_{S_1}+f_{S_2}$  并除以二，即是答案。\n\n### AGC017F\n\n容易想到用位向量来表示折线，$0$ 表示这一步向左走，$1$ 表示向右，容易得到折线的形态只有 $2^{N-1}$ 种。\n\n由于相邻两条折线 $S,T$ 的约束关系是 $T$ 的每个前缀后都大于等于 $S$ 的对应前缀和。\n\n不难想到轮廓线 `DP`，设 $f_{i,j,k,S}$ 表示满足以下条件的方案数：\n\n- 第 $i$ 条折线已经填了前 $j$ 位。\n- $S$ 的前 $j$ 位是第 $i$ 条折线的，后 $N-1-j$ 位是第 $i-1$ 条折线的。\n- 第 $i-1$ 条折线前 $j$ 位之和为 $k$。\n\n转移就枚举第 $i$ 条折线第 $j+1$ 为填什么。\n\n复杂度 $O(n^32^n)$，无法通过。\n\n再次考虑相邻两条折线 $S,T$ 的约束关系，发现从 $S$ 到 $T$ 是以下过程：\n\n- 把每个 $1$ 都往前移或不动，并且不改变相对顺序。\n\n- 最后一个 $1$ 之后的 $0$ 任意变成 $1$。\n\n重新定义 `DP` 状态 $f_{i,j,S}$ 表示正在确定了第 $i$ 条折线，当前为 $S$，已经固定了前 $j$ 个 $1$ 的方案数。\n\n转移为：\n\n- 如果存在第 $j+1$ 个 $1$，就枚举它往前移多少位，不能跨过前一个 $1$，这个枚举量平均是 $O(1)$ 的。\n- 如果不存在，要么确定第 $i$ 条折线，要么枚举最后一个 $1$ 之后的一个 $0$ 把它变成 $1$，这个枚举量平均也是 $O(1)$ 的。\n\n当确定第 $i$ 条折线后把不合法的状态置成 $0$。\n\n复杂度 $O(n^22^n)$。\n\n### ARC078D\n\n考虑从 $1-n$ 只有一条点不重复的路径的充要条件：\n\n- 把这条唯一路径上的边都断开后路径上的点两两不连通。\n\n假设知道这条唯一路径是 $u_1,u_2,\\cdots,u_k$（$u_1=1,u_k=n$），要将点集划分成 $k$ 份，第 $i$ 份包含 $u_k$，最大化每个点集内部的边权之和。\n\n可以得到一个状压做法：\n\n- 设 $g_S$ 表示两个端点都在点集 $S$ 内部的所有边的权值之和。\n- 设 $f_S$ 表示点集 $S$ 已经被考虑时，最大的保留边权之和。\n- 转移为：$f_S \\leftarrow f_{S-T} + g_T({T \\subseteq S})$，其中 $T$ 恰好包含一个关键点。\n\n由于并不知道这条路径，所以需要该一下 `DP` 状态：\n\n设 $f_{i,S}$ 表示点集 $S$ 已经被考虑且 $1-i$ 只有一条路径时，最大的保留边权之和。\n\n转移为:\n\n- $f_{i,S \\cup \\{i\\}} \\leftarrow f_{j,S} + w(j,i)(j \\not\\in S)$。\n- $f_{i,S\\cup T} \\leftarrow f_{i,S}+g_{T\\cup\\{i\\}}(S \\cap T = \\varnothing)$。\n\n复杂度 $O(n3^n)$。\n\nARC068D\n\nAGC004F\n\nARC097D\n\nTC10265\n\nTC9844\n\nARC067C\n\nARC097C\n\n### TC10727\n\n根据“跳跳棋”的结论，所有的三元组构成二叉森林的形态，于是问题就转化成了：\n\n- 在一棵无限满二叉树上，从点 $u$ 走到点 $v$ 长度恰好为 $k$ 的路径条数。\n\n直接算感觉很困难，考虑 `DP`，容易想到记录当前步数和所在点 $x$，但 $x$ 显然是记不了的。考虑用关键信息来替代 $x$，记录 $\\text{dis}(x,\\text{lca}(x,v)),\\text{dis}(v,\\text{lca}(x,v))$ 就够了。\n\n状态 $f_{i,j,k}$ 为走了 $i$ 步，$\\text{dis}(x,\\text{lca}(x,v))=j,\\text{dis}(v,\\text{lca}(x,v))=k$ 的路径条数。\n\n转移为：\n\n- $f_{i+1,j+1,k} \\leftarrow 2f_{i,j,k},f_{i+1,j-1,k} \\leftarrow f_{i,j,k}(j>0)$\n- $f_{i+1,1,k} \\leftarrow f_{i,0,k},f_{i+1,\\max(1-k,0),\\max(k-1,0)} \\leftarrow f_{i,0,k}(k>0)$\n- $f_{i+1,0,k+1} \\leftarrow f_{i,0,k}(k < \\text{depth}_v)$\n\nTC10664\n\nTC10566\n\nTC10773\n\n### TC10993\n\n容易发现把所有的环缩成点之后这张图就变成的一棵树，把 $0$ 结点所在的环看出根。树边和环边分开考虑。\n\n对于树边，显然所有人都只会向上走，最坏情况就是 $C$ 个人全在这条树边的下面，故每条树边需要 $C$ 个急救仓。\n\n对于一个环，子树中的人都是先向上走到这个环上，再聚集到向上的树边的下端点，最后一起离开这个环。\n\n可以看出环之间是独立的，考虑一个环怎么做。对于一个环来说，最坏的情况肯定是 $C$ 个人聚集在一个点上，然后这 $C$ 个人再分成两批，一批从左边绕到终点，另一批从右边绕到终点，要求 $\\min 左边 + \\min 右边  \\ge C$。\n\n方法是 `DP`，设 $f_{i,j}$ 表示已经确定了从终点开始向左的 $i$ 条边，它们的 $\\min$ 为 $j$ 时的最小代价。\n\n转移时枚举第 $i+1$ 条边的急救仓数 $k$：$f_{i+1,\\min(j,k)} \\leftarrow f_{i,j}(j+k \\ge C)$。因为 $j$ 只会变小，所以对于第 $i+1$  条之后的边，它们的限制会更严，所以转移只需要使第 $i+1$ 条边满足限制。\n\n复杂度 $O(nC^2)$，无法通过。\n\n考虑将这个转移拆开：\n\n- $f_{i+1,j} \\leftarrow f_{i,j}(k \\ge \\max(j,C-j))$，此时肯定要最小化 $k$。\n- $f_{i+1,k} \\leftarrow f_{i,j}(k \\le j \\le C -k)$，考虑 $k$ 从小到大时，可行的 $j$ 组成的区间在扩展，容易做到均摊 $O(1)$ 转移。\n\n复杂度 $O(nC)$。\n\nTC10741\n\nTC10854\n\nTC10848\n\nTC10902\n\nTC10737\n\nTC10758\n\nTC11003\n\nTC11026\n\nTC11032\n\nTC10748\n\nTC11213\n\nTC11305\n\nTC12620\n\n\n\nTC10758\n\nTC11032\n\n### Gym102391E\n\n先二分一个直径 $D$，建出圆方树，设 $f_u$ 表示：\n\n- 已经确定了 $u$ 子树内的所有方点表示的环怎么断。\n- 子树内直径不超过 $D$。\n- $f_u$ 为子树内到 $u$（圆点）/ $fa_u$（方点）的最大距离。\n\n转移分两种：\n\n- $u$ 为圆点，判断一下儿子 $f$ 最大的两个之和是否小于等于 $D$，大于 $D$ 说明 $D$ 小了，停止 `DP`，否则继承儿子 $f$ 的最大值。\n\n- $u$ 为方点，设 $fa$ 为 $u$ 的父亲，枚举一下断该环上的哪条边，然后算一下子树内直径，直径有两种可能情况。\n\n  - 一个儿子 $v$ 到断边的较大环上距离 $+f_v$。\n  - 两个儿子 $v_1,v_2$ 在不跨过断边时的环上距离 $+f_{v_1}+f_{v_2}$。\n\n  如果直径大于 $D$，就说明这条边不能断，否则\n\n  $f_u \\leftarrow \\max\\limits_vf_v+$ $v$ 在不跨过断边时到 $fa$ 的环上距离。\n\n  $f_u \\leftarrow$ 断边到 $fa$ 的环上距离。\n\n  直接转移复杂度为 $O(儿子数量^2)$，记录一些儿子前后缀信息就可以优化到线性，以前缀为例：\n\n  - 第 $i$ 个儿子向左绕到 $fa$ 的距离。\n  - 前 $i$ 个儿子子树内在不跨过 $fa$ 时到第 $i$ 个儿子的最大距离。\n  - 前 $i$ 个儿子子树内和断边向左绕到 $fa$ 的最大距离。\n  - 前 $i$ 个儿子子树内的直径。\n\n复杂度 $O(n\\log V)$。\n\n### ZOJ3970\n\n考虑在操作序列中有相邻的加减操作并且加操作在前面，应用如下调整：\n\n- 如果两个操作区间无交，则交换操作顺序。\n- 如果有交，那么相交的部分相当于什么都没做，直接去掉相交部分，变成上一种情况。\n\n经过有限步调整，操作序列变成了若干减后若干加。\n\n假设已知第 $i$ 个位置需要进行 $a_i$ 次减操作，那么最小操作次数为 $\\sum_{i=2}^n\\max(0,a_i-a_{i-1})$。\n\n加操作同理。\n\n设 $pre_i$ 表示上一个满足 $t_j>0$ 的位置 $j$。\n\n$f_{i,j}$ 表示考虑了前 $i$ 个位置，其中第 $i$ 个位置被 $j$ 个减操作覆盖时的最小操作次数。\n\n转移为：\n\n$$\nf_{i,j}=\\min_kf_{pre_i,k}+\\max(0,j-k)+\\max(0,t_i-s_i+j-t_{pre_i}+s_{pre_i}-k)+\\max(0,\\max_{pre_i<x<i}s_x-\\max(j,k))\n$$\n\n其中最后一项表示将区间 $(pre_i,i)$ 减成 $0$ 需要的额外减操作次数。\n\n复杂度 $O(nV^2)$，无法通过。\n\n打表发现函数 $f_i$ 分三段，每一段都是一次函数，并且斜率递增。\n\n注意到转移方程后面的每一项都是分段一次函数，因此它们的和也是分段一次函数，所以 $\\min$ 只会在拐点处取到，这样就可以 $O(1)$ 算出一个 $f_{i,j}$。\n\n求函数 $f_i$ 的两个拐点？考虑分治，对于一个区间 $[l,r]$，如果 $f_{i,l},f_{i,mid},f_{i,r}$ 等差，说明 $[l,r]$ 一定在同一个段，否则递归左右两半。\n\n复杂度 $O(n\\log V)$。\n\n### ZOJ3989\n\n为了方便处理，先对所有点旋转一个角度，使所有点横坐标两两不同。\n\n对于一个三角剖分，考虑一个维护折线过程：\n\n- 初始为下凸包。\n- 每次将折线上一条边换成它上方三角形的另外两条边，要保证这两条边不在折线上。\n- 或者将折线上在同一三角形内的相邻两条边换成第三条边，要保证三角形在原来两条边的上方。\n- 最终为上凸包。\n\n这个过程会遍历三角剖分中的所有边，容易想到把折线作为 ```DP``` 状态，但折线数量太大了。\n\n给折线加一条限制：折线上的拐点横坐标递增。但这样可能会导致折线找不到合法的转移。\n\n事实上这种情况不存在：\n\n- 对于二换一的转移，显然合法，所以考虑只能进行一换二的时候。\n- 对于最左边的折线，假设它的横坐标区间为 $[l,r]$，进行一换二后新的拐点横坐标为 $x$，要么 $l < x < r$，这时可以直接转移，否则 $x > r$，即它上方的三角形向右偏。\n- 对于最右边的折线，如果它不能直接转移，同理可以得到它上方的三角形向左偏。\n- 最左边的折线上方的三角形向右偏，最右边的折线上方的三角形向左偏，故中间一定存在一条折线可以进行合法的一换二。\n\n这样的折线就可以用拐点集合来表示了，状态数为 $2^{n-2}$，转移时不能跨过点。\n\n这样就解决了最优化问题，但计数会算重。\n\n定义一次转移的「横坐标」为它涉及到的两个或三个点中横坐标的最大值，所有当前能进行的转移的「横坐标」一定两两不同。\n\n考虑将折线的转移序列标准化，使得转移序列与三角剖分一一对应：每次进行「横坐标」最大的合法转移。\n\n另一个等价的定义是每次转移的「横坐标」单调不减。\n\n设 $f_{S,i}$ 表示当前折线为 $S$，上次转移的「横坐标」为 $i$ 时的最小代价及其方案数。\n\n复杂度 $O(n^22^n)$。\n\n### 来源不明的题\n\n> 给定一个二分图，左右各 $n$ 个点。对于左部点的一个集合 $S$，设 $f(S)$ 表示与 $S$ 中至少一个点相邻的右部点集合。判断是否存在一个集合 $S \\ne \\{1,2,\\cdots,n\\}$，使得 $|f(S)| \\le |S|$，输出方案。\n>\n> $n, m \\le 10^5$\n\nHall 定理：一个二分图存在完美匹配的充要条件是对于任意 $S$，$|f(S)| \\ge |S|$。\n\n如果不存在完美匹配，就存在 $S$ 使得 $|f(S)| \\le |S|$，考虑求出一个这样的 $S$。\n\n先求出一个最大匹配，找一个未匹配点为根建匈牙利树，树上所有的左部点就是 $S$。\n\n如果存在完美匹配，解的形式一定是一个左部点集合 $S$，它们的匹配点集合为 $f(S)$。\n\n所以如果选了右部点 $v$，就一定会选它的匹配点 $\\text{match}(v)$。\n\n把原来的每条边 $(u,v)$ 换成 $(u,\\text{match}(v))$ 再求出拓扑序最小的强连通分量即可。\n\n### ARC107F\n\n由于一个连通块的贡献带有绝对值符号，不太好处理，变成枚举符号不会影响答案。\n\n现在变成如下问题：\n\n- 每个点有三种状态：正、负、删，代价分别为 $-B_i,A_i,B_i$。\n- 对于相邻的点 $u,v$，如果它们的状态都不是删，就必须相同。\n- 求最小代价。\n\n想到最小割模型，由于每个点有三种状态，所以把每个点 $i$ 变成两个点 $U_i,V_i$。\n\n用 $(S,U_i),(U_i,V_i),(V_i,T)$ 三条边表示三种状态。\n\n令它们的代价分别为 $\\infty-B_i,\\infty+A_i,\\infty+B_i$，那么这三条边一定恰好割掉一条。\n\n对于相邻的点 $(i,j)$，有两个约束关系：\n\n- 不能同时割 $(S,U_i),(V_j,T)$，如果要割 $(S,U_i)$，说明 $U_i$ 能到达 $T$，如果要割 $(V_j,T)$，说明 $S$ 能到达 $V_j$，所以连一条 $(V_j,U_i)$，代价为 $\\infty^2$ 的边。\n- 不能同时割 $(S,U_j),(V_i,T)$，同理连一条 $(V_i,U_j)$，代价为 $\\infty^2$ 的边。\n\n最后答案为最小割减去 $n\\infty$。\n\n![.png](https://i.loli.net/2021/09/08/4ragjEUYIev5wot.png)\n\n### Gym101471J\n\nCF1307G\n\n### CF1307F\n\nP3980\n\nCF1368H2\n\n### AGC038E\n\n先考虑一个弱化版问题：$B_i=1$ 时怎么做。\n\n这是一个经典问题，一般做法有两种：状压 `DP` 和 `min-max` 容斥。\n\n它们的复杂度都是 $O(n2^n)$ 或 $O(2^n)$ 的，然而这题数据范围是 $400$，说明需要用的此题的特殊性质。\n\n通过 `min-max` 容斥可以得出答案为\n$$\n\\sum_{S}(-1)^{|S|}\\frac{\\sum_{i=1}^n A_i}{\\sum_{i \\in S} A_i}\n$$\n发现分母是小于 $400$ 的非负整数！可以用背包数出每种分母的贡献 $\\sum_S(-1)^{|S|}$。\n\n设\n$$\nf_{i,j} = \\sum_{S \\subseteq \\{1,2,\\cdots,i\\}}(-1)^{|S|}[\\sum_{i \\in S}A_i=j]\n$$\n转移为 $f_{i,j}=f_{i-1,j}-f_{i-1,j-A_i}$，答案为\n$$\n(\\sum_{i=1}^n A_i)\\sum_{i=0}^{400}\\frac{f_{n,i}}i\n$$\n现在回到原问题，还是考虑 `min-max` 容斥，答案就是\n$$\n\\sum_{S}(-1)^{|S|}[S 中第一次有元素达到目标时的期望步数]\n$$\n\n设 $p_i=\\frac{A_i}{\\sum_{j \\in S}A_j}$。\n\n根据期望的线性性质，期望步数可以分摊到经过每个状态上。所以后面那坨东西为：\n$$\n\\begin{aligned}\n&\\sum_{\\forall i \\in S,c_i<B_i}[到达c状态的概率]\\cdot[离开c状态的期望步数]\\\\\n&=\\sum_{\\forall i \\in S,c_i<B_i}\\frac{(\\sum_{i \\in S}c_i)!}{\\prod_{i \\in S} c_i!}\\prod_{i \\in S}p_i^{c_i} \\cdot \\frac{\\sum_{i=1}^n A_i}{\\sum_{i \\in S} A_i}\\\\\n&=\\sum_{\\forall i \\in S,c_i<B_i}\\frac{(\\sum_{i \\in S}c_i)!}{\\prod_{i \\in S} c_i!}\\prod_{i \\in S}A_i^{c_i} \\cdot \\frac{\\sum_{i=1}^n A_i}{(\\sum_{i \\in S} A_i)^{(\\sum_{i \\in S}c_i)+1}}\n\\end{aligned}\n$$\n\n把前面说的东西拼起来，答案为：\n$$\n\\begin{aligned}\n&\\sum_S(-1)^{|S|}\\sum_{\\forall i \\in S,c_i<B_i}\\frac{(\\sum_{i \\in S}c_i)!}{\\prod_{i \\in S} c_i!}\\prod_{i \\in S}A_i^{c_i} \\cdot \\frac{\\sum_{i=1}^n A_i}{(\\sum_{i \\in S} A_i)^{(\\sum_{i \\in S}c_i)+1}}\\\\\n&=(\\sum_{i=1}^n A_i)\\sum_S(-1)^{|S|}\\sum_{\\forall i \\in S,c_i<B_i}\\frac{(\\sum_{i \\in S}c_i)!}{(\\sum_{i \\in S} A_i)^{(\\sum_{i \\in S}c_i)+1}} \\cdot \\prod_{i \\in S}\\frac{A_i^{c_i}}{c_i!}\n\\end{aligned}\n$$\n\n式子中比较难转移的东西就是 $\\sum_{i \\in S} A_i$ 和 $\\sum_{i \\in S}c_i$，把它们记状态里就行了。\n\n状态为\n$$\nf_{i,j,k}=\\sum_{S \\subseteq \\{1,2,\\cdots,i\\}}(-1)^{|S|}\\sum_{\\forall i \\in S,c_i<B_i}\\prod_{i \\in S}\\frac{A_i^{c_i}}{c_i!}[\\sum_{i \\in S} A_i=j \\land \\sum_{i \\in S}c_i=k]\n$$\n转移为\n$$\nf_{i,j,k}=f_{i-1,j,k}-\\sum_{c=0}^{B_i-1}f_{i-1,j-A_i,k-c}\\frac{A_i^c}{c!}\n$$\n答案为\n$$\n(\\sum_{i=1}^n A_i)\\sum_{i=0}^{400}\\sum_{j=0}^{400}\\frac{j!f_{n,i,j}}{i^{j+1}}\n$$\n分析一下时间复杂度，虽然每次转移的枚举量是 $B_i$，但由于 $\\sum_{i=1}^nB_i$ 是 $O(n)$ 的，所以总复杂度是 $O(n^3)$，空间复杂度可以用滚动数组优化到 $O(n^2)$。\n\n---\n\n### AGC037D\n\n考虑第三次操作前第 $i$ 行一定由 $(i-1)m+1$ 到 $im$ 构成，记 $(i-1)m+1$ 到 $im$ 的颜色为 $i$。\n\n第二次操作的目标就是使颜色为 $i$ 的数在第 $i$ 行，所以第一次操作的目标就是使每一列 $n$ 种都颜色各有一个。\n\n先考虑如何确定第一列的颜色，这显然是一个行与颜色的完美匹配问题。由于任意选 $i$ 行，这 $i$ 行的颜色数至少为 $i$，根据 Hall 定理，一定存在完美匹配。每一列依次求完美匹配就可以构造出一组解。\n\n然后第二三次操作就非常简单了，复杂度 $O(n^4)$。\n\n### AGC043D\n\n考虑什么样的排列 $P$ 是能被造出来的。\n\n考虑构造过程：每次选择一个头元素最小的序列 $A_i$，删除 $A_i$ 开头单调递减的一段，再继续找头元素最小的序列。\n\n这启发我们把同时删除的元素看成一段，分段具有如下性质：\n\n- 每一段是长度不超过 $3$ 的单调递减序列。\n- 每一段的头元素递增。\n- 长度为 $1$ 的段不少于长度为 $2$ 的段（因为每一个长度为 $2$ 的段必须要对应一个长度为 $1$ 的段来一起构成一个 $A_i$）。\n\n同时，只要满足上面三个条件，这个 $P$ 就能被造出来的，将每个段配配对就可以得到一个生成 $P$ 的 $A$ 序列。\n\n由于 $P$ 和分段内容是一一对应的，问题转化为对合法的分段内容计数。\n\n枚举长度分别为 $1,2,3$ 的段数 $cnt_1,cnt_2,cnt_3$，满足 $cnt_1+2cnt_2+3cnt_3=3n$ 和 $cnt_1 \\ge cnt_2$。\n\n贡献即为\n$$\n\\binom{cnt_1+cnt_2+cnt_3}{cnt_1,cnt_2,cnt_3}\\frac{(3n)!}{(cnt_1+cnt_2+cnt_3)!2^{cnt_2}3^{cnt_3}}\n$$\n前面的组合数是划分出每一段的方案数，除以 $(cnt_1+cnt_2+cnt_3)!$ 是保证每一段的头元素递增，除以 $2^{cnt_2}3^{cnt_3}$ 是保证每一段的头元素为最大值。\n\n复杂度 $O(n^2)$。\n\n### AGC049D\n\n考虑如何描述一个非负凸序列。\n\n- 枚举最小值 $c$，以及取到最小值的第一个位置 $i$，令 $A=(c,c,\\cdots,c)$。\n- 多次选一个位置 $j<i$，将 $A_j,A_{j-1},A_{j-2},\\cdots,A_1$ 分别加上 $1,2,3,\\cdots,j$。\n- 多次选一个位置 $j>i$，将 $A_j,A_{j+1},A_{j+2},\\cdots,A_n$ 分别加上 $1,2,3,\\cdots,n-j+1$，若 $i>1$ 则 $i-1$ 必须被选到一次。\n\n第三步可以事先选 $i-1$ 一次，对总和产生 $\\frac {i(i-1)}2$ 的贡献，然后第三步就和第二步一样了。\n\n先枚举 $i$，第二三步本质上就是完全背包，由于体积的特性，有用的物品数量是 $O(\\sqrt m)$ 的，可以 $O(m\\sqrt m)$ 预处理出背包数组，然后 $O(\\frac mn)$ 枚举 $c$，计算贡献。\n\n这样做的复杂度为 $O(nm\\sqrt m)$，无法通过。\n\n考虑 $i \\rightarrow i+1$ 时，物品最多删一个，也最多添一个，并且总改变次数是 $O(\\sqrt m)$ 的，动态维护背包即可做到 $O(m\\sqrt m)$ 的复杂度。\n\n### AGC050D\n\n设 $f_{i,a,b,j}$ 表示从以下局面出发，还没有赢的人中从左到右第 $j$ 个人最终赢的概率。\n\n- 有 $a$ 个人还没有赢且已经排除了 $i$ 个错误选项。\n- 有 $b$ 个人还没有赢且已经排除了 $i+1$ 个错误选项。\n\n转移就枚举这 $a$ 个人中下一个人是赢还是输即可（这里 $f_{i,0,b,j}=f_{i+1,b,0,j}$）。\n\n- $f_{i,a,b,j}=win \\cdot f_{i,a-1,b,j-[j>b]} + lost \\cdot f_{i,a-1,b+1,j}(j\\ne b+1)$\n- $f_{i,a,b,b+1}=win + lost \\cdot f_{i,a-1,b+1,b+1}(j\\le b)$\n\n复杂度 $O(n^4)$。\n\n### NOI2021Day1T1\n\n如果把修改操作看成把路径上的点染成一种新的颜色，那么重边就是两端同色的边，轻边就是两端异色的边。\n\n所以询问操作就是查询路径上两端同色的边数，这个可以用树链剖分和线段树维护。\n\n复杂度 $O(n\\log^2n)$。\n\n### NOI2021Day1T2\n\n当 $k=2$ 时，交点就是逆序对，自然联想到行列式，发现答案就是行列式。\n\n当 $n_1=n_2=\\cdots=n_k$ 时，答案就是把每相邻两层邻接矩阵的行列式乘起来。\n\n对于原问题，答案就是相邻两层邻接矩阵乘积的行列式。\n\n证明：\n\n- 对于一个合法的路径组，考虑两条路径 $(P_1,P_2,\\cdots,P_k)$ 和 $(Q_1,Q_2,\\cdots,Q_k)$，两条路径有奇数个交点 $\\iff$ $(P_1,Q_1)$ 和 $(P_k,Q_k)$ 逆序。\n\n- 对于一个不合法的路径组，考虑对其进行以下变换：\n\n  - 找到最靠上的一个点被覆盖多次，多个在同一层时取最靠左的一个。\n  - 找到经过此点的编号最小两条路径，将它们的下一半交换。\n\n  这样的变换是相互的，并且会使每条路径头尾形成的逆序对总数的奇偶性改变，故不合法的路径组的贡献会两两抵消。\n\n复杂度 $O(n^4)$。\n\n### NOI2021Day1T3\n\n容易发现对于一次询问，答案为 $s$ 能到达且能到达 $t$ 的点数。\n\n由于研究的是可达性，先进行强连通分量缩点。\n\n再考虑限制：若 $x\\Rightarrow z$ 且 $y\\Rightarrow z$，则 $x\\Rightarrow y$ 或 $y\\Rightarrow x$。这说明能到达 $z$ 的点在一条链上，进一步，整张图是一棵树加上若干条从祖先到儿子的边。\n\n如何求出这棵树？一个点的父亲就是所有连向它的点中拓扑序最大的一个，注意所完点后编号就是拓扑序的逆序。\n\n对于加边操作，对 $s,t$ 以及所有边的端点建虚树，统计一下虚树上的点和边的贡献即可。\n\n由于此题卡常，树剖求 `LCA` 效果最佳，用邻接链表存虚树，不能用 `vector`。\n\n复杂度 $O(n+q\\log n)$。\n\n### NOI2021Day2T1\n\n$k \\le 15$ 是此题的突破点，这意味着把 $256$ 平均分成 $16$ 段后必然有一段是完全相同的。\n\n枚举完全相同的是哪一段，确定了 $16$ 位后，期望只有 $7$ 个符合条件的串，对它们用 `popcount` 检验即可。\n\n### NOI2021Day2T2\n\n~~结论题。~~\n\n假设已知 $a$ 序列，怎么算答案。\n\n维护最后一项 $a_n$​ 的分子分母 $x,y$​，一次变换后 $\\frac {x'}{y'}=a_{n-1}+\\frac 1{a_n}=\\frac {a_{k-1}x+y}x$​。发现不会发生约分，并且相当于对 $(x,y)$​​ 做了一个线性变换：\n$$\n\\begin{bmatrix}\nx'\\\\\ny'\n\\end{bmatrix}\n=\n\\begin{bmatrix}\na_{n-1}&1\\\\\n1&0\n\\end{bmatrix}\n\\begin{bmatrix}\nx\\\\\ny\n\\end{bmatrix}\n$$\n算出\n$$\n\\begin{bmatrix}\na&c\\\\\nb&d\n\\end{bmatrix}\n=\n\\prod_{i=1}^n\n\\begin{bmatrix}\na_i&1\\\\\n1&0\n\\end{bmatrix}\n$$\n答案即为 $\\frac ab$。\n\n然后考虑两种操作：\n\n- `W` 类型：因为 $\\begin{bmatrix}x&1\\\\1&0\\end{bmatrix}\\begin{bmatrix}1&0\\\\1&1\\end{bmatrix}=\\begin{bmatrix}x+1&1\\\\1&0\\end{bmatrix}$​，所以 'W' 操作就是在后面乘一个 $\\begin{bmatrix}1&0\\\\1&1\\end{bmatrix}$。\n\n- `E` 类型：虽然定义中如果最后一项为 $1$ 时要特别处理，但发现当最后一项为 $1$ 时两种处理方式的结果是一样的。\n\n  给倒数第二项加 $1$ 的影响：\n  $$\n  \\begin{bmatrix}\n  1&1\\\\\n  1&0\n  \\end{bmatrix}\n  \\rightarrow\n  \\begin{bmatrix}\n  1&0\\\\\n  1&1\n  \\end{bmatrix}\n  \\begin{bmatrix}\n  1&1\\\\\n  1&0\n  \\end{bmatrix}\n  =\n  \\begin{bmatrix}\n  1&1\\\\\n  2&1\n  \\end{bmatrix}\n  $$\n  给数列的**最后一项**减 $1$，接着在数列尾再加两项，两项的值都是 $1$ 的影响：\n  $$\n  \\begin{bmatrix}\n  1&1\\\\\n  1&0\n  \\end{bmatrix}\n  \\rightarrow\n  \\begin{bmatrix}\n  0&1\\\\\n  1&0\n  \\end{bmatrix}\n  \\begin{bmatrix}\n  1&1\\\\\n  1&0\n  \\end{bmatrix}^2\n  =\n  \\begin{bmatrix}\n  1&1\\\\\n  2&1\n  \\end{bmatrix}\n  $$\n  所以把 `E` 操作按第二种处理方式就行了，给数列的最后一项减 $1$​ 相当于乘 $\\begin{bmatrix}1&0\\\\-1&1\\end{bmatrix}$。\n\n  于是 `E` 操作相当于乘 $\\begin{bmatrix}1&0\\\\-1&1\\end{bmatrix}\\begin{bmatrix}1&1\\\\1&0\\end{bmatrix}^2=\\begin{bmatrix}2&1\\\\-1&0\\end{bmatrix}$。\n\n此时这题就很容易了，`APPEND`，`FLIP ` 和 `REVERSE ` 都是可以平衡树维护的，每个结点不仅要维护区间矩阵乘积，还要维护倒着乘的结果，`FLIP` 后的结果，和 `FLIP` 后倒着乘的结果。\n\n复杂度 $O(n\\log n)$。\n\n### NOI2021Day2T3\n\n发现每个机器人对纸带的修改本质上只有 $4$ 种：赋值为 $0$，赋值为 $1$，不变，取反，分别用 $0,1,2,3$ 表示。\n\n不难想到容斥原理：枚举一个起始位置集合 $mask$，计算有多少种输入使得机器人从这些位置出发的输出都一样。每条纸带上每个位置受到的修改是确定且独立的，讨论一下一个位置的可行输入，乘起来就是贡献：\n\n- 如果一个位置同时包含 $0,1$ 或 $2,3$，那么输入只能为空，方案数为 $1$。\n- 否则，如果一个位置包含两种操作，那么输入可以为空或 $01$ 中的一种，方案数为 $2$。\n- 否则，三种输入都可行，方案数为 $3$。\n\n至此，得到一个 $O(2^nmn^2)$ 的做法。\n\n考虑优化计算一个机器人对一个起始位置集合的贡献，记状压数组 $g_{0/1/2/3,S}$ 表示选择起始位置集合 $S$ 时包含 $0/1/2/3$ 的位置，$g$ 可以 $O(2^n)$ 求出，有了 $g$ 也可以 $O(1)$​ 算贡献。\n\n复杂度 $O(2^nm)$。\n\n题目限制 $n \\le 32$，猜想是分大小两类计算来平衡复杂度。进一步观察发现当 $mask$ 的最高位大于等于 $\\lceil\\frac n2\\rceil$ 时，修改范围大于 $\\lceil\\frac n2\\rceil$ 的机器人都会爆掉。\n\n枚举 $mask$ 的最高位 $\\max$，这样就确定了哪些机器人会爆掉（不用考虑），分两种情况：\n\n- $\\max \\le \\lceil\\frac n2\\rceil$，这个可以暴力容斥，复杂度 $O(2^{\\frac n2}m)$。\n\n- $\\max > \\lceil\\frac n2\\rceil$，这意味着需要考虑的机器人修改范围都不超过 $n-\\max+1$。\n\n  一个修改范围大小为 $R$​ 的机器人所在的纸带上，一个位置的状态只和两个因素有关：\n\n  - 它前面 $R$ 个位置哪些在 $mask$ 中。\n\n  - 它是否没有被某个区间覆盖。\n\n  如果所有区间都覆盖了某个位置，说明 $mask$​ 的最低位大于等于 $2\\max-n+1$​，可以暴力容斥，复杂度 $O(2^{n-\\max+1}m)$​。\n  否则只需要考虑第一条，可以 `DP`，设 $f_{i,S}$​ 表示已经确定了 $mask$​ 的前 $i$​ 位，其中最后 $n-\\max+1$​ 位为 $S$​，转移直接枚举第 $i+1$​ 位选不选即可，可以 $O(2^{n-\\max+1}m)$​ 预处理转移系数，复杂度 $O(2^{n-\\max+1}n)$​。\n\n总复杂度 $O(2^{n/2}m)$​。\n\n### CF1548D2\n\n根据 Pick 定理：\n$$\nS=i+\\frac b2-1\n$$\n合法三角形的条件即为 $S\\in \\mathbb Z \\land2S\\equiv b \\pmod 4$​。\n\n对于三角形 $ABC$​， $2S=|\\overrightarrow A\\times \\overrightarrow B+\\overrightarrow B\\times \\overrightarrow C+\\overrightarrow C\\times \\overrightarrow A|$​​​，由于 $S$ 是整数，所以绝对值不会影响 $S$ 的奇偶性，只需要各个顶点的坐标模 $4$ 的结果就可以知道 $2S \\bmod 4$​。\n\n一条线段 $AB$​​​ 的 **边界数** 为线段上整点数减一，$b$​​ 就是三条线段的边界数之和。线段 $AB$​​ 的边界数 $\\text{bounds}(A,B)=\\gcd(|X_A-X_B|,|Y_A-Y_B|)$​​​​，不太好简单表示。\n\n由于要求 $S$ 为整数，所以 $b$ 为偶数，这是一个很重要的条件，这意味着合法三角形三条边的边界数中至少有一条是偶数，另外两个奇偶性相同，判断 $\\text{bounds}(A,B) \\bmod 4$ 是 $0$ 还是 $2$ 要容易得多，\n$$\n\\text{bounds}(A,B) \\equiv 0\\pmod 4 \\iff X_A\\equiv X_B\\pmod 4 \\land Y_A\\equiv Y_B\\pmod 4\n$$\n在 $\\text{bounds}(A,B) \\not\\equiv 0\\pmod 4$ 的前提下\n$$\n\\text{bounds}(A,B) \\equiv 2\\pmod 4 \\iff X_A\\equiv X_B\\pmod 2 \\land Y_A\\equiv Y_B\\pmod 2\n$$\n判断这两个条件只需要各个顶点的坐标模 $4$ 的结果。\n\n此时做法就清晰起来了，合法三角形按三条边的边界数奇偶性可以分成 EEE 和 EOO 两类，设 $cnt_{A,x,y,z}$ 表示有多少个点 $B$​​ 满足\n$$\nX_B\\equiv x\\pmod 4 \\land Y_B\\equiv y\\pmod 4 \\land \\text{bounds}(A,B) \\equiv z\\pmod 4\n$$\n这个是可以 $O(n^2\\log V)$ 预处理的。\n\n考虑分别对两类合法三角形 $ABC$​​​ 计数，先枚举点 $A$​，再枚举\n$$\nX_B\\bmod 4,Y_B\\bmod 4,\\text{bounds}(A,B)\\bmod 4\\\\X_C\\bmod 4,Y_C\\bmod 4,\\text{bounds}(A,C)\\bmod 4\n$$\n满足\n$$\nS \\in \\mathbb Z\\\\\n\\text{bounds}(A,B)\\equiv\\text{bounds}(A,C)\\pmod 2\\\\\nX_B\\equiv X_C \\pmod 2\\\\\nY_B\\equiv Y_C\\pmod 2\\\\\nS\\equiv \\text{bounds}(A,B)+\\text{bounds}(A,C)+\\text{bounds}(B,C)\\pmod 4\n$$\n使用 $cnt$ 数组可以 $O(1)$​​ 计算贡献。\n\n这样每个 EEE 三角形会被算 $3$ 遍，每个 EOO 三角形会被算 $1$ 遍。\n\n复杂度 $O(n^2\\log V)$。\n\n### CF1548E\n\n~~最简单的 3400。~~\n\n把坏格子填成 $1$，其他填成 $0$，问题就是求矩阵中有多少个“1”的四-连通块。\n\n> 引理：对于任意两行 $i,j$​​​，“1” 所在列的集合一定是相互包含的。\n\n不妨假设 $a_i \\ge a_j$​​，$a_i+b_k \\le x \\Rightarrow a_j+b_k \\le x$​。\n\n同时，此引理也就是这个矩阵的全部性质了，因为任何一个符合引理的矩阵都是可以构造出 $a,b$ 数组的。此题唯一的条件也就是这个引理了，目标很明确。\n\n我们数连通块的思路是这样的：\n\n- 对于一个连通块 $S$​​​​​​，它上到 $L_r$​​​​​​，下到 $R_r$​​​​​​，左到 $L_c$​​​​​，右到 $R_c$​​​​​​。\n- 设 $a_{L_r},a_{L_r+1},\\cdots,a_{R_r}$​​​ 中第一个取到最小值的位置为 $i$，显然 $(i,L_c),(i,L_c+1),\\cdots,(i,R_c)$​ 都为 “1”。\n- 我们希望 $S$ 被 $i$ 数到。\n\n再考虑对于 $i$​，有多少个连通块会被它数到，对于第 $i$ 行的一个 “1” 的连续段 $[l,r]$，它所在的连通块会被 $i$​​ 数当且仅当：\n\n- 它向上不能走到一行 $j$​​​ 满足 $a_j \\le a_i$​​​​，形式化地，$\\min_{k\\in [l,r]}a_k+\\max_{k\\in (j,i]}b_k>x$​​。\n- 它向下不能走到一行 $j$​​ 满足 $a_j<a_i$​​​，形式化地，$\\min_{k\\in [l,r]}a_k+\\max_{k\\in [i,j)}b_k>x$​​​。\n\n综上，记 $i$ 前面第一个满足 $a_j\\le a_i$ 的 $j$ 为 $pre$， $i$ 后面第一个满足 $a_j< a_i$ 的 $j$ 为 $suf$，连续段 $[l,r]$ 造成贡献当且仅当 $\\min_{i\\in [l,r]}a_i>x-\\max_{i\\in (pre,suf)}$，不等式右边对于每个 $i$ 是确定的，而且是可以通过单调栈 $O(n)$​ 预处理的东西，对于左边则可以使用数据结构来维护。\n\n下面我们进一步讨论这个数据结构需要干什么：\n\n- 这个数据结构维护所有连续段 $b$ 的最小值。\n- 将所有行以 $a_i$​ 为第一关键字，$i$​​ 为第二关键字从大到小排序。每次序列中一个 $0$ 改成 $1$​，会导致新增连续段，也会导致两个连续段合并，修改就是加入元素和删除元素。\n- 询问操作就是查询有多少个元素大于 $key$。\n\n对于新增连续段和合并连续段可以用并查集维护，元素则用反向树状数组维护。\n\n复杂度 $O(n\\log n)$。\n\n### 2021“MINIEYE杯”中国大学生算法设计超级联赛（5）T1\n\n把两端同色的边看成实边，两端异色的边看成虚边。\n\n- `1` 操作就是 `access(u)`。\n- `2` 操作就是查询两点间的虚边条数，转化一下变成查询一个点到根路径上的虚边条数。\n- `3` 操作转化一下就是查询 `dfs` 序区间中的点到根路径上的虚边条数总和。\n- `4` 操作就是每条实链点数选二之和。\n\n对于 `23` 操作，需要维护每个点到根路径上的虚边条数，支持区间加、区间求和，树状数组即可。\n\n对于 `4` 操作，在 `LCT` 中维护实链的点数，就可以在 `access` 时维护答案。\n\n复杂度 $O(n\\log^2n)$。\n\n### 2021“MINIEYE杯”中国大学生算法设计超级联赛（5）T2\n\n记 $f_{i,j}$ 表示有多少个串恰好有 $i$ 个 `a`、$j$​​ 个 `b`，不难写出它的生成函数 $(x+y+k-2)^L$。\n\n而题目中求的就是 $\\sum_{i=0}^L\\sum_{j=0}^L[n|i-p][n|j-q][x^i][y^j](x+y+k-2)^L$​​。\n\n题目还保证 $n|P-1$​，考虑单位根反演，得到答案为\n$$\n\\frac 1{n^2}\\sum_{i=0}^{n-1}\\sum_{j=0}^{n-1}(\\omega_n^i+\\omega_n^j+k-2)^L\\omega_n^{-ip}\\omega_n^{-jq}\n$$\n记 $A_{i,j}=(\\omega_n^i+\\omega_n^j+k-2)^L$ 可以 $O(n^2\\log L)$ 预处理，答案矩阵 $B$ 就是 $A$ 对两维分别做 `IDFT` 得到的。每次固定一维，对另一维做 `IDFT` 就行了，暴力做复杂度 $O(n^3)$，或者 Bluestein + MTT 可以做到 $O(n^2\\log n)$。\n\n复杂度 $O(n^3)$ 或者 $O(n^2\\log L)$。\n\n### 2021“MINIEYE杯”中国大学生算法设计超级联赛（5）T9\n\n称区间中数量超过一半的数为 **主元素**。\n\n由于一个合法区间只有一个主元素，可以考虑每个主元素的贡献。\n\n#### 做法 1\n\n考虑枚举一个值 $v$​，计算这个值的贡献。\n\n假设 $v$​ 在序列中的出现位置为 $p_1,p_2,\\cdots,p_k$​​，区间 $[l,r]$ 中第一个 $v$ 在 $p_i$ 出现，最后一个 $v$ 在 $p_j$​ 出现。\n\n考虑枚举 $j$​，快速查询有多少对合法的 $(l,r)$​。把等于 $v$​ 的位置变成 $1$​，不等于 $v$​ 的位置变成 $-1$​，记前缀和为 $sum_i$​，那么区间 $[l,r]$​ 合法的充要条件为 $sum_{l-1}<sum_r$​，因此需要维护的是 $sum_1,sum_2,\\cdots,sum_{p_j}$​ 组成的集合，$j\\rightarrow j+1$​ 时，加入的元素是 $sum_{p_j},sum_{p_j+1},\\cdots,sum_{p_{j+1}-1}$​，它们的值是连续的一段，所以这是一个区间 $+1$​，对于一个 $r\\in[p_j,p_{j+1})$​，合法 $l$​ 的数量就是集合中小于 $sum_r$​​ 的元素数量，这是一个前缀和，而 $[p_j,p_{j+1})$​ 内所有的 $sum_r$​ 构成一个区间，所以询问操作是查询前缀和的前缀和，可以用三个树状数组实现。\n\n复杂度 $O(n\\log n)$。\n\n#### 做法 2\n\n考虑分治，计算有多少个合法区间 $[l,r]$​​ 满足 $l\\le mid+1 \\land r\\ge mid$​​。\n\n可以发现区间 $[l,r]$​​ 合法的必要条件是 $[l,mid]$ 和 $[mid+1,r]$ 中至少有一个是合法的。\n\n> 引理：一个序列所有前缀的主元素中本质不同只有 $O(\\log n)$ 个。\n\n所以可能产生贡献的 $v$ 只有 $O(\\log n)$ 个。枚举 $v$。把等于 $v$ 的位置变成 $1$，不等于 $v$ 的位置变成 $-1$，记前缀和为 $sum_i$，枚举 $r$ 后，需要查询有多少个 $l\\le mid+1$ 满足 $sum_{l-1}<sum_r$，这个可以预处理前缀和做到 $O(1)$ 查询。\n\n复杂度 $O(n\\log^2n)$。\n\n### 2021“MINIEYE杯”中国大学生算法设计超级联赛（5）T13\n\n先二分一个直径 $D$，考虑用 `DP` 去判定。\n\n设 $f_{u,0/1}$ 表示以下情形以 $u$​ 为端点向子树内延伸的最长链的最小值（不存在时为 $\\infty$）：\n\n- 确定了 $u$​ 子树内每个点选哪条边。\n- $u$ 选的边是否是 $u$​ 和父亲的连边。\n- 子树内直径不超过 $D$。\n\n$f_{u,1}$​​​ 可以直接从每个儿子 $v$​​​ 用 $\\min(f_{v,0}+w(u,v),f_{v,1}+\\max(w(u,v)-p_v,0))$​​​ 转移过来，如果前两大的值之和大于 $D$​​，$f_{u,1}=\\infty$​​，否则就取这些值中的最大值。\n\n$f_{u,0}$​ 的转移需要分析一下，$u$​ 选择的边 $(u,v)$​​ 必须要满足 $v$​ 是 $\\min(f_{v,0}+w(u,v),f_{v,1}+w(u,v)-p_v)$​​ 前两大的儿子，所以枚举一下 $v$，就可以直接转移了。\n\n复杂度 $O(n\\log V)$。\n\n### AGC041D\n\n考虑任意 $k$​ 道题的总分都小于任意 $k+1$​ 道题的总分这个限制，发现它等价于前 $\\lceil\\frac n2\\rceil$​ 道题的总分小于后 $\\lceil\\frac n2\\rceil-1$​ 道题的总分。\n\n考虑如何生成一个合法的序列 $A$：\n\n- 枚举第 $\\lfloor\\frac n2\\rfloor+1$​ 道题的分值 $c$​，令 $A=(c,c,\\cdots,c)$​。\n- 多次选一个位置 $j<\\lfloor\\frac n2\\rfloor+1$​​，将 $A_1,A_2,\\cdots,A_j$​ 全部减一。\n- 多次选一个位置 $j>\\lfloor\\frac n2\\rfloor+1$​，将 $A_j,A_{j+1},\\cdots,A_n$​​​ 全部加一。\n- 由于 $A_1 \\ge 1$​​​，所以第二种操作的次数不得超过 $c-1$​​​，同理第三种操作的次数不得超过 $n-c$​​​。\n- 设前 $\\lceil\\frac n2\\rceil$​ 道题的总分减后 $\\lceil\\frac n2\\rceil-1$​ 道题的总分为 $x$​，第一步后 $x=c$​，第二种操作每一次都会使 $x$​ 减小 $j$​，第三种操作每一次都会使 $x$​ 减小 $n-j+1$​​，因此第二、三种操作的总贡献要小于 $c$。\n\n可以看出这是一个完全背包，第二种操作就是添加体积为 $1,2,\\cdots,\\lfloor\\frac n2\\rfloor$​​ 的物品，而且最多添加 $c-1$​ 个，第三种操作就是添加体积为 $1,2,\\cdots,\\lceil\\frac n2\\rceil-1$​​​​ 的物品，最多添加 $n-c$​ 个，总体积要小于 $c$​。\n\n对于第二种操作，考虑预处理 $L_{i,j}$​ 表示选择 $i$ 个物品，总体积为 $j$ 的方案数。用传统背包做复杂度肯定不行，事实上它能直接转移：\n$$\nL_{i,j}=L_{i-1,j-1}+L_{i,j-i}-L_{i-1,j-i-\\lfloor\\frac n2\\rfloor}\n$$\n对于第三种操作，同理可以预处理 $R_{i,j}$。\n\n然后就可以枚举 $c$​ 后 $O(n)$​​ 计算合法方案数。\n\n复杂度 $O(n^2)$。\n\n### AGC027D\n\n构造的思路是先黑白染色，然后填好黑格，再让每个白格满足：\n\n- 它大于周围四个黑格。\n- 它模周围四个黑格都等于 $1$。\n\n填白格的过程是容易的，对于一个白格，先算出周围四个黑格的 $\\text{lcm}$，然后尝试填 $\\text{lcm}+1$​，如果已经填过了，就继续尝试 $2\\text{lcm}+1,3\\text{lcm}+1,\\cdots$​。\n\n如果没有值域限制，这题就做完了，考虑怎样让填的数尽可能小。\n\n填白格没有什么好优化的（尝试过优先填 $\\text{lcm}$​​ 较大的格子，但完全没有效果），所以考虑如何填黑格，才能使 $\\text{lcm}$ 比较小。\n\n- 填法一：顺序填或随机填，大概只能构造 $N$ 等于一百多。\n- 填法二：考虑到一个白格周围四个黑格有两个是同一行的，有两个是同一列的，令 $A_{i,j}$ 是 $\\text{lcm(i,j)}$ 的倍数，具体怎么确定，像确定白格那样确定，大概能构造 $N$ 等于两百多。\n- 填法三：考虑到一个白格周围四个黑格只涉及四条斜线，令 $A_{i,j}$ 是 $\\text{lcm}(i+j,i-j+n)$ 的倍数，大概能构造 $N$ 等于 $425$ 左右。\n- 填法四：经过一番尝试，令 $A_{i,j}$​​ 是 $\\text{lcm}(i+(n-j+1),i-(n-j+1)+n)$​（就是把列编号倒过来）可以通过。\n- 填发五：考虑给每条斜线分配一个质数，黑格就等于所在的两条斜线质数的乘积，白格就等于周围四条斜线质数的乘积加一，一定不会有数重复。\n\n填发四需要用 `set` 维护哪些数填过，复杂度 $O(n^2\\log n)$​​。\n\n填发五复杂度 $O(n^2)$。\n\n### AGC025D\n\n对于两个距离为 $\\sqrt D$​ 的点 $(x_1,y_1),(x_2,y_2)$​，考虑 $x_1-x_2,y_1-y_2$​​ 的奇偶性：\n$$\nx_1 \\equiv x_2 \\pmod 2,y_1 \\equiv y_2 \\pmod 2 \\iff D \\equiv 0 \\pmod 4\\\\\nx_1 \\equiv x_2 \\pmod 2,y_1 \\not\\equiv y_2 \\pmod 2 \\iff D \\equiv 1 \\pmod 4\\\\\nx_1 \\not\\equiv x_2 \\pmod 2,y_1 \\not\\equiv y_2 \\pmod 2 \\iff D \\equiv 2 \\pmod 4\\\\\n$$\n因此 $D \\bmod 4$​ 说明了两点坐标差的奇偶性。\n\n> 引理：将平面上距离为 $\\sqrt D$ 的点对连边后是一张二分图。\n\n考虑构造一个黑白染色方案，设 $\\text{color}(x,y,D)=0/1$ 表示点 $(x,y)$ 的颜色。\n\n- 当 $D\\equiv 3\\pmod 4$ 时，没有边，$\\text{color}(x,y,D)=0$。\n\n- 当 $D\\equiv 2\\pmod 4$ 时，$\\text{color}(x,y,D)=x\\bmod 2$，这样距离为 $\\sqrt D$ 的点对就必然异色。\n- 当 $D \\equiv 1\\pmod 4$ 时，$\\text{color}(x,y,D)=(x+y)\\bmod 2$，这样距离为 $\\sqrt D$ 的点对就必然异色。\n\n- 当 $D\\equiv 0\\pmod 4$ 时，$\\text{color}(x,y,D)=\\text{color}(\\lfloor\\frac x2\\rfloor,\\lfloor\\frac y2\\rfloor,\\frac D4)$​​，下面证明为什么合法：\n\n  对于两个距离为 $\\sqrt D$ 的点 $(x_1,y_1),(x_2,y_2)$，由于 $x_1 \\equiv x_2 \\pmod 2,y_1 \\equiv y_2 \\pmod 2$，所以\n  $$\n  \\lfloor\\frac {x_1}2\\rfloor-\\lfloor\\frac {x_2}2\\rfloor=\\frac 12(x_1-x_2)\\\\\n  \\lfloor\\frac {y_1}2\\rfloor-\\lfloor\\frac {y_2}2\\rfloor=\\frac 12(y_1-y_2)\n  $$\n  进一步：\n  $$\n  \\begin{aligned}\n  &(x_1-x_2)^2+(y_1-y_2)^2=D\\\\\n  \\Rightarrow &(\\lfloor\\frac {x_1}2\\rfloor-\\lfloor\\frac {x_2}2\\rfloor)^2+(\\lfloor\\frac {y_1}2\\rfloor-\\lfloor\\frac {y_2}2\\rfloor)^2=\\frac D4\\\\\n  \\Rightarrow &\\text{color}(\\lfloor\\frac {x_1}2\\rfloor,\\lfloor\\frac {y_1}2\\rfloor,\\frac D4)\\ne\\text{color}(\\lfloor\\frac {x_2}2\\rfloor,\\lfloor\\frac {y_2}2\\rfloor,\\frac D4)\n  \\end{aligned}\n  $$\n\n对于 $D_1$​ 和 $D_2$​ 分别黑白染色后本质有 $4$​ 种颜色，这 $4$​​ 种颜色中肯定有一种点数大于等于 $n^2$​，输出这种颜色的 $n^2$​ 个点即可。\n\n复杂度 $O(n^2)$。\n\n### AGC036D\n\n没有负环等价于差分约束有解，假设解为 $d_1,d_2,\\cdots,d_n$​，不妨令 $d_1=0$。\n\n由于 $i\\rightarrow i+1$ 的边是不能被删的，所以 $d$ 是单调不增的，也就是一段 $0$，一段 $-1\n$，一段 $-2\\cdots$ 的形式。\n\n考虑一段一段的枚举 $d$​​​，上一段是 $[a,b]$​​​，即 $d_{a,a+1,\\cdots,b}=x+1$​​​，枚举了新的一段 $[b+1,c]$​​，即 $d_{b+1,b+2,\\cdots,c}=x$​​​​​，​分析哪些边需要删：\n\n- 对于 $b+1\\le i < j \\le c$，边 $(i,j)$ 需要删除。\n- 对于 $b+1\\le i\\le c,j<a$，边 $(i,j)$ 需要删除。\n\n然后就可以 `DP` 了，设 $f_{a,b}$ 表示填的最后一段为 $[a,b]$ 时的最小代价，转移为\n$$\nf_{a,b}+\\text{cost}_1(b+1,c)+\\text{cost}_2(b+1,c,a-1)\\rightarrow f_{b+1,c}\n$$\n其中 $\\text{cost}_1$​ 和 $\\text{cost}_2$​​ 在预处理二维前缀和后可以 $O(1)$ 算。\n\n复杂度 $O(n^3)$。\n\n### AGC045D\n\n如果 `Snuke` 按到了 $p_i=i$ 的位置就死了，所以他要最小化有解时死的概率，分析 `Snuke` 的最优策略：\n\n- 最初需要按下一个按钮，由于 `Snuke` 不知道排列，所以按每个按钮都是一样的，不妨按 $1$。\n- 如果按下了 $p_i=i$ 的按钮就死了。\n- 否则，$p_i$​ 一定是一个安全的按钮，继续按下 $p_i$，这样就可以安全地按下许多按钮。\n- 又需要尝试一个按钮时就按没按过的编号最小的按钮。\n\n于是，得到了 `Snuke` 胜利的充要条件：假设 $1-A$ 中第一个满足 $p_i=i$ 的 $i$ 为 $\\min$​​，$\\forall i>A,\\exists j<\\min$ 使得 $j$ 能到达 $i$。\n\n容易想到枚举 $\\min$​，把排列看成若干个循环，要求 $\\min$​ 前面没有孤立点，这个可以容斥：\n\n- 钦定 $i$​​​ 个孤立点，系数为 $(-1)^i\\binom{\\min-1}i$​。\n- 对于 $[1,\\min-1]$​​ 中剩下的 $\\min-1-i$​​ 个点先生成若干个循环，方案数为 $(\\min-1-i)!$。\n- 对于 $[A+1,n]$ 中的点，它们只能加入前面的循环，方案数为 $(\\min-1-i)^{\\overline{n-A}}$​。\n- 对于 $[\\min+1,A]$ 中的点，它们既可以加入前面的循环，又可以新建一个环，方案数为 $(\\min-1-i+n-A)^{\\overline{A-\\min}}$。\n\n综上，得到 $\\min$ 的贡献为：\n$$\n\\sum_{i=0}^{\\min-1}(-1)^i\\binom{\\min-1}i\\frac{(n-1-i)!(\\min-1-i)}{\\min-1-i+n-A}\n$$\n当 $\\min$​ 不存在时需要特判，贡献为：\n$$\n\\sum_{i=0}^A(-1)^i\\binom Ai(n-i)!\n$$\n复杂度 $O(A^2+n)$。\n\n### AGC041E\n\n#### 对于 $T=1$\n\n将网络抽象成一张有向图：\n\n- 将每条线的起点、终点和平衡器的端点抽象成结点。\n- 同一条线上的结点后面向前面连边。\n- 平衡器抽象成两个方向的边。\n\n考虑暴力怎么做，枚举最终汇聚到第 $t$​ 条线，判断 $t$ 的终点是否可以到达所有的起点。\n\n可以用一个 `bitset` 来压哪些汇点能到达这个点，然后 `DFS` 来求这些 `bitset`。可以做到 $O(\\frac {nm}{\\omega})$​​​ 的复杂度。\n\n#### 对于 $T=2$\n\n$n=2$ 时显然无解，下面构造说明了 $n>2$ 时一定有解。\n\n考虑从右往左依次插入每个平衡器，维护 $size_i$ 表示当前网络有多少个起点会到达第 $i$ 条线的终点。\n\n- 初始时，$size_i=1$。\n- 加入平衡器 $(x,y)$ 时，要么 $size_x+1$，要么 $size_y+1$，选择 $size_x$ 和 $size_y$ 中较小的一个 $+1$。一定不会出现 $size_x=n-1\\land size_y=n-1$ 的情况，因为 $size_x+size_y\\le n$。\n\n复杂度 $O(n+m)$。\n\n### ABC214G\n\n以下解法可以解决 $n \\le 10^5$​​ 的问题。\n\n设 $F_k$​​​ 表示确定 $k$​​​ 个位置的值 $r_{i_1},r_{i_2},\\cdots,r_{i_k}(i_1<i_2<\\cdots<i_k)$​​​​​​​​ 满足以下条件的方案数：\n$$\n\\forall x\\in[1,k],r_{i_x}=p_{i_x}\\lor r_{i_x}=q_{i_x}\n$$\n根据二项式反演，答案为\n$$\n\\sum_{i=0}^n(-1)^iF_i(n-i)!\n$$\n将 $p_i,q_i$​​​​​​​ 连边，得到一张由若干个环组成的图，选择一个满足 $r_i=p_i\\lor r_i=q_i$​​ 的位置 $i$​​​​ 就是选择一条边并占用一个端点，这对于每个环是独立的，所以对每个环求出 $F$​​ 数组，再用分治 `FFT` 合并就可以得到整张图的 $F$​ 数组。\n\n考虑求一个大小为 $m$​ 的环的 $F$​ 数组，假设点编号为 $1,2,\\cdots,m$，边为 $(1,2),(2,3),\\cdots,(m-1,m),(m,1)$，将选择 $i$ 条边的方案分为以下两类：\n\n- 不选边 $(1,2)$​，把边 $(2,3)$ 占用 $2$ 的方式编号为 $1$，边 $(2,3)$ 占用 $3$ 的方式编号为 $2$，边 $(3,4)$ 占用 $3$ 的方式编号为 $3$，边 $(3,4)$ 占用 $4$ 的方式编号为 $4$，依次类推。方案就是从 $2m-2$​ 种选择方式选 $i$​ 种，限制就是编号相邻的不能同时选择。\n\n  > 引理：从 $n$ 个物品中选 $r$ 个，编号相邻的不能同时选择的方案数为 $\\binom {n-r+1}r$​。\n  >\n  > 证明：将选择的第 $i$ 个物品的编号减去 $i-1$ 就得到了从 $n-r+1$ 个物品中选 $r$ 个的方案数。\n\n  这部分方案数为 $\\binom{2m-i-1}i$​。\n\n- 选边 $(1,2)$​​，那么边 $(1,2)$​​ 可以占用 $1$​​ 或 $2$​​，但两种方式是等价的，不妨假设占用了 $1$​​。方案就是从 $2m-3$​​ 种选择方式选 $i-1$​​​​ 种，限制还是编号相邻的不能同时选择。\n\n  这部分方案数为 $2\\binom{2m-i-1}{i-1}$。\n\n对于一个大小为 $m$ 的环\n$$\nF_i=\\binom{2m-i-1}i+2\\binom{2m-i-1}{i-1}=\\binom{2m-i}i+\\binom{2m-i-1}{i-1}\n$$\n然后每个环的 $F$​ 就可以 $O(n)$​ 求了，复杂度瓶颈在于分治 `FFT`，复杂度 $O(n\\log^2n)$​​​。\n\n分治 `FFT` 有两种优化：\n\n- 由于每个环的大小之和为 $n$，故只有 $O(\\sqrt n)$ 种大小不同的环，大小相同的环可以通过快速幂 $O(n\\log n)$​ 地算出乘积。\n- 整个分治过程形成一棵二叉树的结构，总时间就是 $\\sum_{u\\in \\mathbb{leaf}}\\text{degree}_u\\text{depth}_u$​，最小化时间就是 `Huffman` 树，每次贪心地将两个次数最小的多项式乘起来。 ​​​\n\n### ABC214H\n\n走到了一个强连通分量就肯定会走完内部的所有点，缩点后图就变成了 `DAG`，假设原图就是 `DAG`。\n\n想到用最小费用流解决：\n\n- 把每个点 $u$ 拆成 $\\text{in}_u$ 和 $\\text{out}_u$。\n- $\\text{in}_u$ 向 $\\text{out}_u$ 连一条容量为 $1$​，费用为 $-X_u$​ 的边，再连一条容量为 $K$，费用为 $0$ 的边。\n- 对于原图中的边 $(u,v)$​，$\\text{out}_u$​ 向 $\\text{in}_v$​ 连一条容量为 $K$​，费用为 $0$​ 的边。\n- $S$ 向 $\\text{in}_1$ 连一条容量为 $K$，费用为 $0$ 的边，$\\text{out}_u$ 向 $T$ 连一条容量为 $K$，费用为 $0$ 的边。\n\n`SSP` 算法肯定是通过不了的，考虑变成 `Primal-Dual` 算法可以做的问题。\n\n#### Sol 1\n\n初始图是一张 `DAG`，可以跑一遍 `DP` 预处理最短路作为点的初始势能。\n\n#### Sol 2\n\n求出 `DAG` 的一组拓扑序，然后给每个点按拓扑序从大到小重新编号（也就是缩完点后的编号）。\n\n容易构造一组满足差分约束的初始势能：\n\n- $S$​​ 势能为 $\\sum X_u$​​，$T$​​​ 势能为 $0$​​。\n- $\\text{in}_u$​ 的势能为 $\\sum_{i=1}^uX_i$​，$\\text{out}_u$ 的势能为 $\\sum_{i=1}^{u-1}X_i$。\n\n上述两种做法复杂度都是 $O(nK\\log n)$。\n\n### AGC027E\n\n考虑什么样的串能变成单个字母 $a$ 或 $b$。\n\n打表发现能变成 $a$ 的串 $S$ 满足的 $a,b$ 数量关系是 $a$ 的数量减 $b$ 的数量模 $3$ 余 $1$，并且这个条件在 $|S|$ 为偶数时也是充分条件，当 $|S|$ 为奇数时恰好多了一个串 $ababab\\cdots aba$​。​\n\n> 引理一：记 $p(S)$​ 表示 $S$​ 中 $a$​ 的个数减 $b$​ 的个数模 $3$​，$S$​ 能变成单个字母 $c$​ 当且仅当：\n>\n> - $p(S)=p(c)$\n> - $S=c$ 或 $S$ 中有相邻的相同字母。\n\n必要性显然，下面证明充分性：当 $|S|\\le 3$ 时显然成立，当 $|S|>3$ 时取出 $S$ 中最长的连续相同子串，不妨假设它是 $n$ 个 $a$，分两种情况讨论：\n\n- $n \\ge 4$，直接将前两个 $a$​​ 合并，$|S|$ 减小了 $1$，并且还满足引理条件。\n- $n\\le 3$​，由于 $|S|>3$​，这个子串不可能前后都没有字母，不妨假设它不在开头，那么它前面必然是 $b$​，将前两个 $a$​ 合并成 $b$，那么此时有两个 $b$ 会相邻，$|S|$ 减小了 $1$​，并且还满足引理条件。\n\n然后问题就转化成了有多少个串 $T$ 满足以下条件：\n\n- 存在一种将 $S$ 划分为 $|T|$ 段的方式，使得每一段与 $T$​​ 中的对应字母满足引理一。\n\n这个问题的主要难点在于引理一的条件二。\n\n事实上，当 $S$​ 中有相邻的相同字母时，**忽略引理一的条件二** 不会影响答案。\n\n> 引理二：若 $S$ 中有相邻的相同字母，$S$ 能够变成 $T$​ 当且仅当：\n>\n> - 存在一种将 $S$​ 划分为 $|T|$​ 段的方式，设 $S$​ 被划分成了 $S_1,S_2,\\cdots,S_{|T|}$​，$T$​ 中每个字母分别为 $T_1,T_2,\\cdots,T_{|T|}$​。\n> - 满足 $\\forall i,p(S_i)=p(T_i)$。\n\n必要性显然，下面证明充分性：\n\n- 假设存在一组满足上述条件的划分 $(S_1,S_2,\\cdots,S_{|T|})$​。\n- 将 $S_1,S_2,\\cdots,S_{|T|-1}$ 的长度最小化得到新的划分 $(S_1',S_2',\\cdots,S_{|T|}')$​。\n- 由于最小化，容易发现 $S_1,S_2,\\cdots,S_{|T|-1}$​ 已经满足了引理一。\n- 此时 $S_{|T|}$ 有可能不合法，比如 $S_{|T|}=abab\\cdots aba$，由于不合法时 $|T|>1$，可以让 $S_{|T|}$ 只保留最后一个字母，把前面的部分扔给 $S_{|T|-1}$，于是 $T$ 删去最后一个字母对于 $S$​ 删去最后一个字母满足引理二，故 $S$ 可以变成 $T$。\n\n有了引理二就很好做了，特判掉 $S$ 中没有相邻的相同字母的情况，容易用一个自动机来判断 $T$​ 是否合法，计数可以在自动机上 `DP`。\n\n复杂度 $O(n)$。\n\n### Gym101667G\n\n如果两个楼梯一个朝上一个朝下，那么就没有封闭区域，如果两个朝下可以对称一下，变成两个都朝上的情况。\n\n可以看出一个封闭区域开始的标志是 L 横线和 U 竖线相交，结束的标志是 U 横线和 L 竖线相交。考虑用扫描线来求出每一个封闭区域，从左到右处理每一条竖线，并维护变量 `isRegion` 表示当前竖线是否经过一个封闭区域，`area` 表示当前区域的面积：\n\n- 当 `isRegion` 为真时将 `area` 加上当前竖线和上一条竖线之间矩形的面积。\n- 当一个封闭区域开始时清零 `area`。\n- 当一个封闭区域结束时，答案累加上 `area`。\n\n复杂度 $O(n+m)$。\n\n![.png](https://i.loli.net/2021/09/08/a4fEq6tJWRbrxDy.png)\n\n### Gym101667J\n\n完美匹配的存在性容易想到 Hall 定理，设 $f(S)$ 表示与点集 $S$ 距离恰好等于 $1$ 的点集，问题转化为判定：\n$$\n\\forall |S|\\le\\frac n2,|T|=\\frac n2,S \\cap T=\\varnothing\\\\\n|f(S)\\cap T| \\ge |S|\n$$\n由于 $|f(S)\\cap T|$ 最小值为 $|f(S)|+|S|-\\frac n2$，条件改写为 $|f(S)|\\ge\\frac n2$。\n\n考虑求 $\\min_{|S|\\le \\frac n2}|f(S)|$，事实上这就是图的最小点割（删去最少的点使图不连通）：\n\n- $f(S)$ 是 $S$ 与 $V-S-f(S)$ 之间的一组点割。\n- 任意一组点割 $T$ 割出来的多个连通块都有一个点数不超过 $\\frac n2$，设这个连通块的点集为 $S$，那么 $|f(S)|\\le |T|$。\n\n求最小点割就是每对点都求一遍最小割：\n\n- 把每个点 $u$ 拆成 $\\text{in}_u$ 和 $\\text{out}_u$。\n- $\\text{in}_u$ 向 $\\text{out}_u$ 连一条代价为 $1$ 的边。\n- 对于原图中的边 $(u,v)$，$\\text{out}_u$ 向 $\\text{in}_v$，$\\text{out}_v$ 向 $\\text{in}_u$ 分别连一条代价为 $\\infty$ 的边。\n- 枚举两个不同的点 $u,v$，用 $\\text{out}_u$ 到 $\\text{in}_v$ 的最小割更新答案。\n\n复杂度 $O(n^2\\cdot flow)$。\n\n~~负~~优化：注意到如果最小点割小于 $\\frac n2$，那么不在割中的点就超过一半，每次随机选取一个点 $u$，枚举点 $v$，求 $\\text{out}_u$ 到 $\\text{in}_v$ 的最小割，都有大半的概率求出最优解，如果随机 $k$ 次，复杂度为 $O(nk\\cdot flow)$。\n\n### ABC215H\n\n如何判定当前的卷心菜是否能满足所有公司？\n\n- $S$ 向卷心菜 $i$ 连容量为 $A_i$ 的边。\n- 公司 $i$ 向 $T$ 连容量为 $B_i$ 的边。\n- 如果 $c_{i,j}=1$，那么卷心菜 $i$ 向公司 $j$ 连容量为 $\\infty$ 的边。\n- $\\max flow=\\sum_{i=1}^mB_i$。\n\n也等价于 $T$ 的所有入边不是最小割。由于 $S$ 的出边很少，考虑枚举最小割中有哪些 $S$ 的出边，假设这些边为 $mask$，割掉 $mask$ 后有一些 $T$ 的入边就不需要割了，假设这些边的容量和为 $sum$，那么需要吃点的卷心菜数量就是 $\\sum_{i\\in mask}A_i-sum+1$，要求 $sum>0$。\n\n这时就可以解决第一问了，考虑对于所有 $mask$，怎么求它们的 $sum$，注意到 $B_i$ 贡献给 $mask$ 的条件是 $mask$ 包含所有能供应给公司 $i$ 的卷心菜，可以用子集前缀和（`FMT`）求出。然后枚举 $mask$ 用 $\\sum_{i\\in mask}A_i-sum+1$ 更新第一问的答案即可。\n\n第二问还要进一步分析，为了不算重，我们枚举一个 $mask$ 表示被吃的卷心菜品种的集合，一个 $mask$ 可行当前仅当存在一个取到第一问答案的 $S$，使得 $mask\\subseteq S$，这个同样可以用 `FMT` 做。设第一问答案为 $ans$，最后是对于一个 $mask$，求有多少种从 $mask$ 中吃掉 $ans$ 个卷心菜的方式，满足 $mask$ 中的每种卷心菜至少被吃一个。容易想到容斥，钦定一些卷心菜品种不吃，然后不考虑每种卷心菜必吃的限制，但对每个 $mask$ 都通过容斥来计算复杂度高达 $O(3^n)$。\n\n设 $f_S$ 表示有多少种从 $S$ 中吃掉 $ans$ 个卷心菜的方式，满足 $mask$ 中的每种卷心菜至少被吃一个，发现\n$$\n\\sum_{T\\subseteq S}f_T=\\binom{\\sum_{i\\in S}A_i}{ans}\n$$\n对右边做 `IFMT` 就可以求得 $f$ 数组。\n\n复杂度 $O(n2^n+nm)$。\n\n### AGC020E\n\n先考虑对于一个串 $S$ 如何单独计算答案，这个不难，容易想到用区间 `DP` 做。设 $f_{l,r}$ 表示子串 $[l,r]$ 的改写方案数，转移分两种：\n\n- $s_l$ 没有参与改写，贡献为 $f_{l+1,r}$。\n- $s_l$ 参与改写了，枚举最外层的覆盖 $s_l$ 的改写：周期 $T$ 和循环次数 $i>1$，如果合法，则贡献为 $f_{l,l+T-1}\\cdot f_{l+Ti,r}$。\n\n当尝试用区间 `DP` 做原问题的时候，发现做不了，因为当 $s_l$ 参与改写时，原来的 $f_{l,l+T-1}$ 不再是一个区间的 `DP` 值。详细地说，设 $f(s)$ 表示字符串 $s$ 的答案（子集的改写方案数总和），设 $suf(i)$ 表示 $s$ 从 $s_i$ 开始的后缀，转移为两种：\n\n- 第一个字符没有参与改写，贡献为 $(s_0+1)f(suf(1))$。\n\n- 第一个字符参与了，枚举最外层的覆盖 $s_l$ 的改写：周期 $T$ 和循环次数 $i>1$，由于每个周期内要相等，所有子集的限制要叠加，设 $s[l,r]$ 表示 $s$ 的第 $l$ 个字符到第 $r$ 个字符的子串，设\n  $$\n  t=s[0,T-1]\\&s[T,2T-1]\\&\\cdots\\&s[T(i-1),Ti-1](\\&\\ is\\ \\text{bitand})\n  $$\n  那么贡献为 $f(t)\\cdot f(suf(Ti))$。\n\n这里的复杂度上限看起来是 $O(2^{n+1})$，这个题最重要的地方就是，你要看出来这个做法其实是 $O(能过)$ 的，进而分析出其真正的复杂度，而不是被假上限给吓跑了。\n\n下面证明，有一个上界是 $O(n^3+2^{\\frac n8})$。首先长度小于等于 $\\frac n8$ 的串最多有 $2^{\\frac n8}$ 个，长度大于等于 $\\frac n8$ 的串最多被压缩两次（因为每压缩一次长度减半），只有三种压缩方式：\n\n- 先选择一个子段划分成 $2$ 段，再选择一个子段划分成 $2$ 段。\n- 先选择一个子段划分成 $2$ 段，再选择一个子段划分成 $3$ 段。\n- 先选择一个子段划分成 $3$ 段，再选择一个子段划分成 $2$ 段。\n\n显然第一种压缩方式可以得到的串是最多的，考虑第一种压缩方式得到的串是怎样的，形如：\n\n$s[a,a+k-1]\\&s[a+k,a+2k-1]\\&s[b,b+k-1]\\&s[b+k,b+2k-1]$\n\n显然它是由 $a,b,k$ 三个参数决定的，故数量是 $O(n^3)$，因此三种压缩方式的总和也是 $O(n^3)$。\n\n另外，通过打表可以求出长度大于 $12$ 的串更为精准的上界为 $41703$。\n\n### CF1562E\n\n先分析最长上升子序列有什么性质，假设最长上升子序列为\n$$\ns[l_1,r_1],s[l_2,r_2],\\cdots,s[l_k,r_k]\n$$\n比较显然的是对于每个 $l$，选择的 $r$ 是一个区间。更强的结论是存在一组最优解满足对于每个 $l$，选择的 $r$ 是一个后缀。\n\n反证法：假设对于一个 $l$，选择的 $r\\in[r_1,r_2]$，其中 $r_2<n$，$s[l,r_2]$ 之后的子串为 $s[l',r']$。如果 $s[l,r_2+1]<s[l',r']$，直接在 $s[l,r_2]$ 后插入 $s[l,r_2+1]$，得到一组更优的解。否则 $s[l,r_2]<s[l',r']\\le s[l,r_2+1]$，说明\n$$\ns[l',l'+r_1-l]=s[l,r_1]\\\\\ns[l',l'+r_1+1-l]=s[l,r_1+1]\\\\\ns[l',l'+r_1+2-l]=s[l,r_1+2]\\\\\n\\cdots\\\\\ns[l',l'+r_2-l]=s[l,r_2]\n$$\n于是可以用前者们一一替换后者们，得到一组不存在 $l$ 作为左端点的子串的解。\n\n然后就可以 `DP` 了，设 $f_i$ 表示以 $s[i,n]$ 结尾的最长上升子序列，转移为\n$$\nf_i=\\max_{j<i\\land s[j,n]<s[i,n]}f_j+n-\\text{lcp}(s[i,n],s[j,n])+1\n$$\n可以预处理 $\\text{lcp}(s[i,n],s[j,n])\\leftarrow \\text{lcp}(s[i+1,n],s[j+1,n])$，复杂度 $O(n^2)$。\n\n#### 优化\n\n可以优化到 $O(n\\sqrt n)$。\n\n首先是 `LCP`  怎么处理，通常是使用后缀数组的 `height` 数组，这里也可以这么处理。\n\n求出后缀数组 $SA$ 和 `height` 数组，转移为\n$$\nf_{SA_i}=\\max_{j<i \\land SA_j<SA_i}f_{SA_j}+\\max_{k=j+1}^in-height_k+1\n$$\n注意关于 `height` 的那项是一个后缀 $\\max$，考虑单调栈维护，栈内维护两元组 $(v,S)$，每次将 $(n-height_{i+1}+1,\\{i\\})$ 压栈。假设栈顶元素为 $(v_1,S_1)$，下一个元素为 $(v_2,S_2)$，如果 $v_1\\ge v_2$，就把这两个元素合并成 $(v_1,S_1\\cup S_2)$。\n\n在插入 $i$ 个元素后，就可以这样计算 $f_{i+1}$：遍历栈内每个三元组 $(v,S)$，用 $\\max_{j \\in S\\land SA_j\\le SA_i}+v\\rightarrow f_{SA_{i+1}}$。但栈内元素可能很多，不能全部遍历，考虑把 $|S|\\le \\sqrt n$ 的栈元素的贡献用一个数据结构 $A$ 一起维护，每个 $|S|>\\sqrt n$ 的元素用数据结构 $B$ 单独维护，这样就只需要遍历最多 $\\sqrt n$ 个 $|S|>\\sqrt n$ 的栈元素，即在 $A$ 中查询一次前缀 $\\max$，$B$ 中查询 $\\sqrt n$ 次前缀 $\\max$。\n\n元素合并的时候需要分类维护：\n\n- 当 $|S_1|+|S_2|\\le \\sqrt n$ 时，相当于把 $S_2$ 的贡献整体加上一个正数，可以在 $A$ 中进行 $|S_2|$ 次增大修改操作，这类操作总共不超过 $n\\sqrt n$ 次。\n- 当 $|S_1|>\\sqrt n\\land |S_2|\\le \\sqrt n$ 时，在 $B$ 中进行 $|S_2|$ 次插入新元素，这类操作总共不超过 $n$ 次。\n- 当 $|S_1|,|S_2|>\\sqrt n$ 或 $|S_1|,|S_2|\\le \\sqrt n\\land |S_1|+|S_2|>\\sqrt n$ 时，用 $|S_1|+|S_2|$ 个元素重构一个 $B$，这类操作总共不超过 $\\sqrt n$ 次。\n\n综上，当 $A$ 做到 $O(1)$ 修改，$O(\\sqrt n)$ 查询，$B$ 做到 $O(\\sqrt n)$ 修改，$O(1)$ 查询时，复杂度为 $O(n\\sqrt n)$。\n\n因为修改是增大值，查询是前缀 $\\max$，$A$ 和 $B$ 都可以通过分块实现。\n\n### CF1562F\n\n> 有个长度为 $n$ 的序列 $A$，元素两两不同且值域连续，但你不知道这个序列，每次可以询问两个不同数的 $\\text{lcm}$，最多使用 $n+5000$ 次询问求出 $A$。\n>\n> $n\\le 10^5,A_i\\le 2\\cdot 10^5$\n\n如果 $\\gcd(a,b)=1$，那么 $\\text{lcm}(a,b)=ab$，如果求出了 $A$ 序列中最大的质数 $p$，就只需要 $n-1$ 次询问就可以求出 $A$。\n\n先考虑 $p$ 存在的情况，怎么求出 $p$ 和它的位置？询问 $\\text{lcm}(A_1,A_2),\\text{lcm}(A_2,A_3),\\text{lcm}(A_3,A_4),\\cdots,\\text{lcm}(A_{n-1},n)$，所有质因子中最大的就是 $p$，同时也可以推断出 $p$ 的位置。然后再进行 $n-1$ 次询问就求出了 $A$，询问次数为 $2n-2$，可以处理 $100<n\\le7500$。\n\n再分别考虑 $n\\le 100$ 和 $n>7500$ 的情况。\n\n$n\\le 100$ 可以先两两询问 $\\text{lcm}$，再逐个确定。当 $n>3$ 时至少有两个奇数，根据两个奇数的 $\\text{lcm}$ 为奇数就可以确定所有数的奇偶性，再取 $\\text{lcm}$ 中最大的一个，它一定是 $\\max A_i(\\max A_i-1)$，结合奇偶性就可以确定最大的 $A_i$，然后删除最大值，重复上述过程，直到 $n=3$ 时，分类讨论即可。\n\n当 $n>7500$ 时需要用不超过 $5000$ 次询问求出 $A$ 序列中最大的质数 $p$，然而比较困难，考虑不找最大的质数，找一个大于 $450$ 的质数 $p'$ 就行了。\n\n考虑随机询问 $\\text{lcm}(A_i,A_j)$，如果它是两个大于 $450$ 的质数 $p,q$ 的乘积，那么 $A_i,A_j$ 一定就是 $p,q$，考虑进一步确定 $A_i$，随机一个 $k$，如果 $p\\not|\\text{lcm}(A_i,A_k)$ 说明 $A_i=p$，如果 $q\\not|\\text{lcm}(A_j,A_k)$ 说明 $A_i=q$，期望的总随机次数是 $O(\\ln^2n)$。\n\n考虑\n$$\n\\text{lcm}(p',x)=\n\\begin{cases}\nx&(x|p')\\\\\nxp'&(x\\not|p')\n\\end{cases}\n$$\n如果 $\\text{lcm}(p',x)>2\\cdot 10^5$ 就说明 $x\\not|p'$，可以确定 $x$ 的值，这样至少可以确定 $n-900$ 个数，并且最大的质数 $p$ 一定被确定了，最后再用 $p$ 和剩下的数询问即可。\n\n### AUOJ1760\n\n> 有 $n$ 个物品，其中可能有一个次品，它的质量与其他物品有差异。你需要多次使用天平后回答谜题：是否存在次品？次品是偏轻还是偏重？称量时，在天平两边放相同数量的物品，以得知那边更重。\n>\n> 构造一个能够解决谜题且称量次数最少的**固定**称量方案。\n>\n> $n \\le 10^6$\n\n考虑什么样的称量方案能够解决谜题。\n\n假设称量次数为 $m$，定义矩阵 $A$：\n$$\nA_{i,j}=\n\\begin{cases}\n-1 &(第 j 次称量物品 i 在天平左边)\\\\\n0 &(第 j 次称量物品 i 不在天平上)\\\\\n1 &(第 j 次称量物品 i 在天平右边)\n\\end{cases}\n$$\n首先怎么判断有没有次品：如果有物品没上过天平，哪无论如何都不能判断，否则可以判断，不存在次品当且仅当每次天平都平衡。\n\n得到条件一：$A_i\\ne \\{0,0,\\cdots, 0\\}$。\n\n确定了有次品，怎么确定是哪一个：先考虑已知次品偏重时怎么确定，根据每次天平的倾斜情况，可以得到每次称量时次品在天平的哪一边或不在天平上，定义序列 $B$：\n$$\nB_i=\n\\begin{cases}\n-1 &(第 i 次称量次品在天平左边)\\\\\n0 &(第 i 次称量次品不在天平上)\\\\\n1 &(第 i 次称量次品在天平右边)\n\\end{cases}\n$$\n然后看 $B$ 和 $A_?$ 相等就可以确定次品是哪一个。\n\n但是并不知道次品偏重还是偏轻，上面说了假设次品偏重可以得到一个序列 $B$，类似地假设次品偏轻可以得到一个序列 $C$，并且满足 $C=-B$（元素对于互为相反数），可以解决谜题的条件是 $B$ 和 $C$ 不能同时和某个 $A_i$ 相等。\n\n得到条件二：$\\forall i \\ne j, A_i\\ne A_j \\land A_i \\ne -A_j$。\n\n由于每次称量时两边放相同数量的物品。\n\n得到条件三：$\\forall j\\in[1,m],\\sum_{i=1}^nA_{i,j}=0$。\n\n满足以上三个条件就已经合法了，考虑对于一个 $m$，哪些 $n$ 可以构造出 $A$ 矩阵。\n\n首先在前两个条件的限制下，$n$ 最大能取得 $\\frac{3^m-1}2$，再加上第三个限制，$n$ 还能不能取到 $\\frac{3^m-1}2$？\n\n答案是否定的，因为对于所有的方案，$\\forall j\\in[1,m],\\sum_{i=1}^n|A_{i,j}|=3^{m-1}$。\n\n> 引理，$m$ 次称量可以解决谜题当且仅当 $n\\le \\frac{3^m-3}2$。\n\n这样就可以求出最小的 $m$ 了，怎么求方案？\n\n当 $3|n$ 时有一个简单的构造：定义 $\\text{next}(A)$ 表示把序列 $A$ 每一项循环移位（$-1\\rightarrow 0,0\\rightarrow 1,1\\rightarrow -1$）后得到的序列，不难发现一个事实，$A,\\text{next}(A),\\text{next}(\\text{next}(A))$ 这三个序列对应位置之和等于 $0$。\n\n如：\n\n```plain\n1 0 -1 1\n-1 1 0 -1\n0 -1 1 0\n```\n\n除去 $\\{-1,-1,\\cdots,-1\\}$ 和 $\\{1,1,\\cdots,1\\}$，把每三个这样的序列分为一组，恰好可以分成 $\\frac {3^m-3}3$ 组，其中两两组互相为相反序列，于是删去一 半这样的组，恰好可以得到一个合法的矩阵 $A$。\n\n### 思路一\n\n当 $3\\not|n$ 时，感觉问题非常困难，考虑模拟退火：\n\n- 用 $\\sum_{j=1}^m|\\sum_{i=1}^nA_{i,j}|$ 作为一个解的权值，问题就是求权值最小的解。\n- 还是先分组，取若干个组和一个不完整的组作为初始解。\n- 每次以以下方式之一生成一个新解，如果新解更优则接受新解，否则以很低的概率接受新解。\n  - 选择一个 $i$，将 $A_i$ 替换成 $-A_i$。\n  - 选择一个 $i$，选择一个 $B$ 满足 $B$ 和 $-B$ 都没有在 $A$ 中出现过，令 $A_i=B$。\n\n效率还行，但不稳定，对于少数 $n$ 速度极慢，$n\\le 10^4$ 是完全没有问题的。\n\n<details><summary><span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span></summary>\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\nusing ll = long long;\nusing lf = double;\n\nll gen(ll x) {\n    const ll k = 0x9ddfea08eb382d69ull;\n    rep(i, 1, 3) x *= k, x ^= x >> 47;\n    return x * k;\n}\nint rnd() {\n    static ll s = time(0);\n    return (s += gen(s)) & INT_MAX;\n}\nvoid wrt(int x, int ed) {\n    static streambuf* out = cout.rdbuf();\n    #define pc out -> sputc\n    static char c[11]; int sz = 0;\n    do c[++sz] = x % 10, x /= 10; while(x);\n    while(sz) pc(c[sz--] + 48);\n    pc(ed);\n}\nint n, m = 2, t = 9, nw[15], idx, A[2500000][15], c[15];\nvoid dfs(int i) {\n    if(i > m) {\n        rep(j, 2, 4) {\n            idx++;\n            rep(k, 1, m) A[idx][k] = (nw[k] + j) % 3 - 1;\n            if(idx == t) break;\n        }\n        return;\n    }\n    rep(j, -1, 1) {\n        nw[i] = j, dfs(i + 1);\n        if(idx == t) break;\n    }\n}\nint main() {\n    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n    cin >> n;\n    while(t - 3 >> 1 < n) m++, t *= 3;\n    wrt(m, 10);\n    t = t - 1 >> 1, dfs(2);\n    rep(i, 1, n) rep(j, 1, m) c[j] += A[i][j];\n    int su = 0;\n    rep(i, 1, m) su += abs(c[i]);\n    while(su) {\n        int i = rnd() % n + 1;\n        if(rnd() % t < n) {\n            int d = 0;\n            rep(j, 1, m) d += abs(c[j] - 2 * A[i][j]);\n            if(d < su || rnd() % n < 10) {\n                su = d;\n                rep(j, 1, m) c[j] -= 2 * A[i][j], A[i][j] *= -1;\n            }\n        } else {\n            int k = rnd() % (t - n) + n + 1, d = 0;\n            rep(j, 1, m) d += abs(c[j] - A[i][j] + A[k][j]);\n            if(d < su || rnd() % n < 10) {\n                su = d;\n                rep(j, 1, m) c[j] -= A[i][j] - A[k][j], swap(A[i][j], A[k][j]);\n            }\n        }\n    }\n    rep(i, 1, n) {\n        int v = 0;\n        per(j, m, 1) v = v * 3 + A[i][j] + 1;\n        wrt(v, 32);\n    }\n}\n```\n</details>\n\n### 思路二\n\n另外，还有一种优秀的乱搞做法。\n\n- 先分组，取若干个组和一个不完整的组作为初始解，那么 $\\forall j\\in[1,m],|\\sum_{i=1}^nA_{i,j}|\\le 1$。\n- 对于每个 $j$，如果 $\\sum_{i=1}^nA_{i,j}=-1$，找到一个 $i$ 满足 $A_{i,j}<1$ 并且将 $A_{i,j}$ 增大一后仍然合法，然后将 $A_{i,j}$ 加一。\n\n会有极个别 $n$ 求出的解不合法，$10^6$ 以内应该不会超过 $10$ 个，而且都比较小，取决于初始解（所有可以通过）。\n\n结合思路一可以构造出 $10^6$ 内的所有 $n$。\n\n<details><summary><span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span></summary>\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\nusing ll = long long;\n\nvoid wrt(int x, int ed) {\n    static streambuf* out = cout.rdbuf();\n    #define pc out -> sputc\n    static char c[11]; int sz = 0;\n    do c[++sz] = x % 10, x /= 10; while(x);\n    while(sz) pc(c[sz--] + 48);\n    pc(ed);\n}\nint n, m = 2, t = 9, nw[15], idx, A[1000005], c[15], as;\nbool vs[1600000];\nvoid dfs(int i) {\n    if(i) rep(j, -1, 1) { nw[i] = j, dfs(i - 1); if(idx == n) break; }\n    else rep(j, 1, 3) {\n        int x = 0;\n        per(k, m, 1) x = x * 3 + (j + nw[k]) % 3;\n        if(!x || vs[x] || idx == n) break;\n        A[++idx] = x, vs[x] = vs[t - x] = 1;\n        rep(k, 1, m) c[k] += (j + nw[k]) % 3 - 1;\n    }\n}\nint main() {\n    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n    cin >> n;\n    while(t - 3 >> 1 < n) m++, t *= 3;\n    t--, vs[t / 2] = 1, wrt(m, 10), nw[m] = -1, dfs(m - 1);\n    if(n % 3) {\n        rep(i, 1, m) as += abs(c[i]);\n        int th = 1;\n        rep(j, 1, m) {\n            rep(i, 1, n) {\n                if(!c[j]) break;\n                int v = A[i] / th % 3;\n                auto Try = [&](int x) {\n                    int nw = A[i] + x * th;\n                    if(vs[nw]) return;\n                    vs[A[i]] = vs[t - A[i]] = 0, vs[nw] = vs[t - nw] = 1;\n                    as -= abs(c[j]), c[j] += x, v += x, as += abs(c[j]), A[i] = nw;\n                };\n                if(v < 2 && c[j] < 0) Try(1);\n                if(v > 0 && c[j] > 0) Try(-1);\n            }\n            th *= 3;\n        }\n    }\n    rep(i, 1, n) wrt(A[i], 32);\n}\n```\n</details>\n\n### 思路三\n\n这是官方解法，说是爬山算法，但感觉比较微妙，因为稍微扰动一下初始解就会有极个别 $n$ 跑不出来，流程是这样的：\n\n- 用 $\\sum_{j=1}^m|\\sum_{i=1}^nA_{i,j}|$ 作为一个解的权值，问题就是求权值最小的解。\n\n- $A$ 矩阵初始为空，然按字典序**从大到小**枚举长度为 $m$，值域为 $\\{-1,0,1\\}$ 的序列 $B$，如果 $B$ 和 $-B$ 没有在 $A$ 出现过，就把 $B,\\text{next}(B),\\text{next}(\\text{next}(B))$ 依次加入 $A$ 末尾，加入 $n$ 行时终止。那么 $\\forall j\\in[1,m],|\\sum_{i=1}^nA_{i,j}|\\le 1$。\n\n- 对当前解重复进行如下修改，直到权值为 $0$：\n\n  从小到大依次枚举 $j$ 和 $i$，然后进行以下操作：\n\n  - 如果 $\\sum_{i=1}^nA_{i,j}=-1\\land A_{i,j}<1$，尝试让 $A_{i,j}$ 加一。\n  - 如果 $\\sum_{i=1}^nA_{i,j}=1$，尝试让 $A_{i,j}=0$。\n\n实测能构造出 $10^6$ 内的所有 $n$。\n\n<details><summary><span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span></summary>\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\nusing ll = long long;\n\nvoid wrt(int x, int ed) {\n    static streambuf* out = cout.rdbuf();\n    #define pc out -> sputc\n    static char c[11]; int sz = 0;\n    do c[++sz] = x % 10, x /= 10; while(x);\n    while(sz) pc(c[sz--] + 48);\n    pc(ed);\n}\nint n, m = 2, t = 9, nw[15], idx, A[797170], c[15], as;\nbool vs[1600000];\nvoid dfs(int i) {\n    if(i) per(j, 1, -1) { nw[i] = j, dfs(i - 1); if(idx == n) break; }\n    else rep(j, 1, 3) {\n        int x = 0;\n        per(k, m, 1) x = x * 3 + (j + nw[k]) % 3;\n        if(x == t || vs[x] || idx == n) break;\n        A[++idx] = x, vs[x] = vs[t - x] = 1;\n        rep(k, 1, m) c[k] += (j + nw[k]) % 3 - 1;\n    }\n}\nint main() {\n    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n    cin >> n;\n    while(t - 3 >> 1 < n) m++, t *= 3;\n    t--, vs[t / 2] = 1, wrt(m, 10), nw[m] = 1, dfs(m - 1);\n    rep(i, 1, m) as += abs(c[i]);\n    while(as) {\n        int th = 1;\n        rep(j, 1, m) {\n            rep(i, 1, n) {\n                if(!c[j]) break;\n                int v = A[i] / th % 3;\n                auto Try = [&](int x) {\n                    int nw = A[i] + x * th;\n                    if(vs[nw]) return;\n                    vs[A[i]] = vs[t - A[i]] = 0, vs[nw] = vs[t - nw] = 1;\n                    as -= abs(c[j]), c[j] += x, v += x, as += abs(c[j]), A[i] = nw;\n                };\n                if(v < 2 && c[j] < 0) Try(1);\n                if(v > 0 && c[j] > 0) Try(-v);\n            }\n            th *= 3;\n        }\n    }\n    rep(i, 1, n) wrt(A[i], 32);\n}\n```\n</details>\n\n### AUOJ1761\n\n> 有一个长度为 $n$ 的序列 $A$ （下标从 $1$ 开始）和一个长度为 $m$ 的序列 $B$（下标从 $0$ 开始）。\n>\n> $A$ 初始全为 $0$，每一天 $A_i$ 会增加 $i$，在第 $j$ 天，如果 $A_i>B_{j\\bmod m}$，则进行一次操作，令 $A_i=B_{j\\bmod m}$。\n>\n> $q$ 次询问，每次询问前 $d_i$ 天总共会进行多少次操作。\n>\n> $n,m,q\\le 3\\cdot 10^5,d_i\\le 3\\cdot 10^{12},t_i\\le 10^{18}$\n\n由于 $d_i$ 很大，应该会用到操作的周期性，事实上对于每个 $A_i$，从第一次操作它开始周期就为 $m$。\n\n> 引理：假设在第 $p$ 天操作了 $A_i$，那么它在第 $p+m$ 天又会被操作。\n\n证明：第 $p-m$ 天 $A_i$ 小于等于第 $p$ 天的 $A_i=B_{p \\bmod m}$，感性理解 $A_i$ 越小在 $m$ 天后越容易操作，第 $p$ 天操作了，第 $p+m$ 天肯定要操作。\n\n设 $A_i$ 第一次操作在第 $p_i$ 天，那么在第 $p_i,p_i+m,p_i+2m,pi+3m,\\cdots$  都会操作，于是周期就是 $m$。\n\n不难发现 $p_i$ 是递减的，因为任意时刻 $A$ 序列都是递增的，每次操作的都是一段后缀。那么对于一次询问，进行过操作的 $A_i$ 是一段后缀，只要求出了 $p_i$ 就可以二分出这个后缀，下面考虑怎么求 $p_i$。\n\n设 $pos$ 表示 $B$ 中最小元素的位置，对于每个 $i$ 可以直接算出 $A_i$ 第一次被 $B_{pos}$ 操作的时间 $T_i$，那么 $p_i\\in[T_i-m+1,T_i]$，设 $p_i=T_i-m+k_i$，$k_i$ 就是最小的 $x$ 满足 $ix+(T_i-m)i>B_{pos+x}$，考虑在线段树上每个结点 $[l,r]$ 维护 $\\min_{j=l}^rB_{pos+j}-ij$，每次只需要二分出最小的 $x$ 满足 $\\min_{j=1}^x\\{B_{pos+j}-ij\\}<(T_i-m)i$，注意到式子是可以斜率优化的，随着 $i$ 的增大，对每个结点用一个单调队列维护下凸包。复杂度为 $O(n\\log n)$。这样就求出了 $p_i$。\n\n对于询问 $d$，每个 $A_i$ 的贡献可以分为若干个完整周期和一个不完整周期。对于完整周期，由于周期长度为 $m$，可以用线段树直接模拟周期中每一天的修改，然后就知道每个 $A_i$ 一个周期被清理多少次。对于不完整周期，可以把所有询问离线下来，然后用一个线段树模拟这个不完整周期，大致思路是在 $p_i\\bmod m$ 天插入 $A_i$，在 $d\\bmod m$ 天进行查询，但有可能 $d\\bmod m<p_i\\bmod m$，所以实现上需要分类讨论一下。\n\n### CodeChef-btree\n\n> 定义 $S(u,k)$ 表示与 $u$ 距离不超过 $k$ 的点集。\n>\n> 给定一棵 $n$ 个点的树，$q$ 次询问，每次询问 $|S(u_1,k_1)\\cup S(u_2,k_2)\\cup S(u_3,k_3)\\cup \\cdots \\cup S(u_{m_i},k_{m_i})|$ 。\n>\n> $n,q\\le 5\\cdot 10^4,\\sum_{i=1}^qm_i\\le 5\\cdot 10^5$。\n\n考虑 $|S(u,k)|$ 怎么求，可以离线后点分治，也可以建出点分树在线求。\n\n#### Sol 1\n\n先对 $u_1,u_2,u_3,\\cdots,u_{m_i}$ 建虚树，假设虚树中非关键点的半径为 $0$。\n\n如果 $(u_1,k_1),(u_2,k_2)$ 满足 $k_1-\\text{dis}(u_1,u_2)>k_2$，就说明了 $S(u_2,k_2)\\subsetneq S(u_1,k_1)$，即 $S(u_2,k_2)$ 是没用的，但不能删去它，而是令 $k_2=k_1-\\text{dis}(u_1,u_2)$。\n\n考虑对所有点的半径更新，直到不能更新为止，一种方法是像 `Dijkstra` 一样每次取半径最大的点更新周围点的半径，另一种做法是树形 `DP`，自底向上更新一遍，再自顶向下更新一遍。\n\n然后发现一个很好的性质，记虚树点集为 $V$，边集为 $E$，$u$ 的半径为 $r_u$，答案等于 $\\sum_{u\\in V}|S(u,r_u)|-\\sum_{(u,v)\\in E}|S(u,r_u)\\cap S(v,r_v)|$。证明很简单，考虑自顶向下将每个 $S(u,r_u)$ 并入，每次新增的点数为 $|S(u,r_u)|-|S(u,r_u)\\cap S(fa_u,r_{fa_u})|$。\n\n$|S(u,r_u)|$ 可以在点分树上查询，$|S(u,r_u)\\cap S(v,r_v)|$ 是一个 $S(w,r)$，其中 $w$ 可能是顶点，也可能是一条边的中点，如果在每条边上新建一个点，$w$ 就一定是顶点了。\n\n复杂度 $O((n+m)\\log n)$。\n\n#### Sol 2\n\n答案求的是并集的大小，是 `bitset` 可以优化的。\n\n注意到 $nq \\le 2.5\\cdot 10^9,n\\sum_{i=1}^qm_i\\le 2.5\\cdot 10^{10}$，一个时间复杂度 $O(\\frac{n\\sum_{i=1}^qm_i}\\omega)$，空间复杂度 $O(\\frac{nq}\\omega)$ 的算法是可以通过的。\n\n怎么快速求 $S(u,k)$ 的 `bitset` 形式，希望能做到 $O(\\frac n\\omega)$。\n\n考虑把所有询问离线下来，在点分治的过程中每个 $S(u,k)$ 都被分解成了 $O(\\log n)$ 个形如”深度不超过 $d$ 的点集”的并，如果每次都把”深度不超过 $d$ 的点集”并上去，求 $S(u,k)$ 就是 $O(\\frac{n\\log n}\\omega)$ 的，不太行。注意到这 $O(\\log n)$ 个点集的范围分别为 $n,\\frac n2,\\frac n4,\\frac n8,\\cdots$，总和是 $2n$ 的，但每个点集编号的范围都是 $[1,n]$，每次并上去就太不优秀了，如何缩小编号的范围？只需要把所有点按照点分树的 `DFS` 序重新编号，那么每个点集编号的范围就缩小到了 $n,\\frac n2,\\frac n4,\\frac n8,\\cdots$，每次只需要并到一个区间上，复杂度 $O(\\frac n\\omega)$。\n\n做法就是对每个询问开一个 `bitset`，点分治的过程中更新 `bitset` 的一个区间，答案就是对于 `bitset` 的 `popcount`，需要用 `unsigned long long` 实现 `bitset`，`popcount` 也建议手写，预处理 $[0,65536)$ 内所有数的 `popcount`，把每个 `unsigned long long` 拆成四个 $[0,65536)$ 内的数。\n\n实测比 Sol 1 快。\n\n### URAL2118\n\n> 给定前 $k$ 个字母的 $01$ 前缀编码（不存在一个编码是另一个编码的前缀）。\n>\n> 给定字符串 $s$，设其解码后的 $01$ 串为 $S$，求最多能将 $S$ 划分为多少段使得每一段都无法解码，无解输出 $-1$。\n>\n> $k \\le 52, n\\le 10^6$\n\n首先考虑两种特殊情况：\n\n- 编码中既有 $0$，也有 $1$，那 $S$ 无论怎么划分都可以解码。\n- 编码中既没 $0$，也没 $1$，那么答案为 $|S|$。\n\n剩下的情况为：有 $0$ 无 $1$ 和有 $1$ 无 $0$，由于对称性，只考虑有 $0$ 无 $1$。\n\n首先答案的上界为 $1$ 的个数，因为全 $0$ 的一段是可以被解码的。\n\n如果最后一位为 $1$，那么在每个 $1$ 后面断开，就可以取到这个上界。\n\n如果最后一位为 $0$，假设最后一段 $T$，可以说明存在最优解满足 $T$ 前面是 $1$：假设 $T$ 前面有 **连续** 的 $x$ 个 $0$，前面总共有 $y$ 个 $1$。那么答案的上界为 $y+1$，把这 $x$ 个 $0$ 加入 $T$，然后在 $T$ 前面的每个 $1$ 后面断开就可以到达这个上界。\n\n如果 $T$ 前面有 $y$ 个 $1$，最大段数就是 $y+1$，问题就是求最大的 $y$，假设 $T'$ 是最短的无法被解码的后缀，可以说明最大的 $y$ 等于 $T'$ 前面 $1$ 的个数：由于 $|T|\\ge |T'|$，所以 $y$ 不会超过 $T'$ 前面 $1$ 的个数，另外，令 $T=T'前面极长的一段0+T'$，$y$ 就可以取到这个上界。\n\n问题转化成了求 $T'$，那么 $T'$ 的任何前缀都无法解码，否则 $T'$ 不是最短的，记 $suffix(i)$ 表示 $S$ 长度为 $i$ 的后缀，问题就是依次判断 $suffix(1),suffix(2),suffix(3),\\cdots$ 是否有前缀可以被解码，`AC` 自动机即可。\n\n复杂度 $O(nk)$。\n\n### Graph Subpaths\n\n> 没有提交地址。\n>\n> 给定一张 $n$ 个点 $m$ 条边的有向无环图，再给定 $k$ 条路径，每条路径长度为 $l_i$，一条合法路径不包含这 $k$ 条路径。\n>\n> 对于 $i \\in [2,n]$，求 $1\\rightarrow i$ 的合法路径条数。\n>\n> $n,m,\\sum_{i=1}^kl_i \\le 10^5$\n\n### Sol 1\n\n首先把所有边反向，就转化成了求 $i\\rightarrow 1$ 的合法路径条数。\n\n对于边 $(u,v)$，标记它的权值为 $v$，设 $T_i$ 表示 $i\\rightarrow 1$ 所有合法路径组成的 `trie`，考虑怎么按拓扑序求出每一个 $T_u$，对于边 $(u,v)$，$T_v$ 是已经求过了，把 $T_v$ 复制到根的儿子，但这样会有一些以 $u$ 为起点的不合法路径，需要删除这些路径：从 $T_u$ 的根出发沿着不合法路径走，把以终点为根的子树删除即可。$u$ 的答案就是 $T_u$ 的叶子个数。\n\n由于 $T_u$ 非常大，当然不能直接存下来，可行的方法是用可持久化的 `trie`，对于边 $(u,v)$，只需要从 $T_u$ 的根向 $T_v$ 连一条边就行了，而不用复制整棵 $T_v$，删除子树也只需要对路径上的结点建新版本。\n\n一个问题是儿子列表的维护，如果用链表维护的话，删除子树时新建的结点需要从原版本复制整个链表，复杂度可能达到 $O(n^2)$。\n\n用主席树维护儿子列表就可以 $O(n\\log n)$ 地新建结点。\n\n复杂度 $O(n\\log n)$。\n\n### Sol 2\n\n对所有路径建 `AC` 自动机，不难想到一个 $O(n^2)$ 状态的 `DP`，设 $f_{i,u}$ 表示在原图中走到 $i$，`AC` 自动机上走到 `u`，且没有经过 `AC` 自动机上终止结点的路径条数。\n\n由于 `AC` 自动机上的点对应唯一原图中的点的，所以 `DP` 状态定义成 $f_u$ 就可以转移了。\n\n由于建 `AC` 自动机需要主席树，复杂度 $O(n\\log n)$。\n\n### ZOJ3390\n\n> 对于两棵树 $T_1,T_2$，定义 $T_1+T_2$ 表示把根合并，$T_1\\cdot T_2$ 表示把 $T_1$ 中每个结点换成 $T_2$，$T_1=T_2$ 表示树同构。\n>\n> 给定树 $A,B,C$，求 $X,Y$ 满足 $AX+BY=C$。\n>\n> $|A|,|B|,|C| \\le 10^5$\n\n设 $height(T)$ 表示 $T$ 的树高（最深叶子到根的距离）。\n\n可以发现 $height(T_1+T_2)=\\max(height(T_1),height(T_2)),height(T_1\\cdot T_2)=height(T_1)+height(T_2)$。\n\n那么 $\\max(height(A)+height(X),height(B)+height(Y))=height(C)$，假设 $height(A)+height(X)=height(C)$（另一种情况是一样的）。\n\n这样就知道了 $height(X)$，考虑怎么求 $X$，很简单，假设 $u$ 为 $C$ 中最深叶子的 $height(X)$ 级祖先，以 $u$ 为根的子树就是 $X$，这样就知道了 $AX$，然后就可以求出 $BY$，再用类似的方法就可以求出 $Y$ 了。\n\n虽然思路很简单，但是有一定实现难度，求 $BY$ 时树的“减法“，以及判定答案是否合法都需要用到树哈希。\n\n树哈希公式：\n$$\nf_u=1+\\sum_{v\\in son(u)}f_v\\cdot \\text{prime}(size_v)\n$$\n其中 $\\text{prime}(i)$ 表示第 $i$ 个质数。\n\n**注：**对于两棵大小不同的树 $T_1,T_2$，$f_{T_1}=f_{T_2}$ 是可能的，因此哈希应当和子树大小捆绑在一起。\n\n`Generator` ：参数 $T,A,B,C,D$ 可调，分别表示数据组数和树 $A,X,B,Y$ 的大小。\n\n<details><summary><span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span></summary>\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n#define eb emplace_back\n#define mp make_pair\n#define fi first \n#define se second\n#define all(x) (x).begin(), (x).end()\n#define SZ(x) int((x).size())\n#define mid ((l + r) / 2)\n#define lc o * 2\n#define rc o * 2 + 1\n#define lch l, mid, lc\n#define rch mid + 1, r, rc\n#define cmi(a, b) (a = min(a, b))\n#define cma(a, b) (a = max(a, b))\n#define lb lower_bound\n#define ub upper_bound\n#define bs binary_search\n#define pop __builtin_popcount\n#define llpop __builtin_popcountll\n#define ctz __builtin_ctz\n#define llctz __builtin_ctzll\n#define clz __builtin_clz\n#define llclz __builtin_clzll\n#define par __builtin_parity\n#define llpar __builtin_parityll\n\nusing namespace std;\nusing ll = long long;\nusing lf = double;\n// using P = pair<int, int>;\nusing V = vector<int>;\n// using cmp = complex<lf>;\n\nll gen(ll x) {\n    const ll k = 0x9ddfea08eb382d69ull;\n    rep(i, 1, 3) x *= k, x ^= x >> 47;\n    return x * k;\n}\nint rnd() {\n    static ll s = time(0) + (ll)new char;\n    return (s += gen(s)) & INT_MAX;\n}\nV tmul(V a, V b) {\n    int n = a.size() - 1, m = b.size() - 1, su = n;\n    rep(i, 1, n) {\n        rep(j, 2, m) a.pb(b[j] == 1 ? i : b[j] + su - 1);\n        su += m - 1;\n    }\n    return a;\n}\nV tplus(V a, V b) {\n    int n = a.size() - 1, m = b.size() - 1;\n    rep(j, 2, m) a.pb(b[j] == 1 ? 1 : b[j] + n - 1);\n    return a;\n}\nconst int N = 5, A = 5, B = 5, C = 5, D = 5;\nint main() {\n    const int T = 100000;\n    printf(\"%d\\n\", T);\n    rep(kase, 1, T) {\n        int a = rnd() % A + 1, b = rnd() % B + 1, c = rnd() % C + 1, d = rnd() % D + 1;\n        V t1{0}, t2{0}, t3{0}, t4{0};\n        auto get = [](V& t, int n) { rep(i, 1, n) t.pb(i > 1 ? rnd() % (i - 1) + 1 : 0); };\n        get(t1, a), get(t2, b), get(t3, c), get(t4, d);\n        V t5 = tplus(tmul(t1, t2), tmul(t3, t4));\n        printf(\"%d %d %llu\\n\", a, c, t5.size() - 1);\n        auto prt = [](V& v) { For(i, 1, v.size()) printf(\"%d \", v[i]); puts(\"\"); };\n        prt(t1), prt(t3), prt(t5);\n    }\n}\n```\n</details>\n\n`Special judge`：假设保存为 `checker.cpp`，编译后在命令行中使用：`checker <input-file> <output-file>`，答案正确返回值为 $0$，否则返回值为 $1$，输出为第一组出错的数据。\n\n<details><summary><span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span></summary>\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n#define eb emplace_back\n#define mp make_pair\n#define fi first \n#define se second\n#define all(x) (x).begin(), (x).end()\n#define SZ(x) int((x).size())\n#define mid ((l + r) / 2)\n#define lc o * 2\n#define rc o * 2 + 1\n#define lch l, mid, lc\n#define rch mid + 1, r, rc\n#define cmi(a, b) (a = min(a, b))\n#define cma(a, b) (a = max(a, b))\n#define lb lower_bound\n#define ub upper_bound\n#define bs binary_search\n#define pop __builtin_popcount\n#define llpop __builtin_popcountll\n#define ctz __builtin_ctz\n#define llctz __builtin_ctzll\n#define clz __builtin_clz\n#define llclz __builtin_clzll\n#define par __builtin_parity\n#define llpar __builtin_parityll\n\nusing namespace std;\nusing ll = long long;\nusing lf = double;\nusing P = pair<int, int>;\nusing V = vector<int>;\n// using cmp = complex<lf>;\n\nconst int N = 1e5 + 5, M = 1299709;\nint f[M + 5], pid, prm[N];\n\nV tmul(V a, V b) {\n    int n = a.size() - 1, m = b.size() - 1, su = n;\n    rep(i, 1, n) {\n        rep(j, 2, m) a.pb(b[j] == 1 ? i : b[j] + su - 1);\n        su += m - 1;\n    }\n    return a;\n}\nV tplus(V a, V b) {\n    int n = a.size() - 1, m = b.size() - 1;\n    rep(j, 2, m) a.pb(b[j] == 1 ? 1 : b[j] + n - 1);\n    return a;\n}\n\nP dfs(int u, const V G[]) {\n    P re(1, 1);\n    for(int v : G[u]) {\n        auto [h, sz] = dfs(v, G);\n        re.fi = (re.fi + (ll)h * prm[sz]) % 999999937;\n        re.se += sz;\n    }\n    return re;\n}\nint Hash(const V& t) {\n    vector<int> G[N];\n    For(i, 1, t.size()) G[t[i]].pb(i);\n    return dfs(1, G).fi;\n}\nint read(FILE* f) { int x; return fscanf(f, \"%d\", &x) == 1 ? x : -1; }\n\nint main(int argc, char* argv[]) {\n    rep(i, 2, M) {\n        if(!f[i]) prm[++pid] = i;\n        for(int j = 1; i * prm[j] <= M; j++) {\n            f[i * prm[j]] = 1;\n            if(i % prm[j] == 0) break;\n        }\n    }\n    FILE *in = fopen(argv[1], \"r\"), *out = fopen(argv[2], \"r\");\n    for(int T = read(in); T--;) {\n        V t1{0}, t2{0}, t3{0}, t4{0}, t5{0};\n        auto get = [](FILE* f, V& t, int n) { rep(i, 1, n) t.pb(read(f)); };\n        int a = read(in), b = read(in), c = read(in);\n        get(in, t1, a), get(in, t3, b), get(in, t5, c);\n        int d = read(out), e = read(out);\n        auto err = [&]() {\n            printf(\"1\\n%d %d %d\\n\", a, b, c);\n            rep(i, 1, a) printf(\"%d \", t1[i]); puts(\"\");\n            rep(i, 1, b) printf(\"%d \", t3[i]); puts(\"\");\n            rep(i, 1, c) printf(\"%d \", t5[i]);\n            exit(1);\n        };\n        if(!~d) err();\n        get(out, t2, d), get(out, t4, e);\n        if((ll)a * d + (ll)b * e != c && Hash(tplus(tmul(t1, t2), tmul(t3, t4))) != Hash(t5)) err();\n    }\n}\n```\n</details>\n\n### IZhO 2020 D1T3\n\n> [题目链接](codeforces.com/group/Uo1lq8ZyWf/contest/265564)\n>\n> 给定长度为 $n$ 的序列 $A$，问有多少三元组 $(i,j,k)$ 满足 $i\\le j<k$ 且 $[i,j]$ 和 $[j+1,k]$ 两个区间中数的集合相同。\n>\n> $n \\le 2\\cdot 10^5$\n\n记 $prev_i$ 表示 $A_i$ 上一次出现的位置，$next_i$ 表示 $A_i$ 下一次出现的位置。\n\n三元组 $(i,j,k)$ 合法的充要条件为：\n\n- 区间 $[j+1,k]$ 中的数都在 $[i,j]$ 中出现，即 $i \\le \\min prev_{j+1\\cdots i}$，相当于 $i$ 有个上界 $R_{j,k}=\\min prev_{j+1\\cdots k}$。\n- 区间 $[i,j]$ 中的数都在 $[j+1,k]$ 中出现，即 $\\max next_{i\\cdots j}\\le k$，相当于 $i$ 有个下界 $L_{j,k}$，其中 $L_{j,k}$ 是最小的 $i$ 满足 $\\max next_{i\\cdots j}\\le k$。\n\n那么 $(j,k)$ 的贡献就是 $\\max(R_{j,k}-L_{j,k}+1,0)$，考虑只枚举 $k$，用数据结构动态维护 $\\sum_{j=1}^{k-1}\\max(R_{j,k}-L_{j,k}+1,0)$。\n\n先考虑 $L_{j,k}$ 和 $R_{j,k}$ 分别怎么维护。\n\n对于 $R_{j,k}=\\min prev_{j+1\\cdots k}$，这是 $prev$ 数组上的后缀 $\\min$，当 $k\\rightarrow k+1$ 时，$R_{j,k}$ 发生的改变是一个后缀变成了 $prev_{k+1}$，具体可以用单调栈求出这个后缀，然后区间赋值。\n\n对于 $L_{j,k}$，直接分析 $k\\rightarrow k+1$ 不太行，换一个角度考虑对于一个 $j$，$L_{j,k}$ 和 $k$ 的关系，$\\max next_{i\\cdots j}$ 是 $next$ 数组上的后缀 $\\max$，将 $next_{1\\cdots j}$ 依次插入单调栈，设单调栈中元素分别为 $next_{i_1},next_{i_2},next_{i_3},\\cdots,next_{i_k}$：\n\n- 当 $k\\in[j+1,next_{i_k}-1]$ 时，$L_{j,k}=\\infty$。\n- 当 $k\\in [next_{i_k},next_{i_{k-1}-1}]$，$L_{j,k}=i_{k-1}+1$。\n- $\\cdots$\n- 当 $k\\in [next_{i_1},n]$，$L_{j,k}=1$。\n\n综上，单调栈元素 $i_x$ 意味着当 $k\\in [next_{i_x},next_{i_{x-1}}-1]$，$L_{j,k}=i_{x-1}+1$，假设插入 $next_y$ 后 $next_{i_x}$ 被弹掉了，那么当 $j\\in [i_x,y-1],k\\in [next_{i_x},next_{i_{x-1}}-1]$ 时，$L_{j,k}=i_{x-1}+1$，相当于 $k$ 从 $next_{i_x}-1\\rightarrow next_{i_x}$ 时，对 $L_{i_x\\cdots y-1,k}$ 进行区间赋值为 \n$i_x+1$。每个单调栈元素意味着一次区间赋值，所以只需要 $n$ 次区间赋值就可以维护 $L_{j,k}$。\n\n但维护的是 $\\sum_{j=1}^{k-1}\\max(R_{j,k}-L_{j,k}+1,0)$，相当于夹在两条递增折线之间的面积。由于 $L_{j,k}$ 和 $R_{j,k}$ 都是随着 $k$ 增大而减小的，所以每次赋值都是减小。比如将 $R_{l\\cdots r,k}$ 改为 $v$，如果 $v \\le \\min L_{l\\cdots r,k}$，这一段的面积就是 $0$，如果 $v \\ge \\max L_{l\\cdots r,k}$，这一段的面积就是 $\\sum_{j=l}^rR_{j,k}-\\sum_{j=l}^rL_{j,k}+(r-l+1)$，否则可以二分一个分界点 $x$，使得 $\\forall j \\in[l,x], v\\ge L_{j,k},\\forall j\\in[x+1,r],v\\le L_{j,k}$，分界点左右两段分别对应上述两种情况。所以只要维护了 $L_{j,k},R_{j,k}$ 的区间 $\\min,\\max$ 和 $sum$ 就可以维护 $\\sum_{j=1}^{k-1}\\max(R_{j,k}-L_{j,k}+1,0)$ 了。\n\n在实现上并不需要求 $x$，假设当前要将 $L_{ql\\cdots qr,k}$ 赋值为 $v$，当前线段树结点区间为 $[l,r]$，一般区间赋值是在 $ql\\le l\\land r \\le qr$ 时停止递归，这里把条件改成 $ql\\le l\\land r \\le qr \\land (v \\le \\min L_{l\\cdots r,k}\\lor v \\ge \\max L_{l\\cdots r,k})$ 才可以方便地维护 $\\sum_{j=1}^{k-1}\\max(R_{j,k}-L_{j,k}+1,0)$，由于只有一个分界点，所以复杂度不变。\n\n复杂度 $O(n\\log n)$，实现难度较大，附上代码：\n\n<details><summary><span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span></summary>\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n#define eb emplace_back\n#define mid ((l + r) / 2)\n#define lc o * 2\n#define rc o * 2 + 1\n#define lch l, mid, lc\n#define rch mid + 1, r, rc\n\nusing namespace std;\nusing ll = long long;\n\nconst int N = 2e5 + 5;\n\nint n, a[N], pre[N], nxt[N], L[N];\nvector<tuple<int, int, int>> vl[N], vr[N];\nint tagL[N * 4], minL[N * 4], maxL[N * 4];\nint tagR[N * 4], minR[N * 4], maxR[N * 4];\nll sum[N * 4], sumL[N * 4], sumR[N * 4], as;\n\nvoid pushUp(int o) {\n    sum[o] = sum[lc] + sum[rc];\n    sumL[o] = sumL[lc] + sumL[rc];\n    sumR[o] = sumR[lc] + sumR[rc];\n    minL[o] = min(minL[lc], minL[rc]);\n    minR[o] = min(minR[lc], minR[rc]);\n    maxL[o] = max(maxL[lc], maxL[rc]);\n    maxR[o] = max(maxR[lc], maxR[rc]);\n}\nvoid pushL(int v, int l, int r, int o) {\n    tagL[o] = minL[o] = maxL[o] = v, sumL[o] = v * (r - l + 1ll);\n    sum[o] = max(sumR[o] - sumL[o], 0ll);\n}\nvoid pushR(int v, int l, int r, int o) {\n    tagR[o] = minR[o] = maxR[o] = v, sumR[o] = v * (r - l + 1ll);\n    sum[o] = max(sumR[o] - sumL[o], 0ll);\n}\nvoid pushDown(int l, int r, int o) {\n    if(~tagL[o]) pushL(tagL[o], lch), pushL(tagL[o], rch), tagL[o] = -1;\n    if(~tagR[o]) pushR(tagR[o], lch), pushR(tagR[o], rch), tagR[o] = -1;\n}\nvoid updL(int L, int R, int v, int l, int r, int o) {\n    if(L <= l && r <= R && (v <= minR[o] || v >= maxR[o])) return pushL(v, l, r, o);\n    pushDown(l, r, o);\n    if(L <= mid) updL(L, R, v, lch);\n    if(R > mid) updL(L, R, v, rch);\n    pushUp(o);\n}\nvoid updR(int L, int R, int v, int l, int r, int o) {\n    if(L <= l && r <= R && (v >= maxL[o] || v <= minL[o])) return pushR(v, l, r, o);\n    pushDown(l, r, o);\n    if(L <= mid) updR(L, R, v, lch);\n    if(R > mid) updR(L, R, v, rch);\n    pushUp(o);\n}\nint main() {\n    cin >> n;\n    rep(i, 1, n) scanf(\"%d\", &a[i]);\n    rep(i, 1, n) L[i] = 0;\n    rep(i, 1, n) pre[i] = L[a[i]], L[a[i]] = i;\n    rep(i, 1, n) L[i] = n + 1;\n    per(i, n, 1) nxt[i] = L[a[i]], L[a[i]] = i;\n    rep(i, 2, n) {\n        int& j = L[i] = i - 1;\n        for(; j && pre[j] >= pre[i]; j = L[j]);\n        vr[i].eb(max(j, 1), i - 1, pre[i]);\n    }\n    rep(i, 2, n) {\n        int& j = L[i] = i - 1;\n        for(; j && nxt[j] <= nxt[i]; j = L[j])\n            vl[nxt[j]].eb(max(j, 1), i - 1, L[j]);\n    }\n    mem(tagL, 63), mem(tagR, -1);\n    rep(i, 1, n) {\n        for(auto [l, r, v] : vl[i]) updL(l, r, v, 1, n, 1);\n        for(auto [l, r, v] : vr[i]) updR(l, r, v, 1, n, 1);\n        as += sum[1];\n    }\n    cout << as;\n}\n```\n</details>\n\n### CF566C\n\n> 给定一棵 $n$ 个点的带权树，每个点住了 $w_i$ 个人，一个人从 $u$ 到 $v$ 的花费为距离的 $1.5$ 次方。\n>\n> 定义 $f(u)$ 表示所有人到点 $u$ 的总花费，求 $f(u)$ 最小的点。\n>\n> $n \\le 2\\cdot 10^5$\n\n首先研究 $f(u)$ 有什么性质，假设花费等于距离的话 $f(u)$ 就是单峰的，因此猜想 $f(u)$ 是单蜂的。\n\n证明：由于 $w_v\\text{dis}^{1.5}_v(u)$ 是下凸函数，所以它们加起来也是下凸函数。\n\n回忆实数上的单蜂函数是怎么求最值的：当前确定最优点在 $[l,r]$ 中，在 $\\frac {l+r}2$ 处求导来确定最远点在 $\\frac {l+r}2$ 左边还是右边，然后将范围减半。\n\n考虑怎么在树上实现这个过程：求出整棵树的重心，通过确定最优解在重心的哪个子树来将范围减半。\n\n怎么确定最优解在哪棵子树？把 $f(u)$ 的定义域扩大，$u$ 可以是一条边上的位置。求出重心向各个方向的导数，由于 $f(u)$ 单峰，所以最多有一个导数小于 $0$，这是最优解的方向。假设最优解的方向沿着边 $(u,v)$，由于 $f(u)$ 的最优点可能在 $(u,v)$ 上，所以 $v$ 不一定比 $u$ 优，应该把经过的所有点取个最小值作为答案。\n\n根 $u$ 向儿子 $v$ 方向的导数为：\n$$\n\\frac 32\\left(\\sum_{i=1}^nw_i\\sqrt{\\text{dis}(i,u)}-2\\sum_{i\\in \\text{subree}(v)}w_i\\sqrt{\\text{dis}(i,u)}\\right)\n$$\n可以 $O(n)$ 求出 $u$ 向每个儿子的导数，复杂度 $O(n\\log n)$。\n\n","source":"_posts/problems.md","raw":"---\ntitle: 部分题解合集\ndate: 2021-09-08 15:09:11\nupdated: 2021-09-08 15:09:11\ntags: []\ntop: 1\n---\n懒得分开写咕咕咕。\n\n### TC13459\n\n“1”的限制分两种，在同一行或在同一列，但 “1” 的数量很多，不能枚举每个“1”是哪一种，设“在同一行”的边为白边，“在同一列的”的边为黑白，考虑边之间的约束关系。\n\n考虑两条边 $(i,j),(i,k)$，当边 $(j,k)$ 存在时说明 $(i,j)$ 和 $(i,k)$ 的颜色相同，反之亦然。\n\n这样就可以表示出所有的约束，必要性显然，充分性是因为合法解中同色边一定构成了若干不含公共点的团，这种对于相邻两条边的约束关系就很充分了。\n\n在所有的约束条件下，所有的边及其约束关系构成类似二分图的结构，联通块分两类，一类是整个连通块一定同色，另一类是一定包含两种颜色。\n\n设第一类连通块有 $x$ 个，第二类连通块有 $y$ 个，枚举第一类连通块有 $i$ 个白色，即可得到答案：\n$$\n\\sum_{i=0}^x\\binom xi2^yn^{\\underline{i+y}}n^{\\underline{x-i+y}}\n$$\n复杂度 $O(n^3)$（DFS 求连通块）或 $O(n^3\\alpha(n^2))$（并查集求连通块）。\n\n### TC12909\n\n任意时刻局面的样子都是若干个连续段，我们只关心每个连续段的样子和它们在环上的相对顺序，而不关心空白的位置，因为只有知道前者的方案数，当前局面的方案数是可以算的。\n\n设 $f_{i,j}$ 表示当前已经来了 $i$ 个朋友，共构成 $j$ 个连续段的方案数，转移分三种：\n\n- 第 $i+1$ 个朋友新开一个连续段，$f_{i+1,j+1} \\leftarrow j \\cdot f_{i,j}$。\n- 第 $i+1$ 个朋友加入一个连续段的开头或结尾，$f_{i+1,j} \\leftarrow 2j \\cdot f_{i,j}$。\n- 第 $i+1$ 个朋友将两个连续段接在了一起，$f_{i+1,j-1} \\leftarrow j \\cdot f_{i,j}$。\n\n只需要保证 $j \\le G$ 就行了，而不需要考虑连续段过多而导致前两种转移不合法，因为不合法了贡献系数一定为 $0$。\n\n最后是贡献系数，假设 $K$ 个人到齐后有 $x$ 个连续段，则贡献系数为 $N\\binom{N-K-1}{K-1}$。\n\n复杂度 $O(N^2)$。\n\n### TC13692\n\n搬家具的排列很像拓扑序，但又有点区别。\n\n枚举 $S_1-S_2$ 路径上第一个选的点 $u$，再对每条边定向定向，然后就转化成了一张图的拓扑序，记这个东西为   $f_u$。当 $u=S_1$ 或 $S_2$ 时这张图就是树，否则这张图和树唯一的区别是点 $u$ 有两个父亲，但这张图的拓扑序并不好算，单次复杂度只能做到 $O(n^2)$，无法通过。\n\n注意到这题只需要求出 $S_1-S_2$ 路径上每个点 $f$ 的总和。\n\n枚举 $S_1-S_2$ 路径上的一条边 $(u,v)$，然后断开 $(u,v)$，再对每条边定向定向，然后就转化成了两棵树的拓扑序，这个是可以 $O(n)$ 算的，发现算出来的正好是 $f_u+f_v$。\n\n最后把前一步骤的计算结果加起来，再加上 $f_{S_1}+f_{S_2}$  并除以二，即是答案。\n\n### AGC017F\n\n容易想到用位向量来表示折线，$0$ 表示这一步向左走，$1$ 表示向右，容易得到折线的形态只有 $2^{N-1}$ 种。\n\n由于相邻两条折线 $S,T$ 的约束关系是 $T$ 的每个前缀后都大于等于 $S$ 的对应前缀和。\n\n不难想到轮廓线 `DP`，设 $f_{i,j,k,S}$ 表示满足以下条件的方案数：\n\n- 第 $i$ 条折线已经填了前 $j$ 位。\n- $S$ 的前 $j$ 位是第 $i$ 条折线的，后 $N-1-j$ 位是第 $i-1$ 条折线的。\n- 第 $i-1$ 条折线前 $j$ 位之和为 $k$。\n\n转移就枚举第 $i$ 条折线第 $j+1$ 为填什么。\n\n复杂度 $O(n^32^n)$，无法通过。\n\n再次考虑相邻两条折线 $S,T$ 的约束关系，发现从 $S$ 到 $T$ 是以下过程：\n\n- 把每个 $1$ 都往前移或不动，并且不改变相对顺序。\n\n- 最后一个 $1$ 之后的 $0$ 任意变成 $1$。\n\n重新定义 `DP` 状态 $f_{i,j,S}$ 表示正在确定了第 $i$ 条折线，当前为 $S$，已经固定了前 $j$ 个 $1$ 的方案数。\n\n转移为：\n\n- 如果存在第 $j+1$ 个 $1$，就枚举它往前移多少位，不能跨过前一个 $1$，这个枚举量平均是 $O(1)$ 的。\n- 如果不存在，要么确定第 $i$ 条折线，要么枚举最后一个 $1$ 之后的一个 $0$ 把它变成 $1$，这个枚举量平均也是 $O(1)$ 的。\n\n当确定第 $i$ 条折线后把不合法的状态置成 $0$。\n\n复杂度 $O(n^22^n)$。\n\n### ARC078D\n\n考虑从 $1-n$ 只有一条点不重复的路径的充要条件：\n\n- 把这条唯一路径上的边都断开后路径上的点两两不连通。\n\n假设知道这条唯一路径是 $u_1,u_2,\\cdots,u_k$（$u_1=1,u_k=n$），要将点集划分成 $k$ 份，第 $i$ 份包含 $u_k$，最大化每个点集内部的边权之和。\n\n可以得到一个状压做法：\n\n- 设 $g_S$ 表示两个端点都在点集 $S$ 内部的所有边的权值之和。\n- 设 $f_S$ 表示点集 $S$ 已经被考虑时，最大的保留边权之和。\n- 转移为：$f_S \\leftarrow f_{S-T} + g_T({T \\subseteq S})$，其中 $T$ 恰好包含一个关键点。\n\n由于并不知道这条路径，所以需要该一下 `DP` 状态：\n\n设 $f_{i,S}$ 表示点集 $S$ 已经被考虑且 $1-i$ 只有一条路径时，最大的保留边权之和。\n\n转移为:\n\n- $f_{i,S \\cup \\{i\\}} \\leftarrow f_{j,S} + w(j,i)(j \\not\\in S)$。\n- $f_{i,S\\cup T} \\leftarrow f_{i,S}+g_{T\\cup\\{i\\}}(S \\cap T = \\varnothing)$。\n\n复杂度 $O(n3^n)$。\n\nARC068D\n\nAGC004F\n\nARC097D\n\nTC10265\n\nTC9844\n\nARC067C\n\nARC097C\n\n### TC10727\n\n根据“跳跳棋”的结论，所有的三元组构成二叉森林的形态，于是问题就转化成了：\n\n- 在一棵无限满二叉树上，从点 $u$ 走到点 $v$ 长度恰好为 $k$ 的路径条数。\n\n直接算感觉很困难，考虑 `DP`，容易想到记录当前步数和所在点 $x$，但 $x$ 显然是记不了的。考虑用关键信息来替代 $x$，记录 $\\text{dis}(x,\\text{lca}(x,v)),\\text{dis}(v,\\text{lca}(x,v))$ 就够了。\n\n状态 $f_{i,j,k}$ 为走了 $i$ 步，$\\text{dis}(x,\\text{lca}(x,v))=j,\\text{dis}(v,\\text{lca}(x,v))=k$ 的路径条数。\n\n转移为：\n\n- $f_{i+1,j+1,k} \\leftarrow 2f_{i,j,k},f_{i+1,j-1,k} \\leftarrow f_{i,j,k}(j>0)$\n- $f_{i+1,1,k} \\leftarrow f_{i,0,k},f_{i+1,\\max(1-k,0),\\max(k-1,0)} \\leftarrow f_{i,0,k}(k>0)$\n- $f_{i+1,0,k+1} \\leftarrow f_{i,0,k}(k < \\text{depth}_v)$\n\nTC10664\n\nTC10566\n\nTC10773\n\n### TC10993\n\n容易发现把所有的环缩成点之后这张图就变成的一棵树，把 $0$ 结点所在的环看出根。树边和环边分开考虑。\n\n对于树边，显然所有人都只会向上走，最坏情况就是 $C$ 个人全在这条树边的下面，故每条树边需要 $C$ 个急救仓。\n\n对于一个环，子树中的人都是先向上走到这个环上，再聚集到向上的树边的下端点，最后一起离开这个环。\n\n可以看出环之间是独立的，考虑一个环怎么做。对于一个环来说，最坏的情况肯定是 $C$ 个人聚集在一个点上，然后这 $C$ 个人再分成两批，一批从左边绕到终点，另一批从右边绕到终点，要求 $\\min 左边 + \\min 右边  \\ge C$。\n\n方法是 `DP`，设 $f_{i,j}$ 表示已经确定了从终点开始向左的 $i$ 条边，它们的 $\\min$ 为 $j$ 时的最小代价。\n\n转移时枚举第 $i+1$ 条边的急救仓数 $k$：$f_{i+1,\\min(j,k)} \\leftarrow f_{i,j}(j+k \\ge C)$。因为 $j$ 只会变小，所以对于第 $i+1$  条之后的边，它们的限制会更严，所以转移只需要使第 $i+1$ 条边满足限制。\n\n复杂度 $O(nC^2)$，无法通过。\n\n考虑将这个转移拆开：\n\n- $f_{i+1,j} \\leftarrow f_{i,j}(k \\ge \\max(j,C-j))$，此时肯定要最小化 $k$。\n- $f_{i+1,k} \\leftarrow f_{i,j}(k \\le j \\le C -k)$，考虑 $k$ 从小到大时，可行的 $j$ 组成的区间在扩展，容易做到均摊 $O(1)$ 转移。\n\n复杂度 $O(nC)$。\n\nTC10741\n\nTC10854\n\nTC10848\n\nTC10902\n\nTC10737\n\nTC10758\n\nTC11003\n\nTC11026\n\nTC11032\n\nTC10748\n\nTC11213\n\nTC11305\n\nTC12620\n\n\n\nTC10758\n\nTC11032\n\n### Gym102391E\n\n先二分一个直径 $D$，建出圆方树，设 $f_u$ 表示：\n\n- 已经确定了 $u$ 子树内的所有方点表示的环怎么断。\n- 子树内直径不超过 $D$。\n- $f_u$ 为子树内到 $u$（圆点）/ $fa_u$（方点）的最大距离。\n\n转移分两种：\n\n- $u$ 为圆点，判断一下儿子 $f$ 最大的两个之和是否小于等于 $D$，大于 $D$ 说明 $D$ 小了，停止 `DP`，否则继承儿子 $f$ 的最大值。\n\n- $u$ 为方点，设 $fa$ 为 $u$ 的父亲，枚举一下断该环上的哪条边，然后算一下子树内直径，直径有两种可能情况。\n\n  - 一个儿子 $v$ 到断边的较大环上距离 $+f_v$。\n  - 两个儿子 $v_1,v_2$ 在不跨过断边时的环上距离 $+f_{v_1}+f_{v_2}$。\n\n  如果直径大于 $D$，就说明这条边不能断，否则\n\n  $f_u \\leftarrow \\max\\limits_vf_v+$ $v$ 在不跨过断边时到 $fa$ 的环上距离。\n\n  $f_u \\leftarrow$ 断边到 $fa$ 的环上距离。\n\n  直接转移复杂度为 $O(儿子数量^2)$，记录一些儿子前后缀信息就可以优化到线性，以前缀为例：\n\n  - 第 $i$ 个儿子向左绕到 $fa$ 的距离。\n  - 前 $i$ 个儿子子树内在不跨过 $fa$ 时到第 $i$ 个儿子的最大距离。\n  - 前 $i$ 个儿子子树内和断边向左绕到 $fa$ 的最大距离。\n  - 前 $i$ 个儿子子树内的直径。\n\n复杂度 $O(n\\log V)$。\n\n### ZOJ3970\n\n考虑在操作序列中有相邻的加减操作并且加操作在前面，应用如下调整：\n\n- 如果两个操作区间无交，则交换操作顺序。\n- 如果有交，那么相交的部分相当于什么都没做，直接去掉相交部分，变成上一种情况。\n\n经过有限步调整，操作序列变成了若干减后若干加。\n\n假设已知第 $i$ 个位置需要进行 $a_i$ 次减操作，那么最小操作次数为 $\\sum_{i=2}^n\\max(0,a_i-a_{i-1})$。\n\n加操作同理。\n\n设 $pre_i$ 表示上一个满足 $t_j>0$ 的位置 $j$。\n\n$f_{i,j}$ 表示考虑了前 $i$ 个位置，其中第 $i$ 个位置被 $j$ 个减操作覆盖时的最小操作次数。\n\n转移为：\n\n$$\nf_{i,j}=\\min_kf_{pre_i,k}+\\max(0,j-k)+\\max(0,t_i-s_i+j-t_{pre_i}+s_{pre_i}-k)+\\max(0,\\max_{pre_i<x<i}s_x-\\max(j,k))\n$$\n\n其中最后一项表示将区间 $(pre_i,i)$ 减成 $0$ 需要的额外减操作次数。\n\n复杂度 $O(nV^2)$，无法通过。\n\n打表发现函数 $f_i$ 分三段，每一段都是一次函数，并且斜率递增。\n\n注意到转移方程后面的每一项都是分段一次函数，因此它们的和也是分段一次函数，所以 $\\min$ 只会在拐点处取到，这样就可以 $O(1)$ 算出一个 $f_{i,j}$。\n\n求函数 $f_i$ 的两个拐点？考虑分治，对于一个区间 $[l,r]$，如果 $f_{i,l},f_{i,mid},f_{i,r}$ 等差，说明 $[l,r]$ 一定在同一个段，否则递归左右两半。\n\n复杂度 $O(n\\log V)$。\n\n### ZOJ3989\n\n为了方便处理，先对所有点旋转一个角度，使所有点横坐标两两不同。\n\n对于一个三角剖分，考虑一个维护折线过程：\n\n- 初始为下凸包。\n- 每次将折线上一条边换成它上方三角形的另外两条边，要保证这两条边不在折线上。\n- 或者将折线上在同一三角形内的相邻两条边换成第三条边，要保证三角形在原来两条边的上方。\n- 最终为上凸包。\n\n这个过程会遍历三角剖分中的所有边，容易想到把折线作为 ```DP``` 状态，但折线数量太大了。\n\n给折线加一条限制：折线上的拐点横坐标递增。但这样可能会导致折线找不到合法的转移。\n\n事实上这种情况不存在：\n\n- 对于二换一的转移，显然合法，所以考虑只能进行一换二的时候。\n- 对于最左边的折线，假设它的横坐标区间为 $[l,r]$，进行一换二后新的拐点横坐标为 $x$，要么 $l < x < r$，这时可以直接转移，否则 $x > r$，即它上方的三角形向右偏。\n- 对于最右边的折线，如果它不能直接转移，同理可以得到它上方的三角形向左偏。\n- 最左边的折线上方的三角形向右偏，最右边的折线上方的三角形向左偏，故中间一定存在一条折线可以进行合法的一换二。\n\n这样的折线就可以用拐点集合来表示了，状态数为 $2^{n-2}$，转移时不能跨过点。\n\n这样就解决了最优化问题，但计数会算重。\n\n定义一次转移的「横坐标」为它涉及到的两个或三个点中横坐标的最大值，所有当前能进行的转移的「横坐标」一定两两不同。\n\n考虑将折线的转移序列标准化，使得转移序列与三角剖分一一对应：每次进行「横坐标」最大的合法转移。\n\n另一个等价的定义是每次转移的「横坐标」单调不减。\n\n设 $f_{S,i}$ 表示当前折线为 $S$，上次转移的「横坐标」为 $i$ 时的最小代价及其方案数。\n\n复杂度 $O(n^22^n)$。\n\n### 来源不明的题\n\n> 给定一个二分图，左右各 $n$ 个点。对于左部点的一个集合 $S$，设 $f(S)$ 表示与 $S$ 中至少一个点相邻的右部点集合。判断是否存在一个集合 $S \\ne \\{1,2,\\cdots,n\\}$，使得 $|f(S)| \\le |S|$，输出方案。\n>\n> $n, m \\le 10^5$\n\nHall 定理：一个二分图存在完美匹配的充要条件是对于任意 $S$，$|f(S)| \\ge |S|$。\n\n如果不存在完美匹配，就存在 $S$ 使得 $|f(S)| \\le |S|$，考虑求出一个这样的 $S$。\n\n先求出一个最大匹配，找一个未匹配点为根建匈牙利树，树上所有的左部点就是 $S$。\n\n如果存在完美匹配，解的形式一定是一个左部点集合 $S$，它们的匹配点集合为 $f(S)$。\n\n所以如果选了右部点 $v$，就一定会选它的匹配点 $\\text{match}(v)$。\n\n把原来的每条边 $(u,v)$ 换成 $(u,\\text{match}(v))$ 再求出拓扑序最小的强连通分量即可。\n\n### ARC107F\n\n由于一个连通块的贡献带有绝对值符号，不太好处理，变成枚举符号不会影响答案。\n\n现在变成如下问题：\n\n- 每个点有三种状态：正、负、删，代价分别为 $-B_i,A_i,B_i$。\n- 对于相邻的点 $u,v$，如果它们的状态都不是删，就必须相同。\n- 求最小代价。\n\n想到最小割模型，由于每个点有三种状态，所以把每个点 $i$ 变成两个点 $U_i,V_i$。\n\n用 $(S,U_i),(U_i,V_i),(V_i,T)$ 三条边表示三种状态。\n\n令它们的代价分别为 $\\infty-B_i,\\infty+A_i,\\infty+B_i$，那么这三条边一定恰好割掉一条。\n\n对于相邻的点 $(i,j)$，有两个约束关系：\n\n- 不能同时割 $(S,U_i),(V_j,T)$，如果要割 $(S,U_i)$，说明 $U_i$ 能到达 $T$，如果要割 $(V_j,T)$，说明 $S$ 能到达 $V_j$，所以连一条 $(V_j,U_i)$，代价为 $\\infty^2$ 的边。\n- 不能同时割 $(S,U_j),(V_i,T)$，同理连一条 $(V_i,U_j)$，代价为 $\\infty^2$ 的边。\n\n最后答案为最小割减去 $n\\infty$。\n\n![.png](https://i.loli.net/2021/09/08/4ragjEUYIev5wot.png)\n\n### Gym101471J\n\nCF1307G\n\n### CF1307F\n\nP3980\n\nCF1368H2\n\n### AGC038E\n\n先考虑一个弱化版问题：$B_i=1$ 时怎么做。\n\n这是一个经典问题，一般做法有两种：状压 `DP` 和 `min-max` 容斥。\n\n它们的复杂度都是 $O(n2^n)$ 或 $O(2^n)$ 的，然而这题数据范围是 $400$，说明需要用的此题的特殊性质。\n\n通过 `min-max` 容斥可以得出答案为\n$$\n\\sum_{S}(-1)^{|S|}\\frac{\\sum_{i=1}^n A_i}{\\sum_{i \\in S} A_i}\n$$\n发现分母是小于 $400$ 的非负整数！可以用背包数出每种分母的贡献 $\\sum_S(-1)^{|S|}$。\n\n设\n$$\nf_{i,j} = \\sum_{S \\subseteq \\{1,2,\\cdots,i\\}}(-1)^{|S|}[\\sum_{i \\in S}A_i=j]\n$$\n转移为 $f_{i,j}=f_{i-1,j}-f_{i-1,j-A_i}$，答案为\n$$\n(\\sum_{i=1}^n A_i)\\sum_{i=0}^{400}\\frac{f_{n,i}}i\n$$\n现在回到原问题，还是考虑 `min-max` 容斥，答案就是\n$$\n\\sum_{S}(-1)^{|S|}[S 中第一次有元素达到目标时的期望步数]\n$$\n\n设 $p_i=\\frac{A_i}{\\sum_{j \\in S}A_j}$。\n\n根据期望的线性性质，期望步数可以分摊到经过每个状态上。所以后面那坨东西为：\n$$\n\\begin{aligned}\n&\\sum_{\\forall i \\in S,c_i<B_i}[到达c状态的概率]\\cdot[离开c状态的期望步数]\\\\\n&=\\sum_{\\forall i \\in S,c_i<B_i}\\frac{(\\sum_{i \\in S}c_i)!}{\\prod_{i \\in S} c_i!}\\prod_{i \\in S}p_i^{c_i} \\cdot \\frac{\\sum_{i=1}^n A_i}{\\sum_{i \\in S} A_i}\\\\\n&=\\sum_{\\forall i \\in S,c_i<B_i}\\frac{(\\sum_{i \\in S}c_i)!}{\\prod_{i \\in S} c_i!}\\prod_{i \\in S}A_i^{c_i} \\cdot \\frac{\\sum_{i=1}^n A_i}{(\\sum_{i \\in S} A_i)^{(\\sum_{i \\in S}c_i)+1}}\n\\end{aligned}\n$$\n\n把前面说的东西拼起来，答案为：\n$$\n\\begin{aligned}\n&\\sum_S(-1)^{|S|}\\sum_{\\forall i \\in S,c_i<B_i}\\frac{(\\sum_{i \\in S}c_i)!}{\\prod_{i \\in S} c_i!}\\prod_{i \\in S}A_i^{c_i} \\cdot \\frac{\\sum_{i=1}^n A_i}{(\\sum_{i \\in S} A_i)^{(\\sum_{i \\in S}c_i)+1}}\\\\\n&=(\\sum_{i=1}^n A_i)\\sum_S(-1)^{|S|}\\sum_{\\forall i \\in S,c_i<B_i}\\frac{(\\sum_{i \\in S}c_i)!}{(\\sum_{i \\in S} A_i)^{(\\sum_{i \\in S}c_i)+1}} \\cdot \\prod_{i \\in S}\\frac{A_i^{c_i}}{c_i!}\n\\end{aligned}\n$$\n\n式子中比较难转移的东西就是 $\\sum_{i \\in S} A_i$ 和 $\\sum_{i \\in S}c_i$，把它们记状态里就行了。\n\n状态为\n$$\nf_{i,j,k}=\\sum_{S \\subseteq \\{1,2,\\cdots,i\\}}(-1)^{|S|}\\sum_{\\forall i \\in S,c_i<B_i}\\prod_{i \\in S}\\frac{A_i^{c_i}}{c_i!}[\\sum_{i \\in S} A_i=j \\land \\sum_{i \\in S}c_i=k]\n$$\n转移为\n$$\nf_{i,j,k}=f_{i-1,j,k}-\\sum_{c=0}^{B_i-1}f_{i-1,j-A_i,k-c}\\frac{A_i^c}{c!}\n$$\n答案为\n$$\n(\\sum_{i=1}^n A_i)\\sum_{i=0}^{400}\\sum_{j=0}^{400}\\frac{j!f_{n,i,j}}{i^{j+1}}\n$$\n分析一下时间复杂度，虽然每次转移的枚举量是 $B_i$，但由于 $\\sum_{i=1}^nB_i$ 是 $O(n)$ 的，所以总复杂度是 $O(n^3)$，空间复杂度可以用滚动数组优化到 $O(n^2)$。\n\n---\n\n### AGC037D\n\n考虑第三次操作前第 $i$ 行一定由 $(i-1)m+1$ 到 $im$ 构成，记 $(i-1)m+1$ 到 $im$ 的颜色为 $i$。\n\n第二次操作的目标就是使颜色为 $i$ 的数在第 $i$ 行，所以第一次操作的目标就是使每一列 $n$ 种都颜色各有一个。\n\n先考虑如何确定第一列的颜色，这显然是一个行与颜色的完美匹配问题。由于任意选 $i$ 行，这 $i$ 行的颜色数至少为 $i$，根据 Hall 定理，一定存在完美匹配。每一列依次求完美匹配就可以构造出一组解。\n\n然后第二三次操作就非常简单了，复杂度 $O(n^4)$。\n\n### AGC043D\n\n考虑什么样的排列 $P$ 是能被造出来的。\n\n考虑构造过程：每次选择一个头元素最小的序列 $A_i$，删除 $A_i$ 开头单调递减的一段，再继续找头元素最小的序列。\n\n这启发我们把同时删除的元素看成一段，分段具有如下性质：\n\n- 每一段是长度不超过 $3$ 的单调递减序列。\n- 每一段的头元素递增。\n- 长度为 $1$ 的段不少于长度为 $2$ 的段（因为每一个长度为 $2$ 的段必须要对应一个长度为 $1$ 的段来一起构成一个 $A_i$）。\n\n同时，只要满足上面三个条件，这个 $P$ 就能被造出来的，将每个段配配对就可以得到一个生成 $P$ 的 $A$ 序列。\n\n由于 $P$ 和分段内容是一一对应的，问题转化为对合法的分段内容计数。\n\n枚举长度分别为 $1,2,3$ 的段数 $cnt_1,cnt_2,cnt_3$，满足 $cnt_1+2cnt_2+3cnt_3=3n$ 和 $cnt_1 \\ge cnt_2$。\n\n贡献即为\n$$\n\\binom{cnt_1+cnt_2+cnt_3}{cnt_1,cnt_2,cnt_3}\\frac{(3n)!}{(cnt_1+cnt_2+cnt_3)!2^{cnt_2}3^{cnt_3}}\n$$\n前面的组合数是划分出每一段的方案数，除以 $(cnt_1+cnt_2+cnt_3)!$ 是保证每一段的头元素递增，除以 $2^{cnt_2}3^{cnt_3}$ 是保证每一段的头元素为最大值。\n\n复杂度 $O(n^2)$。\n\n### AGC049D\n\n考虑如何描述一个非负凸序列。\n\n- 枚举最小值 $c$，以及取到最小值的第一个位置 $i$，令 $A=(c,c,\\cdots,c)$。\n- 多次选一个位置 $j<i$，将 $A_j,A_{j-1},A_{j-2},\\cdots,A_1$ 分别加上 $1,2,3,\\cdots,j$。\n- 多次选一个位置 $j>i$，将 $A_j,A_{j+1},A_{j+2},\\cdots,A_n$ 分别加上 $1,2,3,\\cdots,n-j+1$，若 $i>1$ 则 $i-1$ 必须被选到一次。\n\n第三步可以事先选 $i-1$ 一次，对总和产生 $\\frac {i(i-1)}2$ 的贡献，然后第三步就和第二步一样了。\n\n先枚举 $i$，第二三步本质上就是完全背包，由于体积的特性，有用的物品数量是 $O(\\sqrt m)$ 的，可以 $O(m\\sqrt m)$ 预处理出背包数组，然后 $O(\\frac mn)$ 枚举 $c$，计算贡献。\n\n这样做的复杂度为 $O(nm\\sqrt m)$，无法通过。\n\n考虑 $i \\rightarrow i+1$ 时，物品最多删一个，也最多添一个，并且总改变次数是 $O(\\sqrt m)$ 的，动态维护背包即可做到 $O(m\\sqrt m)$ 的复杂度。\n\n### AGC050D\n\n设 $f_{i,a,b,j}$ 表示从以下局面出发，还没有赢的人中从左到右第 $j$ 个人最终赢的概率。\n\n- 有 $a$ 个人还没有赢且已经排除了 $i$ 个错误选项。\n- 有 $b$ 个人还没有赢且已经排除了 $i+1$ 个错误选项。\n\n转移就枚举这 $a$ 个人中下一个人是赢还是输即可（这里 $f_{i,0,b,j}=f_{i+1,b,0,j}$）。\n\n- $f_{i,a,b,j}=win \\cdot f_{i,a-1,b,j-[j>b]} + lost \\cdot f_{i,a-1,b+1,j}(j\\ne b+1)$\n- $f_{i,a,b,b+1}=win + lost \\cdot f_{i,a-1,b+1,b+1}(j\\le b)$\n\n复杂度 $O(n^4)$。\n\n### NOI2021Day1T1\n\n如果把修改操作看成把路径上的点染成一种新的颜色，那么重边就是两端同色的边，轻边就是两端异色的边。\n\n所以询问操作就是查询路径上两端同色的边数，这个可以用树链剖分和线段树维护。\n\n复杂度 $O(n\\log^2n)$。\n\n### NOI2021Day1T2\n\n当 $k=2$ 时，交点就是逆序对，自然联想到行列式，发现答案就是行列式。\n\n当 $n_1=n_2=\\cdots=n_k$ 时，答案就是把每相邻两层邻接矩阵的行列式乘起来。\n\n对于原问题，答案就是相邻两层邻接矩阵乘积的行列式。\n\n证明：\n\n- 对于一个合法的路径组，考虑两条路径 $(P_1,P_2,\\cdots,P_k)$ 和 $(Q_1,Q_2,\\cdots,Q_k)$，两条路径有奇数个交点 $\\iff$ $(P_1,Q_1)$ 和 $(P_k,Q_k)$ 逆序。\n\n- 对于一个不合法的路径组，考虑对其进行以下变换：\n\n  - 找到最靠上的一个点被覆盖多次，多个在同一层时取最靠左的一个。\n  - 找到经过此点的编号最小两条路径，将它们的下一半交换。\n\n  这样的变换是相互的，并且会使每条路径头尾形成的逆序对总数的奇偶性改变，故不合法的路径组的贡献会两两抵消。\n\n复杂度 $O(n^4)$。\n\n### NOI2021Day1T3\n\n容易发现对于一次询问，答案为 $s$ 能到达且能到达 $t$ 的点数。\n\n由于研究的是可达性，先进行强连通分量缩点。\n\n再考虑限制：若 $x\\Rightarrow z$ 且 $y\\Rightarrow z$，则 $x\\Rightarrow y$ 或 $y\\Rightarrow x$。这说明能到达 $z$ 的点在一条链上，进一步，整张图是一棵树加上若干条从祖先到儿子的边。\n\n如何求出这棵树？一个点的父亲就是所有连向它的点中拓扑序最大的一个，注意所完点后编号就是拓扑序的逆序。\n\n对于加边操作，对 $s,t$ 以及所有边的端点建虚树，统计一下虚树上的点和边的贡献即可。\n\n由于此题卡常，树剖求 `LCA` 效果最佳，用邻接链表存虚树，不能用 `vector`。\n\n复杂度 $O(n+q\\log n)$。\n\n### NOI2021Day2T1\n\n$k \\le 15$ 是此题的突破点，这意味着把 $256$ 平均分成 $16$ 段后必然有一段是完全相同的。\n\n枚举完全相同的是哪一段，确定了 $16$ 位后，期望只有 $7$ 个符合条件的串，对它们用 `popcount` 检验即可。\n\n### NOI2021Day2T2\n\n~~结论题。~~\n\n假设已知 $a$ 序列，怎么算答案。\n\n维护最后一项 $a_n$​ 的分子分母 $x,y$​，一次变换后 $\\frac {x'}{y'}=a_{n-1}+\\frac 1{a_n}=\\frac {a_{k-1}x+y}x$​。发现不会发生约分，并且相当于对 $(x,y)$​​ 做了一个线性变换：\n$$\n\\begin{bmatrix}\nx'\\\\\ny'\n\\end{bmatrix}\n=\n\\begin{bmatrix}\na_{n-1}&1\\\\\n1&0\n\\end{bmatrix}\n\\begin{bmatrix}\nx\\\\\ny\n\\end{bmatrix}\n$$\n算出\n$$\n\\begin{bmatrix}\na&c\\\\\nb&d\n\\end{bmatrix}\n=\n\\prod_{i=1}^n\n\\begin{bmatrix}\na_i&1\\\\\n1&0\n\\end{bmatrix}\n$$\n答案即为 $\\frac ab$。\n\n然后考虑两种操作：\n\n- `W` 类型：因为 $\\begin{bmatrix}x&1\\\\1&0\\end{bmatrix}\\begin{bmatrix}1&0\\\\1&1\\end{bmatrix}=\\begin{bmatrix}x+1&1\\\\1&0\\end{bmatrix}$​，所以 'W' 操作就是在后面乘一个 $\\begin{bmatrix}1&0\\\\1&1\\end{bmatrix}$。\n\n- `E` 类型：虽然定义中如果最后一项为 $1$ 时要特别处理，但发现当最后一项为 $1$ 时两种处理方式的结果是一样的。\n\n  给倒数第二项加 $1$ 的影响：\n  $$\n  \\begin{bmatrix}\n  1&1\\\\\n  1&0\n  \\end{bmatrix}\n  \\rightarrow\n  \\begin{bmatrix}\n  1&0\\\\\n  1&1\n  \\end{bmatrix}\n  \\begin{bmatrix}\n  1&1\\\\\n  1&0\n  \\end{bmatrix}\n  =\n  \\begin{bmatrix}\n  1&1\\\\\n  2&1\n  \\end{bmatrix}\n  $$\n  给数列的**最后一项**减 $1$，接着在数列尾再加两项，两项的值都是 $1$ 的影响：\n  $$\n  \\begin{bmatrix}\n  1&1\\\\\n  1&0\n  \\end{bmatrix}\n  \\rightarrow\n  \\begin{bmatrix}\n  0&1\\\\\n  1&0\n  \\end{bmatrix}\n  \\begin{bmatrix}\n  1&1\\\\\n  1&0\n  \\end{bmatrix}^2\n  =\n  \\begin{bmatrix}\n  1&1\\\\\n  2&1\n  \\end{bmatrix}\n  $$\n  所以把 `E` 操作按第二种处理方式就行了，给数列的最后一项减 $1$​ 相当于乘 $\\begin{bmatrix}1&0\\\\-1&1\\end{bmatrix}$。\n\n  于是 `E` 操作相当于乘 $\\begin{bmatrix}1&0\\\\-1&1\\end{bmatrix}\\begin{bmatrix}1&1\\\\1&0\\end{bmatrix}^2=\\begin{bmatrix}2&1\\\\-1&0\\end{bmatrix}$。\n\n此时这题就很容易了，`APPEND`，`FLIP ` 和 `REVERSE ` 都是可以平衡树维护的，每个结点不仅要维护区间矩阵乘积，还要维护倒着乘的结果，`FLIP` 后的结果，和 `FLIP` 后倒着乘的结果。\n\n复杂度 $O(n\\log n)$。\n\n### NOI2021Day2T3\n\n发现每个机器人对纸带的修改本质上只有 $4$ 种：赋值为 $0$，赋值为 $1$，不变，取反，分别用 $0,1,2,3$ 表示。\n\n不难想到容斥原理：枚举一个起始位置集合 $mask$，计算有多少种输入使得机器人从这些位置出发的输出都一样。每条纸带上每个位置受到的修改是确定且独立的，讨论一下一个位置的可行输入，乘起来就是贡献：\n\n- 如果一个位置同时包含 $0,1$ 或 $2,3$，那么输入只能为空，方案数为 $1$。\n- 否则，如果一个位置包含两种操作，那么输入可以为空或 $01$ 中的一种，方案数为 $2$。\n- 否则，三种输入都可行，方案数为 $3$。\n\n至此，得到一个 $O(2^nmn^2)$ 的做法。\n\n考虑优化计算一个机器人对一个起始位置集合的贡献，记状压数组 $g_{0/1/2/3,S}$ 表示选择起始位置集合 $S$ 时包含 $0/1/2/3$ 的位置，$g$ 可以 $O(2^n)$ 求出，有了 $g$ 也可以 $O(1)$​ 算贡献。\n\n复杂度 $O(2^nm)$。\n\n题目限制 $n \\le 32$，猜想是分大小两类计算来平衡复杂度。进一步观察发现当 $mask$ 的最高位大于等于 $\\lceil\\frac n2\\rceil$ 时，修改范围大于 $\\lceil\\frac n2\\rceil$ 的机器人都会爆掉。\n\n枚举 $mask$ 的最高位 $\\max$，这样就确定了哪些机器人会爆掉（不用考虑），分两种情况：\n\n- $\\max \\le \\lceil\\frac n2\\rceil$，这个可以暴力容斥，复杂度 $O(2^{\\frac n2}m)$。\n\n- $\\max > \\lceil\\frac n2\\rceil$，这意味着需要考虑的机器人修改范围都不超过 $n-\\max+1$。\n\n  一个修改范围大小为 $R$​ 的机器人所在的纸带上，一个位置的状态只和两个因素有关：\n\n  - 它前面 $R$ 个位置哪些在 $mask$ 中。\n\n  - 它是否没有被某个区间覆盖。\n\n  如果所有区间都覆盖了某个位置，说明 $mask$​ 的最低位大于等于 $2\\max-n+1$​，可以暴力容斥，复杂度 $O(2^{n-\\max+1}m)$​。\n  否则只需要考虑第一条，可以 `DP`，设 $f_{i,S}$​ 表示已经确定了 $mask$​ 的前 $i$​ 位，其中最后 $n-\\max+1$​ 位为 $S$​，转移直接枚举第 $i+1$​ 位选不选即可，可以 $O(2^{n-\\max+1}m)$​ 预处理转移系数，复杂度 $O(2^{n-\\max+1}n)$​。\n\n总复杂度 $O(2^{n/2}m)$​。\n\n### CF1548D2\n\n根据 Pick 定理：\n$$\nS=i+\\frac b2-1\n$$\n合法三角形的条件即为 $S\\in \\mathbb Z \\land2S\\equiv b \\pmod 4$​。\n\n对于三角形 $ABC$​， $2S=|\\overrightarrow A\\times \\overrightarrow B+\\overrightarrow B\\times \\overrightarrow C+\\overrightarrow C\\times \\overrightarrow A|$​​​，由于 $S$ 是整数，所以绝对值不会影响 $S$ 的奇偶性，只需要各个顶点的坐标模 $4$ 的结果就可以知道 $2S \\bmod 4$​。\n\n一条线段 $AB$​​​ 的 **边界数** 为线段上整点数减一，$b$​​ 就是三条线段的边界数之和。线段 $AB$​​ 的边界数 $\\text{bounds}(A,B)=\\gcd(|X_A-X_B|,|Y_A-Y_B|)$​​​​，不太好简单表示。\n\n由于要求 $S$ 为整数，所以 $b$ 为偶数，这是一个很重要的条件，这意味着合法三角形三条边的边界数中至少有一条是偶数，另外两个奇偶性相同，判断 $\\text{bounds}(A,B) \\bmod 4$ 是 $0$ 还是 $2$ 要容易得多，\n$$\n\\text{bounds}(A,B) \\equiv 0\\pmod 4 \\iff X_A\\equiv X_B\\pmod 4 \\land Y_A\\equiv Y_B\\pmod 4\n$$\n在 $\\text{bounds}(A,B) \\not\\equiv 0\\pmod 4$ 的前提下\n$$\n\\text{bounds}(A,B) \\equiv 2\\pmod 4 \\iff X_A\\equiv X_B\\pmod 2 \\land Y_A\\equiv Y_B\\pmod 2\n$$\n判断这两个条件只需要各个顶点的坐标模 $4$ 的结果。\n\n此时做法就清晰起来了，合法三角形按三条边的边界数奇偶性可以分成 EEE 和 EOO 两类，设 $cnt_{A,x,y,z}$ 表示有多少个点 $B$​​ 满足\n$$\nX_B\\equiv x\\pmod 4 \\land Y_B\\equiv y\\pmod 4 \\land \\text{bounds}(A,B) \\equiv z\\pmod 4\n$$\n这个是可以 $O(n^2\\log V)$ 预处理的。\n\n考虑分别对两类合法三角形 $ABC$​​​ 计数，先枚举点 $A$​，再枚举\n$$\nX_B\\bmod 4,Y_B\\bmod 4,\\text{bounds}(A,B)\\bmod 4\\\\X_C\\bmod 4,Y_C\\bmod 4,\\text{bounds}(A,C)\\bmod 4\n$$\n满足\n$$\nS \\in \\mathbb Z\\\\\n\\text{bounds}(A,B)\\equiv\\text{bounds}(A,C)\\pmod 2\\\\\nX_B\\equiv X_C \\pmod 2\\\\\nY_B\\equiv Y_C\\pmod 2\\\\\nS\\equiv \\text{bounds}(A,B)+\\text{bounds}(A,C)+\\text{bounds}(B,C)\\pmod 4\n$$\n使用 $cnt$ 数组可以 $O(1)$​​ 计算贡献。\n\n这样每个 EEE 三角形会被算 $3$ 遍，每个 EOO 三角形会被算 $1$ 遍。\n\n复杂度 $O(n^2\\log V)$。\n\n### CF1548E\n\n~~最简单的 3400。~~\n\n把坏格子填成 $1$，其他填成 $0$，问题就是求矩阵中有多少个“1”的四-连通块。\n\n> 引理：对于任意两行 $i,j$​​​，“1” 所在列的集合一定是相互包含的。\n\n不妨假设 $a_i \\ge a_j$​​，$a_i+b_k \\le x \\Rightarrow a_j+b_k \\le x$​。\n\n同时，此引理也就是这个矩阵的全部性质了，因为任何一个符合引理的矩阵都是可以构造出 $a,b$ 数组的。此题唯一的条件也就是这个引理了，目标很明确。\n\n我们数连通块的思路是这样的：\n\n- 对于一个连通块 $S$​​​​​​，它上到 $L_r$​​​​​​，下到 $R_r$​​​​​​，左到 $L_c$​​​​​，右到 $R_c$​​​​​​。\n- 设 $a_{L_r},a_{L_r+1},\\cdots,a_{R_r}$​​​ 中第一个取到最小值的位置为 $i$，显然 $(i,L_c),(i,L_c+1),\\cdots,(i,R_c)$​ 都为 “1”。\n- 我们希望 $S$ 被 $i$ 数到。\n\n再考虑对于 $i$​，有多少个连通块会被它数到，对于第 $i$ 行的一个 “1” 的连续段 $[l,r]$，它所在的连通块会被 $i$​​ 数当且仅当：\n\n- 它向上不能走到一行 $j$​​​ 满足 $a_j \\le a_i$​​​​，形式化地，$\\min_{k\\in [l,r]}a_k+\\max_{k\\in (j,i]}b_k>x$​​。\n- 它向下不能走到一行 $j$​​ 满足 $a_j<a_i$​​​，形式化地，$\\min_{k\\in [l,r]}a_k+\\max_{k\\in [i,j)}b_k>x$​​​。\n\n综上，记 $i$ 前面第一个满足 $a_j\\le a_i$ 的 $j$ 为 $pre$， $i$ 后面第一个满足 $a_j< a_i$ 的 $j$ 为 $suf$，连续段 $[l,r]$ 造成贡献当且仅当 $\\min_{i\\in [l,r]}a_i>x-\\max_{i\\in (pre,suf)}$，不等式右边对于每个 $i$ 是确定的，而且是可以通过单调栈 $O(n)$​ 预处理的东西，对于左边则可以使用数据结构来维护。\n\n下面我们进一步讨论这个数据结构需要干什么：\n\n- 这个数据结构维护所有连续段 $b$ 的最小值。\n- 将所有行以 $a_i$​ 为第一关键字，$i$​​ 为第二关键字从大到小排序。每次序列中一个 $0$ 改成 $1$​，会导致新增连续段，也会导致两个连续段合并，修改就是加入元素和删除元素。\n- 询问操作就是查询有多少个元素大于 $key$。\n\n对于新增连续段和合并连续段可以用并查集维护，元素则用反向树状数组维护。\n\n复杂度 $O(n\\log n)$。\n\n### 2021“MINIEYE杯”中国大学生算法设计超级联赛（5）T1\n\n把两端同色的边看成实边，两端异色的边看成虚边。\n\n- `1` 操作就是 `access(u)`。\n- `2` 操作就是查询两点间的虚边条数，转化一下变成查询一个点到根路径上的虚边条数。\n- `3` 操作转化一下就是查询 `dfs` 序区间中的点到根路径上的虚边条数总和。\n- `4` 操作就是每条实链点数选二之和。\n\n对于 `23` 操作，需要维护每个点到根路径上的虚边条数，支持区间加、区间求和，树状数组即可。\n\n对于 `4` 操作，在 `LCT` 中维护实链的点数，就可以在 `access` 时维护答案。\n\n复杂度 $O(n\\log^2n)$。\n\n### 2021“MINIEYE杯”中国大学生算法设计超级联赛（5）T2\n\n记 $f_{i,j}$ 表示有多少个串恰好有 $i$ 个 `a`、$j$​​ 个 `b`，不难写出它的生成函数 $(x+y+k-2)^L$。\n\n而题目中求的就是 $\\sum_{i=0}^L\\sum_{j=0}^L[n|i-p][n|j-q][x^i][y^j](x+y+k-2)^L$​​。\n\n题目还保证 $n|P-1$​，考虑单位根反演，得到答案为\n$$\n\\frac 1{n^2}\\sum_{i=0}^{n-1}\\sum_{j=0}^{n-1}(\\omega_n^i+\\omega_n^j+k-2)^L\\omega_n^{-ip}\\omega_n^{-jq}\n$$\n记 $A_{i,j}=(\\omega_n^i+\\omega_n^j+k-2)^L$ 可以 $O(n^2\\log L)$ 预处理，答案矩阵 $B$ 就是 $A$ 对两维分别做 `IDFT` 得到的。每次固定一维，对另一维做 `IDFT` 就行了，暴力做复杂度 $O(n^3)$，或者 Bluestein + MTT 可以做到 $O(n^2\\log n)$。\n\n复杂度 $O(n^3)$ 或者 $O(n^2\\log L)$。\n\n### 2021“MINIEYE杯”中国大学生算法设计超级联赛（5）T9\n\n称区间中数量超过一半的数为 **主元素**。\n\n由于一个合法区间只有一个主元素，可以考虑每个主元素的贡献。\n\n#### 做法 1\n\n考虑枚举一个值 $v$​，计算这个值的贡献。\n\n假设 $v$​ 在序列中的出现位置为 $p_1,p_2,\\cdots,p_k$​​，区间 $[l,r]$ 中第一个 $v$ 在 $p_i$ 出现，最后一个 $v$ 在 $p_j$​ 出现。\n\n考虑枚举 $j$​，快速查询有多少对合法的 $(l,r)$​。把等于 $v$​ 的位置变成 $1$​，不等于 $v$​ 的位置变成 $-1$​，记前缀和为 $sum_i$​，那么区间 $[l,r]$​ 合法的充要条件为 $sum_{l-1}<sum_r$​，因此需要维护的是 $sum_1,sum_2,\\cdots,sum_{p_j}$​ 组成的集合，$j\\rightarrow j+1$​ 时，加入的元素是 $sum_{p_j},sum_{p_j+1},\\cdots,sum_{p_{j+1}-1}$​，它们的值是连续的一段，所以这是一个区间 $+1$​，对于一个 $r\\in[p_j,p_{j+1})$​，合法 $l$​ 的数量就是集合中小于 $sum_r$​​ 的元素数量，这是一个前缀和，而 $[p_j,p_{j+1})$​ 内所有的 $sum_r$​ 构成一个区间，所以询问操作是查询前缀和的前缀和，可以用三个树状数组实现。\n\n复杂度 $O(n\\log n)$。\n\n#### 做法 2\n\n考虑分治，计算有多少个合法区间 $[l,r]$​​ 满足 $l\\le mid+1 \\land r\\ge mid$​​。\n\n可以发现区间 $[l,r]$​​ 合法的必要条件是 $[l,mid]$ 和 $[mid+1,r]$ 中至少有一个是合法的。\n\n> 引理：一个序列所有前缀的主元素中本质不同只有 $O(\\log n)$ 个。\n\n所以可能产生贡献的 $v$ 只有 $O(\\log n)$ 个。枚举 $v$。把等于 $v$ 的位置变成 $1$，不等于 $v$ 的位置变成 $-1$，记前缀和为 $sum_i$，枚举 $r$ 后，需要查询有多少个 $l\\le mid+1$ 满足 $sum_{l-1}<sum_r$，这个可以预处理前缀和做到 $O(1)$ 查询。\n\n复杂度 $O(n\\log^2n)$。\n\n### 2021“MINIEYE杯”中国大学生算法设计超级联赛（5）T13\n\n先二分一个直径 $D$，考虑用 `DP` 去判定。\n\n设 $f_{u,0/1}$ 表示以下情形以 $u$​ 为端点向子树内延伸的最长链的最小值（不存在时为 $\\infty$）：\n\n- 确定了 $u$​ 子树内每个点选哪条边。\n- $u$ 选的边是否是 $u$​ 和父亲的连边。\n- 子树内直径不超过 $D$。\n\n$f_{u,1}$​​​ 可以直接从每个儿子 $v$​​​ 用 $\\min(f_{v,0}+w(u,v),f_{v,1}+\\max(w(u,v)-p_v,0))$​​​ 转移过来，如果前两大的值之和大于 $D$​​，$f_{u,1}=\\infty$​​，否则就取这些值中的最大值。\n\n$f_{u,0}$​ 的转移需要分析一下，$u$​ 选择的边 $(u,v)$​​ 必须要满足 $v$​ 是 $\\min(f_{v,0}+w(u,v),f_{v,1}+w(u,v)-p_v)$​​ 前两大的儿子，所以枚举一下 $v$，就可以直接转移了。\n\n复杂度 $O(n\\log V)$。\n\n### AGC041D\n\n考虑任意 $k$​ 道题的总分都小于任意 $k+1$​ 道题的总分这个限制，发现它等价于前 $\\lceil\\frac n2\\rceil$​ 道题的总分小于后 $\\lceil\\frac n2\\rceil-1$​ 道题的总分。\n\n考虑如何生成一个合法的序列 $A$：\n\n- 枚举第 $\\lfloor\\frac n2\\rfloor+1$​ 道题的分值 $c$​，令 $A=(c,c,\\cdots,c)$​。\n- 多次选一个位置 $j<\\lfloor\\frac n2\\rfloor+1$​​，将 $A_1,A_2,\\cdots,A_j$​ 全部减一。\n- 多次选一个位置 $j>\\lfloor\\frac n2\\rfloor+1$​，将 $A_j,A_{j+1},\\cdots,A_n$​​​ 全部加一。\n- 由于 $A_1 \\ge 1$​​​，所以第二种操作的次数不得超过 $c-1$​​​，同理第三种操作的次数不得超过 $n-c$​​​。\n- 设前 $\\lceil\\frac n2\\rceil$​ 道题的总分减后 $\\lceil\\frac n2\\rceil-1$​ 道题的总分为 $x$​，第一步后 $x=c$​，第二种操作每一次都会使 $x$​ 减小 $j$​，第三种操作每一次都会使 $x$​ 减小 $n-j+1$​​，因此第二、三种操作的总贡献要小于 $c$。\n\n可以看出这是一个完全背包，第二种操作就是添加体积为 $1,2,\\cdots,\\lfloor\\frac n2\\rfloor$​​ 的物品，而且最多添加 $c-1$​ 个，第三种操作就是添加体积为 $1,2,\\cdots,\\lceil\\frac n2\\rceil-1$​​​​ 的物品，最多添加 $n-c$​ 个，总体积要小于 $c$​。\n\n对于第二种操作，考虑预处理 $L_{i,j}$​ 表示选择 $i$ 个物品，总体积为 $j$ 的方案数。用传统背包做复杂度肯定不行，事实上它能直接转移：\n$$\nL_{i,j}=L_{i-1,j-1}+L_{i,j-i}-L_{i-1,j-i-\\lfloor\\frac n2\\rfloor}\n$$\n对于第三种操作，同理可以预处理 $R_{i,j}$。\n\n然后就可以枚举 $c$​ 后 $O(n)$​​ 计算合法方案数。\n\n复杂度 $O(n^2)$。\n\n### AGC027D\n\n构造的思路是先黑白染色，然后填好黑格，再让每个白格满足：\n\n- 它大于周围四个黑格。\n- 它模周围四个黑格都等于 $1$。\n\n填白格的过程是容易的，对于一个白格，先算出周围四个黑格的 $\\text{lcm}$，然后尝试填 $\\text{lcm}+1$​，如果已经填过了，就继续尝试 $2\\text{lcm}+1,3\\text{lcm}+1,\\cdots$​。\n\n如果没有值域限制，这题就做完了，考虑怎样让填的数尽可能小。\n\n填白格没有什么好优化的（尝试过优先填 $\\text{lcm}$​​ 较大的格子，但完全没有效果），所以考虑如何填黑格，才能使 $\\text{lcm}$ 比较小。\n\n- 填法一：顺序填或随机填，大概只能构造 $N$ 等于一百多。\n- 填法二：考虑到一个白格周围四个黑格有两个是同一行的，有两个是同一列的，令 $A_{i,j}$ 是 $\\text{lcm(i,j)}$ 的倍数，具体怎么确定，像确定白格那样确定，大概能构造 $N$ 等于两百多。\n- 填法三：考虑到一个白格周围四个黑格只涉及四条斜线，令 $A_{i,j}$ 是 $\\text{lcm}(i+j,i-j+n)$ 的倍数，大概能构造 $N$ 等于 $425$ 左右。\n- 填法四：经过一番尝试，令 $A_{i,j}$​​ 是 $\\text{lcm}(i+(n-j+1),i-(n-j+1)+n)$​（就是把列编号倒过来）可以通过。\n- 填发五：考虑给每条斜线分配一个质数，黑格就等于所在的两条斜线质数的乘积，白格就等于周围四条斜线质数的乘积加一，一定不会有数重复。\n\n填发四需要用 `set` 维护哪些数填过，复杂度 $O(n^2\\log n)$​​。\n\n填发五复杂度 $O(n^2)$。\n\n### AGC025D\n\n对于两个距离为 $\\sqrt D$​ 的点 $(x_1,y_1),(x_2,y_2)$​，考虑 $x_1-x_2,y_1-y_2$​​ 的奇偶性：\n$$\nx_1 \\equiv x_2 \\pmod 2,y_1 \\equiv y_2 \\pmod 2 \\iff D \\equiv 0 \\pmod 4\\\\\nx_1 \\equiv x_2 \\pmod 2,y_1 \\not\\equiv y_2 \\pmod 2 \\iff D \\equiv 1 \\pmod 4\\\\\nx_1 \\not\\equiv x_2 \\pmod 2,y_1 \\not\\equiv y_2 \\pmod 2 \\iff D \\equiv 2 \\pmod 4\\\\\n$$\n因此 $D \\bmod 4$​ 说明了两点坐标差的奇偶性。\n\n> 引理：将平面上距离为 $\\sqrt D$ 的点对连边后是一张二分图。\n\n考虑构造一个黑白染色方案，设 $\\text{color}(x,y,D)=0/1$ 表示点 $(x,y)$ 的颜色。\n\n- 当 $D\\equiv 3\\pmod 4$ 时，没有边，$\\text{color}(x,y,D)=0$。\n\n- 当 $D\\equiv 2\\pmod 4$ 时，$\\text{color}(x,y,D)=x\\bmod 2$，这样距离为 $\\sqrt D$ 的点对就必然异色。\n- 当 $D \\equiv 1\\pmod 4$ 时，$\\text{color}(x,y,D)=(x+y)\\bmod 2$，这样距离为 $\\sqrt D$ 的点对就必然异色。\n\n- 当 $D\\equiv 0\\pmod 4$ 时，$\\text{color}(x,y,D)=\\text{color}(\\lfloor\\frac x2\\rfloor,\\lfloor\\frac y2\\rfloor,\\frac D4)$​​，下面证明为什么合法：\n\n  对于两个距离为 $\\sqrt D$ 的点 $(x_1,y_1),(x_2,y_2)$，由于 $x_1 \\equiv x_2 \\pmod 2,y_1 \\equiv y_2 \\pmod 2$，所以\n  $$\n  \\lfloor\\frac {x_1}2\\rfloor-\\lfloor\\frac {x_2}2\\rfloor=\\frac 12(x_1-x_2)\\\\\n  \\lfloor\\frac {y_1}2\\rfloor-\\lfloor\\frac {y_2}2\\rfloor=\\frac 12(y_1-y_2)\n  $$\n  进一步：\n  $$\n  \\begin{aligned}\n  &(x_1-x_2)^2+(y_1-y_2)^2=D\\\\\n  \\Rightarrow &(\\lfloor\\frac {x_1}2\\rfloor-\\lfloor\\frac {x_2}2\\rfloor)^2+(\\lfloor\\frac {y_1}2\\rfloor-\\lfloor\\frac {y_2}2\\rfloor)^2=\\frac D4\\\\\n  \\Rightarrow &\\text{color}(\\lfloor\\frac {x_1}2\\rfloor,\\lfloor\\frac {y_1}2\\rfloor,\\frac D4)\\ne\\text{color}(\\lfloor\\frac {x_2}2\\rfloor,\\lfloor\\frac {y_2}2\\rfloor,\\frac D4)\n  \\end{aligned}\n  $$\n\n对于 $D_1$​ 和 $D_2$​ 分别黑白染色后本质有 $4$​ 种颜色，这 $4$​​ 种颜色中肯定有一种点数大于等于 $n^2$​，输出这种颜色的 $n^2$​ 个点即可。\n\n复杂度 $O(n^2)$。\n\n### AGC036D\n\n没有负环等价于差分约束有解，假设解为 $d_1,d_2,\\cdots,d_n$​，不妨令 $d_1=0$。\n\n由于 $i\\rightarrow i+1$ 的边是不能被删的，所以 $d$ 是单调不增的，也就是一段 $0$，一段 $-1\n$，一段 $-2\\cdots$ 的形式。\n\n考虑一段一段的枚举 $d$​​​，上一段是 $[a,b]$​​​，即 $d_{a,a+1,\\cdots,b}=x+1$​​​，枚举了新的一段 $[b+1,c]$​​，即 $d_{b+1,b+2,\\cdots,c}=x$​​​​​，​分析哪些边需要删：\n\n- 对于 $b+1\\le i < j \\le c$，边 $(i,j)$ 需要删除。\n- 对于 $b+1\\le i\\le c,j<a$，边 $(i,j)$ 需要删除。\n\n然后就可以 `DP` 了，设 $f_{a,b}$ 表示填的最后一段为 $[a,b]$ 时的最小代价，转移为\n$$\nf_{a,b}+\\text{cost}_1(b+1,c)+\\text{cost}_2(b+1,c,a-1)\\rightarrow f_{b+1,c}\n$$\n其中 $\\text{cost}_1$​ 和 $\\text{cost}_2$​​ 在预处理二维前缀和后可以 $O(1)$ 算。\n\n复杂度 $O(n^3)$。\n\n### AGC045D\n\n如果 `Snuke` 按到了 $p_i=i$ 的位置就死了，所以他要最小化有解时死的概率，分析 `Snuke` 的最优策略：\n\n- 最初需要按下一个按钮，由于 `Snuke` 不知道排列，所以按每个按钮都是一样的，不妨按 $1$。\n- 如果按下了 $p_i=i$ 的按钮就死了。\n- 否则，$p_i$​ 一定是一个安全的按钮，继续按下 $p_i$，这样就可以安全地按下许多按钮。\n- 又需要尝试一个按钮时就按没按过的编号最小的按钮。\n\n于是，得到了 `Snuke` 胜利的充要条件：假设 $1-A$ 中第一个满足 $p_i=i$ 的 $i$ 为 $\\min$​​，$\\forall i>A,\\exists j<\\min$ 使得 $j$ 能到达 $i$。\n\n容易想到枚举 $\\min$​，把排列看成若干个循环，要求 $\\min$​ 前面没有孤立点，这个可以容斥：\n\n- 钦定 $i$​​​ 个孤立点，系数为 $(-1)^i\\binom{\\min-1}i$​。\n- 对于 $[1,\\min-1]$​​ 中剩下的 $\\min-1-i$​​ 个点先生成若干个循环，方案数为 $(\\min-1-i)!$。\n- 对于 $[A+1,n]$ 中的点，它们只能加入前面的循环，方案数为 $(\\min-1-i)^{\\overline{n-A}}$​。\n- 对于 $[\\min+1,A]$ 中的点，它们既可以加入前面的循环，又可以新建一个环，方案数为 $(\\min-1-i+n-A)^{\\overline{A-\\min}}$。\n\n综上，得到 $\\min$ 的贡献为：\n$$\n\\sum_{i=0}^{\\min-1}(-1)^i\\binom{\\min-1}i\\frac{(n-1-i)!(\\min-1-i)}{\\min-1-i+n-A}\n$$\n当 $\\min$​ 不存在时需要特判，贡献为：\n$$\n\\sum_{i=0}^A(-1)^i\\binom Ai(n-i)!\n$$\n复杂度 $O(A^2+n)$。\n\n### AGC041E\n\n#### 对于 $T=1$\n\n将网络抽象成一张有向图：\n\n- 将每条线的起点、终点和平衡器的端点抽象成结点。\n- 同一条线上的结点后面向前面连边。\n- 平衡器抽象成两个方向的边。\n\n考虑暴力怎么做，枚举最终汇聚到第 $t$​ 条线，判断 $t$ 的终点是否可以到达所有的起点。\n\n可以用一个 `bitset` 来压哪些汇点能到达这个点，然后 `DFS` 来求这些 `bitset`。可以做到 $O(\\frac {nm}{\\omega})$​​​ 的复杂度。\n\n#### 对于 $T=2$\n\n$n=2$ 时显然无解，下面构造说明了 $n>2$ 时一定有解。\n\n考虑从右往左依次插入每个平衡器，维护 $size_i$ 表示当前网络有多少个起点会到达第 $i$ 条线的终点。\n\n- 初始时，$size_i=1$。\n- 加入平衡器 $(x,y)$ 时，要么 $size_x+1$，要么 $size_y+1$，选择 $size_x$ 和 $size_y$ 中较小的一个 $+1$。一定不会出现 $size_x=n-1\\land size_y=n-1$ 的情况，因为 $size_x+size_y\\le n$。\n\n复杂度 $O(n+m)$。\n\n### ABC214G\n\n以下解法可以解决 $n \\le 10^5$​​ 的问题。\n\n设 $F_k$​​​ 表示确定 $k$​​​ 个位置的值 $r_{i_1},r_{i_2},\\cdots,r_{i_k}(i_1<i_2<\\cdots<i_k)$​​​​​​​​ 满足以下条件的方案数：\n$$\n\\forall x\\in[1,k],r_{i_x}=p_{i_x}\\lor r_{i_x}=q_{i_x}\n$$\n根据二项式反演，答案为\n$$\n\\sum_{i=0}^n(-1)^iF_i(n-i)!\n$$\n将 $p_i,q_i$​​​​​​​ 连边，得到一张由若干个环组成的图，选择一个满足 $r_i=p_i\\lor r_i=q_i$​​ 的位置 $i$​​​​ 就是选择一条边并占用一个端点，这对于每个环是独立的，所以对每个环求出 $F$​​ 数组，再用分治 `FFT` 合并就可以得到整张图的 $F$​ 数组。\n\n考虑求一个大小为 $m$​ 的环的 $F$​ 数组，假设点编号为 $1,2,\\cdots,m$，边为 $(1,2),(2,3),\\cdots,(m-1,m),(m,1)$，将选择 $i$ 条边的方案分为以下两类：\n\n- 不选边 $(1,2)$​，把边 $(2,3)$ 占用 $2$ 的方式编号为 $1$，边 $(2,3)$ 占用 $3$ 的方式编号为 $2$，边 $(3,4)$ 占用 $3$ 的方式编号为 $3$，边 $(3,4)$ 占用 $4$ 的方式编号为 $4$，依次类推。方案就是从 $2m-2$​ 种选择方式选 $i$​ 种，限制就是编号相邻的不能同时选择。\n\n  > 引理：从 $n$ 个物品中选 $r$ 个，编号相邻的不能同时选择的方案数为 $\\binom {n-r+1}r$​。\n  >\n  > 证明：将选择的第 $i$ 个物品的编号减去 $i-1$ 就得到了从 $n-r+1$ 个物品中选 $r$ 个的方案数。\n\n  这部分方案数为 $\\binom{2m-i-1}i$​。\n\n- 选边 $(1,2)$​​，那么边 $(1,2)$​​ 可以占用 $1$​​ 或 $2$​​，但两种方式是等价的，不妨假设占用了 $1$​​。方案就是从 $2m-3$​​ 种选择方式选 $i-1$​​​​ 种，限制还是编号相邻的不能同时选择。\n\n  这部分方案数为 $2\\binom{2m-i-1}{i-1}$。\n\n对于一个大小为 $m$ 的环\n$$\nF_i=\\binom{2m-i-1}i+2\\binom{2m-i-1}{i-1}=\\binom{2m-i}i+\\binom{2m-i-1}{i-1}\n$$\n然后每个环的 $F$​ 就可以 $O(n)$​ 求了，复杂度瓶颈在于分治 `FFT`，复杂度 $O(n\\log^2n)$​​​。\n\n分治 `FFT` 有两种优化：\n\n- 由于每个环的大小之和为 $n$，故只有 $O(\\sqrt n)$ 种大小不同的环，大小相同的环可以通过快速幂 $O(n\\log n)$​ 地算出乘积。\n- 整个分治过程形成一棵二叉树的结构，总时间就是 $\\sum_{u\\in \\mathbb{leaf}}\\text{degree}_u\\text{depth}_u$​，最小化时间就是 `Huffman` 树，每次贪心地将两个次数最小的多项式乘起来。 ​​​\n\n### ABC214H\n\n走到了一个强连通分量就肯定会走完内部的所有点，缩点后图就变成了 `DAG`，假设原图就是 `DAG`。\n\n想到用最小费用流解决：\n\n- 把每个点 $u$ 拆成 $\\text{in}_u$ 和 $\\text{out}_u$。\n- $\\text{in}_u$ 向 $\\text{out}_u$ 连一条容量为 $1$​，费用为 $-X_u$​ 的边，再连一条容量为 $K$，费用为 $0$ 的边。\n- 对于原图中的边 $(u,v)$​，$\\text{out}_u$​ 向 $\\text{in}_v$​ 连一条容量为 $K$​，费用为 $0$​ 的边。\n- $S$ 向 $\\text{in}_1$ 连一条容量为 $K$，费用为 $0$ 的边，$\\text{out}_u$ 向 $T$ 连一条容量为 $K$，费用为 $0$ 的边。\n\n`SSP` 算法肯定是通过不了的，考虑变成 `Primal-Dual` 算法可以做的问题。\n\n#### Sol 1\n\n初始图是一张 `DAG`，可以跑一遍 `DP` 预处理最短路作为点的初始势能。\n\n#### Sol 2\n\n求出 `DAG` 的一组拓扑序，然后给每个点按拓扑序从大到小重新编号（也就是缩完点后的编号）。\n\n容易构造一组满足差分约束的初始势能：\n\n- $S$​​ 势能为 $\\sum X_u$​​，$T$​​​ 势能为 $0$​​。\n- $\\text{in}_u$​ 的势能为 $\\sum_{i=1}^uX_i$​，$\\text{out}_u$ 的势能为 $\\sum_{i=1}^{u-1}X_i$。\n\n上述两种做法复杂度都是 $O(nK\\log n)$。\n\n### AGC027E\n\n考虑什么样的串能变成单个字母 $a$ 或 $b$。\n\n打表发现能变成 $a$ 的串 $S$ 满足的 $a,b$ 数量关系是 $a$ 的数量减 $b$ 的数量模 $3$ 余 $1$，并且这个条件在 $|S|$ 为偶数时也是充分条件，当 $|S|$ 为奇数时恰好多了一个串 $ababab\\cdots aba$​。​\n\n> 引理一：记 $p(S)$​ 表示 $S$​ 中 $a$​ 的个数减 $b$​ 的个数模 $3$​，$S$​ 能变成单个字母 $c$​ 当且仅当：\n>\n> - $p(S)=p(c)$\n> - $S=c$ 或 $S$ 中有相邻的相同字母。\n\n必要性显然，下面证明充分性：当 $|S|\\le 3$ 时显然成立，当 $|S|>3$ 时取出 $S$ 中最长的连续相同子串，不妨假设它是 $n$ 个 $a$，分两种情况讨论：\n\n- $n \\ge 4$，直接将前两个 $a$​​ 合并，$|S|$ 减小了 $1$，并且还满足引理条件。\n- $n\\le 3$​，由于 $|S|>3$​，这个子串不可能前后都没有字母，不妨假设它不在开头，那么它前面必然是 $b$​，将前两个 $a$​ 合并成 $b$，那么此时有两个 $b$ 会相邻，$|S|$ 减小了 $1$​，并且还满足引理条件。\n\n然后问题就转化成了有多少个串 $T$ 满足以下条件：\n\n- 存在一种将 $S$ 划分为 $|T|$ 段的方式，使得每一段与 $T$​​ 中的对应字母满足引理一。\n\n这个问题的主要难点在于引理一的条件二。\n\n事实上，当 $S$​ 中有相邻的相同字母时，**忽略引理一的条件二** 不会影响答案。\n\n> 引理二：若 $S$ 中有相邻的相同字母，$S$ 能够变成 $T$​ 当且仅当：\n>\n> - 存在一种将 $S$​ 划分为 $|T|$​ 段的方式，设 $S$​ 被划分成了 $S_1,S_2,\\cdots,S_{|T|}$​，$T$​ 中每个字母分别为 $T_1,T_2,\\cdots,T_{|T|}$​。\n> - 满足 $\\forall i,p(S_i)=p(T_i)$。\n\n必要性显然，下面证明充分性：\n\n- 假设存在一组满足上述条件的划分 $(S_1,S_2,\\cdots,S_{|T|})$​。\n- 将 $S_1,S_2,\\cdots,S_{|T|-1}$ 的长度最小化得到新的划分 $(S_1',S_2',\\cdots,S_{|T|}')$​。\n- 由于最小化，容易发现 $S_1,S_2,\\cdots,S_{|T|-1}$​ 已经满足了引理一。\n- 此时 $S_{|T|}$ 有可能不合法，比如 $S_{|T|}=abab\\cdots aba$，由于不合法时 $|T|>1$，可以让 $S_{|T|}$ 只保留最后一个字母，把前面的部分扔给 $S_{|T|-1}$，于是 $T$ 删去最后一个字母对于 $S$​ 删去最后一个字母满足引理二，故 $S$ 可以变成 $T$。\n\n有了引理二就很好做了，特判掉 $S$ 中没有相邻的相同字母的情况，容易用一个自动机来判断 $T$​ 是否合法，计数可以在自动机上 `DP`。\n\n复杂度 $O(n)$。\n\n### Gym101667G\n\n如果两个楼梯一个朝上一个朝下，那么就没有封闭区域，如果两个朝下可以对称一下，变成两个都朝上的情况。\n\n可以看出一个封闭区域开始的标志是 L 横线和 U 竖线相交，结束的标志是 U 横线和 L 竖线相交。考虑用扫描线来求出每一个封闭区域，从左到右处理每一条竖线，并维护变量 `isRegion` 表示当前竖线是否经过一个封闭区域，`area` 表示当前区域的面积：\n\n- 当 `isRegion` 为真时将 `area` 加上当前竖线和上一条竖线之间矩形的面积。\n- 当一个封闭区域开始时清零 `area`。\n- 当一个封闭区域结束时，答案累加上 `area`。\n\n复杂度 $O(n+m)$。\n\n![.png](https://i.loli.net/2021/09/08/a4fEq6tJWRbrxDy.png)\n\n### Gym101667J\n\n完美匹配的存在性容易想到 Hall 定理，设 $f(S)$ 表示与点集 $S$ 距离恰好等于 $1$ 的点集，问题转化为判定：\n$$\n\\forall |S|\\le\\frac n2,|T|=\\frac n2,S \\cap T=\\varnothing\\\\\n|f(S)\\cap T| \\ge |S|\n$$\n由于 $|f(S)\\cap T|$ 最小值为 $|f(S)|+|S|-\\frac n2$，条件改写为 $|f(S)|\\ge\\frac n2$。\n\n考虑求 $\\min_{|S|\\le \\frac n2}|f(S)|$，事实上这就是图的最小点割（删去最少的点使图不连通）：\n\n- $f(S)$ 是 $S$ 与 $V-S-f(S)$ 之间的一组点割。\n- 任意一组点割 $T$ 割出来的多个连通块都有一个点数不超过 $\\frac n2$，设这个连通块的点集为 $S$，那么 $|f(S)|\\le |T|$。\n\n求最小点割就是每对点都求一遍最小割：\n\n- 把每个点 $u$ 拆成 $\\text{in}_u$ 和 $\\text{out}_u$。\n- $\\text{in}_u$ 向 $\\text{out}_u$ 连一条代价为 $1$ 的边。\n- 对于原图中的边 $(u,v)$，$\\text{out}_u$ 向 $\\text{in}_v$，$\\text{out}_v$ 向 $\\text{in}_u$ 分别连一条代价为 $\\infty$ 的边。\n- 枚举两个不同的点 $u,v$，用 $\\text{out}_u$ 到 $\\text{in}_v$ 的最小割更新答案。\n\n复杂度 $O(n^2\\cdot flow)$。\n\n~~负~~优化：注意到如果最小点割小于 $\\frac n2$，那么不在割中的点就超过一半，每次随机选取一个点 $u$，枚举点 $v$，求 $\\text{out}_u$ 到 $\\text{in}_v$ 的最小割，都有大半的概率求出最优解，如果随机 $k$ 次，复杂度为 $O(nk\\cdot flow)$。\n\n### ABC215H\n\n如何判定当前的卷心菜是否能满足所有公司？\n\n- $S$ 向卷心菜 $i$ 连容量为 $A_i$ 的边。\n- 公司 $i$ 向 $T$ 连容量为 $B_i$ 的边。\n- 如果 $c_{i,j}=1$，那么卷心菜 $i$ 向公司 $j$ 连容量为 $\\infty$ 的边。\n- $\\max flow=\\sum_{i=1}^mB_i$。\n\n也等价于 $T$ 的所有入边不是最小割。由于 $S$ 的出边很少，考虑枚举最小割中有哪些 $S$ 的出边，假设这些边为 $mask$，割掉 $mask$ 后有一些 $T$ 的入边就不需要割了，假设这些边的容量和为 $sum$，那么需要吃点的卷心菜数量就是 $\\sum_{i\\in mask}A_i-sum+1$，要求 $sum>0$。\n\n这时就可以解决第一问了，考虑对于所有 $mask$，怎么求它们的 $sum$，注意到 $B_i$ 贡献给 $mask$ 的条件是 $mask$ 包含所有能供应给公司 $i$ 的卷心菜，可以用子集前缀和（`FMT`）求出。然后枚举 $mask$ 用 $\\sum_{i\\in mask}A_i-sum+1$ 更新第一问的答案即可。\n\n第二问还要进一步分析，为了不算重，我们枚举一个 $mask$ 表示被吃的卷心菜品种的集合，一个 $mask$ 可行当前仅当存在一个取到第一问答案的 $S$，使得 $mask\\subseteq S$，这个同样可以用 `FMT` 做。设第一问答案为 $ans$，最后是对于一个 $mask$，求有多少种从 $mask$ 中吃掉 $ans$ 个卷心菜的方式，满足 $mask$ 中的每种卷心菜至少被吃一个。容易想到容斥，钦定一些卷心菜品种不吃，然后不考虑每种卷心菜必吃的限制，但对每个 $mask$ 都通过容斥来计算复杂度高达 $O(3^n)$。\n\n设 $f_S$ 表示有多少种从 $S$ 中吃掉 $ans$ 个卷心菜的方式，满足 $mask$ 中的每种卷心菜至少被吃一个，发现\n$$\n\\sum_{T\\subseteq S}f_T=\\binom{\\sum_{i\\in S}A_i}{ans}\n$$\n对右边做 `IFMT` 就可以求得 $f$ 数组。\n\n复杂度 $O(n2^n+nm)$。\n\n### AGC020E\n\n先考虑对于一个串 $S$ 如何单独计算答案，这个不难，容易想到用区间 `DP` 做。设 $f_{l,r}$ 表示子串 $[l,r]$ 的改写方案数，转移分两种：\n\n- $s_l$ 没有参与改写，贡献为 $f_{l+1,r}$。\n- $s_l$ 参与改写了，枚举最外层的覆盖 $s_l$ 的改写：周期 $T$ 和循环次数 $i>1$，如果合法，则贡献为 $f_{l,l+T-1}\\cdot f_{l+Ti,r}$。\n\n当尝试用区间 `DP` 做原问题的时候，发现做不了，因为当 $s_l$ 参与改写时，原来的 $f_{l,l+T-1}$ 不再是一个区间的 `DP` 值。详细地说，设 $f(s)$ 表示字符串 $s$ 的答案（子集的改写方案数总和），设 $suf(i)$ 表示 $s$ 从 $s_i$ 开始的后缀，转移为两种：\n\n- 第一个字符没有参与改写，贡献为 $(s_0+1)f(suf(1))$。\n\n- 第一个字符参与了，枚举最外层的覆盖 $s_l$ 的改写：周期 $T$ 和循环次数 $i>1$，由于每个周期内要相等，所有子集的限制要叠加，设 $s[l,r]$ 表示 $s$ 的第 $l$ 个字符到第 $r$ 个字符的子串，设\n  $$\n  t=s[0,T-1]\\&s[T,2T-1]\\&\\cdots\\&s[T(i-1),Ti-1](\\&\\ is\\ \\text{bitand})\n  $$\n  那么贡献为 $f(t)\\cdot f(suf(Ti))$。\n\n这里的复杂度上限看起来是 $O(2^{n+1})$，这个题最重要的地方就是，你要看出来这个做法其实是 $O(能过)$ 的，进而分析出其真正的复杂度，而不是被假上限给吓跑了。\n\n下面证明，有一个上界是 $O(n^3+2^{\\frac n8})$。首先长度小于等于 $\\frac n8$ 的串最多有 $2^{\\frac n8}$ 个，长度大于等于 $\\frac n8$ 的串最多被压缩两次（因为每压缩一次长度减半），只有三种压缩方式：\n\n- 先选择一个子段划分成 $2$ 段，再选择一个子段划分成 $2$ 段。\n- 先选择一个子段划分成 $2$ 段，再选择一个子段划分成 $3$ 段。\n- 先选择一个子段划分成 $3$ 段，再选择一个子段划分成 $2$ 段。\n\n显然第一种压缩方式可以得到的串是最多的，考虑第一种压缩方式得到的串是怎样的，形如：\n\n$s[a,a+k-1]\\&s[a+k,a+2k-1]\\&s[b,b+k-1]\\&s[b+k,b+2k-1]$\n\n显然它是由 $a,b,k$ 三个参数决定的，故数量是 $O(n^3)$，因此三种压缩方式的总和也是 $O(n^3)$。\n\n另外，通过打表可以求出长度大于 $12$ 的串更为精准的上界为 $41703$。\n\n### CF1562E\n\n先分析最长上升子序列有什么性质，假设最长上升子序列为\n$$\ns[l_1,r_1],s[l_2,r_2],\\cdots,s[l_k,r_k]\n$$\n比较显然的是对于每个 $l$，选择的 $r$ 是一个区间。更强的结论是存在一组最优解满足对于每个 $l$，选择的 $r$ 是一个后缀。\n\n反证法：假设对于一个 $l$，选择的 $r\\in[r_1,r_2]$，其中 $r_2<n$，$s[l,r_2]$ 之后的子串为 $s[l',r']$。如果 $s[l,r_2+1]<s[l',r']$，直接在 $s[l,r_2]$ 后插入 $s[l,r_2+1]$，得到一组更优的解。否则 $s[l,r_2]<s[l',r']\\le s[l,r_2+1]$，说明\n$$\ns[l',l'+r_1-l]=s[l,r_1]\\\\\ns[l',l'+r_1+1-l]=s[l,r_1+1]\\\\\ns[l',l'+r_1+2-l]=s[l,r_1+2]\\\\\n\\cdots\\\\\ns[l',l'+r_2-l]=s[l,r_2]\n$$\n于是可以用前者们一一替换后者们，得到一组不存在 $l$ 作为左端点的子串的解。\n\n然后就可以 `DP` 了，设 $f_i$ 表示以 $s[i,n]$ 结尾的最长上升子序列，转移为\n$$\nf_i=\\max_{j<i\\land s[j,n]<s[i,n]}f_j+n-\\text{lcp}(s[i,n],s[j,n])+1\n$$\n可以预处理 $\\text{lcp}(s[i,n],s[j,n])\\leftarrow \\text{lcp}(s[i+1,n],s[j+1,n])$，复杂度 $O(n^2)$。\n\n#### 优化\n\n可以优化到 $O(n\\sqrt n)$。\n\n首先是 `LCP`  怎么处理，通常是使用后缀数组的 `height` 数组，这里也可以这么处理。\n\n求出后缀数组 $SA$ 和 `height` 数组，转移为\n$$\nf_{SA_i}=\\max_{j<i \\land SA_j<SA_i}f_{SA_j}+\\max_{k=j+1}^in-height_k+1\n$$\n注意关于 `height` 的那项是一个后缀 $\\max$，考虑单调栈维护，栈内维护两元组 $(v,S)$，每次将 $(n-height_{i+1}+1,\\{i\\})$ 压栈。假设栈顶元素为 $(v_1,S_1)$，下一个元素为 $(v_2,S_2)$，如果 $v_1\\ge v_2$，就把这两个元素合并成 $(v_1,S_1\\cup S_2)$。\n\n在插入 $i$ 个元素后，就可以这样计算 $f_{i+1}$：遍历栈内每个三元组 $(v,S)$，用 $\\max_{j \\in S\\land SA_j\\le SA_i}+v\\rightarrow f_{SA_{i+1}}$。但栈内元素可能很多，不能全部遍历，考虑把 $|S|\\le \\sqrt n$ 的栈元素的贡献用一个数据结构 $A$ 一起维护，每个 $|S|>\\sqrt n$ 的元素用数据结构 $B$ 单独维护，这样就只需要遍历最多 $\\sqrt n$ 个 $|S|>\\sqrt n$ 的栈元素，即在 $A$ 中查询一次前缀 $\\max$，$B$ 中查询 $\\sqrt n$ 次前缀 $\\max$。\n\n元素合并的时候需要分类维护：\n\n- 当 $|S_1|+|S_2|\\le \\sqrt n$ 时，相当于把 $S_2$ 的贡献整体加上一个正数，可以在 $A$ 中进行 $|S_2|$ 次增大修改操作，这类操作总共不超过 $n\\sqrt n$ 次。\n- 当 $|S_1|>\\sqrt n\\land |S_2|\\le \\sqrt n$ 时，在 $B$ 中进行 $|S_2|$ 次插入新元素，这类操作总共不超过 $n$ 次。\n- 当 $|S_1|,|S_2|>\\sqrt n$ 或 $|S_1|,|S_2|\\le \\sqrt n\\land |S_1|+|S_2|>\\sqrt n$ 时，用 $|S_1|+|S_2|$ 个元素重构一个 $B$，这类操作总共不超过 $\\sqrt n$ 次。\n\n综上，当 $A$ 做到 $O(1)$ 修改，$O(\\sqrt n)$ 查询，$B$ 做到 $O(\\sqrt n)$ 修改，$O(1)$ 查询时，复杂度为 $O(n\\sqrt n)$。\n\n因为修改是增大值，查询是前缀 $\\max$，$A$ 和 $B$ 都可以通过分块实现。\n\n### CF1562F\n\n> 有个长度为 $n$ 的序列 $A$，元素两两不同且值域连续，但你不知道这个序列，每次可以询问两个不同数的 $\\text{lcm}$，最多使用 $n+5000$ 次询问求出 $A$。\n>\n> $n\\le 10^5,A_i\\le 2\\cdot 10^5$\n\n如果 $\\gcd(a,b)=1$，那么 $\\text{lcm}(a,b)=ab$，如果求出了 $A$ 序列中最大的质数 $p$，就只需要 $n-1$ 次询问就可以求出 $A$。\n\n先考虑 $p$ 存在的情况，怎么求出 $p$ 和它的位置？询问 $\\text{lcm}(A_1,A_2),\\text{lcm}(A_2,A_3),\\text{lcm}(A_3,A_4),\\cdots,\\text{lcm}(A_{n-1},n)$，所有质因子中最大的就是 $p$，同时也可以推断出 $p$ 的位置。然后再进行 $n-1$ 次询问就求出了 $A$，询问次数为 $2n-2$，可以处理 $100<n\\le7500$。\n\n再分别考虑 $n\\le 100$ 和 $n>7500$ 的情况。\n\n$n\\le 100$ 可以先两两询问 $\\text{lcm}$，再逐个确定。当 $n>3$ 时至少有两个奇数，根据两个奇数的 $\\text{lcm}$ 为奇数就可以确定所有数的奇偶性，再取 $\\text{lcm}$ 中最大的一个，它一定是 $\\max A_i(\\max A_i-1)$，结合奇偶性就可以确定最大的 $A_i$，然后删除最大值，重复上述过程，直到 $n=3$ 时，分类讨论即可。\n\n当 $n>7500$ 时需要用不超过 $5000$ 次询问求出 $A$ 序列中最大的质数 $p$，然而比较困难，考虑不找最大的质数，找一个大于 $450$ 的质数 $p'$ 就行了。\n\n考虑随机询问 $\\text{lcm}(A_i,A_j)$，如果它是两个大于 $450$ 的质数 $p,q$ 的乘积，那么 $A_i,A_j$ 一定就是 $p,q$，考虑进一步确定 $A_i$，随机一个 $k$，如果 $p\\not|\\text{lcm}(A_i,A_k)$ 说明 $A_i=p$，如果 $q\\not|\\text{lcm}(A_j,A_k)$ 说明 $A_i=q$，期望的总随机次数是 $O(\\ln^2n)$。\n\n考虑\n$$\n\\text{lcm}(p',x)=\n\\begin{cases}\nx&(x|p')\\\\\nxp'&(x\\not|p')\n\\end{cases}\n$$\n如果 $\\text{lcm}(p',x)>2\\cdot 10^5$ 就说明 $x\\not|p'$，可以确定 $x$ 的值，这样至少可以确定 $n-900$ 个数，并且最大的质数 $p$ 一定被确定了，最后再用 $p$ 和剩下的数询问即可。\n\n### AUOJ1760\n\n> 有 $n$ 个物品，其中可能有一个次品，它的质量与其他物品有差异。你需要多次使用天平后回答谜题：是否存在次品？次品是偏轻还是偏重？称量时，在天平两边放相同数量的物品，以得知那边更重。\n>\n> 构造一个能够解决谜题且称量次数最少的**固定**称量方案。\n>\n> $n \\le 10^6$\n\n考虑什么样的称量方案能够解决谜题。\n\n假设称量次数为 $m$，定义矩阵 $A$：\n$$\nA_{i,j}=\n\\begin{cases}\n-1 &(第 j 次称量物品 i 在天平左边)\\\\\n0 &(第 j 次称量物品 i 不在天平上)\\\\\n1 &(第 j 次称量物品 i 在天平右边)\n\\end{cases}\n$$\n首先怎么判断有没有次品：如果有物品没上过天平，哪无论如何都不能判断，否则可以判断，不存在次品当且仅当每次天平都平衡。\n\n得到条件一：$A_i\\ne \\{0,0,\\cdots, 0\\}$。\n\n确定了有次品，怎么确定是哪一个：先考虑已知次品偏重时怎么确定，根据每次天平的倾斜情况，可以得到每次称量时次品在天平的哪一边或不在天平上，定义序列 $B$：\n$$\nB_i=\n\\begin{cases}\n-1 &(第 i 次称量次品在天平左边)\\\\\n0 &(第 i 次称量次品不在天平上)\\\\\n1 &(第 i 次称量次品在天平右边)\n\\end{cases}\n$$\n然后看 $B$ 和 $A_?$ 相等就可以确定次品是哪一个。\n\n但是并不知道次品偏重还是偏轻，上面说了假设次品偏重可以得到一个序列 $B$，类似地假设次品偏轻可以得到一个序列 $C$，并且满足 $C=-B$（元素对于互为相反数），可以解决谜题的条件是 $B$ 和 $C$ 不能同时和某个 $A_i$ 相等。\n\n得到条件二：$\\forall i \\ne j, A_i\\ne A_j \\land A_i \\ne -A_j$。\n\n由于每次称量时两边放相同数量的物品。\n\n得到条件三：$\\forall j\\in[1,m],\\sum_{i=1}^nA_{i,j}=0$。\n\n满足以上三个条件就已经合法了，考虑对于一个 $m$，哪些 $n$ 可以构造出 $A$ 矩阵。\n\n首先在前两个条件的限制下，$n$ 最大能取得 $\\frac{3^m-1}2$，再加上第三个限制，$n$ 还能不能取到 $\\frac{3^m-1}2$？\n\n答案是否定的，因为对于所有的方案，$\\forall j\\in[1,m],\\sum_{i=1}^n|A_{i,j}|=3^{m-1}$。\n\n> 引理，$m$ 次称量可以解决谜题当且仅当 $n\\le \\frac{3^m-3}2$。\n\n这样就可以求出最小的 $m$ 了，怎么求方案？\n\n当 $3|n$ 时有一个简单的构造：定义 $\\text{next}(A)$ 表示把序列 $A$ 每一项循环移位（$-1\\rightarrow 0,0\\rightarrow 1,1\\rightarrow -1$）后得到的序列，不难发现一个事实，$A,\\text{next}(A),\\text{next}(\\text{next}(A))$ 这三个序列对应位置之和等于 $0$。\n\n如：\n\n```plain\n1 0 -1 1\n-1 1 0 -1\n0 -1 1 0\n```\n\n除去 $\\{-1,-1,\\cdots,-1\\}$ 和 $\\{1,1,\\cdots,1\\}$，把每三个这样的序列分为一组，恰好可以分成 $\\frac {3^m-3}3$ 组，其中两两组互相为相反序列，于是删去一 半这样的组，恰好可以得到一个合法的矩阵 $A$。\n\n### 思路一\n\n当 $3\\not|n$ 时，感觉问题非常困难，考虑模拟退火：\n\n- 用 $\\sum_{j=1}^m|\\sum_{i=1}^nA_{i,j}|$ 作为一个解的权值，问题就是求权值最小的解。\n- 还是先分组，取若干个组和一个不完整的组作为初始解。\n- 每次以以下方式之一生成一个新解，如果新解更优则接受新解，否则以很低的概率接受新解。\n  - 选择一个 $i$，将 $A_i$ 替换成 $-A_i$。\n  - 选择一个 $i$，选择一个 $B$ 满足 $B$ 和 $-B$ 都没有在 $A$ 中出现过，令 $A_i=B$。\n\n效率还行，但不稳定，对于少数 $n$ 速度极慢，$n\\le 10^4$ 是完全没有问题的。\n\n<details><summary><span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span></summary>\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\nusing ll = long long;\nusing lf = double;\n\nll gen(ll x) {\n    const ll k = 0x9ddfea08eb382d69ull;\n    rep(i, 1, 3) x *= k, x ^= x >> 47;\n    return x * k;\n}\nint rnd() {\n    static ll s = time(0);\n    return (s += gen(s)) & INT_MAX;\n}\nvoid wrt(int x, int ed) {\n    static streambuf* out = cout.rdbuf();\n    #define pc out -> sputc\n    static char c[11]; int sz = 0;\n    do c[++sz] = x % 10, x /= 10; while(x);\n    while(sz) pc(c[sz--] + 48);\n    pc(ed);\n}\nint n, m = 2, t = 9, nw[15], idx, A[2500000][15], c[15];\nvoid dfs(int i) {\n    if(i > m) {\n        rep(j, 2, 4) {\n            idx++;\n            rep(k, 1, m) A[idx][k] = (nw[k] + j) % 3 - 1;\n            if(idx == t) break;\n        }\n        return;\n    }\n    rep(j, -1, 1) {\n        nw[i] = j, dfs(i + 1);\n        if(idx == t) break;\n    }\n}\nint main() {\n    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n    cin >> n;\n    while(t - 3 >> 1 < n) m++, t *= 3;\n    wrt(m, 10);\n    t = t - 1 >> 1, dfs(2);\n    rep(i, 1, n) rep(j, 1, m) c[j] += A[i][j];\n    int su = 0;\n    rep(i, 1, m) su += abs(c[i]);\n    while(su) {\n        int i = rnd() % n + 1;\n        if(rnd() % t < n) {\n            int d = 0;\n            rep(j, 1, m) d += abs(c[j] - 2 * A[i][j]);\n            if(d < su || rnd() % n < 10) {\n                su = d;\n                rep(j, 1, m) c[j] -= 2 * A[i][j], A[i][j] *= -1;\n            }\n        } else {\n            int k = rnd() % (t - n) + n + 1, d = 0;\n            rep(j, 1, m) d += abs(c[j] - A[i][j] + A[k][j]);\n            if(d < su || rnd() % n < 10) {\n                su = d;\n                rep(j, 1, m) c[j] -= A[i][j] - A[k][j], swap(A[i][j], A[k][j]);\n            }\n        }\n    }\n    rep(i, 1, n) {\n        int v = 0;\n        per(j, m, 1) v = v * 3 + A[i][j] + 1;\n        wrt(v, 32);\n    }\n}\n```\n</details>\n\n### 思路二\n\n另外，还有一种优秀的乱搞做法。\n\n- 先分组，取若干个组和一个不完整的组作为初始解，那么 $\\forall j\\in[1,m],|\\sum_{i=1}^nA_{i,j}|\\le 1$。\n- 对于每个 $j$，如果 $\\sum_{i=1}^nA_{i,j}=-1$，找到一个 $i$ 满足 $A_{i,j}<1$ 并且将 $A_{i,j}$ 增大一后仍然合法，然后将 $A_{i,j}$ 加一。\n\n会有极个别 $n$ 求出的解不合法，$10^6$ 以内应该不会超过 $10$ 个，而且都比较小，取决于初始解（所有可以通过）。\n\n结合思路一可以构造出 $10^6$ 内的所有 $n$。\n\n<details><summary><span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span></summary>\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\nusing ll = long long;\n\nvoid wrt(int x, int ed) {\n    static streambuf* out = cout.rdbuf();\n    #define pc out -> sputc\n    static char c[11]; int sz = 0;\n    do c[++sz] = x % 10, x /= 10; while(x);\n    while(sz) pc(c[sz--] + 48);\n    pc(ed);\n}\nint n, m = 2, t = 9, nw[15], idx, A[1000005], c[15], as;\nbool vs[1600000];\nvoid dfs(int i) {\n    if(i) rep(j, -1, 1) { nw[i] = j, dfs(i - 1); if(idx == n) break; }\n    else rep(j, 1, 3) {\n        int x = 0;\n        per(k, m, 1) x = x * 3 + (j + nw[k]) % 3;\n        if(!x || vs[x] || idx == n) break;\n        A[++idx] = x, vs[x] = vs[t - x] = 1;\n        rep(k, 1, m) c[k] += (j + nw[k]) % 3 - 1;\n    }\n}\nint main() {\n    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n    cin >> n;\n    while(t - 3 >> 1 < n) m++, t *= 3;\n    t--, vs[t / 2] = 1, wrt(m, 10), nw[m] = -1, dfs(m - 1);\n    if(n % 3) {\n        rep(i, 1, m) as += abs(c[i]);\n        int th = 1;\n        rep(j, 1, m) {\n            rep(i, 1, n) {\n                if(!c[j]) break;\n                int v = A[i] / th % 3;\n                auto Try = [&](int x) {\n                    int nw = A[i] + x * th;\n                    if(vs[nw]) return;\n                    vs[A[i]] = vs[t - A[i]] = 0, vs[nw] = vs[t - nw] = 1;\n                    as -= abs(c[j]), c[j] += x, v += x, as += abs(c[j]), A[i] = nw;\n                };\n                if(v < 2 && c[j] < 0) Try(1);\n                if(v > 0 && c[j] > 0) Try(-1);\n            }\n            th *= 3;\n        }\n    }\n    rep(i, 1, n) wrt(A[i], 32);\n}\n```\n</details>\n\n### 思路三\n\n这是官方解法，说是爬山算法，但感觉比较微妙，因为稍微扰动一下初始解就会有极个别 $n$ 跑不出来，流程是这样的：\n\n- 用 $\\sum_{j=1}^m|\\sum_{i=1}^nA_{i,j}|$ 作为一个解的权值，问题就是求权值最小的解。\n\n- $A$ 矩阵初始为空，然按字典序**从大到小**枚举长度为 $m$，值域为 $\\{-1,0,1\\}$ 的序列 $B$，如果 $B$ 和 $-B$ 没有在 $A$ 出现过，就把 $B,\\text{next}(B),\\text{next}(\\text{next}(B))$ 依次加入 $A$ 末尾，加入 $n$ 行时终止。那么 $\\forall j\\in[1,m],|\\sum_{i=1}^nA_{i,j}|\\le 1$。\n\n- 对当前解重复进行如下修改，直到权值为 $0$：\n\n  从小到大依次枚举 $j$ 和 $i$，然后进行以下操作：\n\n  - 如果 $\\sum_{i=1}^nA_{i,j}=-1\\land A_{i,j}<1$，尝试让 $A_{i,j}$ 加一。\n  - 如果 $\\sum_{i=1}^nA_{i,j}=1$，尝试让 $A_{i,j}=0$。\n\n实测能构造出 $10^6$ 内的所有 $n$。\n\n<details><summary><span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span></summary>\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n\nusing namespace std;\nusing ll = long long;\n\nvoid wrt(int x, int ed) {\n    static streambuf* out = cout.rdbuf();\n    #define pc out -> sputc\n    static char c[11]; int sz = 0;\n    do c[++sz] = x % 10, x /= 10; while(x);\n    while(sz) pc(c[sz--] + 48);\n    pc(ed);\n}\nint n, m = 2, t = 9, nw[15], idx, A[797170], c[15], as;\nbool vs[1600000];\nvoid dfs(int i) {\n    if(i) per(j, 1, -1) { nw[i] = j, dfs(i - 1); if(idx == n) break; }\n    else rep(j, 1, 3) {\n        int x = 0;\n        per(k, m, 1) x = x * 3 + (j + nw[k]) % 3;\n        if(x == t || vs[x] || idx == n) break;\n        A[++idx] = x, vs[x] = vs[t - x] = 1;\n        rep(k, 1, m) c[k] += (j + nw[k]) % 3 - 1;\n    }\n}\nint main() {\n    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n    cin >> n;\n    while(t - 3 >> 1 < n) m++, t *= 3;\n    t--, vs[t / 2] = 1, wrt(m, 10), nw[m] = 1, dfs(m - 1);\n    rep(i, 1, m) as += abs(c[i]);\n    while(as) {\n        int th = 1;\n        rep(j, 1, m) {\n            rep(i, 1, n) {\n                if(!c[j]) break;\n                int v = A[i] / th % 3;\n                auto Try = [&](int x) {\n                    int nw = A[i] + x * th;\n                    if(vs[nw]) return;\n                    vs[A[i]] = vs[t - A[i]] = 0, vs[nw] = vs[t - nw] = 1;\n                    as -= abs(c[j]), c[j] += x, v += x, as += abs(c[j]), A[i] = nw;\n                };\n                if(v < 2 && c[j] < 0) Try(1);\n                if(v > 0 && c[j] > 0) Try(-v);\n            }\n            th *= 3;\n        }\n    }\n    rep(i, 1, n) wrt(A[i], 32);\n}\n```\n</details>\n\n### AUOJ1761\n\n> 有一个长度为 $n$ 的序列 $A$ （下标从 $1$ 开始）和一个长度为 $m$ 的序列 $B$（下标从 $0$ 开始）。\n>\n> $A$ 初始全为 $0$，每一天 $A_i$ 会增加 $i$，在第 $j$ 天，如果 $A_i>B_{j\\bmod m}$，则进行一次操作，令 $A_i=B_{j\\bmod m}$。\n>\n> $q$ 次询问，每次询问前 $d_i$ 天总共会进行多少次操作。\n>\n> $n,m,q\\le 3\\cdot 10^5,d_i\\le 3\\cdot 10^{12},t_i\\le 10^{18}$\n\n由于 $d_i$ 很大，应该会用到操作的周期性，事实上对于每个 $A_i$，从第一次操作它开始周期就为 $m$。\n\n> 引理：假设在第 $p$ 天操作了 $A_i$，那么它在第 $p+m$ 天又会被操作。\n\n证明：第 $p-m$ 天 $A_i$ 小于等于第 $p$ 天的 $A_i=B_{p \\bmod m}$，感性理解 $A_i$ 越小在 $m$ 天后越容易操作，第 $p$ 天操作了，第 $p+m$ 天肯定要操作。\n\n设 $A_i$ 第一次操作在第 $p_i$ 天，那么在第 $p_i,p_i+m,p_i+2m,pi+3m,\\cdots$  都会操作，于是周期就是 $m$。\n\n不难发现 $p_i$ 是递减的，因为任意时刻 $A$ 序列都是递增的，每次操作的都是一段后缀。那么对于一次询问，进行过操作的 $A_i$ 是一段后缀，只要求出了 $p_i$ 就可以二分出这个后缀，下面考虑怎么求 $p_i$。\n\n设 $pos$ 表示 $B$ 中最小元素的位置，对于每个 $i$ 可以直接算出 $A_i$ 第一次被 $B_{pos}$ 操作的时间 $T_i$，那么 $p_i\\in[T_i-m+1,T_i]$，设 $p_i=T_i-m+k_i$，$k_i$ 就是最小的 $x$ 满足 $ix+(T_i-m)i>B_{pos+x}$，考虑在线段树上每个结点 $[l,r]$ 维护 $\\min_{j=l}^rB_{pos+j}-ij$，每次只需要二分出最小的 $x$ 满足 $\\min_{j=1}^x\\{B_{pos+j}-ij\\}<(T_i-m)i$，注意到式子是可以斜率优化的，随着 $i$ 的增大，对每个结点用一个单调队列维护下凸包。复杂度为 $O(n\\log n)$。这样就求出了 $p_i$。\n\n对于询问 $d$，每个 $A_i$ 的贡献可以分为若干个完整周期和一个不完整周期。对于完整周期，由于周期长度为 $m$，可以用线段树直接模拟周期中每一天的修改，然后就知道每个 $A_i$ 一个周期被清理多少次。对于不完整周期，可以把所有询问离线下来，然后用一个线段树模拟这个不完整周期，大致思路是在 $p_i\\bmod m$ 天插入 $A_i$，在 $d\\bmod m$ 天进行查询，但有可能 $d\\bmod m<p_i\\bmod m$，所以实现上需要分类讨论一下。\n\n### CodeChef-btree\n\n> 定义 $S(u,k)$ 表示与 $u$ 距离不超过 $k$ 的点集。\n>\n> 给定一棵 $n$ 个点的树，$q$ 次询问，每次询问 $|S(u_1,k_1)\\cup S(u_2,k_2)\\cup S(u_3,k_3)\\cup \\cdots \\cup S(u_{m_i},k_{m_i})|$ 。\n>\n> $n,q\\le 5\\cdot 10^4,\\sum_{i=1}^qm_i\\le 5\\cdot 10^5$。\n\n考虑 $|S(u,k)|$ 怎么求，可以离线后点分治，也可以建出点分树在线求。\n\n#### Sol 1\n\n先对 $u_1,u_2,u_3,\\cdots,u_{m_i}$ 建虚树，假设虚树中非关键点的半径为 $0$。\n\n如果 $(u_1,k_1),(u_2,k_2)$ 满足 $k_1-\\text{dis}(u_1,u_2)>k_2$，就说明了 $S(u_2,k_2)\\subsetneq S(u_1,k_1)$，即 $S(u_2,k_2)$ 是没用的，但不能删去它，而是令 $k_2=k_1-\\text{dis}(u_1,u_2)$。\n\n考虑对所有点的半径更新，直到不能更新为止，一种方法是像 `Dijkstra` 一样每次取半径最大的点更新周围点的半径，另一种做法是树形 `DP`，自底向上更新一遍，再自顶向下更新一遍。\n\n然后发现一个很好的性质，记虚树点集为 $V$，边集为 $E$，$u$ 的半径为 $r_u$，答案等于 $\\sum_{u\\in V}|S(u,r_u)|-\\sum_{(u,v)\\in E}|S(u,r_u)\\cap S(v,r_v)|$。证明很简单，考虑自顶向下将每个 $S(u,r_u)$ 并入，每次新增的点数为 $|S(u,r_u)|-|S(u,r_u)\\cap S(fa_u,r_{fa_u})|$。\n\n$|S(u,r_u)|$ 可以在点分树上查询，$|S(u,r_u)\\cap S(v,r_v)|$ 是一个 $S(w,r)$，其中 $w$ 可能是顶点，也可能是一条边的中点，如果在每条边上新建一个点，$w$ 就一定是顶点了。\n\n复杂度 $O((n+m)\\log n)$。\n\n#### Sol 2\n\n答案求的是并集的大小，是 `bitset` 可以优化的。\n\n注意到 $nq \\le 2.5\\cdot 10^9,n\\sum_{i=1}^qm_i\\le 2.5\\cdot 10^{10}$，一个时间复杂度 $O(\\frac{n\\sum_{i=1}^qm_i}\\omega)$，空间复杂度 $O(\\frac{nq}\\omega)$ 的算法是可以通过的。\n\n怎么快速求 $S(u,k)$ 的 `bitset` 形式，希望能做到 $O(\\frac n\\omega)$。\n\n考虑把所有询问离线下来，在点分治的过程中每个 $S(u,k)$ 都被分解成了 $O(\\log n)$ 个形如”深度不超过 $d$ 的点集”的并，如果每次都把”深度不超过 $d$ 的点集”并上去，求 $S(u,k)$ 就是 $O(\\frac{n\\log n}\\omega)$ 的，不太行。注意到这 $O(\\log n)$ 个点集的范围分别为 $n,\\frac n2,\\frac n4,\\frac n8,\\cdots$，总和是 $2n$ 的，但每个点集编号的范围都是 $[1,n]$，每次并上去就太不优秀了，如何缩小编号的范围？只需要把所有点按照点分树的 `DFS` 序重新编号，那么每个点集编号的范围就缩小到了 $n,\\frac n2,\\frac n4,\\frac n8,\\cdots$，每次只需要并到一个区间上，复杂度 $O(\\frac n\\omega)$。\n\n做法就是对每个询问开一个 `bitset`，点分治的过程中更新 `bitset` 的一个区间，答案就是对于 `bitset` 的 `popcount`，需要用 `unsigned long long` 实现 `bitset`，`popcount` 也建议手写，预处理 $[0,65536)$ 内所有数的 `popcount`，把每个 `unsigned long long` 拆成四个 $[0,65536)$ 内的数。\n\n实测比 Sol 1 快。\n\n### URAL2118\n\n> 给定前 $k$ 个字母的 $01$ 前缀编码（不存在一个编码是另一个编码的前缀）。\n>\n> 给定字符串 $s$，设其解码后的 $01$ 串为 $S$，求最多能将 $S$ 划分为多少段使得每一段都无法解码，无解输出 $-1$。\n>\n> $k \\le 52, n\\le 10^6$\n\n首先考虑两种特殊情况：\n\n- 编码中既有 $0$，也有 $1$，那 $S$ 无论怎么划分都可以解码。\n- 编码中既没 $0$，也没 $1$，那么答案为 $|S|$。\n\n剩下的情况为：有 $0$ 无 $1$ 和有 $1$ 无 $0$，由于对称性，只考虑有 $0$ 无 $1$。\n\n首先答案的上界为 $1$ 的个数，因为全 $0$ 的一段是可以被解码的。\n\n如果最后一位为 $1$，那么在每个 $1$ 后面断开，就可以取到这个上界。\n\n如果最后一位为 $0$，假设最后一段 $T$，可以说明存在最优解满足 $T$ 前面是 $1$：假设 $T$ 前面有 **连续** 的 $x$ 个 $0$，前面总共有 $y$ 个 $1$。那么答案的上界为 $y+1$，把这 $x$ 个 $0$ 加入 $T$，然后在 $T$ 前面的每个 $1$ 后面断开就可以到达这个上界。\n\n如果 $T$ 前面有 $y$ 个 $1$，最大段数就是 $y+1$，问题就是求最大的 $y$，假设 $T'$ 是最短的无法被解码的后缀，可以说明最大的 $y$ 等于 $T'$ 前面 $1$ 的个数：由于 $|T|\\ge |T'|$，所以 $y$ 不会超过 $T'$ 前面 $1$ 的个数，另外，令 $T=T'前面极长的一段0+T'$，$y$ 就可以取到这个上界。\n\n问题转化成了求 $T'$，那么 $T'$ 的任何前缀都无法解码，否则 $T'$ 不是最短的，记 $suffix(i)$ 表示 $S$ 长度为 $i$ 的后缀，问题就是依次判断 $suffix(1),suffix(2),suffix(3),\\cdots$ 是否有前缀可以被解码，`AC` 自动机即可。\n\n复杂度 $O(nk)$。\n\n### Graph Subpaths\n\n> 没有提交地址。\n>\n> 给定一张 $n$ 个点 $m$ 条边的有向无环图，再给定 $k$ 条路径，每条路径长度为 $l_i$，一条合法路径不包含这 $k$ 条路径。\n>\n> 对于 $i \\in [2,n]$，求 $1\\rightarrow i$ 的合法路径条数。\n>\n> $n,m,\\sum_{i=1}^kl_i \\le 10^5$\n\n### Sol 1\n\n首先把所有边反向，就转化成了求 $i\\rightarrow 1$ 的合法路径条数。\n\n对于边 $(u,v)$，标记它的权值为 $v$，设 $T_i$ 表示 $i\\rightarrow 1$ 所有合法路径组成的 `trie`，考虑怎么按拓扑序求出每一个 $T_u$，对于边 $(u,v)$，$T_v$ 是已经求过了，把 $T_v$ 复制到根的儿子，但这样会有一些以 $u$ 为起点的不合法路径，需要删除这些路径：从 $T_u$ 的根出发沿着不合法路径走，把以终点为根的子树删除即可。$u$ 的答案就是 $T_u$ 的叶子个数。\n\n由于 $T_u$ 非常大，当然不能直接存下来，可行的方法是用可持久化的 `trie`，对于边 $(u,v)$，只需要从 $T_u$ 的根向 $T_v$ 连一条边就行了，而不用复制整棵 $T_v$，删除子树也只需要对路径上的结点建新版本。\n\n一个问题是儿子列表的维护，如果用链表维护的话，删除子树时新建的结点需要从原版本复制整个链表，复杂度可能达到 $O(n^2)$。\n\n用主席树维护儿子列表就可以 $O(n\\log n)$ 地新建结点。\n\n复杂度 $O(n\\log n)$。\n\n### Sol 2\n\n对所有路径建 `AC` 自动机，不难想到一个 $O(n^2)$ 状态的 `DP`，设 $f_{i,u}$ 表示在原图中走到 $i$，`AC` 自动机上走到 `u`，且没有经过 `AC` 自动机上终止结点的路径条数。\n\n由于 `AC` 自动机上的点对应唯一原图中的点的，所以 `DP` 状态定义成 $f_u$ 就可以转移了。\n\n由于建 `AC` 自动机需要主席树，复杂度 $O(n\\log n)$。\n\n### ZOJ3390\n\n> 对于两棵树 $T_1,T_2$，定义 $T_1+T_2$ 表示把根合并，$T_1\\cdot T_2$ 表示把 $T_1$ 中每个结点换成 $T_2$，$T_1=T_2$ 表示树同构。\n>\n> 给定树 $A,B,C$，求 $X,Y$ 满足 $AX+BY=C$。\n>\n> $|A|,|B|,|C| \\le 10^5$\n\n设 $height(T)$ 表示 $T$ 的树高（最深叶子到根的距离）。\n\n可以发现 $height(T_1+T_2)=\\max(height(T_1),height(T_2)),height(T_1\\cdot T_2)=height(T_1)+height(T_2)$。\n\n那么 $\\max(height(A)+height(X),height(B)+height(Y))=height(C)$，假设 $height(A)+height(X)=height(C)$（另一种情况是一样的）。\n\n这样就知道了 $height(X)$，考虑怎么求 $X$，很简单，假设 $u$ 为 $C$ 中最深叶子的 $height(X)$ 级祖先，以 $u$ 为根的子树就是 $X$，这样就知道了 $AX$，然后就可以求出 $BY$，再用类似的方法就可以求出 $Y$ 了。\n\n虽然思路很简单，但是有一定实现难度，求 $BY$ 时树的“减法“，以及判定答案是否合法都需要用到树哈希。\n\n树哈希公式：\n$$\nf_u=1+\\sum_{v\\in son(u)}f_v\\cdot \\text{prime}(size_v)\n$$\n其中 $\\text{prime}(i)$ 表示第 $i$ 个质数。\n\n**注：**对于两棵大小不同的树 $T_1,T_2$，$f_{T_1}=f_{T_2}$ 是可能的，因此哈希应当和子树大小捆绑在一起。\n\n`Generator` ：参数 $T,A,B,C,D$ 可调，分别表示数据组数和树 $A,X,B,Y$ 的大小。\n\n<details><summary><span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span></summary>\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n#define eb emplace_back\n#define mp make_pair\n#define fi first \n#define se second\n#define all(x) (x).begin(), (x).end()\n#define SZ(x) int((x).size())\n#define mid ((l + r) / 2)\n#define lc o * 2\n#define rc o * 2 + 1\n#define lch l, mid, lc\n#define rch mid + 1, r, rc\n#define cmi(a, b) (a = min(a, b))\n#define cma(a, b) (a = max(a, b))\n#define lb lower_bound\n#define ub upper_bound\n#define bs binary_search\n#define pop __builtin_popcount\n#define llpop __builtin_popcountll\n#define ctz __builtin_ctz\n#define llctz __builtin_ctzll\n#define clz __builtin_clz\n#define llclz __builtin_clzll\n#define par __builtin_parity\n#define llpar __builtin_parityll\n\nusing namespace std;\nusing ll = long long;\nusing lf = double;\n// using P = pair<int, int>;\nusing V = vector<int>;\n// using cmp = complex<lf>;\n\nll gen(ll x) {\n    const ll k = 0x9ddfea08eb382d69ull;\n    rep(i, 1, 3) x *= k, x ^= x >> 47;\n    return x * k;\n}\nint rnd() {\n    static ll s = time(0) + (ll)new char;\n    return (s += gen(s)) & INT_MAX;\n}\nV tmul(V a, V b) {\n    int n = a.size() - 1, m = b.size() - 1, su = n;\n    rep(i, 1, n) {\n        rep(j, 2, m) a.pb(b[j] == 1 ? i : b[j] + su - 1);\n        su += m - 1;\n    }\n    return a;\n}\nV tplus(V a, V b) {\n    int n = a.size() - 1, m = b.size() - 1;\n    rep(j, 2, m) a.pb(b[j] == 1 ? 1 : b[j] + n - 1);\n    return a;\n}\nconst int N = 5, A = 5, B = 5, C = 5, D = 5;\nint main() {\n    const int T = 100000;\n    printf(\"%d\\n\", T);\n    rep(kase, 1, T) {\n        int a = rnd() % A + 1, b = rnd() % B + 1, c = rnd() % C + 1, d = rnd() % D + 1;\n        V t1{0}, t2{0}, t3{0}, t4{0};\n        auto get = [](V& t, int n) { rep(i, 1, n) t.pb(i > 1 ? rnd() % (i - 1) + 1 : 0); };\n        get(t1, a), get(t2, b), get(t3, c), get(t4, d);\n        V t5 = tplus(tmul(t1, t2), tmul(t3, t4));\n        printf(\"%d %d %llu\\n\", a, c, t5.size() - 1);\n        auto prt = [](V& v) { For(i, 1, v.size()) printf(\"%d \", v[i]); puts(\"\"); };\n        prt(t1), prt(t3), prt(t5);\n    }\n}\n```\n</details>\n\n`Special judge`：假设保存为 `checker.cpp`，编译后在命令行中使用：`checker <input-file> <output-file>`，答案正确返回值为 $0$，否则返回值为 $1$，输出为第一组出错的数据。\n\n<details><summary><span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span></summary>\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n#define eb emplace_back\n#define mp make_pair\n#define fi first \n#define se second\n#define all(x) (x).begin(), (x).end()\n#define SZ(x) int((x).size())\n#define mid ((l + r) / 2)\n#define lc o * 2\n#define rc o * 2 + 1\n#define lch l, mid, lc\n#define rch mid + 1, r, rc\n#define cmi(a, b) (a = min(a, b))\n#define cma(a, b) (a = max(a, b))\n#define lb lower_bound\n#define ub upper_bound\n#define bs binary_search\n#define pop __builtin_popcount\n#define llpop __builtin_popcountll\n#define ctz __builtin_ctz\n#define llctz __builtin_ctzll\n#define clz __builtin_clz\n#define llclz __builtin_clzll\n#define par __builtin_parity\n#define llpar __builtin_parityll\n\nusing namespace std;\nusing ll = long long;\nusing lf = double;\nusing P = pair<int, int>;\nusing V = vector<int>;\n// using cmp = complex<lf>;\n\nconst int N = 1e5 + 5, M = 1299709;\nint f[M + 5], pid, prm[N];\n\nV tmul(V a, V b) {\n    int n = a.size() - 1, m = b.size() - 1, su = n;\n    rep(i, 1, n) {\n        rep(j, 2, m) a.pb(b[j] == 1 ? i : b[j] + su - 1);\n        su += m - 1;\n    }\n    return a;\n}\nV tplus(V a, V b) {\n    int n = a.size() - 1, m = b.size() - 1;\n    rep(j, 2, m) a.pb(b[j] == 1 ? 1 : b[j] + n - 1);\n    return a;\n}\n\nP dfs(int u, const V G[]) {\n    P re(1, 1);\n    for(int v : G[u]) {\n        auto [h, sz] = dfs(v, G);\n        re.fi = (re.fi + (ll)h * prm[sz]) % 999999937;\n        re.se += sz;\n    }\n    return re;\n}\nint Hash(const V& t) {\n    vector<int> G[N];\n    For(i, 1, t.size()) G[t[i]].pb(i);\n    return dfs(1, G).fi;\n}\nint read(FILE* f) { int x; return fscanf(f, \"%d\", &x) == 1 ? x : -1; }\n\nint main(int argc, char* argv[]) {\n    rep(i, 2, M) {\n        if(!f[i]) prm[++pid] = i;\n        for(int j = 1; i * prm[j] <= M; j++) {\n            f[i * prm[j]] = 1;\n            if(i % prm[j] == 0) break;\n        }\n    }\n    FILE *in = fopen(argv[1], \"r\"), *out = fopen(argv[2], \"r\");\n    for(int T = read(in); T--;) {\n        V t1{0}, t2{0}, t3{0}, t4{0}, t5{0};\n        auto get = [](FILE* f, V& t, int n) { rep(i, 1, n) t.pb(read(f)); };\n        int a = read(in), b = read(in), c = read(in);\n        get(in, t1, a), get(in, t3, b), get(in, t5, c);\n        int d = read(out), e = read(out);\n        auto err = [&]() {\n            printf(\"1\\n%d %d %d\\n\", a, b, c);\n            rep(i, 1, a) printf(\"%d \", t1[i]); puts(\"\");\n            rep(i, 1, b) printf(\"%d \", t3[i]); puts(\"\");\n            rep(i, 1, c) printf(\"%d \", t5[i]);\n            exit(1);\n        };\n        if(!~d) err();\n        get(out, t2, d), get(out, t4, e);\n        if((ll)a * d + (ll)b * e != c && Hash(tplus(tmul(t1, t2), tmul(t3, t4))) != Hash(t5)) err();\n    }\n}\n```\n</details>\n\n### IZhO 2020 D1T3\n\n> [题目链接](codeforces.com/group/Uo1lq8ZyWf/contest/265564)\n>\n> 给定长度为 $n$ 的序列 $A$，问有多少三元组 $(i,j,k)$ 满足 $i\\le j<k$ 且 $[i,j]$ 和 $[j+1,k]$ 两个区间中数的集合相同。\n>\n> $n \\le 2\\cdot 10^5$\n\n记 $prev_i$ 表示 $A_i$ 上一次出现的位置，$next_i$ 表示 $A_i$ 下一次出现的位置。\n\n三元组 $(i,j,k)$ 合法的充要条件为：\n\n- 区间 $[j+1,k]$ 中的数都在 $[i,j]$ 中出现，即 $i \\le \\min prev_{j+1\\cdots i}$，相当于 $i$ 有个上界 $R_{j,k}=\\min prev_{j+1\\cdots k}$。\n- 区间 $[i,j]$ 中的数都在 $[j+1,k]$ 中出现，即 $\\max next_{i\\cdots j}\\le k$，相当于 $i$ 有个下界 $L_{j,k}$，其中 $L_{j,k}$ 是最小的 $i$ 满足 $\\max next_{i\\cdots j}\\le k$。\n\n那么 $(j,k)$ 的贡献就是 $\\max(R_{j,k}-L_{j,k}+1,0)$，考虑只枚举 $k$，用数据结构动态维护 $\\sum_{j=1}^{k-1}\\max(R_{j,k}-L_{j,k}+1,0)$。\n\n先考虑 $L_{j,k}$ 和 $R_{j,k}$ 分别怎么维护。\n\n对于 $R_{j,k}=\\min prev_{j+1\\cdots k}$，这是 $prev$ 数组上的后缀 $\\min$，当 $k\\rightarrow k+1$ 时，$R_{j,k}$ 发生的改变是一个后缀变成了 $prev_{k+1}$，具体可以用单调栈求出这个后缀，然后区间赋值。\n\n对于 $L_{j,k}$，直接分析 $k\\rightarrow k+1$ 不太行，换一个角度考虑对于一个 $j$，$L_{j,k}$ 和 $k$ 的关系，$\\max next_{i\\cdots j}$ 是 $next$ 数组上的后缀 $\\max$，将 $next_{1\\cdots j}$ 依次插入单调栈，设单调栈中元素分别为 $next_{i_1},next_{i_2},next_{i_3},\\cdots,next_{i_k}$：\n\n- 当 $k\\in[j+1,next_{i_k}-1]$ 时，$L_{j,k}=\\infty$。\n- 当 $k\\in [next_{i_k},next_{i_{k-1}-1}]$，$L_{j,k}=i_{k-1}+1$。\n- $\\cdots$\n- 当 $k\\in [next_{i_1},n]$，$L_{j,k}=1$。\n\n综上，单调栈元素 $i_x$ 意味着当 $k\\in [next_{i_x},next_{i_{x-1}}-1]$，$L_{j,k}=i_{x-1}+1$，假设插入 $next_y$ 后 $next_{i_x}$ 被弹掉了，那么当 $j\\in [i_x,y-1],k\\in [next_{i_x},next_{i_{x-1}}-1]$ 时，$L_{j,k}=i_{x-1}+1$，相当于 $k$ 从 $next_{i_x}-1\\rightarrow next_{i_x}$ 时，对 $L_{i_x\\cdots y-1,k}$ 进行区间赋值为 \n$i_x+1$。每个单调栈元素意味着一次区间赋值，所以只需要 $n$ 次区间赋值就可以维护 $L_{j,k}$。\n\n但维护的是 $\\sum_{j=1}^{k-1}\\max(R_{j,k}-L_{j,k}+1,0)$，相当于夹在两条递增折线之间的面积。由于 $L_{j,k}$ 和 $R_{j,k}$ 都是随着 $k$ 增大而减小的，所以每次赋值都是减小。比如将 $R_{l\\cdots r,k}$ 改为 $v$，如果 $v \\le \\min L_{l\\cdots r,k}$，这一段的面积就是 $0$，如果 $v \\ge \\max L_{l\\cdots r,k}$，这一段的面积就是 $\\sum_{j=l}^rR_{j,k}-\\sum_{j=l}^rL_{j,k}+(r-l+1)$，否则可以二分一个分界点 $x$，使得 $\\forall j \\in[l,x], v\\ge L_{j,k},\\forall j\\in[x+1,r],v\\le L_{j,k}$，分界点左右两段分别对应上述两种情况。所以只要维护了 $L_{j,k},R_{j,k}$ 的区间 $\\min,\\max$ 和 $sum$ 就可以维护 $\\sum_{j=1}^{k-1}\\max(R_{j,k}-L_{j,k}+1,0)$ 了。\n\n在实现上并不需要求 $x$，假设当前要将 $L_{ql\\cdots qr,k}$ 赋值为 $v$，当前线段树结点区间为 $[l,r]$，一般区间赋值是在 $ql\\le l\\land r \\le qr$ 时停止递归，这里把条件改成 $ql\\le l\\land r \\le qr \\land (v \\le \\min L_{l\\cdots r,k}\\lor v \\ge \\max L_{l\\cdots r,k})$ 才可以方便地维护 $\\sum_{j=1}^{k-1}\\max(R_{j,k}-L_{j,k}+1,0)$，由于只有一个分界点，所以复杂度不变。\n\n复杂度 $O(n\\log n)$，实现难度较大，附上代码：\n\n<details><summary><span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span></summary>\n```cpp\n#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\n#define pb push_back\n#define eb emplace_back\n#define mid ((l + r) / 2)\n#define lc o * 2\n#define rc o * 2 + 1\n#define lch l, mid, lc\n#define rch mid + 1, r, rc\n\nusing namespace std;\nusing ll = long long;\n\nconst int N = 2e5 + 5;\n\nint n, a[N], pre[N], nxt[N], L[N];\nvector<tuple<int, int, int>> vl[N], vr[N];\nint tagL[N * 4], minL[N * 4], maxL[N * 4];\nint tagR[N * 4], minR[N * 4], maxR[N * 4];\nll sum[N * 4], sumL[N * 4], sumR[N * 4], as;\n\nvoid pushUp(int o) {\n    sum[o] = sum[lc] + sum[rc];\n    sumL[o] = sumL[lc] + sumL[rc];\n    sumR[o] = sumR[lc] + sumR[rc];\n    minL[o] = min(minL[lc], minL[rc]);\n    minR[o] = min(minR[lc], minR[rc]);\n    maxL[o] = max(maxL[lc], maxL[rc]);\n    maxR[o] = max(maxR[lc], maxR[rc]);\n}\nvoid pushL(int v, int l, int r, int o) {\n    tagL[o] = minL[o] = maxL[o] = v, sumL[o] = v * (r - l + 1ll);\n    sum[o] = max(sumR[o] - sumL[o], 0ll);\n}\nvoid pushR(int v, int l, int r, int o) {\n    tagR[o] = minR[o] = maxR[o] = v, sumR[o] = v * (r - l + 1ll);\n    sum[o] = max(sumR[o] - sumL[o], 0ll);\n}\nvoid pushDown(int l, int r, int o) {\n    if(~tagL[o]) pushL(tagL[o], lch), pushL(tagL[o], rch), tagL[o] = -1;\n    if(~tagR[o]) pushR(tagR[o], lch), pushR(tagR[o], rch), tagR[o] = -1;\n}\nvoid updL(int L, int R, int v, int l, int r, int o) {\n    if(L <= l && r <= R && (v <= minR[o] || v >= maxR[o])) return pushL(v, l, r, o);\n    pushDown(l, r, o);\n    if(L <= mid) updL(L, R, v, lch);\n    if(R > mid) updL(L, R, v, rch);\n    pushUp(o);\n}\nvoid updR(int L, int R, int v, int l, int r, int o) {\n    if(L <= l && r <= R && (v >= maxL[o] || v <= minL[o])) return pushR(v, l, r, o);\n    pushDown(l, r, o);\n    if(L <= mid) updR(L, R, v, lch);\n    if(R > mid) updR(L, R, v, rch);\n    pushUp(o);\n}\nint main() {\n    cin >> n;\n    rep(i, 1, n) scanf(\"%d\", &a[i]);\n    rep(i, 1, n) L[i] = 0;\n    rep(i, 1, n) pre[i] = L[a[i]], L[a[i]] = i;\n    rep(i, 1, n) L[i] = n + 1;\n    per(i, n, 1) nxt[i] = L[a[i]], L[a[i]] = i;\n    rep(i, 2, n) {\n        int& j = L[i] = i - 1;\n        for(; j && pre[j] >= pre[i]; j = L[j]);\n        vr[i].eb(max(j, 1), i - 1, pre[i]);\n    }\n    rep(i, 2, n) {\n        int& j = L[i] = i - 1;\n        for(; j && nxt[j] <= nxt[i]; j = L[j])\n            vl[nxt[j]].eb(max(j, 1), i - 1, L[j]);\n    }\n    mem(tagL, 63), mem(tagR, -1);\n    rep(i, 1, n) {\n        for(auto [l, r, v] : vl[i]) updL(l, r, v, 1, n, 1);\n        for(auto [l, r, v] : vr[i]) updR(l, r, v, 1, n, 1);\n        as += sum[1];\n    }\n    cout << as;\n}\n```\n</details>\n\n### CF566C\n\n> 给定一棵 $n$ 个点的带权树，每个点住了 $w_i$ 个人，一个人从 $u$ 到 $v$ 的花费为距离的 $1.5$ 次方。\n>\n> 定义 $f(u)$ 表示所有人到点 $u$ 的总花费，求 $f(u)$ 最小的点。\n>\n> $n \\le 2\\cdot 10^5$\n\n首先研究 $f(u)$ 有什么性质，假设花费等于距离的话 $f(u)$ 就是单峰的，因此猜想 $f(u)$ 是单蜂的。\n\n证明：由于 $w_v\\text{dis}^{1.5}_v(u)$ 是下凸函数，所以它们加起来也是下凸函数。\n\n回忆实数上的单蜂函数是怎么求最值的：当前确定最优点在 $[l,r]$ 中，在 $\\frac {l+r}2$ 处求导来确定最远点在 $\\frac {l+r}2$ 左边还是右边，然后将范围减半。\n\n考虑怎么在树上实现这个过程：求出整棵树的重心，通过确定最优解在重心的哪个子树来将范围减半。\n\n怎么确定最优解在哪棵子树？把 $f(u)$ 的定义域扩大，$u$ 可以是一条边上的位置。求出重心向各个方向的导数，由于 $f(u)$ 单峰，所以最多有一个导数小于 $0$，这是最优解的方向。假设最优解的方向沿着边 $(u,v)$，由于 $f(u)$ 的最优点可能在 $(u,v)$ 上，所以 $v$ 不一定比 $u$ 优，应该把经过的所有点取个最小值作为答案。\n\n根 $u$ 向儿子 $v$ 方向的导数为：\n$$\n\\frac 32\\left(\\sum_{i=1}^nw_i\\sqrt{\\text{dis}(i,u)}-2\\sum_{i\\in \\text{subree}(v)}w_i\\sqrt{\\text{dis}(i,u)}\\right)\n$$\n可以 $O(n)$ 求出 $u$ 向每个儿子的导数，复杂度 $O(n\\log n)$。\n\n","slug":"problems","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh45007qootn3an141oa","content":"<p>懒得分开写咕咕咕。</p>\r\n<h3 id=\"tc13459\">TC13459</h3>\r\n<p>“1”的限制分两种，在同一行或在同一列，但 “1” 的数量很多，不能枚举每个“1”是哪一种，设“在同一行”的边为白边，“在同一列的”的边为黑白，考虑边之间的约束关系。</p>\r\n<p>考虑两条边 <span class=\"math inline\">\\((i,j),(i,k)\\)</span>，当边 <span class=\"math inline\">\\((j,k)\\)</span> 存在时说明 <span class=\"math inline\">\\((i,j)\\)</span> 和 <span class=\"math inline\">\\((i,k)\\)</span> 的颜色相同，反之亦然。</p>\r\n<p>这样就可以表示出所有的约束，必要性显然，充分性是因为合法解中同色边一定构成了若干不含公共点的团，这种对于相邻两条边的约束关系就很充分了。</p>\r\n<p>在所有的约束条件下，所有的边及其约束关系构成类似二分图的结构，联通块分两类，一类是整个连通块一定同色，另一类是一定包含两种颜色。</p>\r\n<p>设第一类连通块有 <span class=\"math inline\">\\(x\\)</span> 个，第二类连通块有 <span class=\"math inline\">\\(y\\)</span> 个，枚举第一类连通块有 <span class=\"math inline\">\\(i\\)</span> 个白色，即可得到答案： <span class=\"math display\">\\[\r\n\\sum_{i=0}^x\\binom xi2^yn^{\\underline{i+y}}n^{\\underline{x-i+y}}\r\n\\]</span> 复杂度 <span class=\"math inline\">\\(O(n^3)\\)</span>（DFS 求连通块）或 <span class=\"math inline\">\\(O(n^3\\alpha(n^2))\\)</span>（并查集求连通块）。</p>\r\n<h3 id=\"tc12909\">TC12909</h3>\r\n<p>任意时刻局面的样子都是若干个连续段，我们只关心每个连续段的样子和它们在环上的相对顺序，而不关心空白的位置，因为只有知道前者的方案数，当前局面的方案数是可以算的。</p>\r\n<p>设 <span class=\"math inline\">\\(f_{i,j}\\)</span> 表示当前已经来了 <span class=\"math inline\">\\(i\\)</span> 个朋友，共构成 <span class=\"math inline\">\\(j\\)</span> 个连续段的方案数，转移分三种：</p>\r\n<ul>\r\n<li>第 <span class=\"math inline\">\\(i+1\\)</span> 个朋友新开一个连续段，<span class=\"math inline\">\\(f_{i+1,j+1} \\leftarrow j \\cdot f_{i,j}\\)</span>。</li>\r\n<li>第 <span class=\"math inline\">\\(i+1\\)</span> 个朋友加入一个连续段的开头或结尾，<span class=\"math inline\">\\(f_{i+1,j} \\leftarrow 2j \\cdot f_{i,j}\\)</span>。</li>\r\n<li>第 <span class=\"math inline\">\\(i+1\\)</span> 个朋友将两个连续段接在了一起，<span class=\"math inline\">\\(f_{i+1,j-1} \\leftarrow j \\cdot f_{i,j}\\)</span>。</li>\r\n</ul>\r\n<p>只需要保证 <span class=\"math inline\">\\(j \\le G\\)</span> 就行了，而不需要考虑连续段过多而导致前两种转移不合法，因为不合法了贡献系数一定为 <span class=\"math inline\">\\(0\\)</span>。</p>\r\n<p>最后是贡献系数，假设 <span class=\"math inline\">\\(K\\)</span> 个人到齐后有 <span class=\"math inline\">\\(x\\)</span> 个连续段，则贡献系数为 <span class=\"math inline\">\\(N\\binom{N-K-1}{K-1}\\)</span>。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(N^2)\\)</span>。</p>\r\n<h3 id=\"tc13692\">TC13692</h3>\r\n<p>搬家具的排列很像拓扑序，但又有点区别。</p>\r\n<p>枚举 <span class=\"math inline\">\\(S_1-S_2\\)</span> 路径上第一个选的点 <span class=\"math inline\">\\(u\\)</span>，再对每条边定向定向，然后就转化成了一张图的拓扑序，记这个东西为 <span class=\"math inline\">\\(f_u\\)</span>。当 <span class=\"math inline\">\\(u=S_1\\)</span> 或 <span class=\"math inline\">\\(S_2\\)</span> 时这张图就是树，否则这张图和树唯一的区别是点 <span class=\"math inline\">\\(u\\)</span> 有两个父亲，但这张图的拓扑序并不好算，单次复杂度只能做到 <span class=\"math inline\">\\(O(n^2)\\)</span>，无法通过。</p>\r\n<p>注意到这题只需要求出 <span class=\"math inline\">\\(S_1-S_2\\)</span> 路径上每个点 <span class=\"math inline\">\\(f\\)</span> 的总和。</p>\r\n<p>枚举 <span class=\"math inline\">\\(S_1-S_2\\)</span> 路径上的一条边 <span class=\"math inline\">\\((u,v)\\)</span>，然后断开 <span class=\"math inline\">\\((u,v)\\)</span>，再对每条边定向定向，然后就转化成了两棵树的拓扑序，这个是可以 <span class=\"math inline\">\\(O(n)\\)</span> 算的，发现算出来的正好是 <span class=\"math inline\">\\(f_u+f_v\\)</span>。</p>\r\n<p>最后把前一步骤的计算结果加起来，再加上 <span class=\"math inline\">\\(f_{S_1}+f_{S_2}\\)</span> 并除以二，即是答案。</p>\r\n<h3 id=\"agc017f\">AGC017F</h3>\r\n<p>容易想到用位向量来表示折线，<span class=\"math inline\">\\(0\\)</span> 表示这一步向左走，<span class=\"math inline\">\\(1\\)</span> 表示向右，容易得到折线的形态只有 <span class=\"math inline\">\\(2^{N-1}\\)</span> 种。</p>\r\n<p>由于相邻两条折线 <span class=\"math inline\">\\(S,T\\)</span> 的约束关系是 <span class=\"math inline\">\\(T\\)</span> 的每个前缀后都大于等于 <span class=\"math inline\">\\(S\\)</span> 的对应前缀和。</p>\r\n<p>不难想到轮廓线 <code>DP</code>，设 <span class=\"math inline\">\\(f_{i,j,k,S}\\)</span> 表示满足以下条件的方案数：</p>\r\n<ul>\r\n<li>第 <span class=\"math inline\">\\(i\\)</span> 条折线已经填了前 <span class=\"math inline\">\\(j\\)</span> 位。</li>\r\n<li><span class=\"math inline\">\\(S\\)</span> 的前 <span class=\"math inline\">\\(j\\)</span> 位是第 <span class=\"math inline\">\\(i\\)</span> 条折线的，后 <span class=\"math inline\">\\(N-1-j\\)</span> 位是第 <span class=\"math inline\">\\(i-1\\)</span> 条折线的。</li>\r\n<li>第 <span class=\"math inline\">\\(i-1\\)</span> 条折线前 <span class=\"math inline\">\\(j\\)</span> 位之和为 <span class=\"math inline\">\\(k\\)</span>。</li>\r\n</ul>\r\n<p>转移就枚举第 <span class=\"math inline\">\\(i\\)</span> 条折线第 <span class=\"math inline\">\\(j+1\\)</span> 为填什么。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^32^n)\\)</span>，无法通过。</p>\r\n<p>再次考虑相邻两条折线 <span class=\"math inline\">\\(S,T\\)</span> 的约束关系，发现从 <span class=\"math inline\">\\(S\\)</span> 到 <span class=\"math inline\">\\(T\\)</span> 是以下过程：</p>\r\n<ul>\r\n<li><p>把每个 <span class=\"math inline\">\\(1\\)</span> 都往前移或不动，并且不改变相对顺序。</p></li>\r\n<li><p>最后一个 <span class=\"math inline\">\\(1\\)</span> 之后的 <span class=\"math inline\">\\(0\\)</span> 任意变成 <span class=\"math inline\">\\(1\\)</span>。</p></li>\r\n</ul>\r\n<p>重新定义 <code>DP</code> 状态 <span class=\"math inline\">\\(f_{i,j,S}\\)</span> 表示正在确定了第 <span class=\"math inline\">\\(i\\)</span> 条折线，当前为 <span class=\"math inline\">\\(S\\)</span>，已经固定了前 <span class=\"math inline\">\\(j\\)</span> 个 <span class=\"math inline\">\\(1\\)</span> 的方案数。</p>\r\n<p>转移为：</p>\r\n<ul>\r\n<li>如果存在第 <span class=\"math inline\">\\(j+1\\)</span> 个 <span class=\"math inline\">\\(1\\)</span>，就枚举它往前移多少位，不能跨过前一个 <span class=\"math inline\">\\(1\\)</span>，这个枚举量平均是 <span class=\"math inline\">\\(O(1)\\)</span> 的。</li>\r\n<li>如果不存在，要么确定第 <span class=\"math inline\">\\(i\\)</span> 条折线，要么枚举最后一个 <span class=\"math inline\">\\(1\\)</span> 之后的一个 <span class=\"math inline\">\\(0\\)</span> 把它变成 <span class=\"math inline\">\\(1\\)</span>，这个枚举量平均也是 <span class=\"math inline\">\\(O(1)\\)</span> 的。</li>\r\n</ul>\r\n<p>当确定第 <span class=\"math inline\">\\(i\\)</span> 条折线后把不合法的状态置成 <span class=\"math inline\">\\(0\\)</span>。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^22^n)\\)</span>。</p>\r\n<h3 id=\"arc078d\">ARC078D</h3>\r\n<p>考虑从 <span class=\"math inline\">\\(1-n\\)</span> 只有一条点不重复的路径的充要条件：</p>\r\n<ul>\r\n<li>把这条唯一路径上的边都断开后路径上的点两两不连通。</li>\r\n</ul>\r\n<p>假设知道这条唯一路径是 <span class=\"math inline\">\\(u_1,u_2,\\cdots,u_k\\)</span>（<span class=\"math inline\">\\(u_1=1,u_k=n\\)</span>），要将点集划分成 <span class=\"math inline\">\\(k\\)</span> 份，第 <span class=\"math inline\">\\(i\\)</span> 份包含 <span class=\"math inline\">\\(u_k\\)</span>，最大化每个点集内部的边权之和。</p>\r\n<p>可以得到一个状压做法：</p>\r\n<ul>\r\n<li>设 <span class=\"math inline\">\\(g_S\\)</span> 表示两个端点都在点集 <span class=\"math inline\">\\(S\\)</span> 内部的所有边的权值之和。</li>\r\n<li>设 <span class=\"math inline\">\\(f_S\\)</span> 表示点集 <span class=\"math inline\">\\(S\\)</span> 已经被考虑时，最大的保留边权之和。</li>\r\n<li>转移为：<span class=\"math inline\">\\(f_S \\leftarrow f_{S-T} + g_T({T \\subseteq S})\\)</span>，其中 <span class=\"math inline\">\\(T\\)</span> 恰好包含一个关键点。</li>\r\n</ul>\r\n<p>由于并不知道这条路径，所以需要该一下 <code>DP</code> 状态：</p>\r\n<p>设 <span class=\"math inline\">\\(f_{i,S}\\)</span> 表示点集 <span class=\"math inline\">\\(S\\)</span> 已经被考虑且 <span class=\"math inline\">\\(1-i\\)</span> 只有一条路径时，最大的保留边权之和。</p>\r\n<p>转移为:</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(f_{i,S \\cup \\{i\\}} \\leftarrow f_{j,S} + w(j,i)(j \\not\\in S)\\)</span>。</li>\r\n<li><span class=\"math inline\">\\(f_{i,S\\cup T} \\leftarrow f_{i,S}+g_{T\\cup\\{i\\}}(S \\cap T = \\varnothing)\\)</span>。</li>\r\n</ul>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n3^n)\\)</span>。</p>\r\n<p>ARC068D</p>\r\n<p>AGC004F</p>\r\n<p>ARC097D</p>\r\n<p>TC10265</p>\r\n<p>TC9844</p>\r\n<p>ARC067C</p>\r\n<p>ARC097C</p>\r\n<h3 id=\"tc10727\">TC10727</h3>\r\n<p>根据“跳跳棋”的结论，所有的三元组构成二叉森林的形态，于是问题就转化成了：</p>\r\n<ul>\r\n<li>在一棵无限满二叉树上，从点 <span class=\"math inline\">\\(u\\)</span> 走到点 <span class=\"math inline\">\\(v\\)</span> 长度恰好为 <span class=\"math inline\">\\(k\\)</span> 的路径条数。</li>\r\n</ul>\r\n<p>直接算感觉很困难，考虑 <code>DP</code>，容易想到记录当前步数和所在点 <span class=\"math inline\">\\(x\\)</span>，但 <span class=\"math inline\">\\(x\\)</span> 显然是记不了的。考虑用关键信息来替代 <span class=\"math inline\">\\(x\\)</span>，记录 <span class=\"math inline\">\\(\\text{dis}(x,\\text{lca}(x,v)),\\text{dis}(v,\\text{lca}(x,v))\\)</span> 就够了。</p>\r\n<p>状态 <span class=\"math inline\">\\(f_{i,j,k}\\)</span> 为走了 <span class=\"math inline\">\\(i\\)</span> 步，<span class=\"math inline\">\\(\\text{dis}(x,\\text{lca}(x,v))=j,\\text{dis}(v,\\text{lca}(x,v))=k\\)</span> 的路径条数。</p>\r\n<p>转移为：</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(f_{i+1,j+1,k} \\leftarrow 2f_{i,j,k},f_{i+1,j-1,k} \\leftarrow f_{i,j,k}(j&gt;0)\\)</span></li>\r\n<li><span class=\"math inline\">\\(f_{i+1,1,k} \\leftarrow f_{i,0,k},f_{i+1,\\max(1-k,0),\\max(k-1,0)} \\leftarrow f_{i,0,k}(k&gt;0)\\)</span></li>\r\n<li><span class=\"math inline\">\\(f_{i+1,0,k+1} \\leftarrow f_{i,0,k}(k &lt; \\text{depth}_v)\\)</span></li>\r\n</ul>\r\n<p>TC10664</p>\r\n<p>TC10566</p>\r\n<p>TC10773</p>\r\n<h3 id=\"tc10993\">TC10993</h3>\r\n<p>容易发现把所有的环缩成点之后这张图就变成的一棵树，把 <span class=\"math inline\">\\(0\\)</span> 结点所在的环看出根。树边和环边分开考虑。</p>\r\n<p>对于树边，显然所有人都只会向上走，最坏情况就是 <span class=\"math inline\">\\(C\\)</span> 个人全在这条树边的下面，故每条树边需要 <span class=\"math inline\">\\(C\\)</span> 个急救仓。</p>\r\n<p>对于一个环，子树中的人都是先向上走到这个环上，再聚集到向上的树边的下端点，最后一起离开这个环。</p>\r\n<p>可以看出环之间是独立的，考虑一个环怎么做。对于一个环来说，最坏的情况肯定是 <span class=\"math inline\">\\(C\\)</span> 个人聚集在一个点上，然后这 <span class=\"math inline\">\\(C\\)</span> 个人再分成两批，一批从左边绕到终点，另一批从右边绕到终点，要求 <span class=\"math inline\">\\(\\min 左边 + \\min 右边 \\ge C\\)</span>。</p>\r\n<p>方法是 <code>DP</code>，设 <span class=\"math inline\">\\(f_{i,j}\\)</span> 表示已经确定了从终点开始向左的 <span class=\"math inline\">\\(i\\)</span> 条边，它们的 <span class=\"math inline\">\\(\\min\\)</span> 为 <span class=\"math inline\">\\(j\\)</span> 时的最小代价。</p>\r\n<p>转移时枚举第 <span class=\"math inline\">\\(i+1\\)</span> 条边的急救仓数 <span class=\"math inline\">\\(k\\)</span>：<span class=\"math inline\">\\(f_{i+1,\\min(j,k)} \\leftarrow f_{i,j}(j+k \\ge C)\\)</span>。因为 <span class=\"math inline\">\\(j\\)</span> 只会变小，所以对于第 <span class=\"math inline\">\\(i+1\\)</span> 条之后的边，它们的限制会更严，所以转移只需要使第 <span class=\"math inline\">\\(i+1\\)</span> 条边满足限制。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(nC^2)\\)</span>，无法通过。</p>\r\n<p>考虑将这个转移拆开：</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(f_{i+1,j} \\leftarrow f_{i,j}(k \\ge \\max(j,C-j))\\)</span>，此时肯定要最小化 <span class=\"math inline\">\\(k\\)</span>。</li>\r\n<li><span class=\"math inline\">\\(f_{i+1,k} \\leftarrow f_{i,j}(k \\le j \\le C -k)\\)</span>，考虑 <span class=\"math inline\">\\(k\\)</span> 从小到大时，可行的 <span class=\"math inline\">\\(j\\)</span> 组成的区间在扩展，容易做到均摊 <span class=\"math inline\">\\(O(1)\\)</span> 转移。</li>\r\n</ul>\r\n<p>复杂度 <span class=\"math inline\">\\(O(nC)\\)</span>。</p>\r\n<p>TC10741</p>\r\n<p>TC10854</p>\r\n<p>TC10848</p>\r\n<p>TC10902</p>\r\n<p>TC10737</p>\r\n<p>TC10758</p>\r\n<p>TC11003</p>\r\n<p>TC11026</p>\r\n<p>TC11032</p>\r\n<p>TC10748</p>\r\n<p>TC11213</p>\r\n<p>TC11305</p>\r\n<p>TC12620</p>\r\n<p>TC10758</p>\r\n<p>TC11032</p>\r\n<h3 id=\"gym102391e\">Gym102391E</h3>\r\n<p>先二分一个直径 <span class=\"math inline\">\\(D\\)</span>，建出圆方树，设 <span class=\"math inline\">\\(f_u\\)</span> 表示：</p>\r\n<ul>\r\n<li>已经确定了 <span class=\"math inline\">\\(u\\)</span> 子树内的所有方点表示的环怎么断。</li>\r\n<li>子树内直径不超过 <span class=\"math inline\">\\(D\\)</span>。</li>\r\n<li><span class=\"math inline\">\\(f_u\\)</span> 为子树内到 <span class=\"math inline\">\\(u\\)</span>（圆点）/ <span class=\"math inline\">\\(fa_u\\)</span>（方点）的最大距离。</li>\r\n</ul>\r\n<p>转移分两种：</p>\r\n<ul>\r\n<li><p><span class=\"math inline\">\\(u\\)</span> 为圆点，判断一下儿子 <span class=\"math inline\">\\(f\\)</span> 最大的两个之和是否小于等于 <span class=\"math inline\">\\(D\\)</span>，大于 <span class=\"math inline\">\\(D\\)</span> 说明 <span class=\"math inline\">\\(D\\)</span> 小了，停止 <code>DP</code>，否则继承儿子 <span class=\"math inline\">\\(f\\)</span> 的最大值。</p></li>\r\n<li><p><span class=\"math inline\">\\(u\\)</span> 为方点，设 <span class=\"math inline\">\\(fa\\)</span> 为 <span class=\"math inline\">\\(u\\)</span> 的父亲，枚举一下断该环上的哪条边，然后算一下子树内直径，直径有两种可能情况。</p>\r\n<ul>\r\n<li>一个儿子 <span class=\"math inline\">\\(v\\)</span> 到断边的较大环上距离 <span class=\"math inline\">\\(+f_v\\)</span>。</li>\r\n<li>两个儿子 <span class=\"math inline\">\\(v_1,v_2\\)</span> 在不跨过断边时的环上距离 <span class=\"math inline\">\\(+f_{v_1}+f_{v_2}\\)</span>。</li>\r\n</ul>\r\n<p>如果直径大于 <span class=\"math inline\">\\(D\\)</span>，就说明这条边不能断，否则</p>\r\n<p><span class=\"math inline\">\\(f_u \\leftarrow \\max\\limits_vf_v+\\)</span> <span class=\"math inline\">\\(v\\)</span> 在不跨过断边时到 <span class=\"math inline\">\\(fa\\)</span> 的环上距离。</p>\r\n<p><span class=\"math inline\">\\(f_u \\leftarrow\\)</span> 断边到 <span class=\"math inline\">\\(fa\\)</span> 的环上距离。</p>\r\n<p>直接转移复杂度为 <span class=\"math inline\">\\(O(儿子数量^2)\\)</span>，记录一些儿子前后缀信息就可以优化到线性，以前缀为例：</p>\r\n<ul>\r\n<li>第 <span class=\"math inline\">\\(i\\)</span> 个儿子向左绕到 <span class=\"math inline\">\\(fa\\)</span> 的距离。</li>\r\n<li>前 <span class=\"math inline\">\\(i\\)</span> 个儿子子树内在不跨过 <span class=\"math inline\">\\(fa\\)</span> 时到第 <span class=\"math inline\">\\(i\\)</span> 个儿子的最大距离。</li>\r\n<li>前 <span class=\"math inline\">\\(i\\)</span> 个儿子子树内和断边向左绕到 <span class=\"math inline\">\\(fa\\)</span> 的最大距离。</li>\r\n<li>前 <span class=\"math inline\">\\(i\\)</span> 个儿子子树内的直径。</li>\r\n</ul></li>\r\n</ul>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n\\log V)\\)</span>。</p>\r\n<h3 id=\"zoj3970\">ZOJ3970</h3>\r\n<p>考虑在操作序列中有相邻的加减操作并且加操作在前面，应用如下调整：</p>\r\n<ul>\r\n<li>如果两个操作区间无交，则交换操作顺序。</li>\r\n<li>如果有交，那么相交的部分相当于什么都没做，直接去掉相交部分，变成上一种情况。</li>\r\n</ul>\r\n<p>经过有限步调整，操作序列变成了若干减后若干加。</p>\r\n<p>假设已知第 <span class=\"math inline\">\\(i\\)</span> 个位置需要进行 <span class=\"math inline\">\\(a_i\\)</span> 次减操作，那么最小操作次数为 <span class=\"math inline\">\\(\\sum_{i=2}^n\\max(0,a_i-a_{i-1})\\)</span>。</p>\r\n<p>加操作同理。</p>\r\n<p>设 <span class=\"math inline\">\\(pre_i\\)</span> 表示上一个满足 <span class=\"math inline\">\\(t_j&gt;0\\)</span> 的位置 <span class=\"math inline\">\\(j\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(f_{i,j}\\)</span> 表示考虑了前 <span class=\"math inline\">\\(i\\)</span> 个位置，其中第 <span class=\"math inline\">\\(i\\)</span> 个位置被 <span class=\"math inline\">\\(j\\)</span> 个减操作覆盖时的最小操作次数。</p>\r\n<p>转移为：</p>\r\n<p><span class=\"math display\">\\[\r\nf_{i,j}=\\min_kf_{pre_i,k}+\\max(0,j-k)+\\max(0,t_i-s_i+j-t_{pre_i}+s_{pre_i}-k)+\\max(0,\\max_{pre_i&lt;x&lt;i}s_x-\\max(j,k))\r\n\\]</span></p>\r\n<p>其中最后一项表示将区间 <span class=\"math inline\">\\((pre_i,i)\\)</span> 减成 <span class=\"math inline\">\\(0\\)</span> 需要的额外减操作次数。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(nV^2)\\)</span>，无法通过。</p>\r\n<p>打表发现函数 <span class=\"math inline\">\\(f_i\\)</span> 分三段，每一段都是一次函数，并且斜率递增。</p>\r\n<p>注意到转移方程后面的每一项都是分段一次函数，因此它们的和也是分段一次函数，所以 <span class=\"math inline\">\\(\\min\\)</span> 只会在拐点处取到，这样就可以 <span class=\"math inline\">\\(O(1)\\)</span> 算出一个 <span class=\"math inline\">\\(f_{i,j}\\)</span>。</p>\r\n<p>求函数 <span class=\"math inline\">\\(f_i\\)</span> 的两个拐点？考虑分治，对于一个区间 <span class=\"math inline\">\\([l,r]\\)</span>，如果 <span class=\"math inline\">\\(f_{i,l},f_{i,mid},f_{i,r}\\)</span> 等差，说明 <span class=\"math inline\">\\([l,r]\\)</span> 一定在同一个段，否则递归左右两半。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n\\log V)\\)</span>。</p>\r\n<h3 id=\"zoj3989\">ZOJ3989</h3>\r\n<p>为了方便处理，先对所有点旋转一个角度，使所有点横坐标两两不同。</p>\r\n<p>对于一个三角剖分，考虑一个维护折线过程：</p>\r\n<ul>\r\n<li>初始为下凸包。</li>\r\n<li>每次将折线上一条边换成它上方三角形的另外两条边，要保证这两条边不在折线上。</li>\r\n<li>或者将折线上在同一三角形内的相邻两条边换成第三条边，要保证三角形在原来两条边的上方。</li>\r\n<li>最终为上凸包。</li>\r\n</ul>\r\n<p>这个过程会遍历三角剖分中的所有边，容易想到把折线作为 <code>DP</code> 状态，但折线数量太大了。</p>\r\n<p>给折线加一条限制：折线上的拐点横坐标递增。但这样可能会导致折线找不到合法的转移。</p>\r\n<p>事实上这种情况不存在：</p>\r\n<ul>\r\n<li>对于二换一的转移，显然合法，所以考虑只能进行一换二的时候。</li>\r\n<li>对于最左边的折线，假设它的横坐标区间为 <span class=\"math inline\">\\([l,r]\\)</span>，进行一换二后新的拐点横坐标为 <span class=\"math inline\">\\(x\\)</span>，要么 <span class=\"math inline\">\\(l &lt; x &lt; r\\)</span>，这时可以直接转移，否则 <span class=\"math inline\">\\(x &gt; r\\)</span>，即它上方的三角形向右偏。</li>\r\n<li>对于最右边的折线，如果它不能直接转移，同理可以得到它上方的三角形向左偏。</li>\r\n<li>最左边的折线上方的三角形向右偏，最右边的折线上方的三角形向左偏，故中间一定存在一条折线可以进行合法的一换二。</li>\r\n</ul>\r\n<p>这样的折线就可以用拐点集合来表示了，状态数为 <span class=\"math inline\">\\(2^{n-2}\\)</span>，转移时不能跨过点。</p>\r\n<p>这样就解决了最优化问题，但计数会算重。</p>\r\n<p>定义一次转移的「横坐标」为它涉及到的两个或三个点中横坐标的最大值，所有当前能进行的转移的「横坐标」一定两两不同。</p>\r\n<p>考虑将折线的转移序列标准化，使得转移序列与三角剖分一一对应：每次进行「横坐标」最大的合法转移。</p>\r\n<p>另一个等价的定义是每次转移的「横坐标」单调不减。</p>\r\n<p>设 <span class=\"math inline\">\\(f_{S,i}\\)</span> 表示当前折线为 <span class=\"math inline\">\\(S\\)</span>，上次转移的「横坐标」为 <span class=\"math inline\">\\(i\\)</span> 时的最小代价及其方案数。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^22^n)\\)</span>。</p>\r\n<h3 id=\"来源不明的题\">来源不明的题</h3>\r\n<blockquote>\r\n<p>给定一个二分图，左右各 <span class=\"math inline\">\\(n\\)</span> 个点。对于左部点的一个集合 <span class=\"math inline\">\\(S\\)</span>，设 <span class=\"math inline\">\\(f(S)\\)</span> 表示与 <span class=\"math inline\">\\(S\\)</span> 中至少一个点相邻的右部点集合。判断是否存在一个集合 <span class=\"math inline\">\\(S \\ne \\{1,2,\\cdots,n\\}\\)</span>，使得 <span class=\"math inline\">\\(|f(S)| \\le |S|\\)</span>，输出方案。</p>\r\n<p><span class=\"math inline\">\\(n, m \\le 10^5\\)</span></p>\r\n</blockquote>\r\n<p>Hall 定理：一个二分图存在完美匹配的充要条件是对于任意 <span class=\"math inline\">\\(S\\)</span>，<span class=\"math inline\">\\(|f(S)| \\ge |S|\\)</span>。</p>\r\n<p>如果不存在完美匹配，就存在 <span class=\"math inline\">\\(S\\)</span> 使得 <span class=\"math inline\">\\(|f(S)| \\le |S|\\)</span>，考虑求出一个这样的 <span class=\"math inline\">\\(S\\)</span>。</p>\r\n<p>先求出一个最大匹配，找一个未匹配点为根建匈牙利树，树上所有的左部点就是 <span class=\"math inline\">\\(S\\)</span>。</p>\r\n<p>如果存在完美匹配，解的形式一定是一个左部点集合 <span class=\"math inline\">\\(S\\)</span>，它们的匹配点集合为 <span class=\"math inline\">\\(f(S)\\)</span>。</p>\r\n<p>所以如果选了右部点 <span class=\"math inline\">\\(v\\)</span>，就一定会选它的匹配点 <span class=\"math inline\">\\(\\text{match}(v)\\)</span>。</p>\r\n<p>把原来的每条边 <span class=\"math inline\">\\((u,v)\\)</span> 换成 <span class=\"math inline\">\\((u,\\text{match}(v))\\)</span> 再求出拓扑序最小的强连通分量即可。</p>\r\n<h3 id=\"arc107f\">ARC107F</h3>\r\n<p>由于一个连通块的贡献带有绝对值符号，不太好处理，变成枚举符号不会影响答案。</p>\r\n<p>现在变成如下问题：</p>\r\n<ul>\r\n<li>每个点有三种状态：正、负、删，代价分别为 <span class=\"math inline\">\\(-B_i,A_i,B_i\\)</span>。</li>\r\n<li>对于相邻的点 <span class=\"math inline\">\\(u,v\\)</span>，如果它们的状态都不是删，就必须相同。</li>\r\n<li>求最小代价。</li>\r\n</ul>\r\n<p>想到最小割模型，由于每个点有三种状态，所以把每个点 <span class=\"math inline\">\\(i\\)</span> 变成两个点 <span class=\"math inline\">\\(U_i,V_i\\)</span>。</p>\r\n<p>用 <span class=\"math inline\">\\((S,U_i),(U_i,V_i),(V_i,T)\\)</span> 三条边表示三种状态。</p>\r\n<p>令它们的代价分别为 <span class=\"math inline\">\\(\\infty-B_i,\\infty+A_i,\\infty+B_i\\)</span>，那么这三条边一定恰好割掉一条。</p>\r\n<p>对于相邻的点 <span class=\"math inline\">\\((i,j)\\)</span>，有两个约束关系：</p>\r\n<ul>\r\n<li>不能同时割 <span class=\"math inline\">\\((S,U_i),(V_j,T)\\)</span>，如果要割 <span class=\"math inline\">\\((S,U_i)\\)</span>，说明 <span class=\"math inline\">\\(U_i\\)</span> 能到达 <span class=\"math inline\">\\(T\\)</span>，如果要割 <span class=\"math inline\">\\((V_j,T)\\)</span>，说明 <span class=\"math inline\">\\(S\\)</span> 能到达 <span class=\"math inline\">\\(V_j\\)</span>，所以连一条 <span class=\"math inline\">\\((V_j,U_i)\\)</span>，代价为 <span class=\"math inline\">\\(\\infty^2\\)</span> 的边。</li>\r\n<li>不能同时割 <span class=\"math inline\">\\((S,U_j),(V_i,T)\\)</span>，同理连一条 <span class=\"math inline\">\\((V_i,U_j)\\)</span>，代价为 <span class=\"math inline\">\\(\\infty^2\\)</span> 的边。</li>\r\n</ul>\r\n<p>最后答案为最小割减去 <span class=\"math inline\">\\(n\\infty\\)</span>。</p>\r\n<figure>\r\n<img src=\"https://i.loli.net/2021/09/08/4ragjEUYIev5wot.png\" alt=\".png\" /><figcaption aria-hidden=\"true\">.png</figcaption>\r\n</figure>\r\n<h3 id=\"gym101471j\">Gym101471J</h3>\r\n<p>CF1307G</p>\r\n<h3 id=\"cf1307f\">CF1307F</h3>\r\n<p>P3980</p>\r\n<p>CF1368H2</p>\r\n<h3 id=\"agc038e\">AGC038E</h3>\r\n<p>先考虑一个弱化版问题：<span class=\"math inline\">\\(B_i=1\\)</span> 时怎么做。</p>\r\n<p>这是一个经典问题，一般做法有两种：状压 <code>DP</code> 和 <code>min-max</code> 容斥。</p>\r\n<p>它们的复杂度都是 <span class=\"math inline\">\\(O(n2^n)\\)</span> 或 <span class=\"math inline\">\\(O(2^n)\\)</span> 的，然而这题数据范围是 <span class=\"math inline\">\\(400\\)</span>，说明需要用的此题的特殊性质。</p>\r\n<p>通过 <code>min-max</code> 容斥可以得出答案为 <span class=\"math display\">\\[\r\n\\sum_{S}(-1)^{|S|}\\frac{\\sum_{i=1}^n A_i}{\\sum_{i \\in S} A_i}\r\n\\]</span> 发现分母是小于 <span class=\"math inline\">\\(400\\)</span> 的非负整数！可以用背包数出每种分母的贡献 <span class=\"math inline\">\\(\\sum_S(-1)^{|S|}\\)</span>。</p>\r\n<p>设 <span class=\"math display\">\\[\r\nf_{i,j} = \\sum_{S \\subseteq \\{1,2,\\cdots,i\\}}(-1)^{|S|}[\\sum_{i \\in S}A_i=j]\r\n\\]</span> 转移为 <span class=\"math inline\">\\(f_{i,j}=f_{i-1,j}-f_{i-1,j-A_i}\\)</span>，答案为 <span class=\"math display\">\\[\r\n(\\sum_{i=1}^n A_i)\\sum_{i=0}^{400}\\frac{f_{n,i}}i\r\n\\]</span> 现在回到原问题，还是考虑 <code>min-max</code> 容斥，答案就是 <span class=\"math display\">\\[\r\n\\sum_{S}(-1)^{|S|}[S 中第一次有元素达到目标时的期望步数]\r\n\\]</span></p>\r\n<p>设 <span class=\"math inline\">\\(p_i=\\frac{A_i}{\\sum_{j \\in S}A_j}\\)</span>。</p>\r\n<p>根据期望的线性性质，期望步数可以分摊到经过每个状态上。所以后面那坨东西为： <span class=\"math display\">\\[\r\n\\begin{aligned}\r\n&amp;\\sum_{\\forall i \\in S,c_i&lt;B_i}[到达c状态的概率]\\cdot[离开c状态的期望步数]\\\\\r\n&amp;=\\sum_{\\forall i \\in S,c_i&lt;B_i}\\frac{(\\sum_{i \\in S}c_i)!}{\\prod_{i \\in S} c_i!}\\prod_{i \\in S}p_i^{c_i} \\cdot \\frac{\\sum_{i=1}^n A_i}{\\sum_{i \\in S} A_i}\\\\\r\n&amp;=\\sum_{\\forall i \\in S,c_i&lt;B_i}\\frac{(\\sum_{i \\in S}c_i)!}{\\prod_{i \\in S} c_i!}\\prod_{i \\in S}A_i^{c_i} \\cdot \\frac{\\sum_{i=1}^n A_i}{(\\sum_{i \\in S} A_i)^{(\\sum_{i \\in S}c_i)+1}}\r\n\\end{aligned}\r\n\\]</span></p>\r\n<p>把前面说的东西拼起来，答案为： <span class=\"math display\">\\[\r\n\\begin{aligned}\r\n&amp;\\sum_S(-1)^{|S|}\\sum_{\\forall i \\in S,c_i&lt;B_i}\\frac{(\\sum_{i \\in S}c_i)!}{\\prod_{i \\in S} c_i!}\\prod_{i \\in S}A_i^{c_i} \\cdot \\frac{\\sum_{i=1}^n A_i}{(\\sum_{i \\in S} A_i)^{(\\sum_{i \\in S}c_i)+1}}\\\\\r\n&amp;=(\\sum_{i=1}^n A_i)\\sum_S(-1)^{|S|}\\sum_{\\forall i \\in S,c_i&lt;B_i}\\frac{(\\sum_{i \\in S}c_i)!}{(\\sum_{i \\in S} A_i)^{(\\sum_{i \\in S}c_i)+1}} \\cdot \\prod_{i \\in S}\\frac{A_i^{c_i}}{c_i!}\r\n\\end{aligned}\r\n\\]</span></p>\r\n<p>式子中比较难转移的东西就是 <span class=\"math inline\">\\(\\sum_{i \\in S} A_i\\)</span> 和 <span class=\"math inline\">\\(\\sum_{i \\in S}c_i\\)</span>，把它们记状态里就行了。</p>\r\n<p>状态为 <span class=\"math display\">\\[\r\nf_{i,j,k}=\\sum_{S \\subseteq \\{1,2,\\cdots,i\\}}(-1)^{|S|}\\sum_{\\forall i \\in S,c_i&lt;B_i}\\prod_{i \\in S}\\frac{A_i^{c_i}}{c_i!}[\\sum_{i \\in S} A_i=j \\land \\sum_{i \\in S}c_i=k]\r\n\\]</span> 转移为 <span class=\"math display\">\\[\r\nf_{i,j,k}=f_{i-1,j,k}-\\sum_{c=0}^{B_i-1}f_{i-1,j-A_i,k-c}\\frac{A_i^c}{c!}\r\n\\]</span> 答案为 <span class=\"math display\">\\[\r\n(\\sum_{i=1}^n A_i)\\sum_{i=0}^{400}\\sum_{j=0}^{400}\\frac{j!f_{n,i,j}}{i^{j+1}}\r\n\\]</span> 分析一下时间复杂度，虽然每次转移的枚举量是 <span class=\"math inline\">\\(B_i\\)</span>，但由于 <span class=\"math inline\">\\(\\sum_{i=1}^nB_i\\)</span> 是 <span class=\"math inline\">\\(O(n)\\)</span> 的，所以总复杂度是 <span class=\"math inline\">\\(O(n^3)\\)</span>，空间复杂度可以用滚动数组优化到 <span class=\"math inline\">\\(O(n^2)\\)</span>。</p>\r\n<hr />\r\n<h3 id=\"agc037d\">AGC037D</h3>\r\n<p>考虑第三次操作前第 <span class=\"math inline\">\\(i\\)</span> 行一定由 <span class=\"math inline\">\\((i-1)m+1\\)</span> 到 <span class=\"math inline\">\\(im\\)</span> 构成，记 <span class=\"math inline\">\\((i-1)m+1\\)</span> 到 <span class=\"math inline\">\\(im\\)</span> 的颜色为 <span class=\"math inline\">\\(i\\)</span>。</p>\r\n<p>第二次操作的目标就是使颜色为 <span class=\"math inline\">\\(i\\)</span> 的数在第 <span class=\"math inline\">\\(i\\)</span> 行，所以第一次操作的目标就是使每一列 <span class=\"math inline\">\\(n\\)</span> 种都颜色各有一个。</p>\r\n<p>先考虑如何确定第一列的颜色，这显然是一个行与颜色的完美匹配问题。由于任意选 <span class=\"math inline\">\\(i\\)</span> 行，这 <span class=\"math inline\">\\(i\\)</span> 行的颜色数至少为 <span class=\"math inline\">\\(i\\)</span>，根据 Hall 定理，一定存在完美匹配。每一列依次求完美匹配就可以构造出一组解。</p>\r\n<p>然后第二三次操作就非常简单了，复杂度 <span class=\"math inline\">\\(O(n^4)\\)</span>。</p>\r\n<h3 id=\"agc043d\">AGC043D</h3>\r\n<p>考虑什么样的排列 <span class=\"math inline\">\\(P\\)</span> 是能被造出来的。</p>\r\n<p>考虑构造过程：每次选择一个头元素最小的序列 <span class=\"math inline\">\\(A_i\\)</span>，删除 <span class=\"math inline\">\\(A_i\\)</span> 开头单调递减的一段，再继续找头元素最小的序列。</p>\r\n<p>这启发我们把同时删除的元素看成一段，分段具有如下性质：</p>\r\n<ul>\r\n<li>每一段是长度不超过 <span class=\"math inline\">\\(3\\)</span> 的单调递减序列。</li>\r\n<li>每一段的头元素递增。</li>\r\n<li>长度为 <span class=\"math inline\">\\(1\\)</span> 的段不少于长度为 <span class=\"math inline\">\\(2\\)</span> 的段（因为每一个长度为 <span class=\"math inline\">\\(2\\)</span> 的段必须要对应一个长度为 <span class=\"math inline\">\\(1\\)</span> 的段来一起构成一个 <span class=\"math inline\">\\(A_i\\)</span>）。</li>\r\n</ul>\r\n<p>同时，只要满足上面三个条件，这个 <span class=\"math inline\">\\(P\\)</span> 就能被造出来的，将每个段配配对就可以得到一个生成 <span class=\"math inline\">\\(P\\)</span> 的 <span class=\"math inline\">\\(A\\)</span> 序列。</p>\r\n<p>由于 <span class=\"math inline\">\\(P\\)</span> 和分段内容是一一对应的，问题转化为对合法的分段内容计数。</p>\r\n<p>枚举长度分别为 <span class=\"math inline\">\\(1,2,3\\)</span> 的段数 <span class=\"math inline\">\\(cnt_1,cnt_2,cnt_3\\)</span>，满足 <span class=\"math inline\">\\(cnt_1+2cnt_2+3cnt_3=3n\\)</span> 和 <span class=\"math inline\">\\(cnt_1 \\ge cnt_2\\)</span>。</p>\r\n<p>贡献即为 <span class=\"math display\">\\[\r\n\\binom{cnt_1+cnt_2+cnt_3}{cnt_1,cnt_2,cnt_3}\\frac{(3n)!}{(cnt_1+cnt_2+cnt_3)!2^{cnt_2}3^{cnt_3}}\r\n\\]</span> 前面的组合数是划分出每一段的方案数，除以 <span class=\"math inline\">\\((cnt_1+cnt_2+cnt_3)!\\)</span> 是保证每一段的头元素递增，除以 <span class=\"math inline\">\\(2^{cnt_2}3^{cnt_3}\\)</span> 是保证每一段的头元素为最大值。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^2)\\)</span>。</p>\r\n<h3 id=\"agc049d\">AGC049D</h3>\r\n<p>考虑如何描述一个非负凸序列。</p>\r\n<ul>\r\n<li>枚举最小值 <span class=\"math inline\">\\(c\\)</span>，以及取到最小值的第一个位置 <span class=\"math inline\">\\(i\\)</span>，令 <span class=\"math inline\">\\(A=(c,c,\\cdots,c)\\)</span>。</li>\r\n<li>多次选一个位置 <span class=\"math inline\">\\(j&lt;i\\)</span>，将 <span class=\"math inline\">\\(A_j,A_{j-1},A_{j-2},\\cdots,A_1\\)</span> 分别加上 <span class=\"math inline\">\\(1,2,3,\\cdots,j\\)</span>。</li>\r\n<li>多次选一个位置 <span class=\"math inline\">\\(j&gt;i\\)</span>，将 <span class=\"math inline\">\\(A_j,A_{j+1},A_{j+2},\\cdots,A_n\\)</span> 分别加上 <span class=\"math inline\">\\(1,2,3,\\cdots,n-j+1\\)</span>，若 <span class=\"math inline\">\\(i&gt;1\\)</span> 则 <span class=\"math inline\">\\(i-1\\)</span> 必须被选到一次。</li>\r\n</ul>\r\n<p>第三步可以事先选 <span class=\"math inline\">\\(i-1\\)</span> 一次，对总和产生 <span class=\"math inline\">\\(\\frac {i(i-1)}2\\)</span> 的贡献，然后第三步就和第二步一样了。</p>\r\n<p>先枚举 <span class=\"math inline\">\\(i\\)</span>，第二三步本质上就是完全背包，由于体积的特性，有用的物品数量是 <span class=\"math inline\">\\(O(\\sqrt m)\\)</span> 的，可以 <span class=\"math inline\">\\(O(m\\sqrt m)\\)</span> 预处理出背包数组，然后 <span class=\"math inline\">\\(O(\\frac mn)\\)</span> 枚举 <span class=\"math inline\">\\(c\\)</span>，计算贡献。</p>\r\n<p>这样做的复杂度为 <span class=\"math inline\">\\(O(nm\\sqrt m)\\)</span>，无法通过。</p>\r\n<p>考虑 <span class=\"math inline\">\\(i \\rightarrow i+1\\)</span> 时，物品最多删一个，也最多添一个，并且总改变次数是 <span class=\"math inline\">\\(O(\\sqrt m)\\)</span> 的，动态维护背包即可做到 <span class=\"math inline\">\\(O(m\\sqrt m)\\)</span> 的复杂度。</p>\r\n<h3 id=\"agc050d\">AGC050D</h3>\r\n<p>设 <span class=\"math inline\">\\(f_{i,a,b,j}\\)</span> 表示从以下局面出发，还没有赢的人中从左到右第 <span class=\"math inline\">\\(j\\)</span> 个人最终赢的概率。</p>\r\n<ul>\r\n<li>有 <span class=\"math inline\">\\(a\\)</span> 个人还没有赢且已经排除了 <span class=\"math inline\">\\(i\\)</span> 个错误选项。</li>\r\n<li>有 <span class=\"math inline\">\\(b\\)</span> 个人还没有赢且已经排除了 <span class=\"math inline\">\\(i+1\\)</span> 个错误选项。</li>\r\n</ul>\r\n<p>转移就枚举这 <span class=\"math inline\">\\(a\\)</span> 个人中下一个人是赢还是输即可（这里 <span class=\"math inline\">\\(f_{i,0,b,j}=f_{i+1,b,0,j}\\)</span>）。</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(f_{i,a,b,j}=win \\cdot f_{i,a-1,b,j-[j&gt;b]} + lost \\cdot f_{i,a-1,b+1,j}(j\\ne b+1)\\)</span></li>\r\n<li><span class=\"math inline\">\\(f_{i,a,b,b+1}=win + lost \\cdot f_{i,a-1,b+1,b+1}(j\\le b)\\)</span></li>\r\n</ul>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^4)\\)</span>。</p>\r\n<h3 id=\"noi2021day1t1\">NOI2021Day1T1</h3>\r\n<p>如果把修改操作看成把路径上的点染成一种新的颜色，那么重边就是两端同色的边，轻边就是两端异色的边。</p>\r\n<p>所以询问操作就是查询路径上两端同色的边数，这个可以用树链剖分和线段树维护。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n\\log^2n)\\)</span>。</p>\r\n<h3 id=\"noi2021day1t2\">NOI2021Day1T2</h3>\r\n<p>当 <span class=\"math inline\">\\(k=2\\)</span> 时，交点就是逆序对，自然联想到行列式，发现答案就是行列式。</p>\r\n<p>当 <span class=\"math inline\">\\(n_1=n_2=\\cdots=n_k\\)</span> 时，答案就是把每相邻两层邻接矩阵的行列式乘起来。</p>\r\n<p>对于原问题，答案就是相邻两层邻接矩阵乘积的行列式。</p>\r\n<p>证明：</p>\r\n<ul>\r\n<li><p>对于一个合法的路径组，考虑两条路径 <span class=\"math inline\">\\((P_1,P_2,\\cdots,P_k)\\)</span> 和 <span class=\"math inline\">\\((Q_1,Q_2,\\cdots,Q_k)\\)</span>，两条路径有奇数个交点 <span class=\"math inline\">\\(\\iff\\)</span> <span class=\"math inline\">\\((P_1,Q_1)\\)</span> 和 <span class=\"math inline\">\\((P_k,Q_k)\\)</span> 逆序。</p></li>\r\n<li><p>对于一个不合法的路径组，考虑对其进行以下变换：</p>\r\n<ul>\r\n<li>找到最靠上的一个点被覆盖多次，多个在同一层时取最靠左的一个。</li>\r\n<li>找到经过此点的编号最小两条路径，将它们的下一半交换。</li>\r\n</ul>\r\n<p>这样的变换是相互的，并且会使每条路径头尾形成的逆序对总数的奇偶性改变，故不合法的路径组的贡献会两两抵消。</p></li>\r\n</ul>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^4)\\)</span>。</p>\r\n<h3 id=\"noi2021day1t3\">NOI2021Day1T3</h3>\r\n<p>容易发现对于一次询问，答案为 <span class=\"math inline\">\\(s\\)</span> 能到达且能到达 <span class=\"math inline\">\\(t\\)</span> 的点数。</p>\r\n<p>由于研究的是可达性，先进行强连通分量缩点。</p>\r\n<p>再考虑限制：若 <span class=\"math inline\">\\(x\\Rightarrow z\\)</span> 且 <span class=\"math inline\">\\(y\\Rightarrow z\\)</span>，则 <span class=\"math inline\">\\(x\\Rightarrow y\\)</span> 或 <span class=\"math inline\">\\(y\\Rightarrow x\\)</span>。这说明能到达 <span class=\"math inline\">\\(z\\)</span> 的点在一条链上，进一步，整张图是一棵树加上若干条从祖先到儿子的边。</p>\r\n<p>如何求出这棵树？一个点的父亲就是所有连向它的点中拓扑序最大的一个，注意所完点后编号就是拓扑序的逆序。</p>\r\n<p>对于加边操作，对 <span class=\"math inline\">\\(s,t\\)</span> 以及所有边的端点建虚树，统计一下虚树上的点和边的贡献即可。</p>\r\n<p>由于此题卡常，树剖求 <code>LCA</code> 效果最佳，用邻接链表存虚树，不能用 <code>vector</code>。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n+q\\log n)\\)</span>。</p>\r\n<h3 id=\"noi2021day2t1\">NOI2021Day2T1</h3>\r\n<p><span class=\"math inline\">\\(k \\le 15\\)</span> 是此题的突破点，这意味着把 <span class=\"math inline\">\\(256\\)</span> 平均分成 <span class=\"math inline\">\\(16\\)</span> 段后必然有一段是完全相同的。</p>\r\n<p>枚举完全相同的是哪一段，确定了 <span class=\"math inline\">\\(16\\)</span> 位后，期望只有 <span class=\"math inline\">\\(7\\)</span> 个符合条件的串，对它们用 <code>popcount</code> 检验即可。</p>\r\n<h3 id=\"noi2021day2t2\">NOI2021Day2T2</h3>\r\n<p><del>结论题。</del></p>\r\n<p>假设已知 <span class=\"math inline\">\\(a\\)</span> 序列，怎么算答案。</p>\r\n<p>维护最后一项 <span class=\"math inline\">\\(a_n\\)</span>​ 的分子分母 <span class=\"math inline\">\\(x,y\\)</span>​，一次变换后 <span class=\"math inline\">\\(\\frac {x&#39;}{y&#39;}=a_{n-1}+\\frac 1{a_n}=\\frac {a_{k-1}x+y}x\\)</span>​。发现不会发生约分，并且相当于对 <span class=\"math inline\">\\((x,y)\\)</span>​​ 做了一个线性变换： <span class=\"math display\">\\[\r\n\\begin{bmatrix}\r\nx&#39;\\\\\r\ny&#39;\r\n\\end{bmatrix}\r\n=\r\n\\begin{bmatrix}\r\na_{n-1}&amp;1\\\\\r\n1&amp;0\r\n\\end{bmatrix}\r\n\\begin{bmatrix}\r\nx\\\\\r\ny\r\n\\end{bmatrix}\r\n\\]</span> 算出 <span class=\"math display\">\\[\r\n\\begin{bmatrix}\r\na&amp;c\\\\\r\nb&amp;d\r\n\\end{bmatrix}\r\n=\r\n\\prod_{i=1}^n\r\n\\begin{bmatrix}\r\na_i&amp;1\\\\\r\n1&amp;0\r\n\\end{bmatrix}\r\n\\]</span> 答案即为 <span class=\"math inline\">\\(\\frac ab\\)</span>。</p>\r\n<p>然后考虑两种操作：</p>\r\n<ul>\r\n<li><p><code>W</code> 类型：因为 <span class=\"math inline\">\\(\\begin{bmatrix}x&amp;1\\\\1&amp;0\\end{bmatrix}\\begin{bmatrix}1&amp;0\\\\1&amp;1\\end{bmatrix}=\\begin{bmatrix}x+1&amp;1\\\\1&amp;0\\end{bmatrix}\\)</span>​，所以 'W' 操作就是在后面乘一个 <span class=\"math inline\">\\(\\begin{bmatrix}1&amp;0\\\\1&amp;1\\end{bmatrix}\\)</span>。</p></li>\r\n<li><p><code>E</code> 类型：虽然定义中如果最后一项为 <span class=\"math inline\">\\(1\\)</span> 时要特别处理，但发现当最后一项为 <span class=\"math inline\">\\(1\\)</span> 时两种处理方式的结果是一样的。</p>\r\n<p>给倒数第二项加 <span class=\"math inline\">\\(1\\)</span> 的影响： <span class=\"math display\">\\[\r\n\\begin{bmatrix}\r\n1&amp;1\\\\\r\n1&amp;0\r\n\\end{bmatrix}\r\n\\rightarrow\r\n\\begin{bmatrix}\r\n1&amp;0\\\\\r\n1&amp;1\r\n\\end{bmatrix}\r\n\\begin{bmatrix}\r\n1&amp;1\\\\\r\n1&amp;0\r\n\\end{bmatrix}\r\n=\r\n\\begin{bmatrix}\r\n1&amp;1\\\\\r\n2&amp;1\r\n\\end{bmatrix}\r\n\\]</span> 给数列的<strong>最后一项</strong>减 <span class=\"math inline\">\\(1\\)</span>，接着在数列尾再加两项，两项的值都是 <span class=\"math inline\">\\(1\\)</span> 的影响： <span class=\"math display\">\\[\r\n\\begin{bmatrix}\r\n1&amp;1\\\\\r\n1&amp;0\r\n\\end{bmatrix}\r\n\\rightarrow\r\n\\begin{bmatrix}\r\n0&amp;1\\\\\r\n1&amp;0\r\n\\end{bmatrix}\r\n\\begin{bmatrix}\r\n1&amp;1\\\\\r\n1&amp;0\r\n\\end{bmatrix}^2\r\n=\r\n\\begin{bmatrix}\r\n1&amp;1\\\\\r\n2&amp;1\r\n\\end{bmatrix}\r\n\\]</span> 所以把 <code>E</code> 操作按第二种处理方式就行了，给数列的最后一项减 <span class=\"math inline\">\\(1\\)</span>​ 相当于乘 <span class=\"math inline\">\\(\\begin{bmatrix}1&amp;0\\\\-1&amp;1\\end{bmatrix}\\)</span>。</p>\r\n<p>于是 <code>E</code> 操作相当于乘 <span class=\"math inline\">\\(\\begin{bmatrix}1&amp;0\\\\-1&amp;1\\end{bmatrix}\\begin{bmatrix}1&amp;1\\\\1&amp;0\\end{bmatrix}^2=\\begin{bmatrix}2&amp;1\\\\-1&amp;0\\end{bmatrix}\\)</span>。</p></li>\r\n</ul>\r\n<p>此时这题就很容易了，<code>APPEND</code>，<code>FLIP</code> 和 <code>REVERSE</code> 都是可以平衡树维护的，每个结点不仅要维护区间矩阵乘积，还要维护倒着乘的结果，<code>FLIP</code> 后的结果，和 <code>FLIP</code> 后倒着乘的结果。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n\\log n)\\)</span>。</p>\r\n<h3 id=\"noi2021day2t3\">NOI2021Day2T3</h3>\r\n<p>发现每个机器人对纸带的修改本质上只有 <span class=\"math inline\">\\(4\\)</span> 种：赋值为 <span class=\"math inline\">\\(0\\)</span>，赋值为 <span class=\"math inline\">\\(1\\)</span>，不变，取反，分别用 <span class=\"math inline\">\\(0,1,2,3\\)</span> 表示。</p>\r\n<p>不难想到容斥原理：枚举一个起始位置集合 <span class=\"math inline\">\\(mask\\)</span>，计算有多少种输入使得机器人从这些位置出发的输出都一样。每条纸带上每个位置受到的修改是确定且独立的，讨论一下一个位置的可行输入，乘起来就是贡献：</p>\r\n<ul>\r\n<li>如果一个位置同时包含 <span class=\"math inline\">\\(0,1\\)</span> 或 <span class=\"math inline\">\\(2,3\\)</span>，那么输入只能为空，方案数为 <span class=\"math inline\">\\(1\\)</span>。</li>\r\n<li>否则，如果一个位置包含两种操作，那么输入可以为空或 <span class=\"math inline\">\\(01\\)</span> 中的一种，方案数为 <span class=\"math inline\">\\(2\\)</span>。</li>\r\n<li>否则，三种输入都可行，方案数为 <span class=\"math inline\">\\(3\\)</span>。</li>\r\n</ul>\r\n<p>至此，得到一个 <span class=\"math inline\">\\(O(2^nmn^2)\\)</span> 的做法。</p>\r\n<p>考虑优化计算一个机器人对一个起始位置集合的贡献，记状压数组 <span class=\"math inline\">\\(g_{0/1/2/3,S}\\)</span> 表示选择起始位置集合 <span class=\"math inline\">\\(S\\)</span> 时包含 <span class=\"math inline\">\\(0/1/2/3\\)</span> 的位置，<span class=\"math inline\">\\(g\\)</span> 可以 <span class=\"math inline\">\\(O(2^n)\\)</span> 求出，有了 <span class=\"math inline\">\\(g\\)</span> 也可以 <span class=\"math inline\">\\(O(1)\\)</span>​ 算贡献。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(2^nm)\\)</span>。</p>\r\n<p>题目限制 <span class=\"math inline\">\\(n \\le 32\\)</span>，猜想是分大小两类计算来平衡复杂度。进一步观察发现当 <span class=\"math inline\">\\(mask\\)</span> 的最高位大于等于 <span class=\"math inline\">\\(\\lceil\\frac n2\\rceil\\)</span> 时，修改范围大于 <span class=\"math inline\">\\(\\lceil\\frac n2\\rceil\\)</span> 的机器人都会爆掉。</p>\r\n<p>枚举 <span class=\"math inline\">\\(mask\\)</span> 的最高位 <span class=\"math inline\">\\(\\max\\)</span>，这样就确定了哪些机器人会爆掉（不用考虑），分两种情况：</p>\r\n<ul>\r\n<li><p><span class=\"math inline\">\\(\\max \\le \\lceil\\frac n2\\rceil\\)</span>，这个可以暴力容斥，复杂度 <span class=\"math inline\">\\(O(2^{\\frac n2}m)\\)</span>。</p></li>\r\n<li><p><span class=\"math inline\">\\(\\max &gt; \\lceil\\frac n2\\rceil\\)</span>，这意味着需要考虑的机器人修改范围都不超过 <span class=\"math inline\">\\(n-\\max+1\\)</span>。</p>\r\n<p>一个修改范围大小为 <span class=\"math inline\">\\(R\\)</span>​ 的机器人所在的纸带上，一个位置的状态只和两个因素有关：</p>\r\n<ul>\r\n<li><p>它前面 <span class=\"math inline\">\\(R\\)</span> 个位置哪些在 <span class=\"math inline\">\\(mask\\)</span> 中。</p></li>\r\n<li><p>它是否没有被某个区间覆盖。</p></li>\r\n</ul>\r\n<p>如果所有区间都覆盖了某个位置，说明 <span class=\"math inline\">\\(mask\\)</span>​ 的最低位大于等于 <span class=\"math inline\">\\(2\\max-n+1\\)</span>​，可以暴力容斥，复杂度 <span class=\"math inline\">\\(O(2^{n-\\max+1}m)\\)</span>​。 否则只需要考虑第一条，可以 <code>DP</code>，设 <span class=\"math inline\">\\(f_{i,S}\\)</span>​ 表示已经确定了 <span class=\"math inline\">\\(mask\\)</span>​ 的前 <span class=\"math inline\">\\(i\\)</span>​ 位，其中最后 <span class=\"math inline\">\\(n-\\max+1\\)</span>​ 位为 <span class=\"math inline\">\\(S\\)</span>​，转移直接枚举第 <span class=\"math inline\">\\(i+1\\)</span>​ 位选不选即可，可以 <span class=\"math inline\">\\(O(2^{n-\\max+1}m)\\)</span>​ 预处理转移系数，复杂度 <span class=\"math inline\">\\(O(2^{n-\\max+1}n)\\)</span>​。</p></li>\r\n</ul>\r\n<p>总复杂度 <span class=\"math inline\">\\(O(2^{n/2}m)\\)</span>​。</p>\r\n<h3 id=\"cf1548d2\">CF1548D2</h3>\r\n<p>根据 Pick 定理： <span class=\"math display\">\\[\r\nS=i+\\frac b2-1\r\n\\]</span> 合法三角形的条件即为 <span class=\"math inline\">\\(S\\in \\mathbb Z \\land2S\\equiv b \\pmod 4\\)</span>​。</p>\r\n<p>对于三角形 <span class=\"math inline\">\\(ABC\\)</span>​， <span class=\"math inline\">\\(2S=|\\overrightarrow A\\times \\overrightarrow B+\\overrightarrow B\\times \\overrightarrow C+\\overrightarrow C\\times \\overrightarrow A|\\)</span>​​​，由于 <span class=\"math inline\">\\(S\\)</span> 是整数，所以绝对值不会影响 <span class=\"math inline\">\\(S\\)</span> 的奇偶性，只需要各个顶点的坐标模 <span class=\"math inline\">\\(4\\)</span> 的结果就可以知道 <span class=\"math inline\">\\(2S \\bmod 4\\)</span>​。</p>\r\n<p>一条线段 <span class=\"math inline\">\\(AB\\)</span>​​​ 的 <strong>边界数</strong> 为线段上整点数减一，<span class=\"math inline\">\\(b\\)</span>​​ 就是三条线段的边界数之和。线段 <span class=\"math inline\">\\(AB\\)</span>​​ 的边界数 <span class=\"math inline\">\\(\\text{bounds}(A,B)=\\gcd(|X_A-X_B|,|Y_A-Y_B|)\\)</span>​​​​，不太好简单表示。</p>\r\n<p>由于要求 <span class=\"math inline\">\\(S\\)</span> 为整数，所以 <span class=\"math inline\">\\(b\\)</span> 为偶数，这是一个很重要的条件，这意味着合法三角形三条边的边界数中至少有一条是偶数，另外两个奇偶性相同，判断 <span class=\"math inline\">\\(\\text{bounds}(A,B) \\bmod 4\\)</span> 是 <span class=\"math inline\">\\(0\\)</span> 还是 <span class=\"math inline\">\\(2\\)</span> 要容易得多， <span class=\"math display\">\\[\r\n\\text{bounds}(A,B) \\equiv 0\\pmod 4 \\iff X_A\\equiv X_B\\pmod 4 \\land Y_A\\equiv Y_B\\pmod 4\r\n\\]</span> 在 <span class=\"math inline\">\\(\\text{bounds}(A,B) \\not\\equiv 0\\pmod 4\\)</span> 的前提下 <span class=\"math display\">\\[\r\n\\text{bounds}(A,B) \\equiv 2\\pmod 4 \\iff X_A\\equiv X_B\\pmod 2 \\land Y_A\\equiv Y_B\\pmod 2\r\n\\]</span> 判断这两个条件只需要各个顶点的坐标模 <span class=\"math inline\">\\(4\\)</span> 的结果。</p>\r\n<p>此时做法就清晰起来了，合法三角形按三条边的边界数奇偶性可以分成 EEE 和 EOO 两类，设 <span class=\"math inline\">\\(cnt_{A,x,y,z}\\)</span> 表示有多少个点 <span class=\"math inline\">\\(B\\)</span>​​ 满足 <span class=\"math display\">\\[\r\nX_B\\equiv x\\pmod 4 \\land Y_B\\equiv y\\pmod 4 \\land \\text{bounds}(A,B) \\equiv z\\pmod 4\r\n\\]</span> 这个是可以 <span class=\"math inline\">\\(O(n^2\\log V)\\)</span> 预处理的。</p>\r\n<p>考虑分别对两类合法三角形 <span class=\"math inline\">\\(ABC\\)</span>​​​ 计数，先枚举点 <span class=\"math inline\">\\(A\\)</span>​，再枚举 <span class=\"math display\">\\[\r\nX_B\\bmod 4,Y_B\\bmod 4,\\text{bounds}(A,B)\\bmod 4\\\\X_C\\bmod 4,Y_C\\bmod 4,\\text{bounds}(A,C)\\bmod 4\r\n\\]</span> 满足 <span class=\"math display\">\\[\r\nS \\in \\mathbb Z\\\\\r\n\\text{bounds}(A,B)\\equiv\\text{bounds}(A,C)\\pmod 2\\\\\r\nX_B\\equiv X_C \\pmod 2\\\\\r\nY_B\\equiv Y_C\\pmod 2\\\\\r\nS\\equiv \\text{bounds}(A,B)+\\text{bounds}(A,C)+\\text{bounds}(B,C)\\pmod 4\r\n\\]</span> 使用 <span class=\"math inline\">\\(cnt\\)</span> 数组可以 <span class=\"math inline\">\\(O(1)\\)</span>​​ 计算贡献。</p>\r\n<p>这样每个 EEE 三角形会被算 <span class=\"math inline\">\\(3\\)</span> 遍，每个 EOO 三角形会被算 <span class=\"math inline\">\\(1\\)</span> 遍。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^2\\log V)\\)</span>。</p>\r\n<h3 id=\"cf1548e\">CF1548E</h3>\r\n<p><del>最简单的 3400。</del></p>\r\n<p>把坏格子填成 <span class=\"math inline\">\\(1\\)</span>，其他填成 <span class=\"math inline\">\\(0\\)</span>，问题就是求矩阵中有多少个“1”的四-连通块。</p>\r\n<blockquote>\r\n<p>引理：对于任意两行 <span class=\"math inline\">\\(i,j\\)</span>​​​，“1” 所在列的集合一定是相互包含的。</p>\r\n</blockquote>\r\n<p>不妨假设 <span class=\"math inline\">\\(a_i \\ge a_j\\)</span>​​，<span class=\"math inline\">\\(a_i+b_k \\le x \\Rightarrow a_j+b_k \\le x\\)</span>​。</p>\r\n<p>同时，此引理也就是这个矩阵的全部性质了，因为任何一个符合引理的矩阵都是可以构造出 <span class=\"math inline\">\\(a,b\\)</span> 数组的。此题唯一的条件也就是这个引理了，目标很明确。</p>\r\n<p>我们数连通块的思路是这样的：</p>\r\n<ul>\r\n<li>对于一个连通块 <span class=\"math inline\">\\(S\\)</span>​​​​​​，它上到 <span class=\"math inline\">\\(L_r\\)</span>​​​​​​，下到 <span class=\"math inline\">\\(R_r\\)</span>​​​​​​，左到 <span class=\"math inline\">\\(L_c\\)</span>​​​​​，右到 <span class=\"math inline\">\\(R_c\\)</span>​​​​​​。</li>\r\n<li>设 <span class=\"math inline\">\\(a_{L_r},a_{L_r+1},\\cdots,a_{R_r}\\)</span>​​​ 中第一个取到最小值的位置为 <span class=\"math inline\">\\(i\\)</span>，显然 <span class=\"math inline\">\\((i,L_c),(i,L_c+1),\\cdots,(i,R_c)\\)</span>​ 都为 “1”。</li>\r\n<li>我们希望 <span class=\"math inline\">\\(S\\)</span> 被 <span class=\"math inline\">\\(i\\)</span> 数到。</li>\r\n</ul>\r\n<p>再考虑对于 <span class=\"math inline\">\\(i\\)</span>​，有多少个连通块会被它数到，对于第 <span class=\"math inline\">\\(i\\)</span> 行的一个 “1” 的连续段 <span class=\"math inline\">\\([l,r]\\)</span>，它所在的连通块会被 <span class=\"math inline\">\\(i\\)</span>​​ 数当且仅当：</p>\r\n<ul>\r\n<li>它向上不能走到一行 <span class=\"math inline\">\\(j\\)</span>​​​ 满足 <span class=\"math inline\">\\(a_j \\le a_i\\)</span>​​​​，形式化地，<span class=\"math inline\">\\(\\min_{k\\in [l,r]}a_k+\\max_{k\\in (j,i]}b_k&gt;x\\)</span>​​。</li>\r\n<li>它向下不能走到一行 <span class=\"math inline\">\\(j\\)</span>​​ 满足 <span class=\"math inline\">\\(a_j&lt;a_i\\)</span>​​​，形式化地，<span class=\"math inline\">\\(\\min_{k\\in [l,r]}a_k+\\max_{k\\in [i,j)}b_k&gt;x\\)</span>​​​。</li>\r\n</ul>\r\n<p>综上，记 <span class=\"math inline\">\\(i\\)</span> 前面第一个满足 <span class=\"math inline\">\\(a_j\\le a_i\\)</span> 的 <span class=\"math inline\">\\(j\\)</span> 为 <span class=\"math inline\">\\(pre\\)</span>， <span class=\"math inline\">\\(i\\)</span> 后面第一个满足 <span class=\"math inline\">\\(a_j&lt; a_i\\)</span> 的 <span class=\"math inline\">\\(j\\)</span> 为 <span class=\"math inline\">\\(suf\\)</span>，连续段 <span class=\"math inline\">\\([l,r]\\)</span> 造成贡献当且仅当 <span class=\"math inline\">\\(\\min_{i\\in [l,r]}a_i&gt;x-\\max_{i\\in (pre,suf)}\\)</span>，不等式右边对于每个 <span class=\"math inline\">\\(i\\)</span> 是确定的，而且是可以通过单调栈 <span class=\"math inline\">\\(O(n)\\)</span>​ 预处理的东西，对于左边则可以使用数据结构来维护。</p>\r\n<p>下面我们进一步讨论这个数据结构需要干什么：</p>\r\n<ul>\r\n<li>这个数据结构维护所有连续段 <span class=\"math inline\">\\(b\\)</span> 的最小值。</li>\r\n<li>将所有行以 <span class=\"math inline\">\\(a_i\\)</span>​ 为第一关键字，<span class=\"math inline\">\\(i\\)</span>​​ 为第二关键字从大到小排序。每次序列中一个 <span class=\"math inline\">\\(0\\)</span> 改成 <span class=\"math inline\">\\(1\\)</span>​，会导致新增连续段，也会导致两个连续段合并，修改就是加入元素和删除元素。</li>\r\n<li>询问操作就是查询有多少个元素大于 <span class=\"math inline\">\\(key\\)</span>。</li>\r\n</ul>\r\n<p>对于新增连续段和合并连续段可以用并查集维护，元素则用反向树状数组维护。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n\\log n)\\)</span>。</p>\r\n<h3 id=\"minieye杯中国大学生算法设计超级联赛5t1\">2021“MINIEYE杯”中国大学生算法设计超级联赛（5）T1</h3>\r\n<p>把两端同色的边看成实边，两端异色的边看成虚边。</p>\r\n<ul>\r\n<li><code>1</code> 操作就是 <code>access(u)</code>。</li>\r\n<li><code>2</code> 操作就是查询两点间的虚边条数，转化一下变成查询一个点到根路径上的虚边条数。</li>\r\n<li><code>3</code> 操作转化一下就是查询 <code>dfs</code> 序区间中的点到根路径上的虚边条数总和。</li>\r\n<li><code>4</code> 操作就是每条实链点数选二之和。</li>\r\n</ul>\r\n<p>对于 <code>23</code> 操作，需要维护每个点到根路径上的虚边条数，支持区间加、区间求和，树状数组即可。</p>\r\n<p>对于 <code>4</code> 操作，在 <code>LCT</code> 中维护实链的点数，就可以在 <code>access</code> 时维护答案。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n\\log^2n)\\)</span>。</p>\r\n<h3 id=\"minieye杯中国大学生算法设计超级联赛5t2\">2021“MINIEYE杯”中国大学生算法设计超级联赛（5）T2</h3>\r\n<p>记 <span class=\"math inline\">\\(f_{i,j}\\)</span> 表示有多少个串恰好有 <span class=\"math inline\">\\(i\\)</span> 个 <code>a</code>、<span class=\"math inline\">\\(j\\)</span>​​ 个 <code>b</code>，不难写出它的生成函数 <span class=\"math inline\">\\((x+y+k-2)^L\\)</span>。</p>\r\n<p>而题目中求的就是 <span class=\"math inline\">\\(\\sum_{i=0}^L\\sum_{j=0}^L[n|i-p][n|j-q][x^i][y^j](x+y+k-2)^L\\)</span>​​。</p>\r\n<p>题目还保证 <span class=\"math inline\">\\(n|P-1\\)</span>​，考虑单位根反演，得到答案为 <span class=\"math display\">\\[\r\n\\frac 1{n^2}\\sum_{i=0}^{n-1}\\sum_{j=0}^{n-1}(\\omega_n^i+\\omega_n^j+k-2)^L\\omega_n^{-ip}\\omega_n^{-jq}\r\n\\]</span> 记 <span class=\"math inline\">\\(A_{i,j}=(\\omega_n^i+\\omega_n^j+k-2)^L\\)</span> 可以 <span class=\"math inline\">\\(O(n^2\\log L)\\)</span> 预处理，答案矩阵 <span class=\"math inline\">\\(B\\)</span> 就是 <span class=\"math inline\">\\(A\\)</span> 对两维分别做 <code>IDFT</code> 得到的。每次固定一维，对另一维做 <code>IDFT</code> 就行了，暴力做复杂度 <span class=\"math inline\">\\(O(n^3)\\)</span>，或者 Bluestein + MTT 可以做到 <span class=\"math inline\">\\(O(n^2\\log n)\\)</span>。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^3)\\)</span> 或者 <span class=\"math inline\">\\(O(n^2\\log L)\\)</span>。</p>\r\n<h3 id=\"minieye杯中国大学生算法设计超级联赛5t9\">2021“MINIEYE杯”中国大学生算法设计超级联赛（5）T9</h3>\r\n<p>称区间中数量超过一半的数为 <strong>主元素</strong>。</p>\r\n<p>由于一个合法区间只有一个主元素，可以考虑每个主元素的贡献。</p>\r\n<h4 id=\"做法-1\">做法 1</h4>\r\n<p>考虑枚举一个值 <span class=\"math inline\">\\(v\\)</span>​，计算这个值的贡献。</p>\r\n<p>假设 <span class=\"math inline\">\\(v\\)</span>​ 在序列中的出现位置为 <span class=\"math inline\">\\(p_1,p_2,\\cdots,p_k\\)</span>​​，区间 <span class=\"math inline\">\\([l,r]\\)</span> 中第一个 <span class=\"math inline\">\\(v\\)</span> 在 <span class=\"math inline\">\\(p_i\\)</span> 出现，最后一个 <span class=\"math inline\">\\(v\\)</span> 在 <span class=\"math inline\">\\(p_j\\)</span>​ 出现。</p>\r\n<p>考虑枚举 <span class=\"math inline\">\\(j\\)</span>​，快速查询有多少对合法的 <span class=\"math inline\">\\((l,r)\\)</span>​。把等于 <span class=\"math inline\">\\(v\\)</span>​ 的位置变成 <span class=\"math inline\">\\(1\\)</span>​，不等于 <span class=\"math inline\">\\(v\\)</span>​ 的位置变成 <span class=\"math inline\">\\(-1\\)</span>​，记前缀和为 <span class=\"math inline\">\\(sum_i\\)</span>​，那么区间 <span class=\"math inline\">\\([l,r]\\)</span>​ 合法的充要条件为 <span class=\"math inline\">\\(sum_{l-1}&lt;sum_r\\)</span>​，因此需要维护的是 <span class=\"math inline\">\\(sum_1,sum_2,\\cdots,sum_{p_j}\\)</span>​ 组成的集合，<span class=\"math inline\">\\(j\\rightarrow j+1\\)</span>​ 时，加入的元素是 <span class=\"math inline\">\\(sum_{p_j},sum_{p_j+1},\\cdots,sum_{p_{j+1}-1}\\)</span>​，它们的值是连续的一段，所以这是一个区间 <span class=\"math inline\">\\(+1\\)</span>​，对于一个 <span class=\"math inline\">\\(r\\in[p_j,p_{j+1})\\)</span>​，合法 <span class=\"math inline\">\\(l\\)</span>​ 的数量就是集合中小于 <span class=\"math inline\">\\(sum_r\\)</span>​​ 的元素数量，这是一个前缀和，而 <span class=\"math inline\">\\([p_j,p_{j+1})\\)</span>​ 内所有的 <span class=\"math inline\">\\(sum_r\\)</span>​ 构成一个区间，所以询问操作是查询前缀和的前缀和，可以用三个树状数组实现。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n\\log n)\\)</span>。</p>\r\n<h4 id=\"做法-2\">做法 2</h4>\r\n<p>考虑分治，计算有多少个合法区间 <span class=\"math inline\">\\([l,r]\\)</span>​​ 满足 <span class=\"math inline\">\\(l\\le mid+1 \\land r\\ge mid\\)</span>​​。</p>\r\n<p>可以发现区间 <span class=\"math inline\">\\([l,r]\\)</span>​​ 合法的必要条件是 <span class=\"math inline\">\\([l,mid]\\)</span> 和 <span class=\"math inline\">\\([mid+1,r]\\)</span> 中至少有一个是合法的。</p>\r\n<blockquote>\r\n<p>引理：一个序列所有前缀的主元素中本质不同只有 <span class=\"math inline\">\\(O(\\log n)\\)</span> 个。</p>\r\n</blockquote>\r\n<p>所以可能产生贡献的 <span class=\"math inline\">\\(v\\)</span> 只有 <span class=\"math inline\">\\(O(\\log n)\\)</span> 个。枚举 <span class=\"math inline\">\\(v\\)</span>。把等于 <span class=\"math inline\">\\(v\\)</span> 的位置变成 <span class=\"math inline\">\\(1\\)</span>，不等于 <span class=\"math inline\">\\(v\\)</span> 的位置变成 <span class=\"math inline\">\\(-1\\)</span>，记前缀和为 <span class=\"math inline\">\\(sum_i\\)</span>，枚举 <span class=\"math inline\">\\(r\\)</span> 后，需要查询有多少个 <span class=\"math inline\">\\(l\\le mid+1\\)</span> 满足 <span class=\"math inline\">\\(sum_{l-1}&lt;sum_r\\)</span>，这个可以预处理前缀和做到 <span class=\"math inline\">\\(O(1)\\)</span> 查询。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n\\log^2n)\\)</span>。</p>\r\n<h3 id=\"minieye杯中国大学生算法设计超级联赛5t13\">2021“MINIEYE杯”中国大学生算法设计超级联赛（5）T13</h3>\r\n<p>先二分一个直径 <span class=\"math inline\">\\(D\\)</span>，考虑用 <code>DP</code> 去判定。</p>\r\n<p>设 <span class=\"math inline\">\\(f_{u,0/1}\\)</span> 表示以下情形以 <span class=\"math inline\">\\(u\\)</span>​ 为端点向子树内延伸的最长链的最小值（不存在时为 <span class=\"math inline\">\\(\\infty\\)</span>）：</p>\r\n<ul>\r\n<li>确定了 <span class=\"math inline\">\\(u\\)</span>​ 子树内每个点选哪条边。</li>\r\n<li><span class=\"math inline\">\\(u\\)</span> 选的边是否是 <span class=\"math inline\">\\(u\\)</span>​ 和父亲的连边。</li>\r\n<li>子树内直径不超过 <span class=\"math inline\">\\(D\\)</span>。</li>\r\n</ul>\r\n<p><span class=\"math inline\">\\(f_{u,1}\\)</span>​​​ 可以直接从每个儿子 <span class=\"math inline\">\\(v\\)</span>​​​ 用 <span class=\"math inline\">\\(\\min(f_{v,0}+w(u,v),f_{v,1}+\\max(w(u,v)-p_v,0))\\)</span>​​​ 转移过来，如果前两大的值之和大于 <span class=\"math inline\">\\(D\\)</span>​​，<span class=\"math inline\">\\(f_{u,1}=\\infty\\)</span>​​，否则就取这些值中的最大值。</p>\r\n<p><span class=\"math inline\">\\(f_{u,0}\\)</span>​ 的转移需要分析一下，<span class=\"math inline\">\\(u\\)</span>​ 选择的边 <span class=\"math inline\">\\((u,v)\\)</span>​​ 必须要满足 <span class=\"math inline\">\\(v\\)</span>​ 是 <span class=\"math inline\">\\(\\min(f_{v,0}+w(u,v),f_{v,1}+w(u,v)-p_v)\\)</span>​​ 前两大的儿子，所以枚举一下 <span class=\"math inline\">\\(v\\)</span>，就可以直接转移了。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n\\log V)\\)</span>。</p>\r\n<h3 id=\"agc041d\">AGC041D</h3>\r\n<p>考虑任意 <span class=\"math inline\">\\(k\\)</span>​ 道题的总分都小于任意 <span class=\"math inline\">\\(k+1\\)</span>​ 道题的总分这个限制，发现它等价于前 <span class=\"math inline\">\\(\\lceil\\frac n2\\rceil\\)</span>​ 道题的总分小于后 <span class=\"math inline\">\\(\\lceil\\frac n2\\rceil-1\\)</span>​ 道题的总分。</p>\r\n<p>考虑如何生成一个合法的序列 <span class=\"math inline\">\\(A\\)</span>：</p>\r\n<ul>\r\n<li>枚举第 <span class=\"math inline\">\\(\\lfloor\\frac n2\\rfloor+1\\)</span>​ 道题的分值 <span class=\"math inline\">\\(c\\)</span>​，令 <span class=\"math inline\">\\(A=(c,c,\\cdots,c)\\)</span>​。</li>\r\n<li>多次选一个位置 <span class=\"math inline\">\\(j&lt;\\lfloor\\frac n2\\rfloor+1\\)</span>​​，将 <span class=\"math inline\">\\(A_1,A_2,\\cdots,A_j\\)</span>​ 全部减一。</li>\r\n<li>多次选一个位置 <span class=\"math inline\">\\(j&gt;\\lfloor\\frac n2\\rfloor+1\\)</span>​，将 <span class=\"math inline\">\\(A_j,A_{j+1},\\cdots,A_n\\)</span>​​​ 全部加一。</li>\r\n<li>由于 <span class=\"math inline\">\\(A_1 \\ge 1\\)</span>​​​，所以第二种操作的次数不得超过 <span class=\"math inline\">\\(c-1\\)</span>​​​，同理第三种操作的次数不得超过 <span class=\"math inline\">\\(n-c\\)</span>​​​。</li>\r\n<li>设前 <span class=\"math inline\">\\(\\lceil\\frac n2\\rceil\\)</span>​ 道题的总分减后 <span class=\"math inline\">\\(\\lceil\\frac n2\\rceil-1\\)</span>​ 道题的总分为 <span class=\"math inline\">\\(x\\)</span>​，第一步后 <span class=\"math inline\">\\(x=c\\)</span>​，第二种操作每一次都会使 <span class=\"math inline\">\\(x\\)</span>​ 减小 <span class=\"math inline\">\\(j\\)</span>​，第三种操作每一次都会使 <span class=\"math inline\">\\(x\\)</span>​ 减小 <span class=\"math inline\">\\(n-j+1\\)</span>​​，因此第二、三种操作的总贡献要小于 <span class=\"math inline\">\\(c\\)</span>。</li>\r\n</ul>\r\n<p>可以看出这是一个完全背包，第二种操作就是添加体积为 <span class=\"math inline\">\\(1,2,\\cdots,\\lfloor\\frac n2\\rfloor\\)</span>​​ 的物品，而且最多添加 <span class=\"math inline\">\\(c-1\\)</span>​ 个，第三种操作就是添加体积为 <span class=\"math inline\">\\(1,2,\\cdots,\\lceil\\frac n2\\rceil-1\\)</span>​​​​ 的物品，最多添加 <span class=\"math inline\">\\(n-c\\)</span>​ 个，总体积要小于 <span class=\"math inline\">\\(c\\)</span>​。</p>\r\n<p>对于第二种操作，考虑预处理 <span class=\"math inline\">\\(L_{i,j}\\)</span>​ 表示选择 <span class=\"math inline\">\\(i\\)</span> 个物品，总体积为 <span class=\"math inline\">\\(j\\)</span> 的方案数。用传统背包做复杂度肯定不行，事实上它能直接转移： <span class=\"math display\">\\[\r\nL_{i,j}=L_{i-1,j-1}+L_{i,j-i}-L_{i-1,j-i-\\lfloor\\frac n2\\rfloor}\r\n\\]</span> 对于第三种操作，同理可以预处理 <span class=\"math inline\">\\(R_{i,j}\\)</span>。</p>\r\n<p>然后就可以枚举 <span class=\"math inline\">\\(c\\)</span>​ 后 <span class=\"math inline\">\\(O(n)\\)</span>​​ 计算合法方案数。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^2)\\)</span>。</p>\r\n<h3 id=\"agc027d\">AGC027D</h3>\r\n<p>构造的思路是先黑白染色，然后填好黑格，再让每个白格满足：</p>\r\n<ul>\r\n<li>它大于周围四个黑格。</li>\r\n<li>它模周围四个黑格都等于 <span class=\"math inline\">\\(1\\)</span>。</li>\r\n</ul>\r\n<p>填白格的过程是容易的，对于一个白格，先算出周围四个黑格的 <span class=\"math inline\">\\(\\text{lcm}\\)</span>，然后尝试填 <span class=\"math inline\">\\(\\text{lcm}+1\\)</span>​，如果已经填过了，就继续尝试 <span class=\"math inline\">\\(2\\text{lcm}+1,3\\text{lcm}+1,\\cdots\\)</span>​。</p>\r\n<p>如果没有值域限制，这题就做完了，考虑怎样让填的数尽可能小。</p>\r\n<p>填白格没有什么好优化的（尝试过优先填 <span class=\"math inline\">\\(\\text{lcm}\\)</span>​​ 较大的格子，但完全没有效果），所以考虑如何填黑格，才能使 <span class=\"math inline\">\\(\\text{lcm}\\)</span> 比较小。</p>\r\n<ul>\r\n<li>填法一：顺序填或随机填，大概只能构造 <span class=\"math inline\">\\(N\\)</span> 等于一百多。</li>\r\n<li>填法二：考虑到一个白格周围四个黑格有两个是同一行的，有两个是同一列的，令 <span class=\"math inline\">\\(A_{i,j}\\)</span> 是 <span class=\"math inline\">\\(\\text{lcm(i,j)}\\)</span> 的倍数，具体怎么确定，像确定白格那样确定，大概能构造 <span class=\"math inline\">\\(N\\)</span> 等于两百多。</li>\r\n<li>填法三：考虑到一个白格周围四个黑格只涉及四条斜线，令 <span class=\"math inline\">\\(A_{i,j}\\)</span> 是 <span class=\"math inline\">\\(\\text{lcm}(i+j,i-j+n)\\)</span> 的倍数，大概能构造 <span class=\"math inline\">\\(N\\)</span> 等于 <span class=\"math inline\">\\(425\\)</span> 左右。</li>\r\n<li>填法四：经过一番尝试，令 <span class=\"math inline\">\\(A_{i,j}\\)</span>​​ 是 <span class=\"math inline\">\\(\\text{lcm}(i+(n-j+1),i-(n-j+1)+n)\\)</span>​（就是把列编号倒过来）可以通过。</li>\r\n<li>填发五：考虑给每条斜线分配一个质数，黑格就等于所在的两条斜线质数的乘积，白格就等于周围四条斜线质数的乘积加一，一定不会有数重复。</li>\r\n</ul>\r\n<p>填发四需要用 <code>set</code> 维护哪些数填过，复杂度 <span class=\"math inline\">\\(O(n^2\\log n)\\)</span>​​。</p>\r\n<p>填发五复杂度 <span class=\"math inline\">\\(O(n^2)\\)</span>。</p>\r\n<h3 id=\"agc025d\">AGC025D</h3>\r\n<p>对于两个距离为 <span class=\"math inline\">\\(\\sqrt D\\)</span>​ 的点 <span class=\"math inline\">\\((x_1,y_1),(x_2,y_2)\\)</span>​，考虑 <span class=\"math inline\">\\(x_1-x_2,y_1-y_2\\)</span>​​ 的奇偶性： <span class=\"math display\">\\[\r\nx_1 \\equiv x_2 \\pmod 2,y_1 \\equiv y_2 \\pmod 2 \\iff D \\equiv 0 \\pmod 4\\\\\r\nx_1 \\equiv x_2 \\pmod 2,y_1 \\not\\equiv y_2 \\pmod 2 \\iff D \\equiv 1 \\pmod 4\\\\\r\nx_1 \\not\\equiv x_2 \\pmod 2,y_1 \\not\\equiv y_2 \\pmod 2 \\iff D \\equiv 2 \\pmod 4\\\\\r\n\\]</span> 因此 <span class=\"math inline\">\\(D \\bmod 4\\)</span>​ 说明了两点坐标差的奇偶性。</p>\r\n<blockquote>\r\n<p>引理：将平面上距离为 <span class=\"math inline\">\\(\\sqrt D\\)</span> 的点对连边后是一张二分图。</p>\r\n</blockquote>\r\n<p>考虑构造一个黑白染色方案，设 <span class=\"math inline\">\\(\\text{color}(x,y,D)=0/1\\)</span> 表示点 <span class=\"math inline\">\\((x,y)\\)</span> 的颜色。</p>\r\n<ul>\r\n<li><p>当 <span class=\"math inline\">\\(D\\equiv 3\\pmod 4\\)</span> 时，没有边，<span class=\"math inline\">\\(\\text{color}(x,y,D)=0\\)</span>。</p></li>\r\n<li><p>当 <span class=\"math inline\">\\(D\\equiv 2\\pmod 4\\)</span> 时，<span class=\"math inline\">\\(\\text{color}(x,y,D)=x\\bmod 2\\)</span>，这样距离为 <span class=\"math inline\">\\(\\sqrt D\\)</span> 的点对就必然异色。</p></li>\r\n<li><p>当 <span class=\"math inline\">\\(D \\equiv 1\\pmod 4\\)</span> 时，<span class=\"math inline\">\\(\\text{color}(x,y,D)=(x+y)\\bmod 2\\)</span>，这样距离为 <span class=\"math inline\">\\(\\sqrt D\\)</span> 的点对就必然异色。</p></li>\r\n<li><p>当 <span class=\"math inline\">\\(D\\equiv 0\\pmod 4\\)</span> 时，<span class=\"math inline\">\\(\\text{color}(x,y,D)=\\text{color}(\\lfloor\\frac x2\\rfloor,\\lfloor\\frac y2\\rfloor,\\frac D4)\\)</span>​​，下面证明为什么合法：</p>\r\n<p>对于两个距离为 <span class=\"math inline\">\\(\\sqrt D\\)</span> 的点 <span class=\"math inline\">\\((x_1,y_1),(x_2,y_2)\\)</span>，由于 <span class=\"math inline\">\\(x_1 \\equiv x_2 \\pmod 2,y_1 \\equiv y_2 \\pmod 2\\)</span>，所以 <span class=\"math display\">\\[\r\n\\lfloor\\frac {x_1}2\\rfloor-\\lfloor\\frac {x_2}2\\rfloor=\\frac 12(x_1-x_2)\\\\\r\n\\lfloor\\frac {y_1}2\\rfloor-\\lfloor\\frac {y_2}2\\rfloor=\\frac 12(y_1-y_2)\r\n\\]</span> 进一步： <span class=\"math display\">\\[\r\n\\begin{aligned}\r\n&amp;(x_1-x_2)^2+(y_1-y_2)^2=D\\\\\r\n\\Rightarrow &amp;(\\lfloor\\frac {x_1}2\\rfloor-\\lfloor\\frac {x_2}2\\rfloor)^2+(\\lfloor\\frac {y_1}2\\rfloor-\\lfloor\\frac {y_2}2\\rfloor)^2=\\frac D4\\\\\r\n\\Rightarrow &amp;\\text{color}(\\lfloor\\frac {x_1}2\\rfloor,\\lfloor\\frac {y_1}2\\rfloor,\\frac D4)\\ne\\text{color}(\\lfloor\\frac {x_2}2\\rfloor,\\lfloor\\frac {y_2}2\\rfloor,\\frac D4)\r\n\\end{aligned}\r\n\\]</span></p></li>\r\n</ul>\r\n<p>对于 <span class=\"math inline\">\\(D_1\\)</span>​ 和 <span class=\"math inline\">\\(D_2\\)</span>​ 分别黑白染色后本质有 <span class=\"math inline\">\\(4\\)</span>​ 种颜色，这 <span class=\"math inline\">\\(4\\)</span>​​ 种颜色中肯定有一种点数大于等于 <span class=\"math inline\">\\(n^2\\)</span>​，输出这种颜色的 <span class=\"math inline\">\\(n^2\\)</span>​ 个点即可。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^2)\\)</span>。</p>\r\n<h3 id=\"agc036d\">AGC036D</h3>\r\n<p>没有负环等价于差分约束有解，假设解为 <span class=\"math inline\">\\(d_1,d_2,\\cdots,d_n\\)</span>​，不妨令 <span class=\"math inline\">\\(d_1=0\\)</span>。</p>\r\n<p>由于 <span class=\"math inline\">\\(i\\rightarrow i+1\\)</span> 的边是不能被删的，所以 <span class=\"math inline\">\\(d\\)</span> 是单调不增的，也就是一段 <span class=\"math inline\">\\(0\\)</span>，一段 $-1 $，一段 <span class=\"math inline\">\\(-2\\cdots\\)</span> 的形式。</p>\r\n<p>考虑一段一段的枚举 <span class=\"math inline\">\\(d\\)</span>​​​，上一段是 <span class=\"math inline\">\\([a,b]\\)</span>​​​，即 <span class=\"math inline\">\\(d_{a,a+1,\\cdots,b}=x+1\\)</span>​​​，枚举了新的一段 <span class=\"math inline\">\\([b+1,c]\\)</span>​​，即 <span class=\"math inline\">\\(d_{b+1,b+2,\\cdots,c}=x\\)</span>​​​​​，​分析哪些边需要删：</p>\r\n<ul>\r\n<li>对于 <span class=\"math inline\">\\(b+1\\le i &lt; j \\le c\\)</span>，边 <span class=\"math inline\">\\((i,j)\\)</span> 需要删除。</li>\r\n<li>对于 <span class=\"math inline\">\\(b+1\\le i\\le c,j&lt;a\\)</span>，边 <span class=\"math inline\">\\((i,j)\\)</span> 需要删除。</li>\r\n</ul>\r\n<p>然后就可以 <code>DP</code> 了，设 <span class=\"math inline\">\\(f_{a,b}\\)</span> 表示填的最后一段为 <span class=\"math inline\">\\([a,b]\\)</span> 时的最小代价，转移为 <span class=\"math display\">\\[\r\nf_{a,b}+\\text{cost}_1(b+1,c)+\\text{cost}_2(b+1,c,a-1)\\rightarrow f_{b+1,c}\r\n\\]</span> 其中 <span class=\"math inline\">\\(\\text{cost}_1\\)</span>​ 和 <span class=\"math inline\">\\(\\text{cost}_2\\)</span>​​ 在预处理二维前缀和后可以 <span class=\"math inline\">\\(O(1)\\)</span> 算。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^3)\\)</span>。</p>\r\n<h3 id=\"agc045d\">AGC045D</h3>\r\n<p>如果 <code>Snuke</code> 按到了 <span class=\"math inline\">\\(p_i=i\\)</span> 的位置就死了，所以他要最小化有解时死的概率，分析 <code>Snuke</code> 的最优策略：</p>\r\n<ul>\r\n<li>最初需要按下一个按钮，由于 <code>Snuke</code> 不知道排列，所以按每个按钮都是一样的，不妨按 <span class=\"math inline\">\\(1\\)</span>。</li>\r\n<li>如果按下了 <span class=\"math inline\">\\(p_i=i\\)</span> 的按钮就死了。</li>\r\n<li>否则，<span class=\"math inline\">\\(p_i\\)</span>​ 一定是一个安全的按钮，继续按下 <span class=\"math inline\">\\(p_i\\)</span>，这样就可以安全地按下许多按钮。</li>\r\n<li>又需要尝试一个按钮时就按没按过的编号最小的按钮。</li>\r\n</ul>\r\n<p>于是，得到了 <code>Snuke</code> 胜利的充要条件：假设 <span class=\"math inline\">\\(1-A\\)</span> 中第一个满足 <span class=\"math inline\">\\(p_i=i\\)</span> 的 <span class=\"math inline\">\\(i\\)</span> 为 <span class=\"math inline\">\\(\\min\\)</span>​​，<span class=\"math inline\">\\(\\forall i&gt;A,\\exists j&lt;\\min\\)</span> 使得 <span class=\"math inline\">\\(j\\)</span> 能到达 <span class=\"math inline\">\\(i\\)</span>。</p>\r\n<p>容易想到枚举 <span class=\"math inline\">\\(\\min\\)</span>​，把排列看成若干个循环，要求 <span class=\"math inline\">\\(\\min\\)</span>​ 前面没有孤立点，这个可以容斥：</p>\r\n<ul>\r\n<li>钦定 <span class=\"math inline\">\\(i\\)</span>​​​ 个孤立点，系数为 <span class=\"math inline\">\\((-1)^i\\binom{\\min-1}i\\)</span>​。</li>\r\n<li>对于 <span class=\"math inline\">\\([1,\\min-1]\\)</span>​​ 中剩下的 <span class=\"math inline\">\\(\\min-1-i\\)</span>​​ 个点先生成若干个循环，方案数为 <span class=\"math inline\">\\((\\min-1-i)!\\)</span>。</li>\r\n<li>对于 <span class=\"math inline\">\\([A+1,n]\\)</span> 中的点，它们只能加入前面的循环，方案数为 <span class=\"math inline\">\\((\\min-1-i)^{\\overline{n-A}}\\)</span>​。</li>\r\n<li>对于 <span class=\"math inline\">\\([\\min+1,A]\\)</span> 中的点，它们既可以加入前面的循环，又可以新建一个环，方案数为 <span class=\"math inline\">\\((\\min-1-i+n-A)^{\\overline{A-\\min}}\\)</span>。</li>\r\n</ul>\r\n<p>综上，得到 <span class=\"math inline\">\\(\\min\\)</span> 的贡献为： <span class=\"math display\">\\[\r\n\\sum_{i=0}^{\\min-1}(-1)^i\\binom{\\min-1}i\\frac{(n-1-i)!(\\min-1-i)}{\\min-1-i+n-A}\r\n\\]</span> 当 <span class=\"math inline\">\\(\\min\\)</span>​ 不存在时需要特判，贡献为： <span class=\"math display\">\\[\r\n\\sum_{i=0}^A(-1)^i\\binom Ai(n-i)!\r\n\\]</span> 复杂度 <span class=\"math inline\">\\(O(A^2+n)\\)</span>。</p>\r\n<h3 id=\"agc041e\">AGC041E</h3>\r\n<h4 id=\"对于-t1\">对于 <span class=\"math inline\">\\(T=1\\)</span></h4>\r\n<p>将网络抽象成一张有向图：</p>\r\n<ul>\r\n<li>将每条线的起点、终点和平衡器的端点抽象成结点。</li>\r\n<li>同一条线上的结点后面向前面连边。</li>\r\n<li>平衡器抽象成两个方向的边。</li>\r\n</ul>\r\n<p>考虑暴力怎么做，枚举最终汇聚到第 <span class=\"math inline\">\\(t\\)</span>​ 条线，判断 <span class=\"math inline\">\\(t\\)</span> 的终点是否可以到达所有的起点。</p>\r\n<p>可以用一个 <code>bitset</code> 来压哪些汇点能到达这个点，然后 <code>DFS</code> 来求这些 <code>bitset</code>。可以做到 <span class=\"math inline\">\\(O(\\frac {nm}{\\omega})\\)</span>​​​ 的复杂度。</p>\r\n<h4 id=\"对于-t2\">对于 <span class=\"math inline\">\\(T=2\\)</span></h4>\r\n<p><span class=\"math inline\">\\(n=2\\)</span> 时显然无解，下面构造说明了 <span class=\"math inline\">\\(n&gt;2\\)</span> 时一定有解。</p>\r\n<p>考虑从右往左依次插入每个平衡器，维护 <span class=\"math inline\">\\(size_i\\)</span> 表示当前网络有多少个起点会到达第 <span class=\"math inline\">\\(i\\)</span> 条线的终点。</p>\r\n<ul>\r\n<li>初始时，<span class=\"math inline\">\\(size_i=1\\)</span>。</li>\r\n<li>加入平衡器 <span class=\"math inline\">\\((x,y)\\)</span> 时，要么 <span class=\"math inline\">\\(size_x+1\\)</span>，要么 <span class=\"math inline\">\\(size_y+1\\)</span>，选择 <span class=\"math inline\">\\(size_x\\)</span> 和 <span class=\"math inline\">\\(size_y\\)</span> 中较小的一个 <span class=\"math inline\">\\(+1\\)</span>。一定不会出现 <span class=\"math inline\">\\(size_x=n-1\\land size_y=n-1\\)</span> 的情况，因为 <span class=\"math inline\">\\(size_x+size_y\\le n\\)</span>。</li>\r\n</ul>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n+m)\\)</span>。</p>\r\n<h3 id=\"abc214g\">ABC214G</h3>\r\n<p>以下解法可以解决 <span class=\"math inline\">\\(n \\le 10^5\\)</span>​​ 的问题。</p>\r\n<p>设 <span class=\"math inline\">\\(F_k\\)</span>​​​ 表示确定 <span class=\"math inline\">\\(k\\)</span>​​​ 个位置的值 <span class=\"math inline\">\\(r_{i_1},r_{i_2},\\cdots,r_{i_k}(i_1&lt;i_2&lt;\\cdots&lt;i_k)\\)</span>​​​​​​​​ 满足以下条件的方案数： <span class=\"math display\">\\[\r\n\\forall x\\in[1,k],r_{i_x}=p_{i_x}\\lor r_{i_x}=q_{i_x}\r\n\\]</span> 根据二项式反演，答案为 <span class=\"math display\">\\[\r\n\\sum_{i=0}^n(-1)^iF_i(n-i)!\r\n\\]</span> 将 <span class=\"math inline\">\\(p_i,q_i\\)</span>​​​​​​​ 连边，得到一张由若干个环组成的图，选择一个满足 <span class=\"math inline\">\\(r_i=p_i\\lor r_i=q_i\\)</span>​​ 的位置 <span class=\"math inline\">\\(i\\)</span>​​​​ 就是选择一条边并占用一个端点，这对于每个环是独立的，所以对每个环求出 <span class=\"math inline\">\\(F\\)</span>​​ 数组，再用分治 <code>FFT</code> 合并就可以得到整张图的 <span class=\"math inline\">\\(F\\)</span>​ 数组。</p>\r\n<p>考虑求一个大小为 <span class=\"math inline\">\\(m\\)</span>​ 的环的 <span class=\"math inline\">\\(F\\)</span>​ 数组，假设点编号为 <span class=\"math inline\">\\(1,2,\\cdots,m\\)</span>，边为 <span class=\"math inline\">\\((1,2),(2,3),\\cdots,(m-1,m),(m,1)\\)</span>，将选择 <span class=\"math inline\">\\(i\\)</span> 条边的方案分为以下两类：</p>\r\n<ul>\r\n<li><p>不选边 <span class=\"math inline\">\\((1,2)\\)</span>​，把边 <span class=\"math inline\">\\((2,3)\\)</span> 占用 <span class=\"math inline\">\\(2\\)</span> 的方式编号为 <span class=\"math inline\">\\(1\\)</span>，边 <span class=\"math inline\">\\((2,3)\\)</span> 占用 <span class=\"math inline\">\\(3\\)</span> 的方式编号为 <span class=\"math inline\">\\(2\\)</span>，边 <span class=\"math inline\">\\((3,4)\\)</span> 占用 <span class=\"math inline\">\\(3\\)</span> 的方式编号为 <span class=\"math inline\">\\(3\\)</span>，边 <span class=\"math inline\">\\((3,4)\\)</span> 占用 <span class=\"math inline\">\\(4\\)</span> 的方式编号为 <span class=\"math inline\">\\(4\\)</span>，依次类推。方案就是从 <span class=\"math inline\">\\(2m-2\\)</span>​ 种选择方式选 <span class=\"math inline\">\\(i\\)</span>​ 种，限制就是编号相邻的不能同时选择。</p>\r\n<blockquote>\r\n<p>引理：从 <span class=\"math inline\">\\(n\\)</span> 个物品中选 <span class=\"math inline\">\\(r\\)</span> 个，编号相邻的不能同时选择的方案数为 <span class=\"math inline\">\\(\\binom {n-r+1}r\\)</span>​。</p>\r\n<p>证明：将选择的第 <span class=\"math inline\">\\(i\\)</span> 个物品的编号减去 <span class=\"math inline\">\\(i-1\\)</span> 就得到了从 <span class=\"math inline\">\\(n-r+1\\)</span> 个物品中选 <span class=\"math inline\">\\(r\\)</span> 个的方案数。</p>\r\n</blockquote>\r\n<p>这部分方案数为 <span class=\"math inline\">\\(\\binom{2m-i-1}i\\)</span>​。</p></li>\r\n<li><p>选边 <span class=\"math inline\">\\((1,2)\\)</span>​​，那么边 <span class=\"math inline\">\\((1,2)\\)</span>​​ 可以占用 <span class=\"math inline\">\\(1\\)</span>​​ 或 <span class=\"math inline\">\\(2\\)</span>​​，但两种方式是等价的，不妨假设占用了 <span class=\"math inline\">\\(1\\)</span>​​。方案就是从 <span class=\"math inline\">\\(2m-3\\)</span>​​ 种选择方式选 <span class=\"math inline\">\\(i-1\\)</span>​​​​ 种，限制还是编号相邻的不能同时选择。</p>\r\n<p>这部分方案数为 <span class=\"math inline\">\\(2\\binom{2m-i-1}{i-1}\\)</span>。</p></li>\r\n</ul>\r\n<p>对于一个大小为 <span class=\"math inline\">\\(m\\)</span> 的环 <span class=\"math display\">\\[\r\nF_i=\\binom{2m-i-1}i+2\\binom{2m-i-1}{i-1}=\\binom{2m-i}i+\\binom{2m-i-1}{i-1}\r\n\\]</span> 然后每个环的 <span class=\"math inline\">\\(F\\)</span>​ 就可以 <span class=\"math inline\">\\(O(n)\\)</span>​ 求了，复杂度瓶颈在于分治 <code>FFT</code>，复杂度 <span class=\"math inline\">\\(O(n\\log^2n)\\)</span>​​​。</p>\r\n<p>分治 <code>FFT</code> 有两种优化：</p>\r\n<ul>\r\n<li>由于每个环的大小之和为 <span class=\"math inline\">\\(n\\)</span>，故只有 <span class=\"math inline\">\\(O(\\sqrt n)\\)</span> 种大小不同的环，大小相同的环可以通过快速幂 <span class=\"math inline\">\\(O(n\\log n)\\)</span>​ 地算出乘积。</li>\r\n<li>整个分治过程形成一棵二叉树的结构，总时间就是 <span class=\"math inline\">\\(\\sum_{u\\in \\mathbb{leaf}}\\text{degree}_u\\text{depth}_u\\)</span>​，最小化时间就是 <code>Huffman</code> 树，每次贪心地将两个次数最小的多项式乘起来。 ​​​</li>\r\n</ul>\r\n<h3 id=\"abc214h\">ABC214H</h3>\r\n<p>走到了一个强连通分量就肯定会走完内部的所有点，缩点后图就变成了 <code>DAG</code>，假设原图就是 <code>DAG</code>。</p>\r\n<p>想到用最小费用流解决：</p>\r\n<ul>\r\n<li>把每个点 <span class=\"math inline\">\\(u\\)</span> 拆成 <span class=\"math inline\">\\(\\text{in}_u\\)</span> 和 <span class=\"math inline\">\\(\\text{out}_u\\)</span>。</li>\r\n<li><span class=\"math inline\">\\(\\text{in}_u\\)</span> 向 <span class=\"math inline\">\\(\\text{out}_u\\)</span> 连一条容量为 <span class=\"math inline\">\\(1\\)</span>​，费用为 <span class=\"math inline\">\\(-X_u\\)</span>​ 的边，再连一条容量为 <span class=\"math inline\">\\(K\\)</span>，费用为 <span class=\"math inline\">\\(0\\)</span> 的边。</li>\r\n<li>对于原图中的边 <span class=\"math inline\">\\((u,v)\\)</span>​，<span class=\"math inline\">\\(\\text{out}_u\\)</span>​ 向 <span class=\"math inline\">\\(\\text{in}_v\\)</span>​ 连一条容量为 <span class=\"math inline\">\\(K\\)</span>​，费用为 <span class=\"math inline\">\\(0\\)</span>​ 的边。</li>\r\n<li><span class=\"math inline\">\\(S\\)</span> 向 <span class=\"math inline\">\\(\\text{in}_1\\)</span> 连一条容量为 <span class=\"math inline\">\\(K\\)</span>，费用为 <span class=\"math inline\">\\(0\\)</span> 的边，<span class=\"math inline\">\\(\\text{out}_u\\)</span> 向 <span class=\"math inline\">\\(T\\)</span> 连一条容量为 <span class=\"math inline\">\\(K\\)</span>，费用为 <span class=\"math inline\">\\(0\\)</span> 的边。</li>\r\n</ul>\r\n<p><code>SSP</code> 算法肯定是通过不了的，考虑变成 <code>Primal-Dual</code> 算法可以做的问题。</p>\r\n<h4 id=\"sol-1\">Sol 1</h4>\r\n<p>初始图是一张 <code>DAG</code>，可以跑一遍 <code>DP</code> 预处理最短路作为点的初始势能。</p>\r\n<h4 id=\"sol-2\">Sol 2</h4>\r\n<p>求出 <code>DAG</code> 的一组拓扑序，然后给每个点按拓扑序从大到小重新编号（也就是缩完点后的编号）。</p>\r\n<p>容易构造一组满足差分约束的初始势能：</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(S\\)</span>​​ 势能为 <span class=\"math inline\">\\(\\sum X_u\\)</span>​​，<span class=\"math inline\">\\(T\\)</span>​​​ 势能为 <span class=\"math inline\">\\(0\\)</span>​​。</li>\r\n<li><span class=\"math inline\">\\(\\text{in}_u\\)</span>​ 的势能为 <span class=\"math inline\">\\(\\sum_{i=1}^uX_i\\)</span>​，<span class=\"math inline\">\\(\\text{out}_u\\)</span> 的势能为 <span class=\"math inline\">\\(\\sum_{i=1}^{u-1}X_i\\)</span>。</li>\r\n</ul>\r\n<p>上述两种做法复杂度都是 <span class=\"math inline\">\\(O(nK\\log n)\\)</span>。</p>\r\n<h3 id=\"agc027e\">AGC027E</h3>\r\n<p>考虑什么样的串能变成单个字母 <span class=\"math inline\">\\(a\\)</span> 或 <span class=\"math inline\">\\(b\\)</span>。</p>\r\n<p>打表发现能变成 <span class=\"math inline\">\\(a\\)</span> 的串 <span class=\"math inline\">\\(S\\)</span> 满足的 <span class=\"math inline\">\\(a,b\\)</span> 数量关系是 <span class=\"math inline\">\\(a\\)</span> 的数量减 <span class=\"math inline\">\\(b\\)</span> 的数量模 <span class=\"math inline\">\\(3\\)</span> 余 <span class=\"math inline\">\\(1\\)</span>，并且这个条件在 <span class=\"math inline\">\\(|S|\\)</span> 为偶数时也是充分条件，当 <span class=\"math inline\">\\(|S|\\)</span> 为奇数时恰好多了一个串 <span class=\"math inline\">\\(ababab\\cdots aba\\)</span>​。​</p>\r\n<blockquote>\r\n<p>引理一：记 <span class=\"math inline\">\\(p(S)\\)</span>​ 表示 <span class=\"math inline\">\\(S\\)</span>​ 中 <span class=\"math inline\">\\(a\\)</span>​ 的个数减 <span class=\"math inline\">\\(b\\)</span>​ 的个数模 <span class=\"math inline\">\\(3\\)</span>​，<span class=\"math inline\">\\(S\\)</span>​ 能变成单个字母 <span class=\"math inline\">\\(c\\)</span>​ 当且仅当：</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(p(S)=p(c)\\)</span></li>\r\n<li><span class=\"math inline\">\\(S=c\\)</span> 或 <span class=\"math inline\">\\(S\\)</span> 中有相邻的相同字母。</li>\r\n</ul>\r\n</blockquote>\r\n<p>必要性显然，下面证明充分性：当 <span class=\"math inline\">\\(|S|\\le 3\\)</span> 时显然成立，当 <span class=\"math inline\">\\(|S|&gt;3\\)</span> 时取出 <span class=\"math inline\">\\(S\\)</span> 中最长的连续相同子串，不妨假设它是 <span class=\"math inline\">\\(n\\)</span> 个 <span class=\"math inline\">\\(a\\)</span>，分两种情况讨论：</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(n \\ge 4\\)</span>，直接将前两个 <span class=\"math inline\">\\(a\\)</span>​​ 合并，<span class=\"math inline\">\\(|S|\\)</span> 减小了 <span class=\"math inline\">\\(1\\)</span>，并且还满足引理条件。</li>\r\n<li><span class=\"math inline\">\\(n\\le 3\\)</span>​，由于 <span class=\"math inline\">\\(|S|&gt;3\\)</span>​，这个子串不可能前后都没有字母，不妨假设它不在开头，那么它前面必然是 <span class=\"math inline\">\\(b\\)</span>​，将前两个 <span class=\"math inline\">\\(a\\)</span>​ 合并成 <span class=\"math inline\">\\(b\\)</span>，那么此时有两个 <span class=\"math inline\">\\(b\\)</span> 会相邻，<span class=\"math inline\">\\(|S|\\)</span> 减小了 <span class=\"math inline\">\\(1\\)</span>​，并且还满足引理条件。</li>\r\n</ul>\r\n<p>然后问题就转化成了有多少个串 <span class=\"math inline\">\\(T\\)</span> 满足以下条件：</p>\r\n<ul>\r\n<li>存在一种将 <span class=\"math inline\">\\(S\\)</span> 划分为 <span class=\"math inline\">\\(|T|\\)</span> 段的方式，使得每一段与 <span class=\"math inline\">\\(T\\)</span>​​ 中的对应字母满足引理一。</li>\r\n</ul>\r\n<p>这个问题的主要难点在于引理一的条件二。</p>\r\n<p>事实上，当 <span class=\"math inline\">\\(S\\)</span>​ 中有相邻的相同字母时，<strong>忽略引理一的条件二</strong> 不会影响答案。</p>\r\n<blockquote>\r\n<p>引理二：若 <span class=\"math inline\">\\(S\\)</span> 中有相邻的相同字母，<span class=\"math inline\">\\(S\\)</span> 能够变成 <span class=\"math inline\">\\(T\\)</span>​ 当且仅当：</p>\r\n<ul>\r\n<li>存在一种将 <span class=\"math inline\">\\(S\\)</span>​ 划分为 <span class=\"math inline\">\\(|T|\\)</span>​ 段的方式，设 <span class=\"math inline\">\\(S\\)</span>​ 被划分成了 <span class=\"math inline\">\\(S_1,S_2,\\cdots,S_{|T|}\\)</span>​，<span class=\"math inline\">\\(T\\)</span>​ 中每个字母分别为 <span class=\"math inline\">\\(T_1,T_2,\\cdots,T_{|T|}\\)</span>​。</li>\r\n<li>满足 <span class=\"math inline\">\\(\\forall i,p(S_i)=p(T_i)\\)</span>。</li>\r\n</ul>\r\n</blockquote>\r\n<p>必要性显然，下面证明充分性：</p>\r\n<ul>\r\n<li>假设存在一组满足上述条件的划分 <span class=\"math inline\">\\((S_1,S_2,\\cdots,S_{|T|})\\)</span>​。</li>\r\n<li>将 <span class=\"math inline\">\\(S_1,S_2,\\cdots,S_{|T|-1}\\)</span> 的长度最小化得到新的划分 <span class=\"math inline\">\\((S_1&#39;,S_2&#39;,\\cdots,S_{|T|}&#39;)\\)</span>​。</li>\r\n<li>由于最小化，容易发现 <span class=\"math inline\">\\(S_1,S_2,\\cdots,S_{|T|-1}\\)</span>​ 已经满足了引理一。</li>\r\n<li>此时 <span class=\"math inline\">\\(S_{|T|}\\)</span> 有可能不合法，比如 <span class=\"math inline\">\\(S_{|T|}=abab\\cdots aba\\)</span>，由于不合法时 <span class=\"math inline\">\\(|T|&gt;1\\)</span>，可以让 <span class=\"math inline\">\\(S_{|T|}\\)</span> 只保留最后一个字母，把前面的部分扔给 <span class=\"math inline\">\\(S_{|T|-1}\\)</span>，于是 <span class=\"math inline\">\\(T\\)</span> 删去最后一个字母对于 <span class=\"math inline\">\\(S\\)</span>​ 删去最后一个字母满足引理二，故 <span class=\"math inline\">\\(S\\)</span> 可以变成 <span class=\"math inline\">\\(T\\)</span>。</li>\r\n</ul>\r\n<p>有了引理二就很好做了，特判掉 <span class=\"math inline\">\\(S\\)</span> 中没有相邻的相同字母的情况，容易用一个自动机来判断 <span class=\"math inline\">\\(T\\)</span>​ 是否合法，计数可以在自动机上 <code>DP</code>。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n)\\)</span>。</p>\r\n<h3 id=\"gym101667g\">Gym101667G</h3>\r\n<p>如果两个楼梯一个朝上一个朝下，那么就没有封闭区域，如果两个朝下可以对称一下，变成两个都朝上的情况。</p>\r\n<p>可以看出一个封闭区域开始的标志是 L 横线和 U 竖线相交，结束的标志是 U 横线和 L 竖线相交。考虑用扫描线来求出每一个封闭区域，从左到右处理每一条竖线，并维护变量 <code>isRegion</code> 表示当前竖线是否经过一个封闭区域，<code>area</code> 表示当前区域的面积：</p>\r\n<ul>\r\n<li>当 <code>isRegion</code> 为真时将 <code>area</code> 加上当前竖线和上一条竖线之间矩形的面积。</li>\r\n<li>当一个封闭区域开始时清零 <code>area</code>。</li>\r\n<li>当一个封闭区域结束时，答案累加上 <code>area</code>。</li>\r\n</ul>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n+m)\\)</span>。</p>\r\n<figure>\r\n<img src=\"https://i.loli.net/2021/09/08/a4fEq6tJWRbrxDy.png\" alt=\".png\" /><figcaption aria-hidden=\"true\">.png</figcaption>\r\n</figure>\r\n<h3 id=\"gym101667j\">Gym101667J</h3>\r\n<p>完美匹配的存在性容易想到 Hall 定理，设 <span class=\"math inline\">\\(f(S)\\)</span> 表示与点集 <span class=\"math inline\">\\(S\\)</span> 距离恰好等于 <span class=\"math inline\">\\(1\\)</span> 的点集，问题转化为判定： <span class=\"math display\">\\[\r\n\\forall |S|\\le\\frac n2,|T|=\\frac n2,S \\cap T=\\varnothing\\\\\r\n|f(S)\\cap T| \\ge |S|\r\n\\]</span> 由于 <span class=\"math inline\">\\(|f(S)\\cap T|\\)</span> 最小值为 <span class=\"math inline\">\\(|f(S)|+|S|-\\frac n2\\)</span>，条件改写为 <span class=\"math inline\">\\(|f(S)|\\ge\\frac n2\\)</span>。</p>\r\n<p>考虑求 <span class=\"math inline\">\\(\\min_{|S|\\le \\frac n2}|f(S)|\\)</span>，事实上这就是图的最小点割（删去最少的点使图不连通）：</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(f(S)\\)</span> 是 <span class=\"math inline\">\\(S\\)</span> 与 <span class=\"math inline\">\\(V-S-f(S)\\)</span> 之间的一组点割。</li>\r\n<li>任意一组点割 <span class=\"math inline\">\\(T\\)</span> 割出来的多个连通块都有一个点数不超过 <span class=\"math inline\">\\(\\frac n2\\)</span>，设这个连通块的点集为 <span class=\"math inline\">\\(S\\)</span>，那么 <span class=\"math inline\">\\(|f(S)|\\le |T|\\)</span>。</li>\r\n</ul>\r\n<p>求最小点割就是每对点都求一遍最小割：</p>\r\n<ul>\r\n<li>把每个点 <span class=\"math inline\">\\(u\\)</span> 拆成 <span class=\"math inline\">\\(\\text{in}_u\\)</span> 和 <span class=\"math inline\">\\(\\text{out}_u\\)</span>。</li>\r\n<li><span class=\"math inline\">\\(\\text{in}_u\\)</span> 向 <span class=\"math inline\">\\(\\text{out}_u\\)</span> 连一条代价为 <span class=\"math inline\">\\(1\\)</span> 的边。</li>\r\n<li>对于原图中的边 <span class=\"math inline\">\\((u,v)\\)</span>，<span class=\"math inline\">\\(\\text{out}_u\\)</span> 向 <span class=\"math inline\">\\(\\text{in}_v\\)</span>，<span class=\"math inline\">\\(\\text{out}_v\\)</span> 向 <span class=\"math inline\">\\(\\text{in}_u\\)</span> 分别连一条代价为 <span class=\"math inline\">\\(\\infty\\)</span> 的边。</li>\r\n<li>枚举两个不同的点 <span class=\"math inline\">\\(u,v\\)</span>，用 <span class=\"math inline\">\\(\\text{out}_u\\)</span> 到 <span class=\"math inline\">\\(\\text{in}_v\\)</span> 的最小割更新答案。</li>\r\n</ul>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^2\\cdot flow)\\)</span>。</p>\r\n<p><del>负</del>优化：注意到如果最小点割小于 <span class=\"math inline\">\\(\\frac n2\\)</span>，那么不在割中的点就超过一半，每次随机选取一个点 <span class=\"math inline\">\\(u\\)</span>，枚举点 <span class=\"math inline\">\\(v\\)</span>，求 <span class=\"math inline\">\\(\\text{out}_u\\)</span> 到 <span class=\"math inline\">\\(\\text{in}_v\\)</span> 的最小割，都有大半的概率求出最优解，如果随机 <span class=\"math inline\">\\(k\\)</span> 次，复杂度为 <span class=\"math inline\">\\(O(nk\\cdot flow)\\)</span>。</p>\r\n<h3 id=\"abc215h\">ABC215H</h3>\r\n<p>如何判定当前的卷心菜是否能满足所有公司？</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(S\\)</span> 向卷心菜 <span class=\"math inline\">\\(i\\)</span> 连容量为 <span class=\"math inline\">\\(A_i\\)</span> 的边。</li>\r\n<li>公司 <span class=\"math inline\">\\(i\\)</span> 向 <span class=\"math inline\">\\(T\\)</span> 连容量为 <span class=\"math inline\">\\(B_i\\)</span> 的边。</li>\r\n<li>如果 <span class=\"math inline\">\\(c_{i,j}=1\\)</span>，那么卷心菜 <span class=\"math inline\">\\(i\\)</span> 向公司 <span class=\"math inline\">\\(j\\)</span> 连容量为 <span class=\"math inline\">\\(\\infty\\)</span> 的边。</li>\r\n<li><span class=\"math inline\">\\(\\max flow=\\sum_{i=1}^mB_i\\)</span>。</li>\r\n</ul>\r\n<p>也等价于 <span class=\"math inline\">\\(T\\)</span> 的所有入边不是最小割。由于 <span class=\"math inline\">\\(S\\)</span> 的出边很少，考虑枚举最小割中有哪些 <span class=\"math inline\">\\(S\\)</span> 的出边，假设这些边为 <span class=\"math inline\">\\(mask\\)</span>，割掉 <span class=\"math inline\">\\(mask\\)</span> 后有一些 <span class=\"math inline\">\\(T\\)</span> 的入边就不需要割了，假设这些边的容量和为 <span class=\"math inline\">\\(sum\\)</span>，那么需要吃点的卷心菜数量就是 <span class=\"math inline\">\\(\\sum_{i\\in mask}A_i-sum+1\\)</span>，要求 <span class=\"math inline\">\\(sum&gt;0\\)</span>。</p>\r\n<p>这时就可以解决第一问了，考虑对于所有 <span class=\"math inline\">\\(mask\\)</span>，怎么求它们的 <span class=\"math inline\">\\(sum\\)</span>，注意到 <span class=\"math inline\">\\(B_i\\)</span> 贡献给 <span class=\"math inline\">\\(mask\\)</span> 的条件是 <span class=\"math inline\">\\(mask\\)</span> 包含所有能供应给公司 <span class=\"math inline\">\\(i\\)</span> 的卷心菜，可以用子集前缀和（<code>FMT</code>）求出。然后枚举 <span class=\"math inline\">\\(mask\\)</span> 用 <span class=\"math inline\">\\(\\sum_{i\\in mask}A_i-sum+1\\)</span> 更新第一问的答案即可。</p>\r\n<p>第二问还要进一步分析，为了不算重，我们枚举一个 <span class=\"math inline\">\\(mask\\)</span> 表示被吃的卷心菜品种的集合，一个 <span class=\"math inline\">\\(mask\\)</span> 可行当前仅当存在一个取到第一问答案的 <span class=\"math inline\">\\(S\\)</span>，使得 <span class=\"math inline\">\\(mask\\subseteq S\\)</span>，这个同样可以用 <code>FMT</code> 做。设第一问答案为 <span class=\"math inline\">\\(ans\\)</span>，最后是对于一个 <span class=\"math inline\">\\(mask\\)</span>，求有多少种从 <span class=\"math inline\">\\(mask\\)</span> 中吃掉 <span class=\"math inline\">\\(ans\\)</span> 个卷心菜的方式，满足 <span class=\"math inline\">\\(mask\\)</span> 中的每种卷心菜至少被吃一个。容易想到容斥，钦定一些卷心菜品种不吃，然后不考虑每种卷心菜必吃的限制，但对每个 <span class=\"math inline\">\\(mask\\)</span> 都通过容斥来计算复杂度高达 <span class=\"math inline\">\\(O(3^n)\\)</span>。</p>\r\n<p>设 <span class=\"math inline\">\\(f_S\\)</span> 表示有多少种从 <span class=\"math inline\">\\(S\\)</span> 中吃掉 <span class=\"math inline\">\\(ans\\)</span> 个卷心菜的方式，满足 <span class=\"math inline\">\\(mask\\)</span> 中的每种卷心菜至少被吃一个，发现 <span class=\"math display\">\\[\r\n\\sum_{T\\subseteq S}f_T=\\binom{\\sum_{i\\in S}A_i}{ans}\r\n\\]</span> 对右边做 <code>IFMT</code> 就可以求得 <span class=\"math inline\">\\(f\\)</span> 数组。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n2^n+nm)\\)</span>。</p>\r\n<h3 id=\"agc020e\">AGC020E</h3>\r\n<p>先考虑对于一个串 <span class=\"math inline\">\\(S\\)</span> 如何单独计算答案，这个不难，容易想到用区间 <code>DP</code> 做。设 <span class=\"math inline\">\\(f_{l,r}\\)</span> 表示子串 <span class=\"math inline\">\\([l,r]\\)</span> 的改写方案数，转移分两种：</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(s_l\\)</span> 没有参与改写，贡献为 <span class=\"math inline\">\\(f_{l+1,r}\\)</span>。</li>\r\n<li><span class=\"math inline\">\\(s_l\\)</span> 参与改写了，枚举最外层的覆盖 <span class=\"math inline\">\\(s_l\\)</span> 的改写：周期 <span class=\"math inline\">\\(T\\)</span> 和循环次数 <span class=\"math inline\">\\(i&gt;1\\)</span>，如果合法，则贡献为 <span class=\"math inline\">\\(f_{l,l+T-1}\\cdot f_{l+Ti,r}\\)</span>。</li>\r\n</ul>\r\n<p>当尝试用区间 <code>DP</code> 做原问题的时候，发现做不了，因为当 <span class=\"math inline\">\\(s_l\\)</span> 参与改写时，原来的 <span class=\"math inline\">\\(f_{l,l+T-1}\\)</span> 不再是一个区间的 <code>DP</code> 值。详细地说，设 <span class=\"math inline\">\\(f(s)\\)</span> 表示字符串 <span class=\"math inline\">\\(s\\)</span> 的答案（子集的改写方案数总和），设 <span class=\"math inline\">\\(suf(i)\\)</span> 表示 <span class=\"math inline\">\\(s\\)</span> 从 <span class=\"math inline\">\\(s_i\\)</span> 开始的后缀，转移为两种：</p>\r\n<ul>\r\n<li><p>第一个字符没有参与改写，贡献为 <span class=\"math inline\">\\((s_0+1)f(suf(1))\\)</span>。</p></li>\r\n<li><p>第一个字符参与了，枚举最外层的覆盖 <span class=\"math inline\">\\(s_l\\)</span> 的改写：周期 <span class=\"math inline\">\\(T\\)</span> 和循环次数 <span class=\"math inline\">\\(i&gt;1\\)</span>，由于每个周期内要相等，所有子集的限制要叠加，设 <span class=\"math inline\">\\(s[l,r]\\)</span> 表示 <span class=\"math inline\">\\(s\\)</span> 的第 <span class=\"math inline\">\\(l\\)</span> 个字符到第 <span class=\"math inline\">\\(r\\)</span> 个字符的子串，设 <span class=\"math display\">\\[\r\nt=s[0,T-1]\\&amp;s[T,2T-1]\\&amp;\\cdots\\&amp;s[T(i-1),Ti-1](\\&amp;\\ is\\ \\text{bitand})\r\n\\]</span> 那么贡献为 <span class=\"math inline\">\\(f(t)\\cdot f(suf(Ti))\\)</span>。</p></li>\r\n</ul>\r\n<p>这里的复杂度上限看起来是 <span class=\"math inline\">\\(O(2^{n+1})\\)</span>，这个题最重要的地方就是，你要看出来这个做法其实是 <span class=\"math inline\">\\(O(能过)\\)</span> 的，进而分析出其真正的复杂度，而不是被假上限给吓跑了。</p>\r\n<p>下面证明，有一个上界是 <span class=\"math inline\">\\(O(n^3+2^{\\frac n8})\\)</span>。首先长度小于等于 <span class=\"math inline\">\\(\\frac n8\\)</span> 的串最多有 <span class=\"math inline\">\\(2^{\\frac n8}\\)</span> 个，长度大于等于 <span class=\"math inline\">\\(\\frac n8\\)</span> 的串最多被压缩两次（因为每压缩一次长度减半），只有三种压缩方式：</p>\r\n<ul>\r\n<li>先选择一个子段划分成 <span class=\"math inline\">\\(2\\)</span> 段，再选择一个子段划分成 <span class=\"math inline\">\\(2\\)</span> 段。</li>\r\n<li>先选择一个子段划分成 <span class=\"math inline\">\\(2\\)</span> 段，再选择一个子段划分成 <span class=\"math inline\">\\(3\\)</span> 段。</li>\r\n<li>先选择一个子段划分成 <span class=\"math inline\">\\(3\\)</span> 段，再选择一个子段划分成 <span class=\"math inline\">\\(2\\)</span> 段。</li>\r\n</ul>\r\n<p>显然第一种压缩方式可以得到的串是最多的，考虑第一种压缩方式得到的串是怎样的，形如：</p>\r\n<p><span class=\"math inline\">\\(s[a,a+k-1]\\&amp;s[a+k,a+2k-1]\\&amp;s[b,b+k-1]\\&amp;s[b+k,b+2k-1]\\)</span></p>\r\n<p>显然它是由 <span class=\"math inline\">\\(a,b,k\\)</span> 三个参数决定的，故数量是 <span class=\"math inline\">\\(O(n^3)\\)</span>，因此三种压缩方式的总和也是 <span class=\"math inline\">\\(O(n^3)\\)</span>。</p>\r\n<p>另外，通过打表可以求出长度大于 <span class=\"math inline\">\\(12\\)</span> 的串更为精准的上界为 <span class=\"math inline\">\\(41703\\)</span>。</p>\r\n<h3 id=\"cf1562e\">CF1562E</h3>\r\n<p>先分析最长上升子序列有什么性质，假设最长上升子序列为 <span class=\"math display\">\\[\r\ns[l_1,r_1],s[l_2,r_2],\\cdots,s[l_k,r_k]\r\n\\]</span> 比较显然的是对于每个 <span class=\"math inline\">\\(l\\)</span>，选择的 <span class=\"math inline\">\\(r\\)</span> 是一个区间。更强的结论是存在一组最优解满足对于每个 <span class=\"math inline\">\\(l\\)</span>，选择的 <span class=\"math inline\">\\(r\\)</span> 是一个后缀。</p>\r\n<p>反证法：假设对于一个 <span class=\"math inline\">\\(l\\)</span>，选择的 <span class=\"math inline\">\\(r\\in[r_1,r_2]\\)</span>，其中 <span class=\"math inline\">\\(r_2&lt;n\\)</span>，<span class=\"math inline\">\\(s[l,r_2]\\)</span> 之后的子串为 <span class=\"math inline\">\\(s[l&#39;,r&#39;]\\)</span>。如果 <span class=\"math inline\">\\(s[l,r_2+1]&lt;s[l&#39;,r&#39;]\\)</span>，直接在 <span class=\"math inline\">\\(s[l,r_2]\\)</span> 后插入 <span class=\"math inline\">\\(s[l,r_2+1]\\)</span>，得到一组更优的解。否则 <span class=\"math inline\">\\(s[l,r_2]&lt;s[l&#39;,r&#39;]\\le s[l,r_2+1]\\)</span>，说明 <span class=\"math display\">\\[\r\ns[l&#39;,l&#39;+r_1-l]=s[l,r_1]\\\\\r\ns[l&#39;,l&#39;+r_1+1-l]=s[l,r_1+1]\\\\\r\ns[l&#39;,l&#39;+r_1+2-l]=s[l,r_1+2]\\\\\r\n\\cdots\\\\\r\ns[l&#39;,l&#39;+r_2-l]=s[l,r_2]\r\n\\]</span> 于是可以用前者们一一替换后者们，得到一组不存在 <span class=\"math inline\">\\(l\\)</span> 作为左端点的子串的解。</p>\r\n<p>然后就可以 <code>DP</code> 了，设 <span class=\"math inline\">\\(f_i\\)</span> 表示以 <span class=\"math inline\">\\(s[i,n]\\)</span> 结尾的最长上升子序列，转移为 <span class=\"math display\">\\[\r\nf_i=\\max_{j&lt;i\\land s[j,n]&lt;s[i,n]}f_j+n-\\text{lcp}(s[i,n],s[j,n])+1\r\n\\]</span> 可以预处理 <span class=\"math inline\">\\(\\text{lcp}(s[i,n],s[j,n])\\leftarrow \\text{lcp}(s[i+1,n],s[j+1,n])\\)</span>，复杂度 <span class=\"math inline\">\\(O(n^2)\\)</span>。</p>\r\n<h4 id=\"优化\">优化</h4>\r\n<p>可以优化到 <span class=\"math inline\">\\(O(n\\sqrt n)\\)</span>。</p>\r\n<p>首先是 <code>LCP</code> 怎么处理，通常是使用后缀数组的 <code>height</code> 数组，这里也可以这么处理。</p>\r\n<p>求出后缀数组 <span class=\"math inline\">\\(SA\\)</span> 和 <code>height</code> 数组，转移为 <span class=\"math display\">\\[\r\nf_{SA_i}=\\max_{j&lt;i \\land SA_j&lt;SA_i}f_{SA_j}+\\max_{k=j+1}^in-height_k+1\r\n\\]</span> 注意关于 <code>height</code> 的那项是一个后缀 <span class=\"math inline\">\\(\\max\\)</span>，考虑单调栈维护，栈内维护两元组 <span class=\"math inline\">\\((v,S)\\)</span>，每次将 <span class=\"math inline\">\\((n-height_{i+1}+1,\\{i\\})\\)</span> 压栈。假设栈顶元素为 <span class=\"math inline\">\\((v_1,S_1)\\)</span>，下一个元素为 <span class=\"math inline\">\\((v_2,S_2)\\)</span>，如果 <span class=\"math inline\">\\(v_1\\ge v_2\\)</span>，就把这两个元素合并成 <span class=\"math inline\">\\((v_1,S_1\\cup S_2)\\)</span>。</p>\r\n<p>在插入 <span class=\"math inline\">\\(i\\)</span> 个元素后，就可以这样计算 <span class=\"math inline\">\\(f_{i+1}\\)</span>：遍历栈内每个三元组 <span class=\"math inline\">\\((v,S)\\)</span>，用 <span class=\"math inline\">\\(\\max_{j \\in S\\land SA_j\\le SA_i}+v\\rightarrow f_{SA_{i+1}}\\)</span>。但栈内元素可能很多，不能全部遍历，考虑把 <span class=\"math inline\">\\(|S|\\le \\sqrt n\\)</span> 的栈元素的贡献用一个数据结构 <span class=\"math inline\">\\(A\\)</span> 一起维护，每个 <span class=\"math inline\">\\(|S|&gt;\\sqrt n\\)</span> 的元素用数据结构 <span class=\"math inline\">\\(B\\)</span> 单独维护，这样就只需要遍历最多 <span class=\"math inline\">\\(\\sqrt n\\)</span> 个 <span class=\"math inline\">\\(|S|&gt;\\sqrt n\\)</span> 的栈元素，即在 <span class=\"math inline\">\\(A\\)</span> 中查询一次前缀 <span class=\"math inline\">\\(\\max\\)</span>，<span class=\"math inline\">\\(B\\)</span> 中查询 <span class=\"math inline\">\\(\\sqrt n\\)</span> 次前缀 <span class=\"math inline\">\\(\\max\\)</span>。</p>\r\n<p>元素合并的时候需要分类维护：</p>\r\n<ul>\r\n<li>当 <span class=\"math inline\">\\(|S_1|+|S_2|\\le \\sqrt n\\)</span> 时，相当于把 <span class=\"math inline\">\\(S_2\\)</span> 的贡献整体加上一个正数，可以在 <span class=\"math inline\">\\(A\\)</span> 中进行 <span class=\"math inline\">\\(|S_2|\\)</span> 次增大修改操作，这类操作总共不超过 <span class=\"math inline\">\\(n\\sqrt n\\)</span> 次。</li>\r\n<li>当 <span class=\"math inline\">\\(|S_1|&gt;\\sqrt n\\land |S_2|\\le \\sqrt n\\)</span> 时，在 <span class=\"math inline\">\\(B\\)</span> 中进行 <span class=\"math inline\">\\(|S_2|\\)</span> 次插入新元素，这类操作总共不超过 <span class=\"math inline\">\\(n\\)</span> 次。</li>\r\n<li>当 <span class=\"math inline\">\\(|S_1|,|S_2|&gt;\\sqrt n\\)</span> 或 <span class=\"math inline\">\\(|S_1|,|S_2|\\le \\sqrt n\\land |S_1|+|S_2|&gt;\\sqrt n\\)</span> 时，用 <span class=\"math inline\">\\(|S_1|+|S_2|\\)</span> 个元素重构一个 <span class=\"math inline\">\\(B\\)</span>，这类操作总共不超过 <span class=\"math inline\">\\(\\sqrt n\\)</span> 次。</li>\r\n</ul>\r\n<p>综上，当 <span class=\"math inline\">\\(A\\)</span> 做到 <span class=\"math inline\">\\(O(1)\\)</span> 修改，<span class=\"math inline\">\\(O(\\sqrt n)\\)</span> 查询，<span class=\"math inline\">\\(B\\)</span> 做到 <span class=\"math inline\">\\(O(\\sqrt n)\\)</span> 修改，<span class=\"math inline\">\\(O(1)\\)</span> 查询时，复杂度为 <span class=\"math inline\">\\(O(n\\sqrt n)\\)</span>。</p>\r\n<p>因为修改是增大值，查询是前缀 <span class=\"math inline\">\\(\\max\\)</span>，<span class=\"math inline\">\\(A\\)</span> 和 <span class=\"math inline\">\\(B\\)</span> 都可以通过分块实现。</p>\r\n<h3 id=\"cf1562f\">CF1562F</h3>\r\n<blockquote>\r\n<p>有个长度为 <span class=\"math inline\">\\(n\\)</span> 的序列 <span class=\"math inline\">\\(A\\)</span>，元素两两不同且值域连续，但你不知道这个序列，每次可以询问两个不同数的 <span class=\"math inline\">\\(\\text{lcm}\\)</span>，最多使用 <span class=\"math inline\">\\(n+5000\\)</span> 次询问求出 <span class=\"math inline\">\\(A\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(n\\le 10^5,A_i\\le 2\\cdot 10^5\\)</span></p>\r\n</blockquote>\r\n<p>如果 <span class=\"math inline\">\\(\\gcd(a,b)=1\\)</span>，那么 <span class=\"math inline\">\\(\\text{lcm}(a,b)=ab\\)</span>，如果求出了 <span class=\"math inline\">\\(A\\)</span> 序列中最大的质数 <span class=\"math inline\">\\(p\\)</span>，就只需要 <span class=\"math inline\">\\(n-1\\)</span> 次询问就可以求出 <span class=\"math inline\">\\(A\\)</span>。</p>\r\n<p>先考虑 <span class=\"math inline\">\\(p\\)</span> 存在的情况，怎么求出 <span class=\"math inline\">\\(p\\)</span> 和它的位置？询问 <span class=\"math inline\">\\(\\text{lcm}(A_1,A_2),\\text{lcm}(A_2,A_3),\\text{lcm}(A_3,A_4),\\cdots,\\text{lcm}(A_{n-1},n)\\)</span>，所有质因子中最大的就是 <span class=\"math inline\">\\(p\\)</span>，同时也可以推断出 <span class=\"math inline\">\\(p\\)</span> 的位置。然后再进行 <span class=\"math inline\">\\(n-1\\)</span> 次询问就求出了 <span class=\"math inline\">\\(A\\)</span>，询问次数为 <span class=\"math inline\">\\(2n-2\\)</span>，可以处理 <span class=\"math inline\">\\(100&lt;n\\le7500\\)</span>。</p>\r\n<p>再分别考虑 <span class=\"math inline\">\\(n\\le 100\\)</span> 和 <span class=\"math inline\">\\(n&gt;7500\\)</span> 的情况。</p>\r\n<p><span class=\"math inline\">\\(n\\le 100\\)</span> 可以先两两询问 <span class=\"math inline\">\\(\\text{lcm}\\)</span>，再逐个确定。当 <span class=\"math inline\">\\(n&gt;3\\)</span> 时至少有两个奇数，根据两个奇数的 <span class=\"math inline\">\\(\\text{lcm}\\)</span> 为奇数就可以确定所有数的奇偶性，再取 <span class=\"math inline\">\\(\\text{lcm}\\)</span> 中最大的一个，它一定是 <span class=\"math inline\">\\(\\max A_i(\\max A_i-1)\\)</span>，结合奇偶性就可以确定最大的 <span class=\"math inline\">\\(A_i\\)</span>，然后删除最大值，重复上述过程，直到 <span class=\"math inline\">\\(n=3\\)</span> 时，分类讨论即可。</p>\r\n<p>当 <span class=\"math inline\">\\(n&gt;7500\\)</span> 时需要用不超过 <span class=\"math inline\">\\(5000\\)</span> 次询问求出 <span class=\"math inline\">\\(A\\)</span> 序列中最大的质数 <span class=\"math inline\">\\(p\\)</span>，然而比较困难，考虑不找最大的质数，找一个大于 <span class=\"math inline\">\\(450\\)</span> 的质数 <span class=\"math inline\">\\(p&#39;\\)</span> 就行了。</p>\r\n<p>考虑随机询问 <span class=\"math inline\">\\(\\text{lcm}(A_i,A_j)\\)</span>，如果它是两个大于 <span class=\"math inline\">\\(450\\)</span> 的质数 <span class=\"math inline\">\\(p,q\\)</span> 的乘积，那么 <span class=\"math inline\">\\(A_i,A_j\\)</span> 一定就是 <span class=\"math inline\">\\(p,q\\)</span>，考虑进一步确定 <span class=\"math inline\">\\(A_i\\)</span>，随机一个 <span class=\"math inline\">\\(k\\)</span>，如果 <span class=\"math inline\">\\(p\\not|\\text{lcm}(A_i,A_k)\\)</span> 说明 <span class=\"math inline\">\\(A_i=p\\)</span>，如果 <span class=\"math inline\">\\(q\\not|\\text{lcm}(A_j,A_k)\\)</span> 说明 <span class=\"math inline\">\\(A_i=q\\)</span>，期望的总随机次数是 <span class=\"math inline\">\\(O(\\ln^2n)\\)</span>。</p>\r\n<p>考虑 <span class=\"math display\">\\[\r\n\\text{lcm}(p&#39;,x)=\r\n\\begin{cases}\r\nx&amp;(x|p&#39;)\\\\\r\nxp&#39;&amp;(x\\not|p&#39;)\r\n\\end{cases}\r\n\\]</span> 如果 <span class=\"math inline\">\\(\\text{lcm}(p&#39;,x)&gt;2\\cdot 10^5\\)</span> 就说明 <span class=\"math inline\">\\(x\\not|p&#39;\\)</span>，可以确定 <span class=\"math inline\">\\(x\\)</span> 的值，这样至少可以确定 <span class=\"math inline\">\\(n-900\\)</span> 个数，并且最大的质数 <span class=\"math inline\">\\(p\\)</span> 一定被确定了，最后再用 <span class=\"math inline\">\\(p\\)</span> 和剩下的数询问即可。</p>\r\n<h3 id=\"auoj1760\">AUOJ1760</h3>\r\n<blockquote>\r\n<p>有 <span class=\"math inline\">\\(n\\)</span> 个物品，其中可能有一个次品，它的质量与其他物品有差异。你需要多次使用天平后回答谜题：是否存在次品？次品是偏轻还是偏重？称量时，在天平两边放相同数量的物品，以得知那边更重。</p>\r\n<p>构造一个能够解决谜题且称量次数最少的<strong>固定</strong>称量方案。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^6\\)</span></p>\r\n</blockquote>\r\n<p>考虑什么样的称量方案能够解决谜题。</p>\r\n<p>假设称量次数为 <span class=\"math inline\">\\(m\\)</span>，定义矩阵 <span class=\"math inline\">\\(A\\)</span>： <span class=\"math display\">\\[\r\nA_{i,j}=\r\n\\begin{cases}\r\n-1 &amp;(第 j 次称量物品 i 在天平左边)\\\\\r\n0 &amp;(第 j 次称量物品 i 不在天平上)\\\\\r\n1 &amp;(第 j 次称量物品 i 在天平右边)\r\n\\end{cases}\r\n\\]</span> 首先怎么判断有没有次品：如果有物品没上过天平，哪无论如何都不能判断，否则可以判断，不存在次品当且仅当每次天平都平衡。</p>\r\n<p>得到条件一：<span class=\"math inline\">\\(A_i\\ne \\{0,0,\\cdots, 0\\}\\)</span>。</p>\r\n<p>确定了有次品，怎么确定是哪一个：先考虑已知次品偏重时怎么确定，根据每次天平的倾斜情况，可以得到每次称量时次品在天平的哪一边或不在天平上，定义序列 <span class=\"math inline\">\\(B\\)</span>： <span class=\"math display\">\\[\r\nB_i=\r\n\\begin{cases}\r\n-1 &amp;(第 i 次称量次品在天平左边)\\\\\r\n0 &amp;(第 i 次称量次品不在天平上)\\\\\r\n1 &amp;(第 i 次称量次品在天平右边)\r\n\\end{cases}\r\n\\]</span> 然后看 <span class=\"math inline\">\\(B\\)</span> 和 <span class=\"math inline\">\\(A_?\\)</span> 相等就可以确定次品是哪一个。</p>\r\n<p>但是并不知道次品偏重还是偏轻，上面说了假设次品偏重可以得到一个序列 <span class=\"math inline\">\\(B\\)</span>，类似地假设次品偏轻可以得到一个序列 <span class=\"math inline\">\\(C\\)</span>，并且满足 <span class=\"math inline\">\\(C=-B\\)</span>（元素对于互为相反数），可以解决谜题的条件是 <span class=\"math inline\">\\(B\\)</span> 和 <span class=\"math inline\">\\(C\\)</span> 不能同时和某个 <span class=\"math inline\">\\(A_i\\)</span> 相等。</p>\r\n<p>得到条件二：<span class=\"math inline\">\\(\\forall i \\ne j, A_i\\ne A_j \\land A_i \\ne -A_j\\)</span>。</p>\r\n<p>由于每次称量时两边放相同数量的物品。</p>\r\n<p>得到条件三：<span class=\"math inline\">\\(\\forall j\\in[1,m],\\sum_{i=1}^nA_{i,j}=0\\)</span>。</p>\r\n<p>满足以上三个条件就已经合法了，考虑对于一个 <span class=\"math inline\">\\(m\\)</span>，哪些 <span class=\"math inline\">\\(n\\)</span> 可以构造出 <span class=\"math inline\">\\(A\\)</span> 矩阵。</p>\r\n<p>首先在前两个条件的限制下，<span class=\"math inline\">\\(n\\)</span> 最大能取得 <span class=\"math inline\">\\(\\frac{3^m-1}2\\)</span>，再加上第三个限制，<span class=\"math inline\">\\(n\\)</span> 还能不能取到 <span class=\"math inline\">\\(\\frac{3^m-1}2\\)</span>？</p>\r\n<p>答案是否定的，因为对于所有的方案，<span class=\"math inline\">\\(\\forall j\\in[1,m],\\sum_{i=1}^n|A_{i,j}|=3^{m-1}\\)</span>。</p>\r\n<blockquote>\r\n<p>引理，<span class=\"math inline\">\\(m\\)</span> 次称量可以解决谜题当且仅当 <span class=\"math inline\">\\(n\\le \\frac{3^m-3}2\\)</span>。</p>\r\n</blockquote>\r\n<p>这样就可以求出最小的 <span class=\"math inline\">\\(m\\)</span> 了，怎么求方案？</p>\r\n<p>当 <span class=\"math inline\">\\(3|n\\)</span> 时有一个简单的构造：定义 <span class=\"math inline\">\\(\\text{next}(A)\\)</span> 表示把序列 <span class=\"math inline\">\\(A\\)</span> 每一项循环移位（<span class=\"math inline\">\\(-1\\rightarrow 0,0\\rightarrow 1,1\\rightarrow -1\\)</span>）后得到的序列，不难发现一个事实，<span class=\"math inline\">\\(A,\\text{next}(A),\\text{next}(\\text{next}(A))\\)</span> 这三个序列对应位置之和等于 <span class=\"math inline\">\\(0\\)</span>。</p>\r\n<p>如：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 0 -1 1</span><br><span class=\"line\">-1 1 0 -1</span><br><span class=\"line\">0 -1 1 0</span><br></pre></td></tr></table></figure>\r\n<p>除去 <span class=\"math inline\">\\(\\{-1,-1,\\cdots,-1\\}\\)</span> 和 <span class=\"math inline\">\\(\\{1,1,\\cdots,1\\}\\)</span>，把每三个这样的序列分为一组，恰好可以分成 <span class=\"math inline\">\\(\\frac {3^m-3}3\\)</span> 组，其中两两组互相为相反序列，于是删去一 半这样的组，恰好可以得到一个合法的矩阵 <span class=\"math inline\">\\(A\\)</span>。</p>\r\n<h3 id=\"思路一\">思路一</h3>\r\n<p>当 <span class=\"math inline\">\\(3\\not|n\\)</span> 时，感觉问题非常困难，考虑模拟退火：</p>\r\n<ul>\r\n<li>用 <span class=\"math inline\">\\(\\sum_{j=1}^m|\\sum_{i=1}^nA_{i,j}|\\)</span> 作为一个解的权值，问题就是求权值最小的解。</li>\r\n<li>还是先分组，取若干个组和一个不完整的组作为初始解。</li>\r\n<li>每次以以下方式之一生成一个新解，如果新解更优则接受新解，否则以很低的概率接受新解。\r\n<ul>\r\n<li>选择一个 <span class=\"math inline\">\\(i\\)</span>，将 <span class=\"math inline\">\\(A_i\\)</span> 替换成 <span class=\"math inline\">\\(-A_i\\)</span>。</li>\r\n<li>选择一个 <span class=\"math inline\">\\(i\\)</span>，选择一个 <span class=\"math inline\">\\(B\\)</span> 满足 <span class=\"math inline\">\\(B\\)</span> 和 <span class=\"math inline\">\\(-B\\)</span> 都没有在 <span class=\"math inline\">\\(A\\)</span> 中出现过，令 <span class=\"math inline\">\\(A_i=B\\)</span>。</li>\r\n</ul></li>\r\n</ul>\r\n<p>效率还行，但不稳定，对于少数 <span class=\"math inline\">\\(n\\)</span> 速度极慢，<span class=\"math inline\">\\(n\\le 10^4\\)</span> 是完全没有问题的。</p>\r\n<details>\r\n<summary>\r\n<span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span>\r\n</summary>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> lf = <span class=\"keyword\">double</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">gen</span><span class=\"params\">(ll x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ll k = <span class=\"number\">0x9ddfea08eb382d69</span>ull;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">3</span>) x *= k, x ^= x &gt;&gt; <span class=\"number\">47</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * k;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rnd</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> ll s = <span class=\"built_in\">time</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (s += <span class=\"built_in\">gen</span>(s)) &amp; INT_MAX;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">wrt</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> ed)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> streambuf* out = cout.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc out -&gt; sputc</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> c[<span class=\"number\">11</span>]; <span class=\"keyword\">int</span> sz = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> c[++sz] = x % <span class=\"number\">10</span>, x /= <span class=\"number\">10</span>; <span class=\"keyword\">while</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(sz) <span class=\"built_in\">pc</span>(c[sz--] + <span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"built_in\">pc</span>(ed);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m = <span class=\"number\">2</span>, t = <span class=\"number\">9</span>, nw[<span class=\"number\">15</span>], idx, A[<span class=\"number\">2500000</span>][<span class=\"number\">15</span>], c[<span class=\"number\">15</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &gt; m) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, <span class=\"number\">2</span>, <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            idx++;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(k, <span class=\"number\">1</span>, m) A[idx][k] = (nw[k] + j) % <span class=\"number\">3</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(idx == t) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(j, <span class=\"number\">-1</span>, <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        nw[i] = j, <span class=\"built_in\">dfs</span>(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(idx == t) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t - <span class=\"number\">3</span> &gt;&gt; <span class=\"number\">1</span> &lt; n) m++, t *= <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"built_in\">wrt</span>(m, <span class=\"number\">10</span>);</span><br><span class=\"line\">    t = t - <span class=\"number\">1</span> &gt;&gt; <span class=\"number\">1</span>, <span class=\"built_in\">dfs</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, m) c[j] += A[i][j];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> su = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) su += <span class=\"built_in\">abs</span>(c[i]);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(su) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"built_in\">rnd</span>() % n + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">rnd</span>() % t &lt; n) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> d = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, m) d += <span class=\"built_in\">abs</span>(c[j] - <span class=\"number\">2</span> * A[i][j]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(d &lt; su || <span class=\"built_in\">rnd</span>() % n &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">                su = d;</span><br><span class=\"line\">                <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, m) c[j] -= <span class=\"number\">2</span> * A[i][j], A[i][j] *= <span class=\"number\">-1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> k = <span class=\"built_in\">rnd</span>() % (t - n) + n + <span class=\"number\">1</span>, d = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, m) d += <span class=\"built_in\">abs</span>(c[j] - A[i][j] + A[k][j]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(d &lt; su || <span class=\"built_in\">rnd</span>() % n &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">                su = d;</span><br><span class=\"line\">                <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, m) c[j] -= A[i][j] - A[k][j], <span class=\"built_in\">swap</span>(A[i][j], A[k][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">per</span>(j, m, <span class=\"number\">1</span>) v = v * <span class=\"number\">3</span> + A[i][j] + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">wrt</span>(v, <span class=\"number\">32</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n</details>\r\n<h3 id=\"思路二\">思路二</h3>\r\n<p>另外，还有一种优秀的乱搞做法。</p>\r\n<ul>\r\n<li>先分组，取若干个组和一个不完整的组作为初始解，那么 <span class=\"math inline\">\\(\\forall j\\in[1,m],|\\sum_{i=1}^nA_{i,j}|\\le 1\\)</span>。</li>\r\n<li>对于每个 <span class=\"math inline\">\\(j\\)</span>，如果 <span class=\"math inline\">\\(\\sum_{i=1}^nA_{i,j}=-1\\)</span>，找到一个 <span class=\"math inline\">\\(i\\)</span> 满足 <span class=\"math inline\">\\(A_{i,j}&lt;1\\)</span> 并且将 <span class=\"math inline\">\\(A_{i,j}\\)</span> 增大一后仍然合法，然后将 <span class=\"math inline\">\\(A_{i,j}\\)</span> 加一。</li>\r\n</ul>\r\n<p>会有极个别 <span class=\"math inline\">\\(n\\)</span> 求出的解不合法，<span class=\"math inline\">\\(10^6\\)</span> 以内应该不会超过 <span class=\"math inline\">\\(10\\)</span> 个，而且都比较小，取决于初始解（所有可以通过）。</p>\r\n<p>结合思路一可以构造出 <span class=\"math inline\">\\(10^6\\)</span> 内的所有 <span class=\"math inline\">\\(n\\)</span>。</p>\r\n<details>\r\n<summary>\r\n<span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span>\r\n</summary>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">wrt</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> ed)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> streambuf* out = cout.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc out -&gt; sputc</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> c[<span class=\"number\">11</span>]; <span class=\"keyword\">int</span> sz = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> c[++sz] = x % <span class=\"number\">10</span>, x /= <span class=\"number\">10</span>; <span class=\"keyword\">while</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(sz) <span class=\"built_in\">pc</span>(c[sz--] + <span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"built_in\">pc</span>(ed);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m = <span class=\"number\">2</span>, t = <span class=\"number\">9</span>, nw[<span class=\"number\">15</span>], idx, A[<span class=\"number\">1000005</span>], c[<span class=\"number\">15</span>], as;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vs[<span class=\"number\">1600000</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i) <span class=\"built_in\">rep</span>(j, <span class=\"number\">-1</span>, <span class=\"number\">1</span>) &#123; nw[i] = j, <span class=\"built_in\">dfs</span>(i - <span class=\"number\">1</span>); <span class=\"keyword\">if</span>(idx == n) <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">per</span>(k, m, <span class=\"number\">1</span>) x = x * <span class=\"number\">3</span> + (j + nw[k]) % <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!x || vs[x] || idx == n) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        A[++idx] = x, vs[x] = vs[t - x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(k, <span class=\"number\">1</span>, m) c[k] += (j + nw[k]) % <span class=\"number\">3</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t - <span class=\"number\">3</span> &gt;&gt; <span class=\"number\">1</span> &lt; n) m++, t *= <span class=\"number\">3</span>;</span><br><span class=\"line\">    t--, vs[t / <span class=\"number\">2</span>] = <span class=\"number\">1</span>, <span class=\"built_in\">wrt</span>(m, <span class=\"number\">10</span>), nw[m] = <span class=\"number\">-1</span>, <span class=\"built_in\">dfs</span>(m - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n % <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) as += <span class=\"built_in\">abs</span>(c[i]);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> th = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!c[j]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> v = A[i] / th % <span class=\"number\">3</span>;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> Try = [&amp;](<span class=\"keyword\">int</span> x) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> nw = A[i] + x * th;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(vs[nw]) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    vs[A[i]] = vs[t - A[i]] = <span class=\"number\">0</span>, vs[nw] = vs[t - nw] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    as -= <span class=\"built_in\">abs</span>(c[j]), c[j] += x, v += x, as += <span class=\"built_in\">abs</span>(c[j]), A[i] = nw;</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(v &lt; <span class=\"number\">2</span> &amp;&amp; c[j] &lt; <span class=\"number\">0</span>) <span class=\"built_in\">Try</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(v &gt; <span class=\"number\">0</span> &amp;&amp; c[j] &gt; <span class=\"number\">0</span>) <span class=\"built_in\">Try</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            th *= <span class=\"number\">3</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">wrt</span>(A[i], <span class=\"number\">32</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n</details>\r\n<h3 id=\"思路三\">思路三</h3>\r\n<p>这是官方解法，说是爬山算法，但感觉比较微妙，因为稍微扰动一下初始解就会有极个别 <span class=\"math inline\">\\(n\\)</span> 跑不出来，流程是这样的：</p>\r\n<ul>\r\n<li><p>用 <span class=\"math inline\">\\(\\sum_{j=1}^m|\\sum_{i=1}^nA_{i,j}|\\)</span> 作为一个解的权值，问题就是求权值最小的解。</p></li>\r\n<li><p><span class=\"math inline\">\\(A\\)</span> 矩阵初始为空，然按字典序<strong>从大到小</strong>枚举长度为 <span class=\"math inline\">\\(m\\)</span>，值域为 <span class=\"math inline\">\\(\\{-1,0,1\\}\\)</span> 的序列 <span class=\"math inline\">\\(B\\)</span>，如果 <span class=\"math inline\">\\(B\\)</span> 和 <span class=\"math inline\">\\(-B\\)</span> 没有在 <span class=\"math inline\">\\(A\\)</span> 出现过，就把 <span class=\"math inline\">\\(B,\\text{next}(B),\\text{next}(\\text{next}(B))\\)</span> 依次加入 <span class=\"math inline\">\\(A\\)</span> 末尾，加入 <span class=\"math inline\">\\(n\\)</span> 行时终止。那么 <span class=\"math inline\">\\(\\forall j\\in[1,m],|\\sum_{i=1}^nA_{i,j}|\\le 1\\)</span>。</p></li>\r\n<li><p>对当前解重复进行如下修改，直到权值为 <span class=\"math inline\">\\(0\\)</span>：</p>\r\n<p>从小到大依次枚举 <span class=\"math inline\">\\(j\\)</span> 和 <span class=\"math inline\">\\(i\\)</span>，然后进行以下操作：</p>\r\n<ul>\r\n<li>如果 <span class=\"math inline\">\\(\\sum_{i=1}^nA_{i,j}=-1\\land A_{i,j}&lt;1\\)</span>，尝试让 <span class=\"math inline\">\\(A_{i,j}\\)</span> 加一。</li>\r\n<li>如果 <span class=\"math inline\">\\(\\sum_{i=1}^nA_{i,j}=1\\)</span>，尝试让 <span class=\"math inline\">\\(A_{i,j}=0\\)</span>。</li>\r\n</ul></li>\r\n</ul>\r\n<p>实测能构造出 <span class=\"math inline\">\\(10^6\\)</span> 内的所有 <span class=\"math inline\">\\(n\\)</span>。</p>\r\n<details>\r\n<summary>\r\n<span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span>\r\n</summary>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">wrt</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> ed)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> streambuf* out = cout.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc out -&gt; sputc</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> c[<span class=\"number\">11</span>]; <span class=\"keyword\">int</span> sz = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> c[++sz] = x % <span class=\"number\">10</span>, x /= <span class=\"number\">10</span>; <span class=\"keyword\">while</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(sz) <span class=\"built_in\">pc</span>(c[sz--] + <span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"built_in\">pc</span>(ed);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m = <span class=\"number\">2</span>, t = <span class=\"number\">9</span>, nw[<span class=\"number\">15</span>], idx, A[<span class=\"number\">797170</span>], c[<span class=\"number\">15</span>], as;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vs[<span class=\"number\">1600000</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i) <span class=\"built_in\">per</span>(j, <span class=\"number\">1</span>, <span class=\"number\">-1</span>) &#123; nw[i] = j, <span class=\"built_in\">dfs</span>(i - <span class=\"number\">1</span>); <span class=\"keyword\">if</span>(idx == n) <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">per</span>(k, m, <span class=\"number\">1</span>) x = x * <span class=\"number\">3</span> + (j + nw[k]) % <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == t || vs[x] || idx == n) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        A[++idx] = x, vs[x] = vs[t - x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(k, <span class=\"number\">1</span>, m) c[k] += (j + nw[k]) % <span class=\"number\">3</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t - <span class=\"number\">3</span> &gt;&gt; <span class=\"number\">1</span> &lt; n) m++, t *= <span class=\"number\">3</span>;</span><br><span class=\"line\">    t--, vs[t / <span class=\"number\">2</span>] = <span class=\"number\">1</span>, <span class=\"built_in\">wrt</span>(m, <span class=\"number\">10</span>), nw[m] = <span class=\"number\">1</span>, <span class=\"built_in\">dfs</span>(m - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) as += <span class=\"built_in\">abs</span>(c[i]);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(as) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> th = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!c[j]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> v = A[i] / th % <span class=\"number\">3</span>;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> Try = [&amp;](<span class=\"keyword\">int</span> x) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> nw = A[i] + x * th;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(vs[nw]) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    vs[A[i]] = vs[t - A[i]] = <span class=\"number\">0</span>, vs[nw] = vs[t - nw] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    as -= <span class=\"built_in\">abs</span>(c[j]), c[j] += x, v += x, as += <span class=\"built_in\">abs</span>(c[j]), A[i] = nw;</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(v &lt; <span class=\"number\">2</span> &amp;&amp; c[j] &lt; <span class=\"number\">0</span>) <span class=\"built_in\">Try</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(v &gt; <span class=\"number\">0</span> &amp;&amp; c[j] &gt; <span class=\"number\">0</span>) <span class=\"built_in\">Try</span>(-v);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            th *= <span class=\"number\">3</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">wrt</span>(A[i], <span class=\"number\">32</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n</details>\r\n<h3 id=\"auoj1761\">AUOJ1761</h3>\r\n<blockquote>\r\n<p>有一个长度为 <span class=\"math inline\">\\(n\\)</span> 的序列 <span class=\"math inline\">\\(A\\)</span> （下标从 <span class=\"math inline\">\\(1\\)</span> 开始）和一个长度为 <span class=\"math inline\">\\(m\\)</span> 的序列 <span class=\"math inline\">\\(B\\)</span>（下标从 <span class=\"math inline\">\\(0\\)</span> 开始）。</p>\r\n<p><span class=\"math inline\">\\(A\\)</span> 初始全为 <span class=\"math inline\">\\(0\\)</span>，每一天 <span class=\"math inline\">\\(A_i\\)</span> 会增加 <span class=\"math inline\">\\(i\\)</span>，在第 <span class=\"math inline\">\\(j\\)</span> 天，如果 <span class=\"math inline\">\\(A_i&gt;B_{j\\bmod m}\\)</span>，则进行一次操作，令 <span class=\"math inline\">\\(A_i=B_{j\\bmod m}\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(q\\)</span> 次询问，每次询问前 <span class=\"math inline\">\\(d_i\\)</span> 天总共会进行多少次操作。</p>\r\n<p><span class=\"math inline\">\\(n,m,q\\le 3\\cdot 10^5,d_i\\le 3\\cdot 10^{12},t_i\\le 10^{18}\\)</span></p>\r\n</blockquote>\r\n<p>由于 <span class=\"math inline\">\\(d_i\\)</span> 很大，应该会用到操作的周期性，事实上对于每个 <span class=\"math inline\">\\(A_i\\)</span>，从第一次操作它开始周期就为 <span class=\"math inline\">\\(m\\)</span>。</p>\r\n<blockquote>\r\n<p>引理：假设在第 <span class=\"math inline\">\\(p\\)</span> 天操作了 <span class=\"math inline\">\\(A_i\\)</span>，那么它在第 <span class=\"math inline\">\\(p+m\\)</span> 天又会被操作。</p>\r\n</blockquote>\r\n<p>证明：第 <span class=\"math inline\">\\(p-m\\)</span> 天 <span class=\"math inline\">\\(A_i\\)</span> 小于等于第 <span class=\"math inline\">\\(p\\)</span> 天的 <span class=\"math inline\">\\(A_i=B_{p \\bmod m}\\)</span>，感性理解 <span class=\"math inline\">\\(A_i\\)</span> 越小在 <span class=\"math inline\">\\(m\\)</span> 天后越容易操作，第 <span class=\"math inline\">\\(p\\)</span> 天操作了，第 <span class=\"math inline\">\\(p+m\\)</span> 天肯定要操作。</p>\r\n<p>设 <span class=\"math inline\">\\(A_i\\)</span> 第一次操作在第 <span class=\"math inline\">\\(p_i\\)</span> 天，那么在第 <span class=\"math inline\">\\(p_i,p_i+m,p_i+2m,pi+3m,\\cdots\\)</span> 都会操作，于是周期就是 <span class=\"math inline\">\\(m\\)</span>。</p>\r\n<p>不难发现 <span class=\"math inline\">\\(p_i\\)</span> 是递减的，因为任意时刻 <span class=\"math inline\">\\(A\\)</span> 序列都是递增的，每次操作的都是一段后缀。那么对于一次询问，进行过操作的 <span class=\"math inline\">\\(A_i\\)</span> 是一段后缀，只要求出了 <span class=\"math inline\">\\(p_i\\)</span> 就可以二分出这个后缀，下面考虑怎么求 <span class=\"math inline\">\\(p_i\\)</span>。</p>\r\n<p>设 <span class=\"math inline\">\\(pos\\)</span> 表示 <span class=\"math inline\">\\(B\\)</span> 中最小元素的位置，对于每个 <span class=\"math inline\">\\(i\\)</span> 可以直接算出 <span class=\"math inline\">\\(A_i\\)</span> 第一次被 <span class=\"math inline\">\\(B_{pos}\\)</span> 操作的时间 <span class=\"math inline\">\\(T_i\\)</span>，那么 <span class=\"math inline\">\\(p_i\\in[T_i-m+1,T_i]\\)</span>，设 <span class=\"math inline\">\\(p_i=T_i-m+k_i\\)</span>，<span class=\"math inline\">\\(k_i\\)</span> 就是最小的 <span class=\"math inline\">\\(x\\)</span> 满足 <span class=\"math inline\">\\(ix+(T_i-m)i&gt;B_{pos+x}\\)</span>，考虑在线段树上每个结点 <span class=\"math inline\">\\([l,r]\\)</span> 维护 <span class=\"math inline\">\\(\\min_{j=l}^rB_{pos+j}-ij\\)</span>，每次只需要二分出最小的 <span class=\"math inline\">\\(x\\)</span> 满足 <span class=\"math inline\">\\(\\min_{j=1}^x\\{B_{pos+j}-ij\\}&lt;(T_i-m)i\\)</span>，注意到式子是可以斜率优化的，随着 <span class=\"math inline\">\\(i\\)</span> 的增大，对每个结点用一个单调队列维护下凸包。复杂度为 <span class=\"math inline\">\\(O(n\\log n)\\)</span>。这样就求出了 <span class=\"math inline\">\\(p_i\\)</span>。</p>\r\n<p>对于询问 <span class=\"math inline\">\\(d\\)</span>，每个 <span class=\"math inline\">\\(A_i\\)</span> 的贡献可以分为若干个完整周期和一个不完整周期。对于完整周期，由于周期长度为 <span class=\"math inline\">\\(m\\)</span>，可以用线段树直接模拟周期中每一天的修改，然后就知道每个 <span class=\"math inline\">\\(A_i\\)</span> 一个周期被清理多少次。对于不完整周期，可以把所有询问离线下来，然后用一个线段树模拟这个不完整周期，大致思路是在 <span class=\"math inline\">\\(p_i\\bmod m\\)</span> 天插入 <span class=\"math inline\">\\(A_i\\)</span>，在 <span class=\"math inline\">\\(d\\bmod m\\)</span> 天进行查询，但有可能 <span class=\"math inline\">\\(d\\bmod m&lt;p_i\\bmod m\\)</span>，所以实现上需要分类讨论一下。</p>\r\n<h3 id=\"codechef-btree\">CodeChef-btree</h3>\r\n<blockquote>\r\n<p>定义 <span class=\"math inline\">\\(S(u,k)\\)</span> 表示与 <span class=\"math inline\">\\(u\\)</span> 距离不超过 <span class=\"math inline\">\\(k\\)</span> 的点集。</p>\r\n<p>给定一棵 <span class=\"math inline\">\\(n\\)</span> 个点的树，<span class=\"math inline\">\\(q\\)</span> 次询问，每次询问 <span class=\"math inline\">\\(|S(u_1,k_1)\\cup S(u_2,k_2)\\cup S(u_3,k_3)\\cup \\cdots \\cup S(u_{m_i},k_{m_i})|\\)</span> 。</p>\r\n<p><span class=\"math inline\">\\(n,q\\le 5\\cdot 10^4,\\sum_{i=1}^qm_i\\le 5\\cdot 10^5\\)</span>。</p>\r\n</blockquote>\r\n<p>考虑 <span class=\"math inline\">\\(|S(u,k)|\\)</span> 怎么求，可以离线后点分治，也可以建出点分树在线求。</p>\r\n<h4 id=\"sol-1-1\">Sol 1</h4>\r\n<p>先对 <span class=\"math inline\">\\(u_1,u_2,u_3,\\cdots,u_{m_i}\\)</span> 建虚树，假设虚树中非关键点的半径为 <span class=\"math inline\">\\(0\\)</span>。</p>\r\n<p>如果 <span class=\"math inline\">\\((u_1,k_1),(u_2,k_2)\\)</span> 满足 <span class=\"math inline\">\\(k_1-\\text{dis}(u_1,u_2)&gt;k_2\\)</span>，就说明了 <span class=\"math inline\">\\(S(u_2,k_2)\\subsetneq S(u_1,k_1)\\)</span>，即 <span class=\"math inline\">\\(S(u_2,k_2)\\)</span> 是没用的，但不能删去它，而是令 <span class=\"math inline\">\\(k_2=k_1-\\text{dis}(u_1,u_2)\\)</span>。</p>\r\n<p>考虑对所有点的半径更新，直到不能更新为止，一种方法是像 <code>Dijkstra</code> 一样每次取半径最大的点更新周围点的半径，另一种做法是树形 <code>DP</code>，自底向上更新一遍，再自顶向下更新一遍。</p>\r\n<p>然后发现一个很好的性质，记虚树点集为 <span class=\"math inline\">\\(V\\)</span>，边集为 <span class=\"math inline\">\\(E\\)</span>，<span class=\"math inline\">\\(u\\)</span> 的半径为 <span class=\"math inline\">\\(r_u\\)</span>，答案等于 <span class=\"math inline\">\\(\\sum_{u\\in V}|S(u,r_u)|-\\sum_{(u,v)\\in E}|S(u,r_u)\\cap S(v,r_v)|\\)</span>。证明很简单，考虑自顶向下将每个 <span class=\"math inline\">\\(S(u,r_u)\\)</span> 并入，每次新增的点数为 <span class=\"math inline\">\\(|S(u,r_u)|-|S(u,r_u)\\cap S(fa_u,r_{fa_u})|\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(|S(u,r_u)|\\)</span> 可以在点分树上查询，<span class=\"math inline\">\\(|S(u,r_u)\\cap S(v,r_v)|\\)</span> 是一个 <span class=\"math inline\">\\(S(w,r)\\)</span>，其中 <span class=\"math inline\">\\(w\\)</span> 可能是顶点，也可能是一条边的中点，如果在每条边上新建一个点，<span class=\"math inline\">\\(w\\)</span> 就一定是顶点了。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O((n+m)\\log n)\\)</span>。</p>\r\n<h4 id=\"sol-2-1\">Sol 2</h4>\r\n<p>答案求的是并集的大小，是 <code>bitset</code> 可以优化的。</p>\r\n<p>注意到 <span class=\"math inline\">\\(nq \\le 2.5\\cdot 10^9,n\\sum_{i=1}^qm_i\\le 2.5\\cdot 10^{10}\\)</span>，一个时间复杂度 <span class=\"math inline\">\\(O(\\frac{n\\sum_{i=1}^qm_i}\\omega)\\)</span>，空间复杂度 <span class=\"math inline\">\\(O(\\frac{nq}\\omega)\\)</span> 的算法是可以通过的。</p>\r\n<p>怎么快速求 <span class=\"math inline\">\\(S(u,k)\\)</span> 的 <code>bitset</code> 形式，希望能做到 <span class=\"math inline\">\\(O(\\frac n\\omega)\\)</span>。</p>\r\n<p>考虑把所有询问离线下来，在点分治的过程中每个 <span class=\"math inline\">\\(S(u,k)\\)</span> 都被分解成了 <span class=\"math inline\">\\(O(\\log n)\\)</span> 个形如”深度不超过 <span class=\"math inline\">\\(d\\)</span> 的点集”的并，如果每次都把”深度不超过 <span class=\"math inline\">\\(d\\)</span> 的点集”并上去，求 <span class=\"math inline\">\\(S(u,k)\\)</span> 就是 <span class=\"math inline\">\\(O(\\frac{n\\log n}\\omega)\\)</span> 的，不太行。注意到这 <span class=\"math inline\">\\(O(\\log n)\\)</span> 个点集的范围分别为 <span class=\"math inline\">\\(n,\\frac n2,\\frac n4,\\frac n8,\\cdots\\)</span>，总和是 <span class=\"math inline\">\\(2n\\)</span> 的，但每个点集编号的范围都是 <span class=\"math inline\">\\([1,n]\\)</span>，每次并上去就太不优秀了，如何缩小编号的范围？只需要把所有点按照点分树的 <code>DFS</code> 序重新编号，那么每个点集编号的范围就缩小到了 <span class=\"math inline\">\\(n,\\frac n2,\\frac n4,\\frac n8,\\cdots\\)</span>，每次只需要并到一个区间上，复杂度 <span class=\"math inline\">\\(O(\\frac n\\omega)\\)</span>。</p>\r\n<p>做法就是对每个询问开一个 <code>bitset</code>，点分治的过程中更新 <code>bitset</code> 的一个区间，答案就是对于 <code>bitset</code> 的 <code>popcount</code>，需要用 <code>unsigned long long</code> 实现 <code>bitset</code>，<code>popcount</code> 也建议手写，预处理 <span class=\"math inline\">\\([0,65536)\\)</span> 内所有数的 <code>popcount</code>，把每个 <code>unsigned long long</code> 拆成四个 <span class=\"math inline\">\\([0,65536)\\)</span> 内的数。</p>\r\n<p>实测比 Sol 1 快。</p>\r\n<h3 id=\"ural2118\">URAL2118</h3>\r\n<blockquote>\r\n<p>给定前 <span class=\"math inline\">\\(k\\)</span> 个字母的 <span class=\"math inline\">\\(01\\)</span> 前缀编码（不存在一个编码是另一个编码的前缀）。</p>\r\n<p>给定字符串 <span class=\"math inline\">\\(s\\)</span>，设其解码后的 <span class=\"math inline\">\\(01\\)</span> 串为 <span class=\"math inline\">\\(S\\)</span>，求最多能将 <span class=\"math inline\">\\(S\\)</span> 划分为多少段使得每一段都无法解码，无解输出 <span class=\"math inline\">\\(-1\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(k \\le 52, n\\le 10^6\\)</span></p>\r\n</blockquote>\r\n<p>首先考虑两种特殊情况：</p>\r\n<ul>\r\n<li>编码中既有 <span class=\"math inline\">\\(0\\)</span>，也有 <span class=\"math inline\">\\(1\\)</span>，那 <span class=\"math inline\">\\(S\\)</span> 无论怎么划分都可以解码。</li>\r\n<li>编码中既没 <span class=\"math inline\">\\(0\\)</span>，也没 <span class=\"math inline\">\\(1\\)</span>，那么答案为 <span class=\"math inline\">\\(|S|\\)</span>。</li>\r\n</ul>\r\n<p>剩下的情况为：有 <span class=\"math inline\">\\(0\\)</span> 无 <span class=\"math inline\">\\(1\\)</span> 和有 <span class=\"math inline\">\\(1\\)</span> 无 <span class=\"math inline\">\\(0\\)</span>，由于对称性，只考虑有 <span class=\"math inline\">\\(0\\)</span> 无 <span class=\"math inline\">\\(1\\)</span>。</p>\r\n<p>首先答案的上界为 <span class=\"math inline\">\\(1\\)</span> 的个数，因为全 <span class=\"math inline\">\\(0\\)</span> 的一段是可以被解码的。</p>\r\n<p>如果最后一位为 <span class=\"math inline\">\\(1\\)</span>，那么在每个 <span class=\"math inline\">\\(1\\)</span> 后面断开，就可以取到这个上界。</p>\r\n<p>如果最后一位为 <span class=\"math inline\">\\(0\\)</span>，假设最后一段 <span class=\"math inline\">\\(T\\)</span>，可以说明存在最优解满足 <span class=\"math inline\">\\(T\\)</span> 前面是 <span class=\"math inline\">\\(1\\)</span>：假设 <span class=\"math inline\">\\(T\\)</span> 前面有 <strong>连续</strong> 的 <span class=\"math inline\">\\(x\\)</span> 个 <span class=\"math inline\">\\(0\\)</span>，前面总共有 <span class=\"math inline\">\\(y\\)</span> 个 <span class=\"math inline\">\\(1\\)</span>。那么答案的上界为 <span class=\"math inline\">\\(y+1\\)</span>，把这 <span class=\"math inline\">\\(x\\)</span> 个 <span class=\"math inline\">\\(0\\)</span> 加入 <span class=\"math inline\">\\(T\\)</span>，然后在 <span class=\"math inline\">\\(T\\)</span> 前面的每个 <span class=\"math inline\">\\(1\\)</span> 后面断开就可以到达这个上界。</p>\r\n<p>如果 <span class=\"math inline\">\\(T\\)</span> 前面有 <span class=\"math inline\">\\(y\\)</span> 个 <span class=\"math inline\">\\(1\\)</span>，最大段数就是 <span class=\"math inline\">\\(y+1\\)</span>，问题就是求最大的 <span class=\"math inline\">\\(y\\)</span>，假设 <span class=\"math inline\">\\(T&#39;\\)</span> 是最短的无法被解码的后缀，可以说明最大的 <span class=\"math inline\">\\(y\\)</span> 等于 <span class=\"math inline\">\\(T&#39;\\)</span> 前面 <span class=\"math inline\">\\(1\\)</span> 的个数：由于 <span class=\"math inline\">\\(|T|\\ge |T&#39;|\\)</span>，所以 <span class=\"math inline\">\\(y\\)</span> 不会超过 <span class=\"math inline\">\\(T&#39;\\)</span> 前面 <span class=\"math inline\">\\(1\\)</span> 的个数，另外，令 <span class=\"math inline\">\\(T=T&#39;前面极长的一段0+T&#39;\\)</span>，<span class=\"math inline\">\\(y\\)</span> 就可以取到这个上界。</p>\r\n<p>问题转化成了求 <span class=\"math inline\">\\(T&#39;\\)</span>，那么 <span class=\"math inline\">\\(T&#39;\\)</span> 的任何前缀都无法解码，否则 <span class=\"math inline\">\\(T&#39;\\)</span> 不是最短的，记 <span class=\"math inline\">\\(suffix(i)\\)</span> 表示 <span class=\"math inline\">\\(S\\)</span> 长度为 <span class=\"math inline\">\\(i\\)</span> 的后缀，问题就是依次判断 <span class=\"math inline\">\\(suffix(1),suffix(2),suffix(3),\\cdots\\)</span> 是否有前缀可以被解码，<code>AC</code> 自动机即可。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(nk)\\)</span>。</p>\r\n<h3 id=\"graph-subpaths\">Graph Subpaths</h3>\r\n<blockquote>\r\n<p>没有提交地址。</p>\r\n<p>给定一张 <span class=\"math inline\">\\(n\\)</span> 个点 <span class=\"math inline\">\\(m\\)</span> 条边的有向无环图，再给定 <span class=\"math inline\">\\(k\\)</span> 条路径，每条路径长度为 <span class=\"math inline\">\\(l_i\\)</span>，一条合法路径不包含这 <span class=\"math inline\">\\(k\\)</span> 条路径。</p>\r\n<p>对于 <span class=\"math inline\">\\(i \\in [2,n]\\)</span>，求 <span class=\"math inline\">\\(1\\rightarrow i\\)</span> 的合法路径条数。</p>\r\n<p><span class=\"math inline\">\\(n,m,\\sum_{i=1}^kl_i \\le 10^5\\)</span></p>\r\n</blockquote>\r\n<h3 id=\"sol-1-2\">Sol 1</h3>\r\n<p>首先把所有边反向，就转化成了求 <span class=\"math inline\">\\(i\\rightarrow 1\\)</span> 的合法路径条数。</p>\r\n<p>对于边 <span class=\"math inline\">\\((u,v)\\)</span>，标记它的权值为 <span class=\"math inline\">\\(v\\)</span>，设 <span class=\"math inline\">\\(T_i\\)</span> 表示 <span class=\"math inline\">\\(i\\rightarrow 1\\)</span> 所有合法路径组成的 <code>trie</code>，考虑怎么按拓扑序求出每一个 <span class=\"math inline\">\\(T_u\\)</span>，对于边 <span class=\"math inline\">\\((u,v)\\)</span>，<span class=\"math inline\">\\(T_v\\)</span> 是已经求过了，把 <span class=\"math inline\">\\(T_v\\)</span> 复制到根的儿子，但这样会有一些以 <span class=\"math inline\">\\(u\\)</span> 为起点的不合法路径，需要删除这些路径：从 <span class=\"math inline\">\\(T_u\\)</span> 的根出发沿着不合法路径走，把以终点为根的子树删除即可。<span class=\"math inline\">\\(u\\)</span> 的答案就是 <span class=\"math inline\">\\(T_u\\)</span> 的叶子个数。</p>\r\n<p>由于 <span class=\"math inline\">\\(T_u\\)</span> 非常大，当然不能直接存下来，可行的方法是用可持久化的 <code>trie</code>，对于边 <span class=\"math inline\">\\((u,v)\\)</span>，只需要从 <span class=\"math inline\">\\(T_u\\)</span> 的根向 <span class=\"math inline\">\\(T_v\\)</span> 连一条边就行了，而不用复制整棵 <span class=\"math inline\">\\(T_v\\)</span>，删除子树也只需要对路径上的结点建新版本。</p>\r\n<p>一个问题是儿子列表的维护，如果用链表维护的话，删除子树时新建的结点需要从原版本复制整个链表，复杂度可能达到 <span class=\"math inline\">\\(O(n^2)\\)</span>。</p>\r\n<p>用主席树维护儿子列表就可以 <span class=\"math inline\">\\(O(n\\log n)\\)</span> 地新建结点。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n\\log n)\\)</span>。</p>\r\n<h3 id=\"sol-2-2\">Sol 2</h3>\r\n<p>对所有路径建 <code>AC</code> 自动机，不难想到一个 <span class=\"math inline\">\\(O(n^2)\\)</span> 状态的 <code>DP</code>，设 <span class=\"math inline\">\\(f_{i,u}\\)</span> 表示在原图中走到 <span class=\"math inline\">\\(i\\)</span>，<code>AC</code> 自动机上走到 <code>u</code>，且没有经过 <code>AC</code> 自动机上终止结点的路径条数。</p>\r\n<p>由于 <code>AC</code> 自动机上的点对应唯一原图中的点的，所以 <code>DP</code> 状态定义成 <span class=\"math inline\">\\(f_u\\)</span> 就可以转移了。</p>\r\n<p>由于建 <code>AC</code> 自动机需要主席树，复杂度 <span class=\"math inline\">\\(O(n\\log n)\\)</span>。</p>\r\n<h3 id=\"zoj3390\">ZOJ3390</h3>\r\n<blockquote>\r\n<p>对于两棵树 <span class=\"math inline\">\\(T_1,T_2\\)</span>，定义 <span class=\"math inline\">\\(T_1+T_2\\)</span> 表示把根合并，<span class=\"math inline\">\\(T_1\\cdot T_2\\)</span> 表示把 <span class=\"math inline\">\\(T_1\\)</span> 中每个结点换成 <span class=\"math inline\">\\(T_2\\)</span>，<span class=\"math inline\">\\(T_1=T_2\\)</span> 表示树同构。</p>\r\n<p>给定树 <span class=\"math inline\">\\(A,B,C\\)</span>，求 <span class=\"math inline\">\\(X,Y\\)</span> 满足 <span class=\"math inline\">\\(AX+BY=C\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(|A|,|B|,|C| \\le 10^5\\)</span></p>\r\n</blockquote>\r\n<p>设 <span class=\"math inline\">\\(height(T)\\)</span> 表示 <span class=\"math inline\">\\(T\\)</span> 的树高（最深叶子到根的距离）。</p>\r\n<p>可以发现 <span class=\"math inline\">\\(height(T_1+T_2)=\\max(height(T_1),height(T_2)),height(T_1\\cdot T_2)=height(T_1)+height(T_2)\\)</span>。</p>\r\n<p>那么 <span class=\"math inline\">\\(\\max(height(A)+height(X),height(B)+height(Y))=height(C)\\)</span>，假设 <span class=\"math inline\">\\(height(A)+height(X)=height(C)\\)</span>（另一种情况是一样的）。</p>\r\n<p>这样就知道了 <span class=\"math inline\">\\(height(X)\\)</span>，考虑怎么求 <span class=\"math inline\">\\(X\\)</span>，很简单，假设 <span class=\"math inline\">\\(u\\)</span> 为 <span class=\"math inline\">\\(C\\)</span> 中最深叶子的 <span class=\"math inline\">\\(height(X)\\)</span> 级祖先，以 <span class=\"math inline\">\\(u\\)</span> 为根的子树就是 <span class=\"math inline\">\\(X\\)</span>，这样就知道了 <span class=\"math inline\">\\(AX\\)</span>，然后就可以求出 <span class=\"math inline\">\\(BY\\)</span>，再用类似的方法就可以求出 <span class=\"math inline\">\\(Y\\)</span> 了。</p>\r\n<p>虽然思路很简单，但是有一定实现难度，求 <span class=\"math inline\">\\(BY\\)</span> 时树的“减法“，以及判定答案是否合法都需要用到树哈希。</p>\r\n<p>树哈希公式： <span class=\"math display\">\\[\r\nf_u=1+\\sum_{v\\in son(u)}f_v\\cdot \\text{prime}(size_v)\r\n\\]</span> 其中 <span class=\"math inline\">\\(\\text{prime}(i)\\)</span> 表示第 <span class=\"math inline\">\\(i\\)</span> 个质数。</p>\r\n<p><strong>注：</strong>对于两棵大小不同的树 <span class=\"math inline\">\\(T_1,T_2\\)</span>，<span class=\"math inline\">\\(f_{T_1}=f_{T_2}\\)</span> 是可能的，因此哈希应当和子树大小捆绑在一起。</p>\r\n<p><code>Generator</code> ：参数 <span class=\"math inline\">\\(T,A,B,C,D\\)</span> 可调，分别表示数据组数和树 <span class=\"math inline\">\\(A,X,B,Y\\)</span> 的大小。</p>\r\n<details>\r\n<summary>\r\n<span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span>\r\n</summary>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eb emplace_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mp make_pair</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SZ(x) int((x).size())</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l + r) / 2)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lc o * 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rc o * 2 + 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lch l, mid, lc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rch mid + 1, r, rc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> cmi(a, b) (a = min(a, b))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> cma(a, b) (a = max(a, b))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lb lower_bound</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ub upper_bound</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> bs binary_search</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pop __builtin_popcount</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> llpop __builtin_popcountll</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ctz __builtin_ctz</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> llctz __builtin_ctzll</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clz __builtin_clz</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> llclz __builtin_clzll</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> par __builtin_parity</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> llpar __builtin_parityll</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> lf = <span class=\"keyword\">double</span>;</span><br><span class=\"line\"><span class=\"comment\">// using P = pair&lt;int, int&gt;;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> V = vector&lt;<span class=\"keyword\">int</span>&gt;;</span><br><span class=\"line\"><span class=\"comment\">// using cmp = complex&lt;lf&gt;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">gen</span><span class=\"params\">(ll x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ll k = <span class=\"number\">0x9ddfea08eb382d69</span>ull;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">3</span>) x *= k, x ^= x &gt;&gt; <span class=\"number\">47</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * k;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rnd</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> ll s = <span class=\"built_in\">time</span>(<span class=\"number\">0</span>) + (ll)<span class=\"keyword\">new</span> <span class=\"keyword\">char</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (s += <span class=\"built_in\">gen</span>(s)) &amp; INT_MAX;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">V <span class=\"title\">tmul</span><span class=\"params\">(V a, V b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = a.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>, m = b.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>, su = n;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, <span class=\"number\">2</span>, m) a.<span class=\"built_in\">pb</span>(b[j] == <span class=\"number\">1</span> ? i : b[j] + su - <span class=\"number\">1</span>);</span><br><span class=\"line\">        su += m - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">V <span class=\"title\">tplus</span><span class=\"params\">(V a, V b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = a.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>, m = b.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(j, <span class=\"number\">2</span>, m) a.<span class=\"built_in\">pb</span>(b[j] == <span class=\"number\">1</span> ? <span class=\"number\">1</span> : b[j] + n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">5</span>, A = <span class=\"number\">5</span>, B = <span class=\"number\">5</span>, C = <span class=\"number\">5</span>, D = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> T = <span class=\"number\">100000</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, T);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(kase, <span class=\"number\">1</span>, T) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = <span class=\"built_in\">rnd</span>() % A + <span class=\"number\">1</span>, b = <span class=\"built_in\">rnd</span>() % B + <span class=\"number\">1</span>, c = <span class=\"built_in\">rnd</span>() % C + <span class=\"number\">1</span>, d = <span class=\"built_in\">rnd</span>() % D + <span class=\"number\">1</span>;</span><br><span class=\"line\">        V t1&#123;<span class=\"number\">0</span>&#125;, t2&#123;<span class=\"number\">0</span>&#125;, t3&#123;<span class=\"number\">0</span>&#125;, t4&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> get = [](V&amp; t, <span class=\"keyword\">int</span> n) &#123; <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) t.<span class=\"built_in\">pb</span>(i &gt; <span class=\"number\">1</span> ? <span class=\"built_in\">rnd</span>() % (i - <span class=\"number\">1</span>) + <span class=\"number\">1</span> : <span class=\"number\">0</span>); &#125;;</span><br><span class=\"line\">        <span class=\"built_in\">get</span>(t1, a), <span class=\"built_in\">get</span>(t2, b), <span class=\"built_in\">get</span>(t3, c), <span class=\"built_in\">get</span>(t4, d);</span><br><span class=\"line\">        V t5 = <span class=\"built_in\">tplus</span>(<span class=\"built_in\">tmul</span>(t1, t2), <span class=\"built_in\">tmul</span>(t3, t4));</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d %llu\\n&quot;</span>, a, c, t5.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> prt = [](V&amp; v) &#123; <span class=\"built_in\">For</span>(i, <span class=\"number\">1</span>, v.<span class=\"built_in\">size</span>()) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, v[i]); <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>); &#125;;</span><br><span class=\"line\">        <span class=\"built_in\">prt</span>(t1), <span class=\"built_in\">prt</span>(t3), <span class=\"built_in\">prt</span>(t5);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n</details>\r\n<p><code>Special judge</code>：假设保存为 <code>checker.cpp</code>，编译后在命令行中使用：<code>checker &lt;input-file&gt; &lt;output-file&gt;</code>，答案正确返回值为 <span class=\"math inline\">\\(0\\)</span>，否则返回值为 <span class=\"math inline\">\\(1\\)</span>，输出为第一组出错的数据。</p>\r\n<details>\r\n<summary>\r\n<span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span>\r\n</summary>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eb emplace_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mp make_pair</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SZ(x) int((x).size())</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l + r) / 2)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lc o * 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rc o * 2 + 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lch l, mid, lc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rch mid + 1, r, rc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> cmi(a, b) (a = min(a, b))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> cma(a, b) (a = max(a, b))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lb lower_bound</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ub upper_bound</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> bs binary_search</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pop __builtin_popcount</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> llpop __builtin_popcountll</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ctz __builtin_ctz</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> llctz __builtin_ctzll</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clz __builtin_clz</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> llclz __builtin_clzll</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> par __builtin_parity</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> llpar __builtin_parityll</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> lf = <span class=\"keyword\">double</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> P = pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;;</span><br><span class=\"line\"><span class=\"keyword\">using</span> V = vector&lt;<span class=\"keyword\">int</span>&gt;;</span><br><span class=\"line\"><span class=\"comment\">// using cmp = complex&lt;lf&gt;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>, M = <span class=\"number\">1299709</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[M + <span class=\"number\">5</span>], pid, prm[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">V <span class=\"title\">tmul</span><span class=\"params\">(V a, V b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = a.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>, m = b.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>, su = n;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, <span class=\"number\">2</span>, m) a.<span class=\"built_in\">pb</span>(b[j] == <span class=\"number\">1</span> ? i : b[j] + su - <span class=\"number\">1</span>);</span><br><span class=\"line\">        su += m - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">V <span class=\"title\">tplus</span><span class=\"params\">(V a, V b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = a.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>, m = b.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(j, <span class=\"number\">2</span>, m) a.<span class=\"built_in\">pb</span>(b[j] == <span class=\"number\">1</span> ? <span class=\"number\">1</span> : b[j] + n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">P <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">const</span> V G[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">P <span class=\"title\">re</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> [h, sz] = <span class=\"built_in\">dfs</span>(v, G);</span><br><span class=\"line\">        re.fi = (re.fi + (ll)h * prm[sz]) % <span class=\"number\">999999937</span>;</span><br><span class=\"line\">        re.se += sz;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Hash</span><span class=\"params\">(<span class=\"keyword\">const</span> V&amp; t)</span> </span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt; G[N];</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">1</span>, t.<span class=\"built_in\">size</span>()) G[t[i]].<span class=\"built_in\">pb</span>(i);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>, G).fi;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">(FILE* f)</span> </span>&#123; <span class=\"keyword\">int</span> x; <span class=\"keyword\">return</span> <span class=\"built_in\">fscanf</span>(f, <span class=\"string\">&quot;%d&quot;</span>, &amp;x) == <span class=\"number\">1</span> ? x : <span class=\"number\">-1</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, M) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!f[i]) prm[++pid] = i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; i * prm[j] &lt;= M; j++) &#123;</span><br><span class=\"line\">            f[i * prm[j]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i % prm[j] == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    FILE *in = <span class=\"built_in\">fopen</span>(argv[<span class=\"number\">1</span>], <span class=\"string\">&quot;r&quot;</span>), *out = <span class=\"built_in\">fopen</span>(argv[<span class=\"number\">2</span>], <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> T = <span class=\"built_in\">read</span>(in); T--;) &#123;</span><br><span class=\"line\">        V t1&#123;<span class=\"number\">0</span>&#125;, t2&#123;<span class=\"number\">0</span>&#125;, t3&#123;<span class=\"number\">0</span>&#125;, t4&#123;<span class=\"number\">0</span>&#125;, t5&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> get = [](FILE* f, V&amp; t, <span class=\"keyword\">int</span> n) &#123; <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) t.<span class=\"built_in\">pb</span>(<span class=\"built_in\">read</span>(f)); &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = <span class=\"built_in\">read</span>(in), b = <span class=\"built_in\">read</span>(in), c = <span class=\"built_in\">read</span>(in);</span><br><span class=\"line\">        <span class=\"built_in\">get</span>(in, t1, a), <span class=\"built_in\">get</span>(in, t3, b), <span class=\"built_in\">get</span>(in, t5, c);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> d = <span class=\"built_in\">read</span>(out), e = <span class=\"built_in\">read</span>(out);</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> err = [&amp;]() &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1\\n%d %d %d\\n&quot;</span>, a, b, c);</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, a) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, t1[i]); <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, b) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, t3[i]); <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, c) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, t5[i]);</span><br><span class=\"line\">            <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!~d) <span class=\"built_in\">err</span>();</span><br><span class=\"line\">        <span class=\"built_in\">get</span>(out, t2, d), <span class=\"built_in\">get</span>(out, t4, e);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((ll)a * d + (ll)b * e != c &amp;&amp; <span class=\"built_in\">Hash</span>(<span class=\"built_in\">tplus</span>(<span class=\"built_in\">tmul</span>(t1, t2), <span class=\"built_in\">tmul</span>(t3, t4))) != <span class=\"built_in\">Hash</span>(t5)) <span class=\"built_in\">err</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n</details>\r\n<h3 id=\"izho-2020-d1t3\">IZhO 2020 D1T3</h3>\r\n<blockquote>\r\n<p><a href=\"codeforces.com/group/Uo1lq8ZyWf/contest/265564\">题目链接</a></p>\r\n<p>给定长度为 <span class=\"math inline\">\\(n\\)</span> 的序列 <span class=\"math inline\">\\(A\\)</span>，问有多少三元组 <span class=\"math inline\">\\((i,j,k)\\)</span> 满足 <span class=\"math inline\">\\(i\\le j&lt;k\\)</span> 且 <span class=\"math inline\">\\([i,j]\\)</span> 和 <span class=\"math inline\">\\([j+1,k]\\)</span> 两个区间中数的集合相同。</p>\r\n<p><span class=\"math inline\">\\(n \\le 2\\cdot 10^5\\)</span></p>\r\n</blockquote>\r\n<p>记 <span class=\"math inline\">\\(prev_i\\)</span> 表示 <span class=\"math inline\">\\(A_i\\)</span> 上一次出现的位置，<span class=\"math inline\">\\(next_i\\)</span> 表示 <span class=\"math inline\">\\(A_i\\)</span> 下一次出现的位置。</p>\r\n<p>三元组 <span class=\"math inline\">\\((i,j,k)\\)</span> 合法的充要条件为：</p>\r\n<ul>\r\n<li>区间 <span class=\"math inline\">\\([j+1,k]\\)</span> 中的数都在 <span class=\"math inline\">\\([i,j]\\)</span> 中出现，即 <span class=\"math inline\">\\(i \\le \\min prev_{j+1\\cdots i}\\)</span>，相当于 <span class=\"math inline\">\\(i\\)</span> 有个上界 <span class=\"math inline\">\\(R_{j,k}=\\min prev_{j+1\\cdots k}\\)</span>。</li>\r\n<li>区间 <span class=\"math inline\">\\([i,j]\\)</span> 中的数都在 <span class=\"math inline\">\\([j+1,k]\\)</span> 中出现，即 <span class=\"math inline\">\\(\\max next_{i\\cdots j}\\le k\\)</span>，相当于 <span class=\"math inline\">\\(i\\)</span> 有个下界 <span class=\"math inline\">\\(L_{j,k}\\)</span>，其中 <span class=\"math inline\">\\(L_{j,k}\\)</span> 是最小的 <span class=\"math inline\">\\(i\\)</span> 满足 <span class=\"math inline\">\\(\\max next_{i\\cdots j}\\le k\\)</span>。</li>\r\n</ul>\r\n<p>那么 <span class=\"math inline\">\\((j,k)\\)</span> 的贡献就是 <span class=\"math inline\">\\(\\max(R_{j,k}-L_{j,k}+1,0)\\)</span>，考虑只枚举 <span class=\"math inline\">\\(k\\)</span>，用数据结构动态维护 <span class=\"math inline\">\\(\\sum_{j=1}^{k-1}\\max(R_{j,k}-L_{j,k}+1,0)\\)</span>。</p>\r\n<p>先考虑 <span class=\"math inline\">\\(L_{j,k}\\)</span> 和 <span class=\"math inline\">\\(R_{j,k}\\)</span> 分别怎么维护。</p>\r\n<p>对于 <span class=\"math inline\">\\(R_{j,k}=\\min prev_{j+1\\cdots k}\\)</span>，这是 <span class=\"math inline\">\\(prev\\)</span> 数组上的后缀 <span class=\"math inline\">\\(\\min\\)</span>，当 <span class=\"math inline\">\\(k\\rightarrow k+1\\)</span> 时，<span class=\"math inline\">\\(R_{j,k}\\)</span> 发生的改变是一个后缀变成了 <span class=\"math inline\">\\(prev_{k+1}\\)</span>，具体可以用单调栈求出这个后缀，然后区间赋值。</p>\r\n<p>对于 <span class=\"math inline\">\\(L_{j,k}\\)</span>，直接分析 <span class=\"math inline\">\\(k\\rightarrow k+1\\)</span> 不太行，换一个角度考虑对于一个 <span class=\"math inline\">\\(j\\)</span>，<span class=\"math inline\">\\(L_{j,k}\\)</span> 和 <span class=\"math inline\">\\(k\\)</span> 的关系，<span class=\"math inline\">\\(\\max next_{i\\cdots j}\\)</span> 是 <span class=\"math inline\">\\(next\\)</span> 数组上的后缀 <span class=\"math inline\">\\(\\max\\)</span>，将 <span class=\"math inline\">\\(next_{1\\cdots j}\\)</span> 依次插入单调栈，设单调栈中元素分别为 <span class=\"math inline\">\\(next_{i_1},next_{i_2},next_{i_3},\\cdots,next_{i_k}\\)</span>：</p>\r\n<ul>\r\n<li>当 <span class=\"math inline\">\\(k\\in[j+1,next_{i_k}-1]\\)</span> 时，<span class=\"math inline\">\\(L_{j,k}=\\infty\\)</span>。</li>\r\n<li>当 <span class=\"math inline\">\\(k\\in [next_{i_k},next_{i_{k-1}-1}]\\)</span>，<span class=\"math inline\">\\(L_{j,k}=i_{k-1}+1\\)</span>。</li>\r\n<li><span class=\"math inline\">\\(\\cdots\\)</span></li>\r\n<li>当 <span class=\"math inline\">\\(k\\in [next_{i_1},n]\\)</span>，<span class=\"math inline\">\\(L_{j,k}=1\\)</span>。</li>\r\n</ul>\r\n<p>综上，单调栈元素 <span class=\"math inline\">\\(i_x\\)</span> 意味着当 <span class=\"math inline\">\\(k\\in [next_{i_x},next_{i_{x-1}}-1]\\)</span>，<span class=\"math inline\">\\(L_{j,k}=i_{x-1}+1\\)</span>，假设插入 <span class=\"math inline\">\\(next_y\\)</span> 后 <span class=\"math inline\">\\(next_{i_x}\\)</span> 被弹掉了，那么当 <span class=\"math inline\">\\(j\\in [i_x,y-1],k\\in [next_{i_x},next_{i_{x-1}}-1]\\)</span> 时，<span class=\"math inline\">\\(L_{j,k}=i_{x-1}+1\\)</span>，相当于 <span class=\"math inline\">\\(k\\)</span> 从 <span class=\"math inline\">\\(next_{i_x}-1\\rightarrow next_{i_x}\\)</span> 时，对 <span class=\"math inline\">\\(L_{i_x\\cdots y-1,k}\\)</span> 进行区间赋值为 <span class=\"math inline\">\\(i_x+1\\)</span>。每个单调栈元素意味着一次区间赋值，所以只需要 <span class=\"math inline\">\\(n\\)</span> 次区间赋值就可以维护 <span class=\"math inline\">\\(L_{j,k}\\)</span>。</p>\r\n<p>但维护的是 <span class=\"math inline\">\\(\\sum_{j=1}^{k-1}\\max(R_{j,k}-L_{j,k}+1,0)\\)</span>，相当于夹在两条递增折线之间的面积。由于 <span class=\"math inline\">\\(L_{j,k}\\)</span> 和 <span class=\"math inline\">\\(R_{j,k}\\)</span> 都是随着 <span class=\"math inline\">\\(k\\)</span> 增大而减小的，所以每次赋值都是减小。比如将 <span class=\"math inline\">\\(R_{l\\cdots r,k}\\)</span> 改为 <span class=\"math inline\">\\(v\\)</span>，如果 <span class=\"math inline\">\\(v \\le \\min L_{l\\cdots r,k}\\)</span>，这一段的面积就是 <span class=\"math inline\">\\(0\\)</span>，如果 <span class=\"math inline\">\\(v \\ge \\max L_{l\\cdots r,k}\\)</span>，这一段的面积就是 <span class=\"math inline\">\\(\\sum_{j=l}^rR_{j,k}-\\sum_{j=l}^rL_{j,k}+(r-l+1)\\)</span>，否则可以二分一个分界点 <span class=\"math inline\">\\(x\\)</span>，使得 <span class=\"math inline\">\\(\\forall j \\in[l,x], v\\ge L_{j,k},\\forall j\\in[x+1,r],v\\le L_{j,k}\\)</span>，分界点左右两段分别对应上述两种情况。所以只要维护了 <span class=\"math inline\">\\(L_{j,k},R_{j,k}\\)</span> 的区间 <span class=\"math inline\">\\(\\min,\\max\\)</span> 和 <span class=\"math inline\">\\(sum\\)</span> 就可以维护 <span class=\"math inline\">\\(\\sum_{j=1}^{k-1}\\max(R_{j,k}-L_{j,k}+1,0)\\)</span> 了。</p>\r\n<p>在实现上并不需要求 <span class=\"math inline\">\\(x\\)</span>，假设当前要将 <span class=\"math inline\">\\(L_{ql\\cdots qr,k}\\)</span> 赋值为 <span class=\"math inline\">\\(v\\)</span>，当前线段树结点区间为 <span class=\"math inline\">\\([l,r]\\)</span>，一般区间赋值是在 <span class=\"math inline\">\\(ql\\le l\\land r \\le qr\\)</span> 时停止递归，这里把条件改成 <span class=\"math inline\">\\(ql\\le l\\land r \\le qr \\land (v \\le \\min L_{l\\cdots r,k}\\lor v \\ge \\max L_{l\\cdots r,k})\\)</span> 才可以方便地维护 <span class=\"math inline\">\\(\\sum_{j=1}^{k-1}\\max(R_{j,k}-L_{j,k}+1,0)\\)</span>，由于只有一个分界点，所以复杂度不变。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n\\log n)\\)</span>，实现难度较大，附上代码：</p>\r\n<details>\r\n<summary>\r\n<span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span>\r\n</summary>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eb emplace_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l + r) / 2)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lc o * 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rc o * 2 + 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lch l, mid, lc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rch mid + 1, r, rc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, a[N], pre[N], nxt[N], L[N];</span><br><span class=\"line\">vector&lt;tuple&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; vl[N], vr[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> tagL[N * <span class=\"number\">4</span>], minL[N * <span class=\"number\">4</span>], maxL[N * <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> tagR[N * <span class=\"number\">4</span>], minR[N * <span class=\"number\">4</span>], maxR[N * <span class=\"number\">4</span>];</span><br><span class=\"line\">ll sum[N * <span class=\"number\">4</span>], sumL[N * <span class=\"number\">4</span>], sumR[N * <span class=\"number\">4</span>], as;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushUp</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    sum[o] = sum[lc] + sum[rc];</span><br><span class=\"line\">    sumL[o] = sumL[lc] + sumL[rc];</span><br><span class=\"line\">    sumR[o] = sumR[lc] + sumR[rc];</span><br><span class=\"line\">    minL[o] = <span class=\"built_in\">min</span>(minL[lc], minL[rc]);</span><br><span class=\"line\">    minR[o] = <span class=\"built_in\">min</span>(minR[lc], minR[rc]);</span><br><span class=\"line\">    maxL[o] = <span class=\"built_in\">max</span>(maxL[lc], maxL[rc]);</span><br><span class=\"line\">    maxR[o] = <span class=\"built_in\">max</span>(maxR[lc], maxR[rc]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushL</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    tagL[o] = minL[o] = maxL[o] = v, sumL[o] = v * (r - l + <span class=\"number\">1ll</span>);</span><br><span class=\"line\">    sum[o] = <span class=\"built_in\">max</span>(sumR[o] - sumL[o], <span class=\"number\">0ll</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushR</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    tagR[o] = minR[o] = maxR[o] = v, sumR[o] = v * (r - l + <span class=\"number\">1ll</span>);</span><br><span class=\"line\">    sum[o] = <span class=\"built_in\">max</span>(sumR[o] - sumL[o], <span class=\"number\">0ll</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushDown</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(~tagL[o]) <span class=\"built_in\">pushL</span>(tagL[o], lch), <span class=\"built_in\">pushL</span>(tagL[o], rch), tagL[o] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(~tagR[o]) <span class=\"built_in\">pushR</span>(tagR[o], lch), <span class=\"built_in\">pushR</span>(tagR[o], rch), tagR[o] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updL</span><span class=\"params\">(<span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R &amp;&amp; (v &lt;= minR[o] || v &gt;= maxR[o])) <span class=\"keyword\">return</span> <span class=\"built_in\">pushL</span>(v, l, r, o);</span><br><span class=\"line\">    <span class=\"built_in\">pushDown</span>(l, r, o);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L &lt;= mid) <span class=\"built_in\">updL</span>(L, R, v, lch);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(R &gt; mid) <span class=\"built_in\">updL</span>(L, R, v, rch);</span><br><span class=\"line\">    <span class=\"built_in\">pushUp</span>(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updR</span><span class=\"params\">(<span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R &amp;&amp; (v &gt;= maxL[o] || v &lt;= minL[o])) <span class=\"keyword\">return</span> <span class=\"built_in\">pushR</span>(v, l, r, o);</span><br><span class=\"line\">    <span class=\"built_in\">pushDown</span>(l, r, o);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L &lt;= mid) <span class=\"built_in\">updR</span>(L, R, v, lch);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(R &gt; mid) <span class=\"built_in\">updR</span>(L, R, v, rch);</span><br><span class=\"line\">    <span class=\"built_in\">pushUp</span>(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) L[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) pre[i] = L[a[i]], L[a[i]] = i;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) L[i] = n + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, n, <span class=\"number\">1</span>) nxt[i] = L[a[i]], L[a[i]] = i;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>&amp; j = L[i] = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(; j &amp;&amp; pre[j] &gt;= pre[i]; j = L[j]);</span><br><span class=\"line\">        vr[i].<span class=\"built_in\">eb</span>(<span class=\"built_in\">max</span>(j, <span class=\"number\">1</span>), i - <span class=\"number\">1</span>, pre[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>&amp; j = L[i] = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(; j &amp;&amp; nxt[j] &lt;= nxt[i]; j = L[j])</span><br><span class=\"line\">            vl[nxt[j]].<span class=\"built_in\">eb</span>(<span class=\"built_in\">max</span>(j, <span class=\"number\">1</span>), i - <span class=\"number\">1</span>, L[j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">mem</span>(tagL, <span class=\"number\">63</span>), <span class=\"built_in\">mem</span>(tagR, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [l, r, v] : vl[i]) <span class=\"built_in\">updL</span>(l, r, v, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [l, r, v] : vr[i]) <span class=\"built_in\">updR</span>(l, r, v, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</span><br><span class=\"line\">        as += sum[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; as;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n</details>\r\n<h3 id=\"cf566c\">CF566C</h3>\r\n<blockquote>\r\n<p>给定一棵 <span class=\"math inline\">\\(n\\)</span> 个点的带权树，每个点住了 <span class=\"math inline\">\\(w_i\\)</span> 个人，一个人从 <span class=\"math inline\">\\(u\\)</span> 到 <span class=\"math inline\">\\(v\\)</span> 的花费为距离的 <span class=\"math inline\">\\(1.5\\)</span> 次方。</p>\r\n<p>定义 <span class=\"math inline\">\\(f(u)\\)</span> 表示所有人到点 <span class=\"math inline\">\\(u\\)</span> 的总花费，求 <span class=\"math inline\">\\(f(u)\\)</span> 最小的点。</p>\r\n<p><span class=\"math inline\">\\(n \\le 2\\cdot 10^5\\)</span></p>\r\n</blockquote>\r\n<p>首先研究 <span class=\"math inline\">\\(f(u)\\)</span> 有什么性质，假设花费等于距离的话 <span class=\"math inline\">\\(f(u)\\)</span> 就是单峰的，因此猜想 <span class=\"math inline\">\\(f(u)\\)</span> 是单蜂的。</p>\r\n<p>证明：由于 <span class=\"math inline\">\\(w_v\\text{dis}^{1.5}_v(u)\\)</span> 是下凸函数，所以它们加起来也是下凸函数。</p>\r\n<p>回忆实数上的单蜂函数是怎么求最值的：当前确定最优点在 <span class=\"math inline\">\\([l,r]\\)</span> 中，在 <span class=\"math inline\">\\(\\frac {l+r}2\\)</span> 处求导来确定最远点在 <span class=\"math inline\">\\(\\frac {l+r}2\\)</span> 左边还是右边，然后将范围减半。</p>\r\n<p>考虑怎么在树上实现这个过程：求出整棵树的重心，通过确定最优解在重心的哪个子树来将范围减半。</p>\r\n<p>怎么确定最优解在哪棵子树？把 <span class=\"math inline\">\\(f(u)\\)</span> 的定义域扩大，<span class=\"math inline\">\\(u\\)</span> 可以是一条边上的位置。求出重心向各个方向的导数，由于 <span class=\"math inline\">\\(f(u)\\)</span> 单峰，所以最多有一个导数小于 <span class=\"math inline\">\\(0\\)</span>，这是最优解的方向。假设最优解的方向沿着边 <span class=\"math inline\">\\((u,v)\\)</span>，由于 <span class=\"math inline\">\\(f(u)\\)</span> 的最优点可能在 <span class=\"math inline\">\\((u,v)\\)</span> 上，所以 <span class=\"math inline\">\\(v\\)</span> 不一定比 <span class=\"math inline\">\\(u\\)</span> 优，应该把经过的所有点取个最小值作为答案。</p>\r\n<p>根 <span class=\"math inline\">\\(u\\)</span> 向儿子 <span class=\"math inline\">\\(v\\)</span> 方向的导数为： <span class=\"math display\">\\[\r\n\\frac 32\\left(\\sum_{i=1}^nw_i\\sqrt{\\text{dis}(i,u)}-2\\sum_{i\\in \\text{subree}(v)}w_i\\sqrt{\\text{dis}(i,u)}\\right)\r\n\\]</span> 可以 <span class=\"math inline\">\\(O(n)\\)</span> 求出 <span class=\"math inline\">\\(u\\)</span> 向每个儿子的导数，复杂度 <span class=\"math inline\">\\(O(n\\log n)\\)</span>。</p>\r\n","site":{"data":{}},"length":55543,"excerpt":"","more":"<p>懒得分开写咕咕咕。</p>\r\n<h3 id=\"tc13459\">TC13459</h3>\r\n<p>“1”的限制分两种，在同一行或在同一列，但 “1” 的数量很多，不能枚举每个“1”是哪一种，设“在同一行”的边为白边，“在同一列的”的边为黑白，考虑边之间的约束关系。</p>\r\n<p>考虑两条边 <span class=\"math inline\">\\((i,j),(i,k)\\)</span>，当边 <span class=\"math inline\">\\((j,k)\\)</span> 存在时说明 <span class=\"math inline\">\\((i,j)\\)</span> 和 <span class=\"math inline\">\\((i,k)\\)</span> 的颜色相同，反之亦然。</p>\r\n<p>这样就可以表示出所有的约束，必要性显然，充分性是因为合法解中同色边一定构成了若干不含公共点的团，这种对于相邻两条边的约束关系就很充分了。</p>\r\n<p>在所有的约束条件下，所有的边及其约束关系构成类似二分图的结构，联通块分两类，一类是整个连通块一定同色，另一类是一定包含两种颜色。</p>\r\n<p>设第一类连通块有 <span class=\"math inline\">\\(x\\)</span> 个，第二类连通块有 <span class=\"math inline\">\\(y\\)</span> 个，枚举第一类连通块有 <span class=\"math inline\">\\(i\\)</span> 个白色，即可得到答案： <span class=\"math display\">\\[\r\n\\sum_{i=0}^x\\binom xi2^yn^{\\underline{i+y}}n^{\\underline{x-i+y}}\r\n\\]</span> 复杂度 <span class=\"math inline\">\\(O(n^3)\\)</span>（DFS 求连通块）或 <span class=\"math inline\">\\(O(n^3\\alpha(n^2))\\)</span>（并查集求连通块）。</p>\r\n<h3 id=\"tc12909\">TC12909</h3>\r\n<p>任意时刻局面的样子都是若干个连续段，我们只关心每个连续段的样子和它们在环上的相对顺序，而不关心空白的位置，因为只有知道前者的方案数，当前局面的方案数是可以算的。</p>\r\n<p>设 <span class=\"math inline\">\\(f_{i,j}\\)</span> 表示当前已经来了 <span class=\"math inline\">\\(i\\)</span> 个朋友，共构成 <span class=\"math inline\">\\(j\\)</span> 个连续段的方案数，转移分三种：</p>\r\n<ul>\r\n<li>第 <span class=\"math inline\">\\(i+1\\)</span> 个朋友新开一个连续段，<span class=\"math inline\">\\(f_{i+1,j+1} \\leftarrow j \\cdot f_{i,j}\\)</span>。</li>\r\n<li>第 <span class=\"math inline\">\\(i+1\\)</span> 个朋友加入一个连续段的开头或结尾，<span class=\"math inline\">\\(f_{i+1,j} \\leftarrow 2j \\cdot f_{i,j}\\)</span>。</li>\r\n<li>第 <span class=\"math inline\">\\(i+1\\)</span> 个朋友将两个连续段接在了一起，<span class=\"math inline\">\\(f_{i+1,j-1} \\leftarrow j \\cdot f_{i,j}\\)</span>。</li>\r\n</ul>\r\n<p>只需要保证 <span class=\"math inline\">\\(j \\le G\\)</span> 就行了，而不需要考虑连续段过多而导致前两种转移不合法，因为不合法了贡献系数一定为 <span class=\"math inline\">\\(0\\)</span>。</p>\r\n<p>最后是贡献系数，假设 <span class=\"math inline\">\\(K\\)</span> 个人到齐后有 <span class=\"math inline\">\\(x\\)</span> 个连续段，则贡献系数为 <span class=\"math inline\">\\(N\\binom{N-K-1}{K-1}\\)</span>。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(N^2)\\)</span>。</p>\r\n<h3 id=\"tc13692\">TC13692</h3>\r\n<p>搬家具的排列很像拓扑序，但又有点区别。</p>\r\n<p>枚举 <span class=\"math inline\">\\(S_1-S_2\\)</span> 路径上第一个选的点 <span class=\"math inline\">\\(u\\)</span>，再对每条边定向定向，然后就转化成了一张图的拓扑序，记这个东西为 <span class=\"math inline\">\\(f_u\\)</span>。当 <span class=\"math inline\">\\(u=S_1\\)</span> 或 <span class=\"math inline\">\\(S_2\\)</span> 时这张图就是树，否则这张图和树唯一的区别是点 <span class=\"math inline\">\\(u\\)</span> 有两个父亲，但这张图的拓扑序并不好算，单次复杂度只能做到 <span class=\"math inline\">\\(O(n^2)\\)</span>，无法通过。</p>\r\n<p>注意到这题只需要求出 <span class=\"math inline\">\\(S_1-S_2\\)</span> 路径上每个点 <span class=\"math inline\">\\(f\\)</span> 的总和。</p>\r\n<p>枚举 <span class=\"math inline\">\\(S_1-S_2\\)</span> 路径上的一条边 <span class=\"math inline\">\\((u,v)\\)</span>，然后断开 <span class=\"math inline\">\\((u,v)\\)</span>，再对每条边定向定向，然后就转化成了两棵树的拓扑序，这个是可以 <span class=\"math inline\">\\(O(n)\\)</span> 算的，发现算出来的正好是 <span class=\"math inline\">\\(f_u+f_v\\)</span>。</p>\r\n<p>最后把前一步骤的计算结果加起来，再加上 <span class=\"math inline\">\\(f_{S_1}+f_{S_2}\\)</span> 并除以二，即是答案。</p>\r\n<h3 id=\"agc017f\">AGC017F</h3>\r\n<p>容易想到用位向量来表示折线，<span class=\"math inline\">\\(0\\)</span> 表示这一步向左走，<span class=\"math inline\">\\(1\\)</span> 表示向右，容易得到折线的形态只有 <span class=\"math inline\">\\(2^{N-1}\\)</span> 种。</p>\r\n<p>由于相邻两条折线 <span class=\"math inline\">\\(S,T\\)</span> 的约束关系是 <span class=\"math inline\">\\(T\\)</span> 的每个前缀后都大于等于 <span class=\"math inline\">\\(S\\)</span> 的对应前缀和。</p>\r\n<p>不难想到轮廓线 <code>DP</code>，设 <span class=\"math inline\">\\(f_{i,j,k,S}\\)</span> 表示满足以下条件的方案数：</p>\r\n<ul>\r\n<li>第 <span class=\"math inline\">\\(i\\)</span> 条折线已经填了前 <span class=\"math inline\">\\(j\\)</span> 位。</li>\r\n<li><span class=\"math inline\">\\(S\\)</span> 的前 <span class=\"math inline\">\\(j\\)</span> 位是第 <span class=\"math inline\">\\(i\\)</span> 条折线的，后 <span class=\"math inline\">\\(N-1-j\\)</span> 位是第 <span class=\"math inline\">\\(i-1\\)</span> 条折线的。</li>\r\n<li>第 <span class=\"math inline\">\\(i-1\\)</span> 条折线前 <span class=\"math inline\">\\(j\\)</span> 位之和为 <span class=\"math inline\">\\(k\\)</span>。</li>\r\n</ul>\r\n<p>转移就枚举第 <span class=\"math inline\">\\(i\\)</span> 条折线第 <span class=\"math inline\">\\(j+1\\)</span> 为填什么。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^32^n)\\)</span>，无法通过。</p>\r\n<p>再次考虑相邻两条折线 <span class=\"math inline\">\\(S,T\\)</span> 的约束关系，发现从 <span class=\"math inline\">\\(S\\)</span> 到 <span class=\"math inline\">\\(T\\)</span> 是以下过程：</p>\r\n<ul>\r\n<li><p>把每个 <span class=\"math inline\">\\(1\\)</span> 都往前移或不动，并且不改变相对顺序。</p></li>\r\n<li><p>最后一个 <span class=\"math inline\">\\(1\\)</span> 之后的 <span class=\"math inline\">\\(0\\)</span> 任意变成 <span class=\"math inline\">\\(1\\)</span>。</p></li>\r\n</ul>\r\n<p>重新定义 <code>DP</code> 状态 <span class=\"math inline\">\\(f_{i,j,S}\\)</span> 表示正在确定了第 <span class=\"math inline\">\\(i\\)</span> 条折线，当前为 <span class=\"math inline\">\\(S\\)</span>，已经固定了前 <span class=\"math inline\">\\(j\\)</span> 个 <span class=\"math inline\">\\(1\\)</span> 的方案数。</p>\r\n<p>转移为：</p>\r\n<ul>\r\n<li>如果存在第 <span class=\"math inline\">\\(j+1\\)</span> 个 <span class=\"math inline\">\\(1\\)</span>，就枚举它往前移多少位，不能跨过前一个 <span class=\"math inline\">\\(1\\)</span>，这个枚举量平均是 <span class=\"math inline\">\\(O(1)\\)</span> 的。</li>\r\n<li>如果不存在，要么确定第 <span class=\"math inline\">\\(i\\)</span> 条折线，要么枚举最后一个 <span class=\"math inline\">\\(1\\)</span> 之后的一个 <span class=\"math inline\">\\(0\\)</span> 把它变成 <span class=\"math inline\">\\(1\\)</span>，这个枚举量平均也是 <span class=\"math inline\">\\(O(1)\\)</span> 的。</li>\r\n</ul>\r\n<p>当确定第 <span class=\"math inline\">\\(i\\)</span> 条折线后把不合法的状态置成 <span class=\"math inline\">\\(0\\)</span>。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^22^n)\\)</span>。</p>\r\n<h3 id=\"arc078d\">ARC078D</h3>\r\n<p>考虑从 <span class=\"math inline\">\\(1-n\\)</span> 只有一条点不重复的路径的充要条件：</p>\r\n<ul>\r\n<li>把这条唯一路径上的边都断开后路径上的点两两不连通。</li>\r\n</ul>\r\n<p>假设知道这条唯一路径是 <span class=\"math inline\">\\(u_1,u_2,\\cdots,u_k\\)</span>（<span class=\"math inline\">\\(u_1=1,u_k=n\\)</span>），要将点集划分成 <span class=\"math inline\">\\(k\\)</span> 份，第 <span class=\"math inline\">\\(i\\)</span> 份包含 <span class=\"math inline\">\\(u_k\\)</span>，最大化每个点集内部的边权之和。</p>\r\n<p>可以得到一个状压做法：</p>\r\n<ul>\r\n<li>设 <span class=\"math inline\">\\(g_S\\)</span> 表示两个端点都在点集 <span class=\"math inline\">\\(S\\)</span> 内部的所有边的权值之和。</li>\r\n<li>设 <span class=\"math inline\">\\(f_S\\)</span> 表示点集 <span class=\"math inline\">\\(S\\)</span> 已经被考虑时，最大的保留边权之和。</li>\r\n<li>转移为：<span class=\"math inline\">\\(f_S \\leftarrow f_{S-T} + g_T({T \\subseteq S})\\)</span>，其中 <span class=\"math inline\">\\(T\\)</span> 恰好包含一个关键点。</li>\r\n</ul>\r\n<p>由于并不知道这条路径，所以需要该一下 <code>DP</code> 状态：</p>\r\n<p>设 <span class=\"math inline\">\\(f_{i,S}\\)</span> 表示点集 <span class=\"math inline\">\\(S\\)</span> 已经被考虑且 <span class=\"math inline\">\\(1-i\\)</span> 只有一条路径时，最大的保留边权之和。</p>\r\n<p>转移为:</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(f_{i,S \\cup \\{i\\}} \\leftarrow f_{j,S} + w(j,i)(j \\not\\in S)\\)</span>。</li>\r\n<li><span class=\"math inline\">\\(f_{i,S\\cup T} \\leftarrow f_{i,S}+g_{T\\cup\\{i\\}}(S \\cap T = \\varnothing)\\)</span>。</li>\r\n</ul>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n3^n)\\)</span>。</p>\r\n<p>ARC068D</p>\r\n<p>AGC004F</p>\r\n<p>ARC097D</p>\r\n<p>TC10265</p>\r\n<p>TC9844</p>\r\n<p>ARC067C</p>\r\n<p>ARC097C</p>\r\n<h3 id=\"tc10727\">TC10727</h3>\r\n<p>根据“跳跳棋”的结论，所有的三元组构成二叉森林的形态，于是问题就转化成了：</p>\r\n<ul>\r\n<li>在一棵无限满二叉树上，从点 <span class=\"math inline\">\\(u\\)</span> 走到点 <span class=\"math inline\">\\(v\\)</span> 长度恰好为 <span class=\"math inline\">\\(k\\)</span> 的路径条数。</li>\r\n</ul>\r\n<p>直接算感觉很困难，考虑 <code>DP</code>，容易想到记录当前步数和所在点 <span class=\"math inline\">\\(x\\)</span>，但 <span class=\"math inline\">\\(x\\)</span> 显然是记不了的。考虑用关键信息来替代 <span class=\"math inline\">\\(x\\)</span>，记录 <span class=\"math inline\">\\(\\text{dis}(x,\\text{lca}(x,v)),\\text{dis}(v,\\text{lca}(x,v))\\)</span> 就够了。</p>\r\n<p>状态 <span class=\"math inline\">\\(f_{i,j,k}\\)</span> 为走了 <span class=\"math inline\">\\(i\\)</span> 步，<span class=\"math inline\">\\(\\text{dis}(x,\\text{lca}(x,v))=j,\\text{dis}(v,\\text{lca}(x,v))=k\\)</span> 的路径条数。</p>\r\n<p>转移为：</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(f_{i+1,j+1,k} \\leftarrow 2f_{i,j,k},f_{i+1,j-1,k} \\leftarrow f_{i,j,k}(j&gt;0)\\)</span></li>\r\n<li><span class=\"math inline\">\\(f_{i+1,1,k} \\leftarrow f_{i,0,k},f_{i+1,\\max(1-k,0),\\max(k-1,0)} \\leftarrow f_{i,0,k}(k&gt;0)\\)</span></li>\r\n<li><span class=\"math inline\">\\(f_{i+1,0,k+1} \\leftarrow f_{i,0,k}(k &lt; \\text{depth}_v)\\)</span></li>\r\n</ul>\r\n<p>TC10664</p>\r\n<p>TC10566</p>\r\n<p>TC10773</p>\r\n<h3 id=\"tc10993\">TC10993</h3>\r\n<p>容易发现把所有的环缩成点之后这张图就变成的一棵树，把 <span class=\"math inline\">\\(0\\)</span> 结点所在的环看出根。树边和环边分开考虑。</p>\r\n<p>对于树边，显然所有人都只会向上走，最坏情况就是 <span class=\"math inline\">\\(C\\)</span> 个人全在这条树边的下面，故每条树边需要 <span class=\"math inline\">\\(C\\)</span> 个急救仓。</p>\r\n<p>对于一个环，子树中的人都是先向上走到这个环上，再聚集到向上的树边的下端点，最后一起离开这个环。</p>\r\n<p>可以看出环之间是独立的，考虑一个环怎么做。对于一个环来说，最坏的情况肯定是 <span class=\"math inline\">\\(C\\)</span> 个人聚集在一个点上，然后这 <span class=\"math inline\">\\(C\\)</span> 个人再分成两批，一批从左边绕到终点，另一批从右边绕到终点，要求 <span class=\"math inline\">\\(\\min 左边 + \\min 右边 \\ge C\\)</span>。</p>\r\n<p>方法是 <code>DP</code>，设 <span class=\"math inline\">\\(f_{i,j}\\)</span> 表示已经确定了从终点开始向左的 <span class=\"math inline\">\\(i\\)</span> 条边，它们的 <span class=\"math inline\">\\(\\min\\)</span> 为 <span class=\"math inline\">\\(j\\)</span> 时的最小代价。</p>\r\n<p>转移时枚举第 <span class=\"math inline\">\\(i+1\\)</span> 条边的急救仓数 <span class=\"math inline\">\\(k\\)</span>：<span class=\"math inline\">\\(f_{i+1,\\min(j,k)} \\leftarrow f_{i,j}(j+k \\ge C)\\)</span>。因为 <span class=\"math inline\">\\(j\\)</span> 只会变小，所以对于第 <span class=\"math inline\">\\(i+1\\)</span> 条之后的边，它们的限制会更严，所以转移只需要使第 <span class=\"math inline\">\\(i+1\\)</span> 条边满足限制。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(nC^2)\\)</span>，无法通过。</p>\r\n<p>考虑将这个转移拆开：</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(f_{i+1,j} \\leftarrow f_{i,j}(k \\ge \\max(j,C-j))\\)</span>，此时肯定要最小化 <span class=\"math inline\">\\(k\\)</span>。</li>\r\n<li><span class=\"math inline\">\\(f_{i+1,k} \\leftarrow f_{i,j}(k \\le j \\le C -k)\\)</span>，考虑 <span class=\"math inline\">\\(k\\)</span> 从小到大时，可行的 <span class=\"math inline\">\\(j\\)</span> 组成的区间在扩展，容易做到均摊 <span class=\"math inline\">\\(O(1)\\)</span> 转移。</li>\r\n</ul>\r\n<p>复杂度 <span class=\"math inline\">\\(O(nC)\\)</span>。</p>\r\n<p>TC10741</p>\r\n<p>TC10854</p>\r\n<p>TC10848</p>\r\n<p>TC10902</p>\r\n<p>TC10737</p>\r\n<p>TC10758</p>\r\n<p>TC11003</p>\r\n<p>TC11026</p>\r\n<p>TC11032</p>\r\n<p>TC10748</p>\r\n<p>TC11213</p>\r\n<p>TC11305</p>\r\n<p>TC12620</p>\r\n<p>TC10758</p>\r\n<p>TC11032</p>\r\n<h3 id=\"gym102391e\">Gym102391E</h3>\r\n<p>先二分一个直径 <span class=\"math inline\">\\(D\\)</span>，建出圆方树，设 <span class=\"math inline\">\\(f_u\\)</span> 表示：</p>\r\n<ul>\r\n<li>已经确定了 <span class=\"math inline\">\\(u\\)</span> 子树内的所有方点表示的环怎么断。</li>\r\n<li>子树内直径不超过 <span class=\"math inline\">\\(D\\)</span>。</li>\r\n<li><span class=\"math inline\">\\(f_u\\)</span> 为子树内到 <span class=\"math inline\">\\(u\\)</span>（圆点）/ <span class=\"math inline\">\\(fa_u\\)</span>（方点）的最大距离。</li>\r\n</ul>\r\n<p>转移分两种：</p>\r\n<ul>\r\n<li><p><span class=\"math inline\">\\(u\\)</span> 为圆点，判断一下儿子 <span class=\"math inline\">\\(f\\)</span> 最大的两个之和是否小于等于 <span class=\"math inline\">\\(D\\)</span>，大于 <span class=\"math inline\">\\(D\\)</span> 说明 <span class=\"math inline\">\\(D\\)</span> 小了，停止 <code>DP</code>，否则继承儿子 <span class=\"math inline\">\\(f\\)</span> 的最大值。</p></li>\r\n<li><p><span class=\"math inline\">\\(u\\)</span> 为方点，设 <span class=\"math inline\">\\(fa\\)</span> 为 <span class=\"math inline\">\\(u\\)</span> 的父亲，枚举一下断该环上的哪条边，然后算一下子树内直径，直径有两种可能情况。</p>\r\n<ul>\r\n<li>一个儿子 <span class=\"math inline\">\\(v\\)</span> 到断边的较大环上距离 <span class=\"math inline\">\\(+f_v\\)</span>。</li>\r\n<li>两个儿子 <span class=\"math inline\">\\(v_1,v_2\\)</span> 在不跨过断边时的环上距离 <span class=\"math inline\">\\(+f_{v_1}+f_{v_2}\\)</span>。</li>\r\n</ul>\r\n<p>如果直径大于 <span class=\"math inline\">\\(D\\)</span>，就说明这条边不能断，否则</p>\r\n<p><span class=\"math inline\">\\(f_u \\leftarrow \\max\\limits_vf_v+\\)</span> <span class=\"math inline\">\\(v\\)</span> 在不跨过断边时到 <span class=\"math inline\">\\(fa\\)</span> 的环上距离。</p>\r\n<p><span class=\"math inline\">\\(f_u \\leftarrow\\)</span> 断边到 <span class=\"math inline\">\\(fa\\)</span> 的环上距离。</p>\r\n<p>直接转移复杂度为 <span class=\"math inline\">\\(O(儿子数量^2)\\)</span>，记录一些儿子前后缀信息就可以优化到线性，以前缀为例：</p>\r\n<ul>\r\n<li>第 <span class=\"math inline\">\\(i\\)</span> 个儿子向左绕到 <span class=\"math inline\">\\(fa\\)</span> 的距离。</li>\r\n<li>前 <span class=\"math inline\">\\(i\\)</span> 个儿子子树内在不跨过 <span class=\"math inline\">\\(fa\\)</span> 时到第 <span class=\"math inline\">\\(i\\)</span> 个儿子的最大距离。</li>\r\n<li>前 <span class=\"math inline\">\\(i\\)</span> 个儿子子树内和断边向左绕到 <span class=\"math inline\">\\(fa\\)</span> 的最大距离。</li>\r\n<li>前 <span class=\"math inline\">\\(i\\)</span> 个儿子子树内的直径。</li>\r\n</ul></li>\r\n</ul>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n\\log V)\\)</span>。</p>\r\n<h3 id=\"zoj3970\">ZOJ3970</h3>\r\n<p>考虑在操作序列中有相邻的加减操作并且加操作在前面，应用如下调整：</p>\r\n<ul>\r\n<li>如果两个操作区间无交，则交换操作顺序。</li>\r\n<li>如果有交，那么相交的部分相当于什么都没做，直接去掉相交部分，变成上一种情况。</li>\r\n</ul>\r\n<p>经过有限步调整，操作序列变成了若干减后若干加。</p>\r\n<p>假设已知第 <span class=\"math inline\">\\(i\\)</span> 个位置需要进行 <span class=\"math inline\">\\(a_i\\)</span> 次减操作，那么最小操作次数为 <span class=\"math inline\">\\(\\sum_{i=2}^n\\max(0,a_i-a_{i-1})\\)</span>。</p>\r\n<p>加操作同理。</p>\r\n<p>设 <span class=\"math inline\">\\(pre_i\\)</span> 表示上一个满足 <span class=\"math inline\">\\(t_j&gt;0\\)</span> 的位置 <span class=\"math inline\">\\(j\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(f_{i,j}\\)</span> 表示考虑了前 <span class=\"math inline\">\\(i\\)</span> 个位置，其中第 <span class=\"math inline\">\\(i\\)</span> 个位置被 <span class=\"math inline\">\\(j\\)</span> 个减操作覆盖时的最小操作次数。</p>\r\n<p>转移为：</p>\r\n<p><span class=\"math display\">\\[\r\nf_{i,j}=\\min_kf_{pre_i,k}+\\max(0,j-k)+\\max(0,t_i-s_i+j-t_{pre_i}+s_{pre_i}-k)+\\max(0,\\max_{pre_i&lt;x&lt;i}s_x-\\max(j,k))\r\n\\]</span></p>\r\n<p>其中最后一项表示将区间 <span class=\"math inline\">\\((pre_i,i)\\)</span> 减成 <span class=\"math inline\">\\(0\\)</span> 需要的额外减操作次数。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(nV^2)\\)</span>，无法通过。</p>\r\n<p>打表发现函数 <span class=\"math inline\">\\(f_i\\)</span> 分三段，每一段都是一次函数，并且斜率递增。</p>\r\n<p>注意到转移方程后面的每一项都是分段一次函数，因此它们的和也是分段一次函数，所以 <span class=\"math inline\">\\(\\min\\)</span> 只会在拐点处取到，这样就可以 <span class=\"math inline\">\\(O(1)\\)</span> 算出一个 <span class=\"math inline\">\\(f_{i,j}\\)</span>。</p>\r\n<p>求函数 <span class=\"math inline\">\\(f_i\\)</span> 的两个拐点？考虑分治，对于一个区间 <span class=\"math inline\">\\([l,r]\\)</span>，如果 <span class=\"math inline\">\\(f_{i,l},f_{i,mid},f_{i,r}\\)</span> 等差，说明 <span class=\"math inline\">\\([l,r]\\)</span> 一定在同一个段，否则递归左右两半。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n\\log V)\\)</span>。</p>\r\n<h3 id=\"zoj3989\">ZOJ3989</h3>\r\n<p>为了方便处理，先对所有点旋转一个角度，使所有点横坐标两两不同。</p>\r\n<p>对于一个三角剖分，考虑一个维护折线过程：</p>\r\n<ul>\r\n<li>初始为下凸包。</li>\r\n<li>每次将折线上一条边换成它上方三角形的另外两条边，要保证这两条边不在折线上。</li>\r\n<li>或者将折线上在同一三角形内的相邻两条边换成第三条边，要保证三角形在原来两条边的上方。</li>\r\n<li>最终为上凸包。</li>\r\n</ul>\r\n<p>这个过程会遍历三角剖分中的所有边，容易想到把折线作为 <code>DP</code> 状态，但折线数量太大了。</p>\r\n<p>给折线加一条限制：折线上的拐点横坐标递增。但这样可能会导致折线找不到合法的转移。</p>\r\n<p>事实上这种情况不存在：</p>\r\n<ul>\r\n<li>对于二换一的转移，显然合法，所以考虑只能进行一换二的时候。</li>\r\n<li>对于最左边的折线，假设它的横坐标区间为 <span class=\"math inline\">\\([l,r]\\)</span>，进行一换二后新的拐点横坐标为 <span class=\"math inline\">\\(x\\)</span>，要么 <span class=\"math inline\">\\(l &lt; x &lt; r\\)</span>，这时可以直接转移，否则 <span class=\"math inline\">\\(x &gt; r\\)</span>，即它上方的三角形向右偏。</li>\r\n<li>对于最右边的折线，如果它不能直接转移，同理可以得到它上方的三角形向左偏。</li>\r\n<li>最左边的折线上方的三角形向右偏，最右边的折线上方的三角形向左偏，故中间一定存在一条折线可以进行合法的一换二。</li>\r\n</ul>\r\n<p>这样的折线就可以用拐点集合来表示了，状态数为 <span class=\"math inline\">\\(2^{n-2}\\)</span>，转移时不能跨过点。</p>\r\n<p>这样就解决了最优化问题，但计数会算重。</p>\r\n<p>定义一次转移的「横坐标」为它涉及到的两个或三个点中横坐标的最大值，所有当前能进行的转移的「横坐标」一定两两不同。</p>\r\n<p>考虑将折线的转移序列标准化，使得转移序列与三角剖分一一对应：每次进行「横坐标」最大的合法转移。</p>\r\n<p>另一个等价的定义是每次转移的「横坐标」单调不减。</p>\r\n<p>设 <span class=\"math inline\">\\(f_{S,i}\\)</span> 表示当前折线为 <span class=\"math inline\">\\(S\\)</span>，上次转移的「横坐标」为 <span class=\"math inline\">\\(i\\)</span> 时的最小代价及其方案数。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^22^n)\\)</span>。</p>\r\n<h3 id=\"来源不明的题\">来源不明的题</h3>\r\n<blockquote>\r\n<p>给定一个二分图，左右各 <span class=\"math inline\">\\(n\\)</span> 个点。对于左部点的一个集合 <span class=\"math inline\">\\(S\\)</span>，设 <span class=\"math inline\">\\(f(S)\\)</span> 表示与 <span class=\"math inline\">\\(S\\)</span> 中至少一个点相邻的右部点集合。判断是否存在一个集合 <span class=\"math inline\">\\(S \\ne \\{1,2,\\cdots,n\\}\\)</span>，使得 <span class=\"math inline\">\\(|f(S)| \\le |S|\\)</span>，输出方案。</p>\r\n<p><span class=\"math inline\">\\(n, m \\le 10^5\\)</span></p>\r\n</blockquote>\r\n<p>Hall 定理：一个二分图存在完美匹配的充要条件是对于任意 <span class=\"math inline\">\\(S\\)</span>，<span class=\"math inline\">\\(|f(S)| \\ge |S|\\)</span>。</p>\r\n<p>如果不存在完美匹配，就存在 <span class=\"math inline\">\\(S\\)</span> 使得 <span class=\"math inline\">\\(|f(S)| \\le |S|\\)</span>，考虑求出一个这样的 <span class=\"math inline\">\\(S\\)</span>。</p>\r\n<p>先求出一个最大匹配，找一个未匹配点为根建匈牙利树，树上所有的左部点就是 <span class=\"math inline\">\\(S\\)</span>。</p>\r\n<p>如果存在完美匹配，解的形式一定是一个左部点集合 <span class=\"math inline\">\\(S\\)</span>，它们的匹配点集合为 <span class=\"math inline\">\\(f(S)\\)</span>。</p>\r\n<p>所以如果选了右部点 <span class=\"math inline\">\\(v\\)</span>，就一定会选它的匹配点 <span class=\"math inline\">\\(\\text{match}(v)\\)</span>。</p>\r\n<p>把原来的每条边 <span class=\"math inline\">\\((u,v)\\)</span> 换成 <span class=\"math inline\">\\((u,\\text{match}(v))\\)</span> 再求出拓扑序最小的强连通分量即可。</p>\r\n<h3 id=\"arc107f\">ARC107F</h3>\r\n<p>由于一个连通块的贡献带有绝对值符号，不太好处理，变成枚举符号不会影响答案。</p>\r\n<p>现在变成如下问题：</p>\r\n<ul>\r\n<li>每个点有三种状态：正、负、删，代价分别为 <span class=\"math inline\">\\(-B_i,A_i,B_i\\)</span>。</li>\r\n<li>对于相邻的点 <span class=\"math inline\">\\(u,v\\)</span>，如果它们的状态都不是删，就必须相同。</li>\r\n<li>求最小代价。</li>\r\n</ul>\r\n<p>想到最小割模型，由于每个点有三种状态，所以把每个点 <span class=\"math inline\">\\(i\\)</span> 变成两个点 <span class=\"math inline\">\\(U_i,V_i\\)</span>。</p>\r\n<p>用 <span class=\"math inline\">\\((S,U_i),(U_i,V_i),(V_i,T)\\)</span> 三条边表示三种状态。</p>\r\n<p>令它们的代价分别为 <span class=\"math inline\">\\(\\infty-B_i,\\infty+A_i,\\infty+B_i\\)</span>，那么这三条边一定恰好割掉一条。</p>\r\n<p>对于相邻的点 <span class=\"math inline\">\\((i,j)\\)</span>，有两个约束关系：</p>\r\n<ul>\r\n<li>不能同时割 <span class=\"math inline\">\\((S,U_i),(V_j,T)\\)</span>，如果要割 <span class=\"math inline\">\\((S,U_i)\\)</span>，说明 <span class=\"math inline\">\\(U_i\\)</span> 能到达 <span class=\"math inline\">\\(T\\)</span>，如果要割 <span class=\"math inline\">\\((V_j,T)\\)</span>，说明 <span class=\"math inline\">\\(S\\)</span> 能到达 <span class=\"math inline\">\\(V_j\\)</span>，所以连一条 <span class=\"math inline\">\\((V_j,U_i)\\)</span>，代价为 <span class=\"math inline\">\\(\\infty^2\\)</span> 的边。</li>\r\n<li>不能同时割 <span class=\"math inline\">\\((S,U_j),(V_i,T)\\)</span>，同理连一条 <span class=\"math inline\">\\((V_i,U_j)\\)</span>，代价为 <span class=\"math inline\">\\(\\infty^2\\)</span> 的边。</li>\r\n</ul>\r\n<p>最后答案为最小割减去 <span class=\"math inline\">\\(n\\infty\\)</span>。</p>\r\n<figure>\r\n<img src=\"https://i.loli.net/2021/09/08/4ragjEUYIev5wot.png\" alt=\".png\" /><figcaption aria-hidden=\"true\">.png</figcaption>\r\n</figure>\r\n<h3 id=\"gym101471j\">Gym101471J</h3>\r\n<p>CF1307G</p>\r\n<h3 id=\"cf1307f\">CF1307F</h3>\r\n<p>P3980</p>\r\n<p>CF1368H2</p>\r\n<h3 id=\"agc038e\">AGC038E</h3>\r\n<p>先考虑一个弱化版问题：<span class=\"math inline\">\\(B_i=1\\)</span> 时怎么做。</p>\r\n<p>这是一个经典问题，一般做法有两种：状压 <code>DP</code> 和 <code>min-max</code> 容斥。</p>\r\n<p>它们的复杂度都是 <span class=\"math inline\">\\(O(n2^n)\\)</span> 或 <span class=\"math inline\">\\(O(2^n)\\)</span> 的，然而这题数据范围是 <span class=\"math inline\">\\(400\\)</span>，说明需要用的此题的特殊性质。</p>\r\n<p>通过 <code>min-max</code> 容斥可以得出答案为 <span class=\"math display\">\\[\r\n\\sum_{S}(-1)^{|S|}\\frac{\\sum_{i=1}^n A_i}{\\sum_{i \\in S} A_i}\r\n\\]</span> 发现分母是小于 <span class=\"math inline\">\\(400\\)</span> 的非负整数！可以用背包数出每种分母的贡献 <span class=\"math inline\">\\(\\sum_S(-1)^{|S|}\\)</span>。</p>\r\n<p>设 <span class=\"math display\">\\[\r\nf_{i,j} = \\sum_{S \\subseteq \\{1,2,\\cdots,i\\}}(-1)^{|S|}[\\sum_{i \\in S}A_i=j]\r\n\\]</span> 转移为 <span class=\"math inline\">\\(f_{i,j}=f_{i-1,j}-f_{i-1,j-A_i}\\)</span>，答案为 <span class=\"math display\">\\[\r\n(\\sum_{i=1}^n A_i)\\sum_{i=0}^{400}\\frac{f_{n,i}}i\r\n\\]</span> 现在回到原问题，还是考虑 <code>min-max</code> 容斥，答案就是 <span class=\"math display\">\\[\r\n\\sum_{S}(-1)^{|S|}[S 中第一次有元素达到目标时的期望步数]\r\n\\]</span></p>\r\n<p>设 <span class=\"math inline\">\\(p_i=\\frac{A_i}{\\sum_{j \\in S}A_j}\\)</span>。</p>\r\n<p>根据期望的线性性质，期望步数可以分摊到经过每个状态上。所以后面那坨东西为： <span class=\"math display\">\\[\r\n\\begin{aligned}\r\n&amp;\\sum_{\\forall i \\in S,c_i&lt;B_i}[到达c状态的概率]\\cdot[离开c状态的期望步数]\\\\\r\n&amp;=\\sum_{\\forall i \\in S,c_i&lt;B_i}\\frac{(\\sum_{i \\in S}c_i)!}{\\prod_{i \\in S} c_i!}\\prod_{i \\in S}p_i^{c_i} \\cdot \\frac{\\sum_{i=1}^n A_i}{\\sum_{i \\in S} A_i}\\\\\r\n&amp;=\\sum_{\\forall i \\in S,c_i&lt;B_i}\\frac{(\\sum_{i \\in S}c_i)!}{\\prod_{i \\in S} c_i!}\\prod_{i \\in S}A_i^{c_i} \\cdot \\frac{\\sum_{i=1}^n A_i}{(\\sum_{i \\in S} A_i)^{(\\sum_{i \\in S}c_i)+1}}\r\n\\end{aligned}\r\n\\]</span></p>\r\n<p>把前面说的东西拼起来，答案为： <span class=\"math display\">\\[\r\n\\begin{aligned}\r\n&amp;\\sum_S(-1)^{|S|}\\sum_{\\forall i \\in S,c_i&lt;B_i}\\frac{(\\sum_{i \\in S}c_i)!}{\\prod_{i \\in S} c_i!}\\prod_{i \\in S}A_i^{c_i} \\cdot \\frac{\\sum_{i=1}^n A_i}{(\\sum_{i \\in S} A_i)^{(\\sum_{i \\in S}c_i)+1}}\\\\\r\n&amp;=(\\sum_{i=1}^n A_i)\\sum_S(-1)^{|S|}\\sum_{\\forall i \\in S,c_i&lt;B_i}\\frac{(\\sum_{i \\in S}c_i)!}{(\\sum_{i \\in S} A_i)^{(\\sum_{i \\in S}c_i)+1}} \\cdot \\prod_{i \\in S}\\frac{A_i^{c_i}}{c_i!}\r\n\\end{aligned}\r\n\\]</span></p>\r\n<p>式子中比较难转移的东西就是 <span class=\"math inline\">\\(\\sum_{i \\in S} A_i\\)</span> 和 <span class=\"math inline\">\\(\\sum_{i \\in S}c_i\\)</span>，把它们记状态里就行了。</p>\r\n<p>状态为 <span class=\"math display\">\\[\r\nf_{i,j,k}=\\sum_{S \\subseteq \\{1,2,\\cdots,i\\}}(-1)^{|S|}\\sum_{\\forall i \\in S,c_i&lt;B_i}\\prod_{i \\in S}\\frac{A_i^{c_i}}{c_i!}[\\sum_{i \\in S} A_i=j \\land \\sum_{i \\in S}c_i=k]\r\n\\]</span> 转移为 <span class=\"math display\">\\[\r\nf_{i,j,k}=f_{i-1,j,k}-\\sum_{c=0}^{B_i-1}f_{i-1,j-A_i,k-c}\\frac{A_i^c}{c!}\r\n\\]</span> 答案为 <span class=\"math display\">\\[\r\n(\\sum_{i=1}^n A_i)\\sum_{i=0}^{400}\\sum_{j=0}^{400}\\frac{j!f_{n,i,j}}{i^{j+1}}\r\n\\]</span> 分析一下时间复杂度，虽然每次转移的枚举量是 <span class=\"math inline\">\\(B_i\\)</span>，但由于 <span class=\"math inline\">\\(\\sum_{i=1}^nB_i\\)</span> 是 <span class=\"math inline\">\\(O(n)\\)</span> 的，所以总复杂度是 <span class=\"math inline\">\\(O(n^3)\\)</span>，空间复杂度可以用滚动数组优化到 <span class=\"math inline\">\\(O(n^2)\\)</span>。</p>\r\n<hr />\r\n<h3 id=\"agc037d\">AGC037D</h3>\r\n<p>考虑第三次操作前第 <span class=\"math inline\">\\(i\\)</span> 行一定由 <span class=\"math inline\">\\((i-1)m+1\\)</span> 到 <span class=\"math inline\">\\(im\\)</span> 构成，记 <span class=\"math inline\">\\((i-1)m+1\\)</span> 到 <span class=\"math inline\">\\(im\\)</span> 的颜色为 <span class=\"math inline\">\\(i\\)</span>。</p>\r\n<p>第二次操作的目标就是使颜色为 <span class=\"math inline\">\\(i\\)</span> 的数在第 <span class=\"math inline\">\\(i\\)</span> 行，所以第一次操作的目标就是使每一列 <span class=\"math inline\">\\(n\\)</span> 种都颜色各有一个。</p>\r\n<p>先考虑如何确定第一列的颜色，这显然是一个行与颜色的完美匹配问题。由于任意选 <span class=\"math inline\">\\(i\\)</span> 行，这 <span class=\"math inline\">\\(i\\)</span> 行的颜色数至少为 <span class=\"math inline\">\\(i\\)</span>，根据 Hall 定理，一定存在完美匹配。每一列依次求完美匹配就可以构造出一组解。</p>\r\n<p>然后第二三次操作就非常简单了，复杂度 <span class=\"math inline\">\\(O(n^4)\\)</span>。</p>\r\n<h3 id=\"agc043d\">AGC043D</h3>\r\n<p>考虑什么样的排列 <span class=\"math inline\">\\(P\\)</span> 是能被造出来的。</p>\r\n<p>考虑构造过程：每次选择一个头元素最小的序列 <span class=\"math inline\">\\(A_i\\)</span>，删除 <span class=\"math inline\">\\(A_i\\)</span> 开头单调递减的一段，再继续找头元素最小的序列。</p>\r\n<p>这启发我们把同时删除的元素看成一段，分段具有如下性质：</p>\r\n<ul>\r\n<li>每一段是长度不超过 <span class=\"math inline\">\\(3\\)</span> 的单调递减序列。</li>\r\n<li>每一段的头元素递增。</li>\r\n<li>长度为 <span class=\"math inline\">\\(1\\)</span> 的段不少于长度为 <span class=\"math inline\">\\(2\\)</span> 的段（因为每一个长度为 <span class=\"math inline\">\\(2\\)</span> 的段必须要对应一个长度为 <span class=\"math inline\">\\(1\\)</span> 的段来一起构成一个 <span class=\"math inline\">\\(A_i\\)</span>）。</li>\r\n</ul>\r\n<p>同时，只要满足上面三个条件，这个 <span class=\"math inline\">\\(P\\)</span> 就能被造出来的，将每个段配配对就可以得到一个生成 <span class=\"math inline\">\\(P\\)</span> 的 <span class=\"math inline\">\\(A\\)</span> 序列。</p>\r\n<p>由于 <span class=\"math inline\">\\(P\\)</span> 和分段内容是一一对应的，问题转化为对合法的分段内容计数。</p>\r\n<p>枚举长度分别为 <span class=\"math inline\">\\(1,2,3\\)</span> 的段数 <span class=\"math inline\">\\(cnt_1,cnt_2,cnt_3\\)</span>，满足 <span class=\"math inline\">\\(cnt_1+2cnt_2+3cnt_3=3n\\)</span> 和 <span class=\"math inline\">\\(cnt_1 \\ge cnt_2\\)</span>。</p>\r\n<p>贡献即为 <span class=\"math display\">\\[\r\n\\binom{cnt_1+cnt_2+cnt_3}{cnt_1,cnt_2,cnt_3}\\frac{(3n)!}{(cnt_1+cnt_2+cnt_3)!2^{cnt_2}3^{cnt_3}}\r\n\\]</span> 前面的组合数是划分出每一段的方案数，除以 <span class=\"math inline\">\\((cnt_1+cnt_2+cnt_3)!\\)</span> 是保证每一段的头元素递增，除以 <span class=\"math inline\">\\(2^{cnt_2}3^{cnt_3}\\)</span> 是保证每一段的头元素为最大值。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^2)\\)</span>。</p>\r\n<h3 id=\"agc049d\">AGC049D</h3>\r\n<p>考虑如何描述一个非负凸序列。</p>\r\n<ul>\r\n<li>枚举最小值 <span class=\"math inline\">\\(c\\)</span>，以及取到最小值的第一个位置 <span class=\"math inline\">\\(i\\)</span>，令 <span class=\"math inline\">\\(A=(c,c,\\cdots,c)\\)</span>。</li>\r\n<li>多次选一个位置 <span class=\"math inline\">\\(j&lt;i\\)</span>，将 <span class=\"math inline\">\\(A_j,A_{j-1},A_{j-2},\\cdots,A_1\\)</span> 分别加上 <span class=\"math inline\">\\(1,2,3,\\cdots,j\\)</span>。</li>\r\n<li>多次选一个位置 <span class=\"math inline\">\\(j&gt;i\\)</span>，将 <span class=\"math inline\">\\(A_j,A_{j+1},A_{j+2},\\cdots,A_n\\)</span> 分别加上 <span class=\"math inline\">\\(1,2,3,\\cdots,n-j+1\\)</span>，若 <span class=\"math inline\">\\(i&gt;1\\)</span> 则 <span class=\"math inline\">\\(i-1\\)</span> 必须被选到一次。</li>\r\n</ul>\r\n<p>第三步可以事先选 <span class=\"math inline\">\\(i-1\\)</span> 一次，对总和产生 <span class=\"math inline\">\\(\\frac {i(i-1)}2\\)</span> 的贡献，然后第三步就和第二步一样了。</p>\r\n<p>先枚举 <span class=\"math inline\">\\(i\\)</span>，第二三步本质上就是完全背包，由于体积的特性，有用的物品数量是 <span class=\"math inline\">\\(O(\\sqrt m)\\)</span> 的，可以 <span class=\"math inline\">\\(O(m\\sqrt m)\\)</span> 预处理出背包数组，然后 <span class=\"math inline\">\\(O(\\frac mn)\\)</span> 枚举 <span class=\"math inline\">\\(c\\)</span>，计算贡献。</p>\r\n<p>这样做的复杂度为 <span class=\"math inline\">\\(O(nm\\sqrt m)\\)</span>，无法通过。</p>\r\n<p>考虑 <span class=\"math inline\">\\(i \\rightarrow i+1\\)</span> 时，物品最多删一个，也最多添一个，并且总改变次数是 <span class=\"math inline\">\\(O(\\sqrt m)\\)</span> 的，动态维护背包即可做到 <span class=\"math inline\">\\(O(m\\sqrt m)\\)</span> 的复杂度。</p>\r\n<h3 id=\"agc050d\">AGC050D</h3>\r\n<p>设 <span class=\"math inline\">\\(f_{i,a,b,j}\\)</span> 表示从以下局面出发，还没有赢的人中从左到右第 <span class=\"math inline\">\\(j\\)</span> 个人最终赢的概率。</p>\r\n<ul>\r\n<li>有 <span class=\"math inline\">\\(a\\)</span> 个人还没有赢且已经排除了 <span class=\"math inline\">\\(i\\)</span> 个错误选项。</li>\r\n<li>有 <span class=\"math inline\">\\(b\\)</span> 个人还没有赢且已经排除了 <span class=\"math inline\">\\(i+1\\)</span> 个错误选项。</li>\r\n</ul>\r\n<p>转移就枚举这 <span class=\"math inline\">\\(a\\)</span> 个人中下一个人是赢还是输即可（这里 <span class=\"math inline\">\\(f_{i,0,b,j}=f_{i+1,b,0,j}\\)</span>）。</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(f_{i,a,b,j}=win \\cdot f_{i,a-1,b,j-[j&gt;b]} + lost \\cdot f_{i,a-1,b+1,j}(j\\ne b+1)\\)</span></li>\r\n<li><span class=\"math inline\">\\(f_{i,a,b,b+1}=win + lost \\cdot f_{i,a-1,b+1,b+1}(j\\le b)\\)</span></li>\r\n</ul>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^4)\\)</span>。</p>\r\n<h3 id=\"noi2021day1t1\">NOI2021Day1T1</h3>\r\n<p>如果把修改操作看成把路径上的点染成一种新的颜色，那么重边就是两端同色的边，轻边就是两端异色的边。</p>\r\n<p>所以询问操作就是查询路径上两端同色的边数，这个可以用树链剖分和线段树维护。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n\\log^2n)\\)</span>。</p>\r\n<h3 id=\"noi2021day1t2\">NOI2021Day1T2</h3>\r\n<p>当 <span class=\"math inline\">\\(k=2\\)</span> 时，交点就是逆序对，自然联想到行列式，发现答案就是行列式。</p>\r\n<p>当 <span class=\"math inline\">\\(n_1=n_2=\\cdots=n_k\\)</span> 时，答案就是把每相邻两层邻接矩阵的行列式乘起来。</p>\r\n<p>对于原问题，答案就是相邻两层邻接矩阵乘积的行列式。</p>\r\n<p>证明：</p>\r\n<ul>\r\n<li><p>对于一个合法的路径组，考虑两条路径 <span class=\"math inline\">\\((P_1,P_2,\\cdots,P_k)\\)</span> 和 <span class=\"math inline\">\\((Q_1,Q_2,\\cdots,Q_k)\\)</span>，两条路径有奇数个交点 <span class=\"math inline\">\\(\\iff\\)</span> <span class=\"math inline\">\\((P_1,Q_1)\\)</span> 和 <span class=\"math inline\">\\((P_k,Q_k)\\)</span> 逆序。</p></li>\r\n<li><p>对于一个不合法的路径组，考虑对其进行以下变换：</p>\r\n<ul>\r\n<li>找到最靠上的一个点被覆盖多次，多个在同一层时取最靠左的一个。</li>\r\n<li>找到经过此点的编号最小两条路径，将它们的下一半交换。</li>\r\n</ul>\r\n<p>这样的变换是相互的，并且会使每条路径头尾形成的逆序对总数的奇偶性改变，故不合法的路径组的贡献会两两抵消。</p></li>\r\n</ul>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^4)\\)</span>。</p>\r\n<h3 id=\"noi2021day1t3\">NOI2021Day1T3</h3>\r\n<p>容易发现对于一次询问，答案为 <span class=\"math inline\">\\(s\\)</span> 能到达且能到达 <span class=\"math inline\">\\(t\\)</span> 的点数。</p>\r\n<p>由于研究的是可达性，先进行强连通分量缩点。</p>\r\n<p>再考虑限制：若 <span class=\"math inline\">\\(x\\Rightarrow z\\)</span> 且 <span class=\"math inline\">\\(y\\Rightarrow z\\)</span>，则 <span class=\"math inline\">\\(x\\Rightarrow y\\)</span> 或 <span class=\"math inline\">\\(y\\Rightarrow x\\)</span>。这说明能到达 <span class=\"math inline\">\\(z\\)</span> 的点在一条链上，进一步，整张图是一棵树加上若干条从祖先到儿子的边。</p>\r\n<p>如何求出这棵树？一个点的父亲就是所有连向它的点中拓扑序最大的一个，注意所完点后编号就是拓扑序的逆序。</p>\r\n<p>对于加边操作，对 <span class=\"math inline\">\\(s,t\\)</span> 以及所有边的端点建虚树，统计一下虚树上的点和边的贡献即可。</p>\r\n<p>由于此题卡常，树剖求 <code>LCA</code> 效果最佳，用邻接链表存虚树，不能用 <code>vector</code>。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n+q\\log n)\\)</span>。</p>\r\n<h3 id=\"noi2021day2t1\">NOI2021Day2T1</h3>\r\n<p><span class=\"math inline\">\\(k \\le 15\\)</span> 是此题的突破点，这意味着把 <span class=\"math inline\">\\(256\\)</span> 平均分成 <span class=\"math inline\">\\(16\\)</span> 段后必然有一段是完全相同的。</p>\r\n<p>枚举完全相同的是哪一段，确定了 <span class=\"math inline\">\\(16\\)</span> 位后，期望只有 <span class=\"math inline\">\\(7\\)</span> 个符合条件的串，对它们用 <code>popcount</code> 检验即可。</p>\r\n<h3 id=\"noi2021day2t2\">NOI2021Day2T2</h3>\r\n<p><del>结论题。</del></p>\r\n<p>假设已知 <span class=\"math inline\">\\(a\\)</span> 序列，怎么算答案。</p>\r\n<p>维护最后一项 <span class=\"math inline\">\\(a_n\\)</span>​ 的分子分母 <span class=\"math inline\">\\(x,y\\)</span>​，一次变换后 <span class=\"math inline\">\\(\\frac {x&#39;}{y&#39;}=a_{n-1}+\\frac 1{a_n}=\\frac {a_{k-1}x+y}x\\)</span>​。发现不会发生约分，并且相当于对 <span class=\"math inline\">\\((x,y)\\)</span>​​ 做了一个线性变换： <span class=\"math display\">\\[\r\n\\begin{bmatrix}\r\nx&#39;\\\\\r\ny&#39;\r\n\\end{bmatrix}\r\n=\r\n\\begin{bmatrix}\r\na_{n-1}&amp;1\\\\\r\n1&amp;0\r\n\\end{bmatrix}\r\n\\begin{bmatrix}\r\nx\\\\\r\ny\r\n\\end{bmatrix}\r\n\\]</span> 算出 <span class=\"math display\">\\[\r\n\\begin{bmatrix}\r\na&amp;c\\\\\r\nb&amp;d\r\n\\end{bmatrix}\r\n=\r\n\\prod_{i=1}^n\r\n\\begin{bmatrix}\r\na_i&amp;1\\\\\r\n1&amp;0\r\n\\end{bmatrix}\r\n\\]</span> 答案即为 <span class=\"math inline\">\\(\\frac ab\\)</span>。</p>\r\n<p>然后考虑两种操作：</p>\r\n<ul>\r\n<li><p><code>W</code> 类型：因为 <span class=\"math inline\">\\(\\begin{bmatrix}x&amp;1\\\\1&amp;0\\end{bmatrix}\\begin{bmatrix}1&amp;0\\\\1&amp;1\\end{bmatrix}=\\begin{bmatrix}x+1&amp;1\\\\1&amp;0\\end{bmatrix}\\)</span>​，所以 'W' 操作就是在后面乘一个 <span class=\"math inline\">\\(\\begin{bmatrix}1&amp;0\\\\1&amp;1\\end{bmatrix}\\)</span>。</p></li>\r\n<li><p><code>E</code> 类型：虽然定义中如果最后一项为 <span class=\"math inline\">\\(1\\)</span> 时要特别处理，但发现当最后一项为 <span class=\"math inline\">\\(1\\)</span> 时两种处理方式的结果是一样的。</p>\r\n<p>给倒数第二项加 <span class=\"math inline\">\\(1\\)</span> 的影响： <span class=\"math display\">\\[\r\n\\begin{bmatrix}\r\n1&amp;1\\\\\r\n1&amp;0\r\n\\end{bmatrix}\r\n\\rightarrow\r\n\\begin{bmatrix}\r\n1&amp;0\\\\\r\n1&amp;1\r\n\\end{bmatrix}\r\n\\begin{bmatrix}\r\n1&amp;1\\\\\r\n1&amp;0\r\n\\end{bmatrix}\r\n=\r\n\\begin{bmatrix}\r\n1&amp;1\\\\\r\n2&amp;1\r\n\\end{bmatrix}\r\n\\]</span> 给数列的<strong>最后一项</strong>减 <span class=\"math inline\">\\(1\\)</span>，接着在数列尾再加两项，两项的值都是 <span class=\"math inline\">\\(1\\)</span> 的影响： <span class=\"math display\">\\[\r\n\\begin{bmatrix}\r\n1&amp;1\\\\\r\n1&amp;0\r\n\\end{bmatrix}\r\n\\rightarrow\r\n\\begin{bmatrix}\r\n0&amp;1\\\\\r\n1&amp;0\r\n\\end{bmatrix}\r\n\\begin{bmatrix}\r\n1&amp;1\\\\\r\n1&amp;0\r\n\\end{bmatrix}^2\r\n=\r\n\\begin{bmatrix}\r\n1&amp;1\\\\\r\n2&amp;1\r\n\\end{bmatrix}\r\n\\]</span> 所以把 <code>E</code> 操作按第二种处理方式就行了，给数列的最后一项减 <span class=\"math inline\">\\(1\\)</span>​ 相当于乘 <span class=\"math inline\">\\(\\begin{bmatrix}1&amp;0\\\\-1&amp;1\\end{bmatrix}\\)</span>。</p>\r\n<p>于是 <code>E</code> 操作相当于乘 <span class=\"math inline\">\\(\\begin{bmatrix}1&amp;0\\\\-1&amp;1\\end{bmatrix}\\begin{bmatrix}1&amp;1\\\\1&amp;0\\end{bmatrix}^2=\\begin{bmatrix}2&amp;1\\\\-1&amp;0\\end{bmatrix}\\)</span>。</p></li>\r\n</ul>\r\n<p>此时这题就很容易了，<code>APPEND</code>，<code>FLIP</code> 和 <code>REVERSE</code> 都是可以平衡树维护的，每个结点不仅要维护区间矩阵乘积，还要维护倒着乘的结果，<code>FLIP</code> 后的结果，和 <code>FLIP</code> 后倒着乘的结果。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n\\log n)\\)</span>。</p>\r\n<h3 id=\"noi2021day2t3\">NOI2021Day2T3</h3>\r\n<p>发现每个机器人对纸带的修改本质上只有 <span class=\"math inline\">\\(4\\)</span> 种：赋值为 <span class=\"math inline\">\\(0\\)</span>，赋值为 <span class=\"math inline\">\\(1\\)</span>，不变，取反，分别用 <span class=\"math inline\">\\(0,1,2,3\\)</span> 表示。</p>\r\n<p>不难想到容斥原理：枚举一个起始位置集合 <span class=\"math inline\">\\(mask\\)</span>，计算有多少种输入使得机器人从这些位置出发的输出都一样。每条纸带上每个位置受到的修改是确定且独立的，讨论一下一个位置的可行输入，乘起来就是贡献：</p>\r\n<ul>\r\n<li>如果一个位置同时包含 <span class=\"math inline\">\\(0,1\\)</span> 或 <span class=\"math inline\">\\(2,3\\)</span>，那么输入只能为空，方案数为 <span class=\"math inline\">\\(1\\)</span>。</li>\r\n<li>否则，如果一个位置包含两种操作，那么输入可以为空或 <span class=\"math inline\">\\(01\\)</span> 中的一种，方案数为 <span class=\"math inline\">\\(2\\)</span>。</li>\r\n<li>否则，三种输入都可行，方案数为 <span class=\"math inline\">\\(3\\)</span>。</li>\r\n</ul>\r\n<p>至此，得到一个 <span class=\"math inline\">\\(O(2^nmn^2)\\)</span> 的做法。</p>\r\n<p>考虑优化计算一个机器人对一个起始位置集合的贡献，记状压数组 <span class=\"math inline\">\\(g_{0/1/2/3,S}\\)</span> 表示选择起始位置集合 <span class=\"math inline\">\\(S\\)</span> 时包含 <span class=\"math inline\">\\(0/1/2/3\\)</span> 的位置，<span class=\"math inline\">\\(g\\)</span> 可以 <span class=\"math inline\">\\(O(2^n)\\)</span> 求出，有了 <span class=\"math inline\">\\(g\\)</span> 也可以 <span class=\"math inline\">\\(O(1)\\)</span>​ 算贡献。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(2^nm)\\)</span>。</p>\r\n<p>题目限制 <span class=\"math inline\">\\(n \\le 32\\)</span>，猜想是分大小两类计算来平衡复杂度。进一步观察发现当 <span class=\"math inline\">\\(mask\\)</span> 的最高位大于等于 <span class=\"math inline\">\\(\\lceil\\frac n2\\rceil\\)</span> 时，修改范围大于 <span class=\"math inline\">\\(\\lceil\\frac n2\\rceil\\)</span> 的机器人都会爆掉。</p>\r\n<p>枚举 <span class=\"math inline\">\\(mask\\)</span> 的最高位 <span class=\"math inline\">\\(\\max\\)</span>，这样就确定了哪些机器人会爆掉（不用考虑），分两种情况：</p>\r\n<ul>\r\n<li><p><span class=\"math inline\">\\(\\max \\le \\lceil\\frac n2\\rceil\\)</span>，这个可以暴力容斥，复杂度 <span class=\"math inline\">\\(O(2^{\\frac n2}m)\\)</span>。</p></li>\r\n<li><p><span class=\"math inline\">\\(\\max &gt; \\lceil\\frac n2\\rceil\\)</span>，这意味着需要考虑的机器人修改范围都不超过 <span class=\"math inline\">\\(n-\\max+1\\)</span>。</p>\r\n<p>一个修改范围大小为 <span class=\"math inline\">\\(R\\)</span>​ 的机器人所在的纸带上，一个位置的状态只和两个因素有关：</p>\r\n<ul>\r\n<li><p>它前面 <span class=\"math inline\">\\(R\\)</span> 个位置哪些在 <span class=\"math inline\">\\(mask\\)</span> 中。</p></li>\r\n<li><p>它是否没有被某个区间覆盖。</p></li>\r\n</ul>\r\n<p>如果所有区间都覆盖了某个位置，说明 <span class=\"math inline\">\\(mask\\)</span>​ 的最低位大于等于 <span class=\"math inline\">\\(2\\max-n+1\\)</span>​，可以暴力容斥，复杂度 <span class=\"math inline\">\\(O(2^{n-\\max+1}m)\\)</span>​。 否则只需要考虑第一条，可以 <code>DP</code>，设 <span class=\"math inline\">\\(f_{i,S}\\)</span>​ 表示已经确定了 <span class=\"math inline\">\\(mask\\)</span>​ 的前 <span class=\"math inline\">\\(i\\)</span>​ 位，其中最后 <span class=\"math inline\">\\(n-\\max+1\\)</span>​ 位为 <span class=\"math inline\">\\(S\\)</span>​，转移直接枚举第 <span class=\"math inline\">\\(i+1\\)</span>​ 位选不选即可，可以 <span class=\"math inline\">\\(O(2^{n-\\max+1}m)\\)</span>​ 预处理转移系数，复杂度 <span class=\"math inline\">\\(O(2^{n-\\max+1}n)\\)</span>​。</p></li>\r\n</ul>\r\n<p>总复杂度 <span class=\"math inline\">\\(O(2^{n/2}m)\\)</span>​。</p>\r\n<h3 id=\"cf1548d2\">CF1548D2</h3>\r\n<p>根据 Pick 定理： <span class=\"math display\">\\[\r\nS=i+\\frac b2-1\r\n\\]</span> 合法三角形的条件即为 <span class=\"math inline\">\\(S\\in \\mathbb Z \\land2S\\equiv b \\pmod 4\\)</span>​。</p>\r\n<p>对于三角形 <span class=\"math inline\">\\(ABC\\)</span>​， <span class=\"math inline\">\\(2S=|\\overrightarrow A\\times \\overrightarrow B+\\overrightarrow B\\times \\overrightarrow C+\\overrightarrow C\\times \\overrightarrow A|\\)</span>​​​，由于 <span class=\"math inline\">\\(S\\)</span> 是整数，所以绝对值不会影响 <span class=\"math inline\">\\(S\\)</span> 的奇偶性，只需要各个顶点的坐标模 <span class=\"math inline\">\\(4\\)</span> 的结果就可以知道 <span class=\"math inline\">\\(2S \\bmod 4\\)</span>​。</p>\r\n<p>一条线段 <span class=\"math inline\">\\(AB\\)</span>​​​ 的 <strong>边界数</strong> 为线段上整点数减一，<span class=\"math inline\">\\(b\\)</span>​​ 就是三条线段的边界数之和。线段 <span class=\"math inline\">\\(AB\\)</span>​​ 的边界数 <span class=\"math inline\">\\(\\text{bounds}(A,B)=\\gcd(|X_A-X_B|,|Y_A-Y_B|)\\)</span>​​​​，不太好简单表示。</p>\r\n<p>由于要求 <span class=\"math inline\">\\(S\\)</span> 为整数，所以 <span class=\"math inline\">\\(b\\)</span> 为偶数，这是一个很重要的条件，这意味着合法三角形三条边的边界数中至少有一条是偶数，另外两个奇偶性相同，判断 <span class=\"math inline\">\\(\\text{bounds}(A,B) \\bmod 4\\)</span> 是 <span class=\"math inline\">\\(0\\)</span> 还是 <span class=\"math inline\">\\(2\\)</span> 要容易得多， <span class=\"math display\">\\[\r\n\\text{bounds}(A,B) \\equiv 0\\pmod 4 \\iff X_A\\equiv X_B\\pmod 4 \\land Y_A\\equiv Y_B\\pmod 4\r\n\\]</span> 在 <span class=\"math inline\">\\(\\text{bounds}(A,B) \\not\\equiv 0\\pmod 4\\)</span> 的前提下 <span class=\"math display\">\\[\r\n\\text{bounds}(A,B) \\equiv 2\\pmod 4 \\iff X_A\\equiv X_B\\pmod 2 \\land Y_A\\equiv Y_B\\pmod 2\r\n\\]</span> 判断这两个条件只需要各个顶点的坐标模 <span class=\"math inline\">\\(4\\)</span> 的结果。</p>\r\n<p>此时做法就清晰起来了，合法三角形按三条边的边界数奇偶性可以分成 EEE 和 EOO 两类，设 <span class=\"math inline\">\\(cnt_{A,x,y,z}\\)</span> 表示有多少个点 <span class=\"math inline\">\\(B\\)</span>​​ 满足 <span class=\"math display\">\\[\r\nX_B\\equiv x\\pmod 4 \\land Y_B\\equiv y\\pmod 4 \\land \\text{bounds}(A,B) \\equiv z\\pmod 4\r\n\\]</span> 这个是可以 <span class=\"math inline\">\\(O(n^2\\log V)\\)</span> 预处理的。</p>\r\n<p>考虑分别对两类合法三角形 <span class=\"math inline\">\\(ABC\\)</span>​​​ 计数，先枚举点 <span class=\"math inline\">\\(A\\)</span>​，再枚举 <span class=\"math display\">\\[\r\nX_B\\bmod 4,Y_B\\bmod 4,\\text{bounds}(A,B)\\bmod 4\\\\X_C\\bmod 4,Y_C\\bmod 4,\\text{bounds}(A,C)\\bmod 4\r\n\\]</span> 满足 <span class=\"math display\">\\[\r\nS \\in \\mathbb Z\\\\\r\n\\text{bounds}(A,B)\\equiv\\text{bounds}(A,C)\\pmod 2\\\\\r\nX_B\\equiv X_C \\pmod 2\\\\\r\nY_B\\equiv Y_C\\pmod 2\\\\\r\nS\\equiv \\text{bounds}(A,B)+\\text{bounds}(A,C)+\\text{bounds}(B,C)\\pmod 4\r\n\\]</span> 使用 <span class=\"math inline\">\\(cnt\\)</span> 数组可以 <span class=\"math inline\">\\(O(1)\\)</span>​​ 计算贡献。</p>\r\n<p>这样每个 EEE 三角形会被算 <span class=\"math inline\">\\(3\\)</span> 遍，每个 EOO 三角形会被算 <span class=\"math inline\">\\(1\\)</span> 遍。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^2\\log V)\\)</span>。</p>\r\n<h3 id=\"cf1548e\">CF1548E</h3>\r\n<p><del>最简单的 3400。</del></p>\r\n<p>把坏格子填成 <span class=\"math inline\">\\(1\\)</span>，其他填成 <span class=\"math inline\">\\(0\\)</span>，问题就是求矩阵中有多少个“1”的四-连通块。</p>\r\n<blockquote>\r\n<p>引理：对于任意两行 <span class=\"math inline\">\\(i,j\\)</span>​​​，“1” 所在列的集合一定是相互包含的。</p>\r\n</blockquote>\r\n<p>不妨假设 <span class=\"math inline\">\\(a_i \\ge a_j\\)</span>​​，<span class=\"math inline\">\\(a_i+b_k \\le x \\Rightarrow a_j+b_k \\le x\\)</span>​。</p>\r\n<p>同时，此引理也就是这个矩阵的全部性质了，因为任何一个符合引理的矩阵都是可以构造出 <span class=\"math inline\">\\(a,b\\)</span> 数组的。此题唯一的条件也就是这个引理了，目标很明确。</p>\r\n<p>我们数连通块的思路是这样的：</p>\r\n<ul>\r\n<li>对于一个连通块 <span class=\"math inline\">\\(S\\)</span>​​​​​​，它上到 <span class=\"math inline\">\\(L_r\\)</span>​​​​​​，下到 <span class=\"math inline\">\\(R_r\\)</span>​​​​​​，左到 <span class=\"math inline\">\\(L_c\\)</span>​​​​​，右到 <span class=\"math inline\">\\(R_c\\)</span>​​​​​​。</li>\r\n<li>设 <span class=\"math inline\">\\(a_{L_r},a_{L_r+1},\\cdots,a_{R_r}\\)</span>​​​ 中第一个取到最小值的位置为 <span class=\"math inline\">\\(i\\)</span>，显然 <span class=\"math inline\">\\((i,L_c),(i,L_c+1),\\cdots,(i,R_c)\\)</span>​ 都为 “1”。</li>\r\n<li>我们希望 <span class=\"math inline\">\\(S\\)</span> 被 <span class=\"math inline\">\\(i\\)</span> 数到。</li>\r\n</ul>\r\n<p>再考虑对于 <span class=\"math inline\">\\(i\\)</span>​，有多少个连通块会被它数到，对于第 <span class=\"math inline\">\\(i\\)</span> 行的一个 “1” 的连续段 <span class=\"math inline\">\\([l,r]\\)</span>，它所在的连通块会被 <span class=\"math inline\">\\(i\\)</span>​​ 数当且仅当：</p>\r\n<ul>\r\n<li>它向上不能走到一行 <span class=\"math inline\">\\(j\\)</span>​​​ 满足 <span class=\"math inline\">\\(a_j \\le a_i\\)</span>​​​​，形式化地，<span class=\"math inline\">\\(\\min_{k\\in [l,r]}a_k+\\max_{k\\in (j,i]}b_k&gt;x\\)</span>​​。</li>\r\n<li>它向下不能走到一行 <span class=\"math inline\">\\(j\\)</span>​​ 满足 <span class=\"math inline\">\\(a_j&lt;a_i\\)</span>​​​，形式化地，<span class=\"math inline\">\\(\\min_{k\\in [l,r]}a_k+\\max_{k\\in [i,j)}b_k&gt;x\\)</span>​​​。</li>\r\n</ul>\r\n<p>综上，记 <span class=\"math inline\">\\(i\\)</span> 前面第一个满足 <span class=\"math inline\">\\(a_j\\le a_i\\)</span> 的 <span class=\"math inline\">\\(j\\)</span> 为 <span class=\"math inline\">\\(pre\\)</span>， <span class=\"math inline\">\\(i\\)</span> 后面第一个满足 <span class=\"math inline\">\\(a_j&lt; a_i\\)</span> 的 <span class=\"math inline\">\\(j\\)</span> 为 <span class=\"math inline\">\\(suf\\)</span>，连续段 <span class=\"math inline\">\\([l,r]\\)</span> 造成贡献当且仅当 <span class=\"math inline\">\\(\\min_{i\\in [l,r]}a_i&gt;x-\\max_{i\\in (pre,suf)}\\)</span>，不等式右边对于每个 <span class=\"math inline\">\\(i\\)</span> 是确定的，而且是可以通过单调栈 <span class=\"math inline\">\\(O(n)\\)</span>​ 预处理的东西，对于左边则可以使用数据结构来维护。</p>\r\n<p>下面我们进一步讨论这个数据结构需要干什么：</p>\r\n<ul>\r\n<li>这个数据结构维护所有连续段 <span class=\"math inline\">\\(b\\)</span> 的最小值。</li>\r\n<li>将所有行以 <span class=\"math inline\">\\(a_i\\)</span>​ 为第一关键字，<span class=\"math inline\">\\(i\\)</span>​​ 为第二关键字从大到小排序。每次序列中一个 <span class=\"math inline\">\\(0\\)</span> 改成 <span class=\"math inline\">\\(1\\)</span>​，会导致新增连续段，也会导致两个连续段合并，修改就是加入元素和删除元素。</li>\r\n<li>询问操作就是查询有多少个元素大于 <span class=\"math inline\">\\(key\\)</span>。</li>\r\n</ul>\r\n<p>对于新增连续段和合并连续段可以用并查集维护，元素则用反向树状数组维护。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n\\log n)\\)</span>。</p>\r\n<h3 id=\"minieye杯中国大学生算法设计超级联赛5t1\">2021“MINIEYE杯”中国大学生算法设计超级联赛（5）T1</h3>\r\n<p>把两端同色的边看成实边，两端异色的边看成虚边。</p>\r\n<ul>\r\n<li><code>1</code> 操作就是 <code>access(u)</code>。</li>\r\n<li><code>2</code> 操作就是查询两点间的虚边条数，转化一下变成查询一个点到根路径上的虚边条数。</li>\r\n<li><code>3</code> 操作转化一下就是查询 <code>dfs</code> 序区间中的点到根路径上的虚边条数总和。</li>\r\n<li><code>4</code> 操作就是每条实链点数选二之和。</li>\r\n</ul>\r\n<p>对于 <code>23</code> 操作，需要维护每个点到根路径上的虚边条数，支持区间加、区间求和，树状数组即可。</p>\r\n<p>对于 <code>4</code> 操作，在 <code>LCT</code> 中维护实链的点数，就可以在 <code>access</code> 时维护答案。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n\\log^2n)\\)</span>。</p>\r\n<h3 id=\"minieye杯中国大学生算法设计超级联赛5t2\">2021“MINIEYE杯”中国大学生算法设计超级联赛（5）T2</h3>\r\n<p>记 <span class=\"math inline\">\\(f_{i,j}\\)</span> 表示有多少个串恰好有 <span class=\"math inline\">\\(i\\)</span> 个 <code>a</code>、<span class=\"math inline\">\\(j\\)</span>​​ 个 <code>b</code>，不难写出它的生成函数 <span class=\"math inline\">\\((x+y+k-2)^L\\)</span>。</p>\r\n<p>而题目中求的就是 <span class=\"math inline\">\\(\\sum_{i=0}^L\\sum_{j=0}^L[n|i-p][n|j-q][x^i][y^j](x+y+k-2)^L\\)</span>​​。</p>\r\n<p>题目还保证 <span class=\"math inline\">\\(n|P-1\\)</span>​，考虑单位根反演，得到答案为 <span class=\"math display\">\\[\r\n\\frac 1{n^2}\\sum_{i=0}^{n-1}\\sum_{j=0}^{n-1}(\\omega_n^i+\\omega_n^j+k-2)^L\\omega_n^{-ip}\\omega_n^{-jq}\r\n\\]</span> 记 <span class=\"math inline\">\\(A_{i,j}=(\\omega_n^i+\\omega_n^j+k-2)^L\\)</span> 可以 <span class=\"math inline\">\\(O(n^2\\log L)\\)</span> 预处理，答案矩阵 <span class=\"math inline\">\\(B\\)</span> 就是 <span class=\"math inline\">\\(A\\)</span> 对两维分别做 <code>IDFT</code> 得到的。每次固定一维，对另一维做 <code>IDFT</code> 就行了，暴力做复杂度 <span class=\"math inline\">\\(O(n^3)\\)</span>，或者 Bluestein + MTT 可以做到 <span class=\"math inline\">\\(O(n^2\\log n)\\)</span>。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^3)\\)</span> 或者 <span class=\"math inline\">\\(O(n^2\\log L)\\)</span>。</p>\r\n<h3 id=\"minieye杯中国大学生算法设计超级联赛5t9\">2021“MINIEYE杯”中国大学生算法设计超级联赛（5）T9</h3>\r\n<p>称区间中数量超过一半的数为 <strong>主元素</strong>。</p>\r\n<p>由于一个合法区间只有一个主元素，可以考虑每个主元素的贡献。</p>\r\n<h4 id=\"做法-1\">做法 1</h4>\r\n<p>考虑枚举一个值 <span class=\"math inline\">\\(v\\)</span>​，计算这个值的贡献。</p>\r\n<p>假设 <span class=\"math inline\">\\(v\\)</span>​ 在序列中的出现位置为 <span class=\"math inline\">\\(p_1,p_2,\\cdots,p_k\\)</span>​​，区间 <span class=\"math inline\">\\([l,r]\\)</span> 中第一个 <span class=\"math inline\">\\(v\\)</span> 在 <span class=\"math inline\">\\(p_i\\)</span> 出现，最后一个 <span class=\"math inline\">\\(v\\)</span> 在 <span class=\"math inline\">\\(p_j\\)</span>​ 出现。</p>\r\n<p>考虑枚举 <span class=\"math inline\">\\(j\\)</span>​，快速查询有多少对合法的 <span class=\"math inline\">\\((l,r)\\)</span>​。把等于 <span class=\"math inline\">\\(v\\)</span>​ 的位置变成 <span class=\"math inline\">\\(1\\)</span>​，不等于 <span class=\"math inline\">\\(v\\)</span>​ 的位置变成 <span class=\"math inline\">\\(-1\\)</span>​，记前缀和为 <span class=\"math inline\">\\(sum_i\\)</span>​，那么区间 <span class=\"math inline\">\\([l,r]\\)</span>​ 合法的充要条件为 <span class=\"math inline\">\\(sum_{l-1}&lt;sum_r\\)</span>​，因此需要维护的是 <span class=\"math inline\">\\(sum_1,sum_2,\\cdots,sum_{p_j}\\)</span>​ 组成的集合，<span class=\"math inline\">\\(j\\rightarrow j+1\\)</span>​ 时，加入的元素是 <span class=\"math inline\">\\(sum_{p_j},sum_{p_j+1},\\cdots,sum_{p_{j+1}-1}\\)</span>​，它们的值是连续的一段，所以这是一个区间 <span class=\"math inline\">\\(+1\\)</span>​，对于一个 <span class=\"math inline\">\\(r\\in[p_j,p_{j+1})\\)</span>​，合法 <span class=\"math inline\">\\(l\\)</span>​ 的数量就是集合中小于 <span class=\"math inline\">\\(sum_r\\)</span>​​ 的元素数量，这是一个前缀和，而 <span class=\"math inline\">\\([p_j,p_{j+1})\\)</span>​ 内所有的 <span class=\"math inline\">\\(sum_r\\)</span>​ 构成一个区间，所以询问操作是查询前缀和的前缀和，可以用三个树状数组实现。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n\\log n)\\)</span>。</p>\r\n<h4 id=\"做法-2\">做法 2</h4>\r\n<p>考虑分治，计算有多少个合法区间 <span class=\"math inline\">\\([l,r]\\)</span>​​ 满足 <span class=\"math inline\">\\(l\\le mid+1 \\land r\\ge mid\\)</span>​​。</p>\r\n<p>可以发现区间 <span class=\"math inline\">\\([l,r]\\)</span>​​ 合法的必要条件是 <span class=\"math inline\">\\([l,mid]\\)</span> 和 <span class=\"math inline\">\\([mid+1,r]\\)</span> 中至少有一个是合法的。</p>\r\n<blockquote>\r\n<p>引理：一个序列所有前缀的主元素中本质不同只有 <span class=\"math inline\">\\(O(\\log n)\\)</span> 个。</p>\r\n</blockquote>\r\n<p>所以可能产生贡献的 <span class=\"math inline\">\\(v\\)</span> 只有 <span class=\"math inline\">\\(O(\\log n)\\)</span> 个。枚举 <span class=\"math inline\">\\(v\\)</span>。把等于 <span class=\"math inline\">\\(v\\)</span> 的位置变成 <span class=\"math inline\">\\(1\\)</span>，不等于 <span class=\"math inline\">\\(v\\)</span> 的位置变成 <span class=\"math inline\">\\(-1\\)</span>，记前缀和为 <span class=\"math inline\">\\(sum_i\\)</span>，枚举 <span class=\"math inline\">\\(r\\)</span> 后，需要查询有多少个 <span class=\"math inline\">\\(l\\le mid+1\\)</span> 满足 <span class=\"math inline\">\\(sum_{l-1}&lt;sum_r\\)</span>，这个可以预处理前缀和做到 <span class=\"math inline\">\\(O(1)\\)</span> 查询。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n\\log^2n)\\)</span>。</p>\r\n<h3 id=\"minieye杯中国大学生算法设计超级联赛5t13\">2021“MINIEYE杯”中国大学生算法设计超级联赛（5）T13</h3>\r\n<p>先二分一个直径 <span class=\"math inline\">\\(D\\)</span>，考虑用 <code>DP</code> 去判定。</p>\r\n<p>设 <span class=\"math inline\">\\(f_{u,0/1}\\)</span> 表示以下情形以 <span class=\"math inline\">\\(u\\)</span>​ 为端点向子树内延伸的最长链的最小值（不存在时为 <span class=\"math inline\">\\(\\infty\\)</span>）：</p>\r\n<ul>\r\n<li>确定了 <span class=\"math inline\">\\(u\\)</span>​ 子树内每个点选哪条边。</li>\r\n<li><span class=\"math inline\">\\(u\\)</span> 选的边是否是 <span class=\"math inline\">\\(u\\)</span>​ 和父亲的连边。</li>\r\n<li>子树内直径不超过 <span class=\"math inline\">\\(D\\)</span>。</li>\r\n</ul>\r\n<p><span class=\"math inline\">\\(f_{u,1}\\)</span>​​​ 可以直接从每个儿子 <span class=\"math inline\">\\(v\\)</span>​​​ 用 <span class=\"math inline\">\\(\\min(f_{v,0}+w(u,v),f_{v,1}+\\max(w(u,v)-p_v,0))\\)</span>​​​ 转移过来，如果前两大的值之和大于 <span class=\"math inline\">\\(D\\)</span>​​，<span class=\"math inline\">\\(f_{u,1}=\\infty\\)</span>​​，否则就取这些值中的最大值。</p>\r\n<p><span class=\"math inline\">\\(f_{u,0}\\)</span>​ 的转移需要分析一下，<span class=\"math inline\">\\(u\\)</span>​ 选择的边 <span class=\"math inline\">\\((u,v)\\)</span>​​ 必须要满足 <span class=\"math inline\">\\(v\\)</span>​ 是 <span class=\"math inline\">\\(\\min(f_{v,0}+w(u,v),f_{v,1}+w(u,v)-p_v)\\)</span>​​ 前两大的儿子，所以枚举一下 <span class=\"math inline\">\\(v\\)</span>，就可以直接转移了。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n\\log V)\\)</span>。</p>\r\n<h3 id=\"agc041d\">AGC041D</h3>\r\n<p>考虑任意 <span class=\"math inline\">\\(k\\)</span>​ 道题的总分都小于任意 <span class=\"math inline\">\\(k+1\\)</span>​ 道题的总分这个限制，发现它等价于前 <span class=\"math inline\">\\(\\lceil\\frac n2\\rceil\\)</span>​ 道题的总分小于后 <span class=\"math inline\">\\(\\lceil\\frac n2\\rceil-1\\)</span>​ 道题的总分。</p>\r\n<p>考虑如何生成一个合法的序列 <span class=\"math inline\">\\(A\\)</span>：</p>\r\n<ul>\r\n<li>枚举第 <span class=\"math inline\">\\(\\lfloor\\frac n2\\rfloor+1\\)</span>​ 道题的分值 <span class=\"math inline\">\\(c\\)</span>​，令 <span class=\"math inline\">\\(A=(c,c,\\cdots,c)\\)</span>​。</li>\r\n<li>多次选一个位置 <span class=\"math inline\">\\(j&lt;\\lfloor\\frac n2\\rfloor+1\\)</span>​​，将 <span class=\"math inline\">\\(A_1,A_2,\\cdots,A_j\\)</span>​ 全部减一。</li>\r\n<li>多次选一个位置 <span class=\"math inline\">\\(j&gt;\\lfloor\\frac n2\\rfloor+1\\)</span>​，将 <span class=\"math inline\">\\(A_j,A_{j+1},\\cdots,A_n\\)</span>​​​ 全部加一。</li>\r\n<li>由于 <span class=\"math inline\">\\(A_1 \\ge 1\\)</span>​​​，所以第二种操作的次数不得超过 <span class=\"math inline\">\\(c-1\\)</span>​​​，同理第三种操作的次数不得超过 <span class=\"math inline\">\\(n-c\\)</span>​​​。</li>\r\n<li>设前 <span class=\"math inline\">\\(\\lceil\\frac n2\\rceil\\)</span>​ 道题的总分减后 <span class=\"math inline\">\\(\\lceil\\frac n2\\rceil-1\\)</span>​ 道题的总分为 <span class=\"math inline\">\\(x\\)</span>​，第一步后 <span class=\"math inline\">\\(x=c\\)</span>​，第二种操作每一次都会使 <span class=\"math inline\">\\(x\\)</span>​ 减小 <span class=\"math inline\">\\(j\\)</span>​，第三种操作每一次都会使 <span class=\"math inline\">\\(x\\)</span>​ 减小 <span class=\"math inline\">\\(n-j+1\\)</span>​​，因此第二、三种操作的总贡献要小于 <span class=\"math inline\">\\(c\\)</span>。</li>\r\n</ul>\r\n<p>可以看出这是一个完全背包，第二种操作就是添加体积为 <span class=\"math inline\">\\(1,2,\\cdots,\\lfloor\\frac n2\\rfloor\\)</span>​​ 的物品，而且最多添加 <span class=\"math inline\">\\(c-1\\)</span>​ 个，第三种操作就是添加体积为 <span class=\"math inline\">\\(1,2,\\cdots,\\lceil\\frac n2\\rceil-1\\)</span>​​​​ 的物品，最多添加 <span class=\"math inline\">\\(n-c\\)</span>​ 个，总体积要小于 <span class=\"math inline\">\\(c\\)</span>​。</p>\r\n<p>对于第二种操作，考虑预处理 <span class=\"math inline\">\\(L_{i,j}\\)</span>​ 表示选择 <span class=\"math inline\">\\(i\\)</span> 个物品，总体积为 <span class=\"math inline\">\\(j\\)</span> 的方案数。用传统背包做复杂度肯定不行，事实上它能直接转移： <span class=\"math display\">\\[\r\nL_{i,j}=L_{i-1,j-1}+L_{i,j-i}-L_{i-1,j-i-\\lfloor\\frac n2\\rfloor}\r\n\\]</span> 对于第三种操作，同理可以预处理 <span class=\"math inline\">\\(R_{i,j}\\)</span>。</p>\r\n<p>然后就可以枚举 <span class=\"math inline\">\\(c\\)</span>​ 后 <span class=\"math inline\">\\(O(n)\\)</span>​​ 计算合法方案数。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^2)\\)</span>。</p>\r\n<h3 id=\"agc027d\">AGC027D</h3>\r\n<p>构造的思路是先黑白染色，然后填好黑格，再让每个白格满足：</p>\r\n<ul>\r\n<li>它大于周围四个黑格。</li>\r\n<li>它模周围四个黑格都等于 <span class=\"math inline\">\\(1\\)</span>。</li>\r\n</ul>\r\n<p>填白格的过程是容易的，对于一个白格，先算出周围四个黑格的 <span class=\"math inline\">\\(\\text{lcm}\\)</span>，然后尝试填 <span class=\"math inline\">\\(\\text{lcm}+1\\)</span>​，如果已经填过了，就继续尝试 <span class=\"math inline\">\\(2\\text{lcm}+1,3\\text{lcm}+1,\\cdots\\)</span>​。</p>\r\n<p>如果没有值域限制，这题就做完了，考虑怎样让填的数尽可能小。</p>\r\n<p>填白格没有什么好优化的（尝试过优先填 <span class=\"math inline\">\\(\\text{lcm}\\)</span>​​ 较大的格子，但完全没有效果），所以考虑如何填黑格，才能使 <span class=\"math inline\">\\(\\text{lcm}\\)</span> 比较小。</p>\r\n<ul>\r\n<li>填法一：顺序填或随机填，大概只能构造 <span class=\"math inline\">\\(N\\)</span> 等于一百多。</li>\r\n<li>填法二：考虑到一个白格周围四个黑格有两个是同一行的，有两个是同一列的，令 <span class=\"math inline\">\\(A_{i,j}\\)</span> 是 <span class=\"math inline\">\\(\\text{lcm(i,j)}\\)</span> 的倍数，具体怎么确定，像确定白格那样确定，大概能构造 <span class=\"math inline\">\\(N\\)</span> 等于两百多。</li>\r\n<li>填法三：考虑到一个白格周围四个黑格只涉及四条斜线，令 <span class=\"math inline\">\\(A_{i,j}\\)</span> 是 <span class=\"math inline\">\\(\\text{lcm}(i+j,i-j+n)\\)</span> 的倍数，大概能构造 <span class=\"math inline\">\\(N\\)</span> 等于 <span class=\"math inline\">\\(425\\)</span> 左右。</li>\r\n<li>填法四：经过一番尝试，令 <span class=\"math inline\">\\(A_{i,j}\\)</span>​​ 是 <span class=\"math inline\">\\(\\text{lcm}(i+(n-j+1),i-(n-j+1)+n)\\)</span>​（就是把列编号倒过来）可以通过。</li>\r\n<li>填发五：考虑给每条斜线分配一个质数，黑格就等于所在的两条斜线质数的乘积，白格就等于周围四条斜线质数的乘积加一，一定不会有数重复。</li>\r\n</ul>\r\n<p>填发四需要用 <code>set</code> 维护哪些数填过，复杂度 <span class=\"math inline\">\\(O(n^2\\log n)\\)</span>​​。</p>\r\n<p>填发五复杂度 <span class=\"math inline\">\\(O(n^2)\\)</span>。</p>\r\n<h3 id=\"agc025d\">AGC025D</h3>\r\n<p>对于两个距离为 <span class=\"math inline\">\\(\\sqrt D\\)</span>​ 的点 <span class=\"math inline\">\\((x_1,y_1),(x_2,y_2)\\)</span>​，考虑 <span class=\"math inline\">\\(x_1-x_2,y_1-y_2\\)</span>​​ 的奇偶性： <span class=\"math display\">\\[\r\nx_1 \\equiv x_2 \\pmod 2,y_1 \\equiv y_2 \\pmod 2 \\iff D \\equiv 0 \\pmod 4\\\\\r\nx_1 \\equiv x_2 \\pmod 2,y_1 \\not\\equiv y_2 \\pmod 2 \\iff D \\equiv 1 \\pmod 4\\\\\r\nx_1 \\not\\equiv x_2 \\pmod 2,y_1 \\not\\equiv y_2 \\pmod 2 \\iff D \\equiv 2 \\pmod 4\\\\\r\n\\]</span> 因此 <span class=\"math inline\">\\(D \\bmod 4\\)</span>​ 说明了两点坐标差的奇偶性。</p>\r\n<blockquote>\r\n<p>引理：将平面上距离为 <span class=\"math inline\">\\(\\sqrt D\\)</span> 的点对连边后是一张二分图。</p>\r\n</blockquote>\r\n<p>考虑构造一个黑白染色方案，设 <span class=\"math inline\">\\(\\text{color}(x,y,D)=0/1\\)</span> 表示点 <span class=\"math inline\">\\((x,y)\\)</span> 的颜色。</p>\r\n<ul>\r\n<li><p>当 <span class=\"math inline\">\\(D\\equiv 3\\pmod 4\\)</span> 时，没有边，<span class=\"math inline\">\\(\\text{color}(x,y,D)=0\\)</span>。</p></li>\r\n<li><p>当 <span class=\"math inline\">\\(D\\equiv 2\\pmod 4\\)</span> 时，<span class=\"math inline\">\\(\\text{color}(x,y,D)=x\\bmod 2\\)</span>，这样距离为 <span class=\"math inline\">\\(\\sqrt D\\)</span> 的点对就必然异色。</p></li>\r\n<li><p>当 <span class=\"math inline\">\\(D \\equiv 1\\pmod 4\\)</span> 时，<span class=\"math inline\">\\(\\text{color}(x,y,D)=(x+y)\\bmod 2\\)</span>，这样距离为 <span class=\"math inline\">\\(\\sqrt D\\)</span> 的点对就必然异色。</p></li>\r\n<li><p>当 <span class=\"math inline\">\\(D\\equiv 0\\pmod 4\\)</span> 时，<span class=\"math inline\">\\(\\text{color}(x,y,D)=\\text{color}(\\lfloor\\frac x2\\rfloor,\\lfloor\\frac y2\\rfloor,\\frac D4)\\)</span>​​，下面证明为什么合法：</p>\r\n<p>对于两个距离为 <span class=\"math inline\">\\(\\sqrt D\\)</span> 的点 <span class=\"math inline\">\\((x_1,y_1),(x_2,y_2)\\)</span>，由于 <span class=\"math inline\">\\(x_1 \\equiv x_2 \\pmod 2,y_1 \\equiv y_2 \\pmod 2\\)</span>，所以 <span class=\"math display\">\\[\r\n\\lfloor\\frac {x_1}2\\rfloor-\\lfloor\\frac {x_2}2\\rfloor=\\frac 12(x_1-x_2)\\\\\r\n\\lfloor\\frac {y_1}2\\rfloor-\\lfloor\\frac {y_2}2\\rfloor=\\frac 12(y_1-y_2)\r\n\\]</span> 进一步： <span class=\"math display\">\\[\r\n\\begin{aligned}\r\n&amp;(x_1-x_2)^2+(y_1-y_2)^2=D\\\\\r\n\\Rightarrow &amp;(\\lfloor\\frac {x_1}2\\rfloor-\\lfloor\\frac {x_2}2\\rfloor)^2+(\\lfloor\\frac {y_1}2\\rfloor-\\lfloor\\frac {y_2}2\\rfloor)^2=\\frac D4\\\\\r\n\\Rightarrow &amp;\\text{color}(\\lfloor\\frac {x_1}2\\rfloor,\\lfloor\\frac {y_1}2\\rfloor,\\frac D4)\\ne\\text{color}(\\lfloor\\frac {x_2}2\\rfloor,\\lfloor\\frac {y_2}2\\rfloor,\\frac D4)\r\n\\end{aligned}\r\n\\]</span></p></li>\r\n</ul>\r\n<p>对于 <span class=\"math inline\">\\(D_1\\)</span>​ 和 <span class=\"math inline\">\\(D_2\\)</span>​ 分别黑白染色后本质有 <span class=\"math inline\">\\(4\\)</span>​ 种颜色，这 <span class=\"math inline\">\\(4\\)</span>​​ 种颜色中肯定有一种点数大于等于 <span class=\"math inline\">\\(n^2\\)</span>​，输出这种颜色的 <span class=\"math inline\">\\(n^2\\)</span>​ 个点即可。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^2)\\)</span>。</p>\r\n<h3 id=\"agc036d\">AGC036D</h3>\r\n<p>没有负环等价于差分约束有解，假设解为 <span class=\"math inline\">\\(d_1,d_2,\\cdots,d_n\\)</span>​，不妨令 <span class=\"math inline\">\\(d_1=0\\)</span>。</p>\r\n<p>由于 <span class=\"math inline\">\\(i\\rightarrow i+1\\)</span> 的边是不能被删的，所以 <span class=\"math inline\">\\(d\\)</span> 是单调不增的，也就是一段 <span class=\"math inline\">\\(0\\)</span>，一段 $-1 $，一段 <span class=\"math inline\">\\(-2\\cdots\\)</span> 的形式。</p>\r\n<p>考虑一段一段的枚举 <span class=\"math inline\">\\(d\\)</span>​​​，上一段是 <span class=\"math inline\">\\([a,b]\\)</span>​​​，即 <span class=\"math inline\">\\(d_{a,a+1,\\cdots,b}=x+1\\)</span>​​​，枚举了新的一段 <span class=\"math inline\">\\([b+1,c]\\)</span>​​，即 <span class=\"math inline\">\\(d_{b+1,b+2,\\cdots,c}=x\\)</span>​​​​​，​分析哪些边需要删：</p>\r\n<ul>\r\n<li>对于 <span class=\"math inline\">\\(b+1\\le i &lt; j \\le c\\)</span>，边 <span class=\"math inline\">\\((i,j)\\)</span> 需要删除。</li>\r\n<li>对于 <span class=\"math inline\">\\(b+1\\le i\\le c,j&lt;a\\)</span>，边 <span class=\"math inline\">\\((i,j)\\)</span> 需要删除。</li>\r\n</ul>\r\n<p>然后就可以 <code>DP</code> 了，设 <span class=\"math inline\">\\(f_{a,b}\\)</span> 表示填的最后一段为 <span class=\"math inline\">\\([a,b]\\)</span> 时的最小代价，转移为 <span class=\"math display\">\\[\r\nf_{a,b}+\\text{cost}_1(b+1,c)+\\text{cost}_2(b+1,c,a-1)\\rightarrow f_{b+1,c}\r\n\\]</span> 其中 <span class=\"math inline\">\\(\\text{cost}_1\\)</span>​ 和 <span class=\"math inline\">\\(\\text{cost}_2\\)</span>​​ 在预处理二维前缀和后可以 <span class=\"math inline\">\\(O(1)\\)</span> 算。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^3)\\)</span>。</p>\r\n<h3 id=\"agc045d\">AGC045D</h3>\r\n<p>如果 <code>Snuke</code> 按到了 <span class=\"math inline\">\\(p_i=i\\)</span> 的位置就死了，所以他要最小化有解时死的概率，分析 <code>Snuke</code> 的最优策略：</p>\r\n<ul>\r\n<li>最初需要按下一个按钮，由于 <code>Snuke</code> 不知道排列，所以按每个按钮都是一样的，不妨按 <span class=\"math inline\">\\(1\\)</span>。</li>\r\n<li>如果按下了 <span class=\"math inline\">\\(p_i=i\\)</span> 的按钮就死了。</li>\r\n<li>否则，<span class=\"math inline\">\\(p_i\\)</span>​ 一定是一个安全的按钮，继续按下 <span class=\"math inline\">\\(p_i\\)</span>，这样就可以安全地按下许多按钮。</li>\r\n<li>又需要尝试一个按钮时就按没按过的编号最小的按钮。</li>\r\n</ul>\r\n<p>于是，得到了 <code>Snuke</code> 胜利的充要条件：假设 <span class=\"math inline\">\\(1-A\\)</span> 中第一个满足 <span class=\"math inline\">\\(p_i=i\\)</span> 的 <span class=\"math inline\">\\(i\\)</span> 为 <span class=\"math inline\">\\(\\min\\)</span>​​，<span class=\"math inline\">\\(\\forall i&gt;A,\\exists j&lt;\\min\\)</span> 使得 <span class=\"math inline\">\\(j\\)</span> 能到达 <span class=\"math inline\">\\(i\\)</span>。</p>\r\n<p>容易想到枚举 <span class=\"math inline\">\\(\\min\\)</span>​，把排列看成若干个循环，要求 <span class=\"math inline\">\\(\\min\\)</span>​ 前面没有孤立点，这个可以容斥：</p>\r\n<ul>\r\n<li>钦定 <span class=\"math inline\">\\(i\\)</span>​​​ 个孤立点，系数为 <span class=\"math inline\">\\((-1)^i\\binom{\\min-1}i\\)</span>​。</li>\r\n<li>对于 <span class=\"math inline\">\\([1,\\min-1]\\)</span>​​ 中剩下的 <span class=\"math inline\">\\(\\min-1-i\\)</span>​​ 个点先生成若干个循环，方案数为 <span class=\"math inline\">\\((\\min-1-i)!\\)</span>。</li>\r\n<li>对于 <span class=\"math inline\">\\([A+1,n]\\)</span> 中的点，它们只能加入前面的循环，方案数为 <span class=\"math inline\">\\((\\min-1-i)^{\\overline{n-A}}\\)</span>​。</li>\r\n<li>对于 <span class=\"math inline\">\\([\\min+1,A]\\)</span> 中的点，它们既可以加入前面的循环，又可以新建一个环，方案数为 <span class=\"math inline\">\\((\\min-1-i+n-A)^{\\overline{A-\\min}}\\)</span>。</li>\r\n</ul>\r\n<p>综上，得到 <span class=\"math inline\">\\(\\min\\)</span> 的贡献为： <span class=\"math display\">\\[\r\n\\sum_{i=0}^{\\min-1}(-1)^i\\binom{\\min-1}i\\frac{(n-1-i)!(\\min-1-i)}{\\min-1-i+n-A}\r\n\\]</span> 当 <span class=\"math inline\">\\(\\min\\)</span>​ 不存在时需要特判，贡献为： <span class=\"math display\">\\[\r\n\\sum_{i=0}^A(-1)^i\\binom Ai(n-i)!\r\n\\]</span> 复杂度 <span class=\"math inline\">\\(O(A^2+n)\\)</span>。</p>\r\n<h3 id=\"agc041e\">AGC041E</h3>\r\n<h4 id=\"对于-t1\">对于 <span class=\"math inline\">\\(T=1\\)</span></h4>\r\n<p>将网络抽象成一张有向图：</p>\r\n<ul>\r\n<li>将每条线的起点、终点和平衡器的端点抽象成结点。</li>\r\n<li>同一条线上的结点后面向前面连边。</li>\r\n<li>平衡器抽象成两个方向的边。</li>\r\n</ul>\r\n<p>考虑暴力怎么做，枚举最终汇聚到第 <span class=\"math inline\">\\(t\\)</span>​ 条线，判断 <span class=\"math inline\">\\(t\\)</span> 的终点是否可以到达所有的起点。</p>\r\n<p>可以用一个 <code>bitset</code> 来压哪些汇点能到达这个点，然后 <code>DFS</code> 来求这些 <code>bitset</code>。可以做到 <span class=\"math inline\">\\(O(\\frac {nm}{\\omega})\\)</span>​​​ 的复杂度。</p>\r\n<h4 id=\"对于-t2\">对于 <span class=\"math inline\">\\(T=2\\)</span></h4>\r\n<p><span class=\"math inline\">\\(n=2\\)</span> 时显然无解，下面构造说明了 <span class=\"math inline\">\\(n&gt;2\\)</span> 时一定有解。</p>\r\n<p>考虑从右往左依次插入每个平衡器，维护 <span class=\"math inline\">\\(size_i\\)</span> 表示当前网络有多少个起点会到达第 <span class=\"math inline\">\\(i\\)</span> 条线的终点。</p>\r\n<ul>\r\n<li>初始时，<span class=\"math inline\">\\(size_i=1\\)</span>。</li>\r\n<li>加入平衡器 <span class=\"math inline\">\\((x,y)\\)</span> 时，要么 <span class=\"math inline\">\\(size_x+1\\)</span>，要么 <span class=\"math inline\">\\(size_y+1\\)</span>，选择 <span class=\"math inline\">\\(size_x\\)</span> 和 <span class=\"math inline\">\\(size_y\\)</span> 中较小的一个 <span class=\"math inline\">\\(+1\\)</span>。一定不会出现 <span class=\"math inline\">\\(size_x=n-1\\land size_y=n-1\\)</span> 的情况，因为 <span class=\"math inline\">\\(size_x+size_y\\le n\\)</span>。</li>\r\n</ul>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n+m)\\)</span>。</p>\r\n<h3 id=\"abc214g\">ABC214G</h3>\r\n<p>以下解法可以解决 <span class=\"math inline\">\\(n \\le 10^5\\)</span>​​ 的问题。</p>\r\n<p>设 <span class=\"math inline\">\\(F_k\\)</span>​​​ 表示确定 <span class=\"math inline\">\\(k\\)</span>​​​ 个位置的值 <span class=\"math inline\">\\(r_{i_1},r_{i_2},\\cdots,r_{i_k}(i_1&lt;i_2&lt;\\cdots&lt;i_k)\\)</span>​​​​​​​​ 满足以下条件的方案数： <span class=\"math display\">\\[\r\n\\forall x\\in[1,k],r_{i_x}=p_{i_x}\\lor r_{i_x}=q_{i_x}\r\n\\]</span> 根据二项式反演，答案为 <span class=\"math display\">\\[\r\n\\sum_{i=0}^n(-1)^iF_i(n-i)!\r\n\\]</span> 将 <span class=\"math inline\">\\(p_i,q_i\\)</span>​​​​​​​ 连边，得到一张由若干个环组成的图，选择一个满足 <span class=\"math inline\">\\(r_i=p_i\\lor r_i=q_i\\)</span>​​ 的位置 <span class=\"math inline\">\\(i\\)</span>​​​​ 就是选择一条边并占用一个端点，这对于每个环是独立的，所以对每个环求出 <span class=\"math inline\">\\(F\\)</span>​​ 数组，再用分治 <code>FFT</code> 合并就可以得到整张图的 <span class=\"math inline\">\\(F\\)</span>​ 数组。</p>\r\n<p>考虑求一个大小为 <span class=\"math inline\">\\(m\\)</span>​ 的环的 <span class=\"math inline\">\\(F\\)</span>​ 数组，假设点编号为 <span class=\"math inline\">\\(1,2,\\cdots,m\\)</span>，边为 <span class=\"math inline\">\\((1,2),(2,3),\\cdots,(m-1,m),(m,1)\\)</span>，将选择 <span class=\"math inline\">\\(i\\)</span> 条边的方案分为以下两类：</p>\r\n<ul>\r\n<li><p>不选边 <span class=\"math inline\">\\((1,2)\\)</span>​，把边 <span class=\"math inline\">\\((2,3)\\)</span> 占用 <span class=\"math inline\">\\(2\\)</span> 的方式编号为 <span class=\"math inline\">\\(1\\)</span>，边 <span class=\"math inline\">\\((2,3)\\)</span> 占用 <span class=\"math inline\">\\(3\\)</span> 的方式编号为 <span class=\"math inline\">\\(2\\)</span>，边 <span class=\"math inline\">\\((3,4)\\)</span> 占用 <span class=\"math inline\">\\(3\\)</span> 的方式编号为 <span class=\"math inline\">\\(3\\)</span>，边 <span class=\"math inline\">\\((3,4)\\)</span> 占用 <span class=\"math inline\">\\(4\\)</span> 的方式编号为 <span class=\"math inline\">\\(4\\)</span>，依次类推。方案就是从 <span class=\"math inline\">\\(2m-2\\)</span>​ 种选择方式选 <span class=\"math inline\">\\(i\\)</span>​ 种，限制就是编号相邻的不能同时选择。</p>\r\n<blockquote>\r\n<p>引理：从 <span class=\"math inline\">\\(n\\)</span> 个物品中选 <span class=\"math inline\">\\(r\\)</span> 个，编号相邻的不能同时选择的方案数为 <span class=\"math inline\">\\(\\binom {n-r+1}r\\)</span>​。</p>\r\n<p>证明：将选择的第 <span class=\"math inline\">\\(i\\)</span> 个物品的编号减去 <span class=\"math inline\">\\(i-1\\)</span> 就得到了从 <span class=\"math inline\">\\(n-r+1\\)</span> 个物品中选 <span class=\"math inline\">\\(r\\)</span> 个的方案数。</p>\r\n</blockquote>\r\n<p>这部分方案数为 <span class=\"math inline\">\\(\\binom{2m-i-1}i\\)</span>​。</p></li>\r\n<li><p>选边 <span class=\"math inline\">\\((1,2)\\)</span>​​，那么边 <span class=\"math inline\">\\((1,2)\\)</span>​​ 可以占用 <span class=\"math inline\">\\(1\\)</span>​​ 或 <span class=\"math inline\">\\(2\\)</span>​​，但两种方式是等价的，不妨假设占用了 <span class=\"math inline\">\\(1\\)</span>​​。方案就是从 <span class=\"math inline\">\\(2m-3\\)</span>​​ 种选择方式选 <span class=\"math inline\">\\(i-1\\)</span>​​​​ 种，限制还是编号相邻的不能同时选择。</p>\r\n<p>这部分方案数为 <span class=\"math inline\">\\(2\\binom{2m-i-1}{i-1}\\)</span>。</p></li>\r\n</ul>\r\n<p>对于一个大小为 <span class=\"math inline\">\\(m\\)</span> 的环 <span class=\"math display\">\\[\r\nF_i=\\binom{2m-i-1}i+2\\binom{2m-i-1}{i-1}=\\binom{2m-i}i+\\binom{2m-i-1}{i-1}\r\n\\]</span> 然后每个环的 <span class=\"math inline\">\\(F\\)</span>​ 就可以 <span class=\"math inline\">\\(O(n)\\)</span>​ 求了，复杂度瓶颈在于分治 <code>FFT</code>，复杂度 <span class=\"math inline\">\\(O(n\\log^2n)\\)</span>​​​。</p>\r\n<p>分治 <code>FFT</code> 有两种优化：</p>\r\n<ul>\r\n<li>由于每个环的大小之和为 <span class=\"math inline\">\\(n\\)</span>，故只有 <span class=\"math inline\">\\(O(\\sqrt n)\\)</span> 种大小不同的环，大小相同的环可以通过快速幂 <span class=\"math inline\">\\(O(n\\log n)\\)</span>​ 地算出乘积。</li>\r\n<li>整个分治过程形成一棵二叉树的结构，总时间就是 <span class=\"math inline\">\\(\\sum_{u\\in \\mathbb{leaf}}\\text{degree}_u\\text{depth}_u\\)</span>​，最小化时间就是 <code>Huffman</code> 树，每次贪心地将两个次数最小的多项式乘起来。 ​​​</li>\r\n</ul>\r\n<h3 id=\"abc214h\">ABC214H</h3>\r\n<p>走到了一个强连通分量就肯定会走完内部的所有点，缩点后图就变成了 <code>DAG</code>，假设原图就是 <code>DAG</code>。</p>\r\n<p>想到用最小费用流解决：</p>\r\n<ul>\r\n<li>把每个点 <span class=\"math inline\">\\(u\\)</span> 拆成 <span class=\"math inline\">\\(\\text{in}_u\\)</span> 和 <span class=\"math inline\">\\(\\text{out}_u\\)</span>。</li>\r\n<li><span class=\"math inline\">\\(\\text{in}_u\\)</span> 向 <span class=\"math inline\">\\(\\text{out}_u\\)</span> 连一条容量为 <span class=\"math inline\">\\(1\\)</span>​，费用为 <span class=\"math inline\">\\(-X_u\\)</span>​ 的边，再连一条容量为 <span class=\"math inline\">\\(K\\)</span>，费用为 <span class=\"math inline\">\\(0\\)</span> 的边。</li>\r\n<li>对于原图中的边 <span class=\"math inline\">\\((u,v)\\)</span>​，<span class=\"math inline\">\\(\\text{out}_u\\)</span>​ 向 <span class=\"math inline\">\\(\\text{in}_v\\)</span>​ 连一条容量为 <span class=\"math inline\">\\(K\\)</span>​，费用为 <span class=\"math inline\">\\(0\\)</span>​ 的边。</li>\r\n<li><span class=\"math inline\">\\(S\\)</span> 向 <span class=\"math inline\">\\(\\text{in}_1\\)</span> 连一条容量为 <span class=\"math inline\">\\(K\\)</span>，费用为 <span class=\"math inline\">\\(0\\)</span> 的边，<span class=\"math inline\">\\(\\text{out}_u\\)</span> 向 <span class=\"math inline\">\\(T\\)</span> 连一条容量为 <span class=\"math inline\">\\(K\\)</span>，费用为 <span class=\"math inline\">\\(0\\)</span> 的边。</li>\r\n</ul>\r\n<p><code>SSP</code> 算法肯定是通过不了的，考虑变成 <code>Primal-Dual</code> 算法可以做的问题。</p>\r\n<h4 id=\"sol-1\">Sol 1</h4>\r\n<p>初始图是一张 <code>DAG</code>，可以跑一遍 <code>DP</code> 预处理最短路作为点的初始势能。</p>\r\n<h4 id=\"sol-2\">Sol 2</h4>\r\n<p>求出 <code>DAG</code> 的一组拓扑序，然后给每个点按拓扑序从大到小重新编号（也就是缩完点后的编号）。</p>\r\n<p>容易构造一组满足差分约束的初始势能：</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(S\\)</span>​​ 势能为 <span class=\"math inline\">\\(\\sum X_u\\)</span>​​，<span class=\"math inline\">\\(T\\)</span>​​​ 势能为 <span class=\"math inline\">\\(0\\)</span>​​。</li>\r\n<li><span class=\"math inline\">\\(\\text{in}_u\\)</span>​ 的势能为 <span class=\"math inline\">\\(\\sum_{i=1}^uX_i\\)</span>​，<span class=\"math inline\">\\(\\text{out}_u\\)</span> 的势能为 <span class=\"math inline\">\\(\\sum_{i=1}^{u-1}X_i\\)</span>。</li>\r\n</ul>\r\n<p>上述两种做法复杂度都是 <span class=\"math inline\">\\(O(nK\\log n)\\)</span>。</p>\r\n<h3 id=\"agc027e\">AGC027E</h3>\r\n<p>考虑什么样的串能变成单个字母 <span class=\"math inline\">\\(a\\)</span> 或 <span class=\"math inline\">\\(b\\)</span>。</p>\r\n<p>打表发现能变成 <span class=\"math inline\">\\(a\\)</span> 的串 <span class=\"math inline\">\\(S\\)</span> 满足的 <span class=\"math inline\">\\(a,b\\)</span> 数量关系是 <span class=\"math inline\">\\(a\\)</span> 的数量减 <span class=\"math inline\">\\(b\\)</span> 的数量模 <span class=\"math inline\">\\(3\\)</span> 余 <span class=\"math inline\">\\(1\\)</span>，并且这个条件在 <span class=\"math inline\">\\(|S|\\)</span> 为偶数时也是充分条件，当 <span class=\"math inline\">\\(|S|\\)</span> 为奇数时恰好多了一个串 <span class=\"math inline\">\\(ababab\\cdots aba\\)</span>​。​</p>\r\n<blockquote>\r\n<p>引理一：记 <span class=\"math inline\">\\(p(S)\\)</span>​ 表示 <span class=\"math inline\">\\(S\\)</span>​ 中 <span class=\"math inline\">\\(a\\)</span>​ 的个数减 <span class=\"math inline\">\\(b\\)</span>​ 的个数模 <span class=\"math inline\">\\(3\\)</span>​，<span class=\"math inline\">\\(S\\)</span>​ 能变成单个字母 <span class=\"math inline\">\\(c\\)</span>​ 当且仅当：</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(p(S)=p(c)\\)</span></li>\r\n<li><span class=\"math inline\">\\(S=c\\)</span> 或 <span class=\"math inline\">\\(S\\)</span> 中有相邻的相同字母。</li>\r\n</ul>\r\n</blockquote>\r\n<p>必要性显然，下面证明充分性：当 <span class=\"math inline\">\\(|S|\\le 3\\)</span> 时显然成立，当 <span class=\"math inline\">\\(|S|&gt;3\\)</span> 时取出 <span class=\"math inline\">\\(S\\)</span> 中最长的连续相同子串，不妨假设它是 <span class=\"math inline\">\\(n\\)</span> 个 <span class=\"math inline\">\\(a\\)</span>，分两种情况讨论：</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(n \\ge 4\\)</span>，直接将前两个 <span class=\"math inline\">\\(a\\)</span>​​ 合并，<span class=\"math inline\">\\(|S|\\)</span> 减小了 <span class=\"math inline\">\\(1\\)</span>，并且还满足引理条件。</li>\r\n<li><span class=\"math inline\">\\(n\\le 3\\)</span>​，由于 <span class=\"math inline\">\\(|S|&gt;3\\)</span>​，这个子串不可能前后都没有字母，不妨假设它不在开头，那么它前面必然是 <span class=\"math inline\">\\(b\\)</span>​，将前两个 <span class=\"math inline\">\\(a\\)</span>​ 合并成 <span class=\"math inline\">\\(b\\)</span>，那么此时有两个 <span class=\"math inline\">\\(b\\)</span> 会相邻，<span class=\"math inline\">\\(|S|\\)</span> 减小了 <span class=\"math inline\">\\(1\\)</span>​，并且还满足引理条件。</li>\r\n</ul>\r\n<p>然后问题就转化成了有多少个串 <span class=\"math inline\">\\(T\\)</span> 满足以下条件：</p>\r\n<ul>\r\n<li>存在一种将 <span class=\"math inline\">\\(S\\)</span> 划分为 <span class=\"math inline\">\\(|T|\\)</span> 段的方式，使得每一段与 <span class=\"math inline\">\\(T\\)</span>​​ 中的对应字母满足引理一。</li>\r\n</ul>\r\n<p>这个问题的主要难点在于引理一的条件二。</p>\r\n<p>事实上，当 <span class=\"math inline\">\\(S\\)</span>​ 中有相邻的相同字母时，<strong>忽略引理一的条件二</strong> 不会影响答案。</p>\r\n<blockquote>\r\n<p>引理二：若 <span class=\"math inline\">\\(S\\)</span> 中有相邻的相同字母，<span class=\"math inline\">\\(S\\)</span> 能够变成 <span class=\"math inline\">\\(T\\)</span>​ 当且仅当：</p>\r\n<ul>\r\n<li>存在一种将 <span class=\"math inline\">\\(S\\)</span>​ 划分为 <span class=\"math inline\">\\(|T|\\)</span>​ 段的方式，设 <span class=\"math inline\">\\(S\\)</span>​ 被划分成了 <span class=\"math inline\">\\(S_1,S_2,\\cdots,S_{|T|}\\)</span>​，<span class=\"math inline\">\\(T\\)</span>​ 中每个字母分别为 <span class=\"math inline\">\\(T_1,T_2,\\cdots,T_{|T|}\\)</span>​。</li>\r\n<li>满足 <span class=\"math inline\">\\(\\forall i,p(S_i)=p(T_i)\\)</span>。</li>\r\n</ul>\r\n</blockquote>\r\n<p>必要性显然，下面证明充分性：</p>\r\n<ul>\r\n<li>假设存在一组满足上述条件的划分 <span class=\"math inline\">\\((S_1,S_2,\\cdots,S_{|T|})\\)</span>​。</li>\r\n<li>将 <span class=\"math inline\">\\(S_1,S_2,\\cdots,S_{|T|-1}\\)</span> 的长度最小化得到新的划分 <span class=\"math inline\">\\((S_1&#39;,S_2&#39;,\\cdots,S_{|T|}&#39;)\\)</span>​。</li>\r\n<li>由于最小化，容易发现 <span class=\"math inline\">\\(S_1,S_2,\\cdots,S_{|T|-1}\\)</span>​ 已经满足了引理一。</li>\r\n<li>此时 <span class=\"math inline\">\\(S_{|T|}\\)</span> 有可能不合法，比如 <span class=\"math inline\">\\(S_{|T|}=abab\\cdots aba\\)</span>，由于不合法时 <span class=\"math inline\">\\(|T|&gt;1\\)</span>，可以让 <span class=\"math inline\">\\(S_{|T|}\\)</span> 只保留最后一个字母，把前面的部分扔给 <span class=\"math inline\">\\(S_{|T|-1}\\)</span>，于是 <span class=\"math inline\">\\(T\\)</span> 删去最后一个字母对于 <span class=\"math inline\">\\(S\\)</span>​ 删去最后一个字母满足引理二，故 <span class=\"math inline\">\\(S\\)</span> 可以变成 <span class=\"math inline\">\\(T\\)</span>。</li>\r\n</ul>\r\n<p>有了引理二就很好做了，特判掉 <span class=\"math inline\">\\(S\\)</span> 中没有相邻的相同字母的情况，容易用一个自动机来判断 <span class=\"math inline\">\\(T\\)</span>​ 是否合法，计数可以在自动机上 <code>DP</code>。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n)\\)</span>。</p>\r\n<h3 id=\"gym101667g\">Gym101667G</h3>\r\n<p>如果两个楼梯一个朝上一个朝下，那么就没有封闭区域，如果两个朝下可以对称一下，变成两个都朝上的情况。</p>\r\n<p>可以看出一个封闭区域开始的标志是 L 横线和 U 竖线相交，结束的标志是 U 横线和 L 竖线相交。考虑用扫描线来求出每一个封闭区域，从左到右处理每一条竖线，并维护变量 <code>isRegion</code> 表示当前竖线是否经过一个封闭区域，<code>area</code> 表示当前区域的面积：</p>\r\n<ul>\r\n<li>当 <code>isRegion</code> 为真时将 <code>area</code> 加上当前竖线和上一条竖线之间矩形的面积。</li>\r\n<li>当一个封闭区域开始时清零 <code>area</code>。</li>\r\n<li>当一个封闭区域结束时，答案累加上 <code>area</code>。</li>\r\n</ul>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n+m)\\)</span>。</p>\r\n<figure>\r\n<img src=\"https://i.loli.net/2021/09/08/a4fEq6tJWRbrxDy.png\" alt=\".png\" /><figcaption aria-hidden=\"true\">.png</figcaption>\r\n</figure>\r\n<h3 id=\"gym101667j\">Gym101667J</h3>\r\n<p>完美匹配的存在性容易想到 Hall 定理，设 <span class=\"math inline\">\\(f(S)\\)</span> 表示与点集 <span class=\"math inline\">\\(S\\)</span> 距离恰好等于 <span class=\"math inline\">\\(1\\)</span> 的点集，问题转化为判定： <span class=\"math display\">\\[\r\n\\forall |S|\\le\\frac n2,|T|=\\frac n2,S \\cap T=\\varnothing\\\\\r\n|f(S)\\cap T| \\ge |S|\r\n\\]</span> 由于 <span class=\"math inline\">\\(|f(S)\\cap T|\\)</span> 最小值为 <span class=\"math inline\">\\(|f(S)|+|S|-\\frac n2\\)</span>，条件改写为 <span class=\"math inline\">\\(|f(S)|\\ge\\frac n2\\)</span>。</p>\r\n<p>考虑求 <span class=\"math inline\">\\(\\min_{|S|\\le \\frac n2}|f(S)|\\)</span>，事实上这就是图的最小点割（删去最少的点使图不连通）：</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(f(S)\\)</span> 是 <span class=\"math inline\">\\(S\\)</span> 与 <span class=\"math inline\">\\(V-S-f(S)\\)</span> 之间的一组点割。</li>\r\n<li>任意一组点割 <span class=\"math inline\">\\(T\\)</span> 割出来的多个连通块都有一个点数不超过 <span class=\"math inline\">\\(\\frac n2\\)</span>，设这个连通块的点集为 <span class=\"math inline\">\\(S\\)</span>，那么 <span class=\"math inline\">\\(|f(S)|\\le |T|\\)</span>。</li>\r\n</ul>\r\n<p>求最小点割就是每对点都求一遍最小割：</p>\r\n<ul>\r\n<li>把每个点 <span class=\"math inline\">\\(u\\)</span> 拆成 <span class=\"math inline\">\\(\\text{in}_u\\)</span> 和 <span class=\"math inline\">\\(\\text{out}_u\\)</span>。</li>\r\n<li><span class=\"math inline\">\\(\\text{in}_u\\)</span> 向 <span class=\"math inline\">\\(\\text{out}_u\\)</span> 连一条代价为 <span class=\"math inline\">\\(1\\)</span> 的边。</li>\r\n<li>对于原图中的边 <span class=\"math inline\">\\((u,v)\\)</span>，<span class=\"math inline\">\\(\\text{out}_u\\)</span> 向 <span class=\"math inline\">\\(\\text{in}_v\\)</span>，<span class=\"math inline\">\\(\\text{out}_v\\)</span> 向 <span class=\"math inline\">\\(\\text{in}_u\\)</span> 分别连一条代价为 <span class=\"math inline\">\\(\\infty\\)</span> 的边。</li>\r\n<li>枚举两个不同的点 <span class=\"math inline\">\\(u,v\\)</span>，用 <span class=\"math inline\">\\(\\text{out}_u\\)</span> 到 <span class=\"math inline\">\\(\\text{in}_v\\)</span> 的最小割更新答案。</li>\r\n</ul>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n^2\\cdot flow)\\)</span>。</p>\r\n<p><del>负</del>优化：注意到如果最小点割小于 <span class=\"math inline\">\\(\\frac n2\\)</span>，那么不在割中的点就超过一半，每次随机选取一个点 <span class=\"math inline\">\\(u\\)</span>，枚举点 <span class=\"math inline\">\\(v\\)</span>，求 <span class=\"math inline\">\\(\\text{out}_u\\)</span> 到 <span class=\"math inline\">\\(\\text{in}_v\\)</span> 的最小割，都有大半的概率求出最优解，如果随机 <span class=\"math inline\">\\(k\\)</span> 次，复杂度为 <span class=\"math inline\">\\(O(nk\\cdot flow)\\)</span>。</p>\r\n<h3 id=\"abc215h\">ABC215H</h3>\r\n<p>如何判定当前的卷心菜是否能满足所有公司？</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(S\\)</span> 向卷心菜 <span class=\"math inline\">\\(i\\)</span> 连容量为 <span class=\"math inline\">\\(A_i\\)</span> 的边。</li>\r\n<li>公司 <span class=\"math inline\">\\(i\\)</span> 向 <span class=\"math inline\">\\(T\\)</span> 连容量为 <span class=\"math inline\">\\(B_i\\)</span> 的边。</li>\r\n<li>如果 <span class=\"math inline\">\\(c_{i,j}=1\\)</span>，那么卷心菜 <span class=\"math inline\">\\(i\\)</span> 向公司 <span class=\"math inline\">\\(j\\)</span> 连容量为 <span class=\"math inline\">\\(\\infty\\)</span> 的边。</li>\r\n<li><span class=\"math inline\">\\(\\max flow=\\sum_{i=1}^mB_i\\)</span>。</li>\r\n</ul>\r\n<p>也等价于 <span class=\"math inline\">\\(T\\)</span> 的所有入边不是最小割。由于 <span class=\"math inline\">\\(S\\)</span> 的出边很少，考虑枚举最小割中有哪些 <span class=\"math inline\">\\(S\\)</span> 的出边，假设这些边为 <span class=\"math inline\">\\(mask\\)</span>，割掉 <span class=\"math inline\">\\(mask\\)</span> 后有一些 <span class=\"math inline\">\\(T\\)</span> 的入边就不需要割了，假设这些边的容量和为 <span class=\"math inline\">\\(sum\\)</span>，那么需要吃点的卷心菜数量就是 <span class=\"math inline\">\\(\\sum_{i\\in mask}A_i-sum+1\\)</span>，要求 <span class=\"math inline\">\\(sum&gt;0\\)</span>。</p>\r\n<p>这时就可以解决第一问了，考虑对于所有 <span class=\"math inline\">\\(mask\\)</span>，怎么求它们的 <span class=\"math inline\">\\(sum\\)</span>，注意到 <span class=\"math inline\">\\(B_i\\)</span> 贡献给 <span class=\"math inline\">\\(mask\\)</span> 的条件是 <span class=\"math inline\">\\(mask\\)</span> 包含所有能供应给公司 <span class=\"math inline\">\\(i\\)</span> 的卷心菜，可以用子集前缀和（<code>FMT</code>）求出。然后枚举 <span class=\"math inline\">\\(mask\\)</span> 用 <span class=\"math inline\">\\(\\sum_{i\\in mask}A_i-sum+1\\)</span> 更新第一问的答案即可。</p>\r\n<p>第二问还要进一步分析，为了不算重，我们枚举一个 <span class=\"math inline\">\\(mask\\)</span> 表示被吃的卷心菜品种的集合，一个 <span class=\"math inline\">\\(mask\\)</span> 可行当前仅当存在一个取到第一问答案的 <span class=\"math inline\">\\(S\\)</span>，使得 <span class=\"math inline\">\\(mask\\subseteq S\\)</span>，这个同样可以用 <code>FMT</code> 做。设第一问答案为 <span class=\"math inline\">\\(ans\\)</span>，最后是对于一个 <span class=\"math inline\">\\(mask\\)</span>，求有多少种从 <span class=\"math inline\">\\(mask\\)</span> 中吃掉 <span class=\"math inline\">\\(ans\\)</span> 个卷心菜的方式，满足 <span class=\"math inline\">\\(mask\\)</span> 中的每种卷心菜至少被吃一个。容易想到容斥，钦定一些卷心菜品种不吃，然后不考虑每种卷心菜必吃的限制，但对每个 <span class=\"math inline\">\\(mask\\)</span> 都通过容斥来计算复杂度高达 <span class=\"math inline\">\\(O(3^n)\\)</span>。</p>\r\n<p>设 <span class=\"math inline\">\\(f_S\\)</span> 表示有多少种从 <span class=\"math inline\">\\(S\\)</span> 中吃掉 <span class=\"math inline\">\\(ans\\)</span> 个卷心菜的方式，满足 <span class=\"math inline\">\\(mask\\)</span> 中的每种卷心菜至少被吃一个，发现 <span class=\"math display\">\\[\r\n\\sum_{T\\subseteq S}f_T=\\binom{\\sum_{i\\in S}A_i}{ans}\r\n\\]</span> 对右边做 <code>IFMT</code> 就可以求得 <span class=\"math inline\">\\(f\\)</span> 数组。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n2^n+nm)\\)</span>。</p>\r\n<h3 id=\"agc020e\">AGC020E</h3>\r\n<p>先考虑对于一个串 <span class=\"math inline\">\\(S\\)</span> 如何单独计算答案，这个不难，容易想到用区间 <code>DP</code> 做。设 <span class=\"math inline\">\\(f_{l,r}\\)</span> 表示子串 <span class=\"math inline\">\\([l,r]\\)</span> 的改写方案数，转移分两种：</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(s_l\\)</span> 没有参与改写，贡献为 <span class=\"math inline\">\\(f_{l+1,r}\\)</span>。</li>\r\n<li><span class=\"math inline\">\\(s_l\\)</span> 参与改写了，枚举最外层的覆盖 <span class=\"math inline\">\\(s_l\\)</span> 的改写：周期 <span class=\"math inline\">\\(T\\)</span> 和循环次数 <span class=\"math inline\">\\(i&gt;1\\)</span>，如果合法，则贡献为 <span class=\"math inline\">\\(f_{l,l+T-1}\\cdot f_{l+Ti,r}\\)</span>。</li>\r\n</ul>\r\n<p>当尝试用区间 <code>DP</code> 做原问题的时候，发现做不了，因为当 <span class=\"math inline\">\\(s_l\\)</span> 参与改写时，原来的 <span class=\"math inline\">\\(f_{l,l+T-1}\\)</span> 不再是一个区间的 <code>DP</code> 值。详细地说，设 <span class=\"math inline\">\\(f(s)\\)</span> 表示字符串 <span class=\"math inline\">\\(s\\)</span> 的答案（子集的改写方案数总和），设 <span class=\"math inline\">\\(suf(i)\\)</span> 表示 <span class=\"math inline\">\\(s\\)</span> 从 <span class=\"math inline\">\\(s_i\\)</span> 开始的后缀，转移为两种：</p>\r\n<ul>\r\n<li><p>第一个字符没有参与改写，贡献为 <span class=\"math inline\">\\((s_0+1)f(suf(1))\\)</span>。</p></li>\r\n<li><p>第一个字符参与了，枚举最外层的覆盖 <span class=\"math inline\">\\(s_l\\)</span> 的改写：周期 <span class=\"math inline\">\\(T\\)</span> 和循环次数 <span class=\"math inline\">\\(i&gt;1\\)</span>，由于每个周期内要相等，所有子集的限制要叠加，设 <span class=\"math inline\">\\(s[l,r]\\)</span> 表示 <span class=\"math inline\">\\(s\\)</span> 的第 <span class=\"math inline\">\\(l\\)</span> 个字符到第 <span class=\"math inline\">\\(r\\)</span> 个字符的子串，设 <span class=\"math display\">\\[\r\nt=s[0,T-1]\\&amp;s[T,2T-1]\\&amp;\\cdots\\&amp;s[T(i-1),Ti-1](\\&amp;\\ is\\ \\text{bitand})\r\n\\]</span> 那么贡献为 <span class=\"math inline\">\\(f(t)\\cdot f(suf(Ti))\\)</span>。</p></li>\r\n</ul>\r\n<p>这里的复杂度上限看起来是 <span class=\"math inline\">\\(O(2^{n+1})\\)</span>，这个题最重要的地方就是，你要看出来这个做法其实是 <span class=\"math inline\">\\(O(能过)\\)</span> 的，进而分析出其真正的复杂度，而不是被假上限给吓跑了。</p>\r\n<p>下面证明，有一个上界是 <span class=\"math inline\">\\(O(n^3+2^{\\frac n8})\\)</span>。首先长度小于等于 <span class=\"math inline\">\\(\\frac n8\\)</span> 的串最多有 <span class=\"math inline\">\\(2^{\\frac n8}\\)</span> 个，长度大于等于 <span class=\"math inline\">\\(\\frac n8\\)</span> 的串最多被压缩两次（因为每压缩一次长度减半），只有三种压缩方式：</p>\r\n<ul>\r\n<li>先选择一个子段划分成 <span class=\"math inline\">\\(2\\)</span> 段，再选择一个子段划分成 <span class=\"math inline\">\\(2\\)</span> 段。</li>\r\n<li>先选择一个子段划分成 <span class=\"math inline\">\\(2\\)</span> 段，再选择一个子段划分成 <span class=\"math inline\">\\(3\\)</span> 段。</li>\r\n<li>先选择一个子段划分成 <span class=\"math inline\">\\(3\\)</span> 段，再选择一个子段划分成 <span class=\"math inline\">\\(2\\)</span> 段。</li>\r\n</ul>\r\n<p>显然第一种压缩方式可以得到的串是最多的，考虑第一种压缩方式得到的串是怎样的，形如：</p>\r\n<p><span class=\"math inline\">\\(s[a,a+k-1]\\&amp;s[a+k,a+2k-1]\\&amp;s[b,b+k-1]\\&amp;s[b+k,b+2k-1]\\)</span></p>\r\n<p>显然它是由 <span class=\"math inline\">\\(a,b,k\\)</span> 三个参数决定的，故数量是 <span class=\"math inline\">\\(O(n^3)\\)</span>，因此三种压缩方式的总和也是 <span class=\"math inline\">\\(O(n^3)\\)</span>。</p>\r\n<p>另外，通过打表可以求出长度大于 <span class=\"math inline\">\\(12\\)</span> 的串更为精准的上界为 <span class=\"math inline\">\\(41703\\)</span>。</p>\r\n<h3 id=\"cf1562e\">CF1562E</h3>\r\n<p>先分析最长上升子序列有什么性质，假设最长上升子序列为 <span class=\"math display\">\\[\r\ns[l_1,r_1],s[l_2,r_2],\\cdots,s[l_k,r_k]\r\n\\]</span> 比较显然的是对于每个 <span class=\"math inline\">\\(l\\)</span>，选择的 <span class=\"math inline\">\\(r\\)</span> 是一个区间。更强的结论是存在一组最优解满足对于每个 <span class=\"math inline\">\\(l\\)</span>，选择的 <span class=\"math inline\">\\(r\\)</span> 是一个后缀。</p>\r\n<p>反证法：假设对于一个 <span class=\"math inline\">\\(l\\)</span>，选择的 <span class=\"math inline\">\\(r\\in[r_1,r_2]\\)</span>，其中 <span class=\"math inline\">\\(r_2&lt;n\\)</span>，<span class=\"math inline\">\\(s[l,r_2]\\)</span> 之后的子串为 <span class=\"math inline\">\\(s[l&#39;,r&#39;]\\)</span>。如果 <span class=\"math inline\">\\(s[l,r_2+1]&lt;s[l&#39;,r&#39;]\\)</span>，直接在 <span class=\"math inline\">\\(s[l,r_2]\\)</span> 后插入 <span class=\"math inline\">\\(s[l,r_2+1]\\)</span>，得到一组更优的解。否则 <span class=\"math inline\">\\(s[l,r_2]&lt;s[l&#39;,r&#39;]\\le s[l,r_2+1]\\)</span>，说明 <span class=\"math display\">\\[\r\ns[l&#39;,l&#39;+r_1-l]=s[l,r_1]\\\\\r\ns[l&#39;,l&#39;+r_1+1-l]=s[l,r_1+1]\\\\\r\ns[l&#39;,l&#39;+r_1+2-l]=s[l,r_1+2]\\\\\r\n\\cdots\\\\\r\ns[l&#39;,l&#39;+r_2-l]=s[l,r_2]\r\n\\]</span> 于是可以用前者们一一替换后者们，得到一组不存在 <span class=\"math inline\">\\(l\\)</span> 作为左端点的子串的解。</p>\r\n<p>然后就可以 <code>DP</code> 了，设 <span class=\"math inline\">\\(f_i\\)</span> 表示以 <span class=\"math inline\">\\(s[i,n]\\)</span> 结尾的最长上升子序列，转移为 <span class=\"math display\">\\[\r\nf_i=\\max_{j&lt;i\\land s[j,n]&lt;s[i,n]}f_j+n-\\text{lcp}(s[i,n],s[j,n])+1\r\n\\]</span> 可以预处理 <span class=\"math inline\">\\(\\text{lcp}(s[i,n],s[j,n])\\leftarrow \\text{lcp}(s[i+1,n],s[j+1,n])\\)</span>，复杂度 <span class=\"math inline\">\\(O(n^2)\\)</span>。</p>\r\n<h4 id=\"优化\">优化</h4>\r\n<p>可以优化到 <span class=\"math inline\">\\(O(n\\sqrt n)\\)</span>。</p>\r\n<p>首先是 <code>LCP</code> 怎么处理，通常是使用后缀数组的 <code>height</code> 数组，这里也可以这么处理。</p>\r\n<p>求出后缀数组 <span class=\"math inline\">\\(SA\\)</span> 和 <code>height</code> 数组，转移为 <span class=\"math display\">\\[\r\nf_{SA_i}=\\max_{j&lt;i \\land SA_j&lt;SA_i}f_{SA_j}+\\max_{k=j+1}^in-height_k+1\r\n\\]</span> 注意关于 <code>height</code> 的那项是一个后缀 <span class=\"math inline\">\\(\\max\\)</span>，考虑单调栈维护，栈内维护两元组 <span class=\"math inline\">\\((v,S)\\)</span>，每次将 <span class=\"math inline\">\\((n-height_{i+1}+1,\\{i\\})\\)</span> 压栈。假设栈顶元素为 <span class=\"math inline\">\\((v_1,S_1)\\)</span>，下一个元素为 <span class=\"math inline\">\\((v_2,S_2)\\)</span>，如果 <span class=\"math inline\">\\(v_1\\ge v_2\\)</span>，就把这两个元素合并成 <span class=\"math inline\">\\((v_1,S_1\\cup S_2)\\)</span>。</p>\r\n<p>在插入 <span class=\"math inline\">\\(i\\)</span> 个元素后，就可以这样计算 <span class=\"math inline\">\\(f_{i+1}\\)</span>：遍历栈内每个三元组 <span class=\"math inline\">\\((v,S)\\)</span>，用 <span class=\"math inline\">\\(\\max_{j \\in S\\land SA_j\\le SA_i}+v\\rightarrow f_{SA_{i+1}}\\)</span>。但栈内元素可能很多，不能全部遍历，考虑把 <span class=\"math inline\">\\(|S|\\le \\sqrt n\\)</span> 的栈元素的贡献用一个数据结构 <span class=\"math inline\">\\(A\\)</span> 一起维护，每个 <span class=\"math inline\">\\(|S|&gt;\\sqrt n\\)</span> 的元素用数据结构 <span class=\"math inline\">\\(B\\)</span> 单独维护，这样就只需要遍历最多 <span class=\"math inline\">\\(\\sqrt n\\)</span> 个 <span class=\"math inline\">\\(|S|&gt;\\sqrt n\\)</span> 的栈元素，即在 <span class=\"math inline\">\\(A\\)</span> 中查询一次前缀 <span class=\"math inline\">\\(\\max\\)</span>，<span class=\"math inline\">\\(B\\)</span> 中查询 <span class=\"math inline\">\\(\\sqrt n\\)</span> 次前缀 <span class=\"math inline\">\\(\\max\\)</span>。</p>\r\n<p>元素合并的时候需要分类维护：</p>\r\n<ul>\r\n<li>当 <span class=\"math inline\">\\(|S_1|+|S_2|\\le \\sqrt n\\)</span> 时，相当于把 <span class=\"math inline\">\\(S_2\\)</span> 的贡献整体加上一个正数，可以在 <span class=\"math inline\">\\(A\\)</span> 中进行 <span class=\"math inline\">\\(|S_2|\\)</span> 次增大修改操作，这类操作总共不超过 <span class=\"math inline\">\\(n\\sqrt n\\)</span> 次。</li>\r\n<li>当 <span class=\"math inline\">\\(|S_1|&gt;\\sqrt n\\land |S_2|\\le \\sqrt n\\)</span> 时，在 <span class=\"math inline\">\\(B\\)</span> 中进行 <span class=\"math inline\">\\(|S_2|\\)</span> 次插入新元素，这类操作总共不超过 <span class=\"math inline\">\\(n\\)</span> 次。</li>\r\n<li>当 <span class=\"math inline\">\\(|S_1|,|S_2|&gt;\\sqrt n\\)</span> 或 <span class=\"math inline\">\\(|S_1|,|S_2|\\le \\sqrt n\\land |S_1|+|S_2|&gt;\\sqrt n\\)</span> 时，用 <span class=\"math inline\">\\(|S_1|+|S_2|\\)</span> 个元素重构一个 <span class=\"math inline\">\\(B\\)</span>，这类操作总共不超过 <span class=\"math inline\">\\(\\sqrt n\\)</span> 次。</li>\r\n</ul>\r\n<p>综上，当 <span class=\"math inline\">\\(A\\)</span> 做到 <span class=\"math inline\">\\(O(1)\\)</span> 修改，<span class=\"math inline\">\\(O(\\sqrt n)\\)</span> 查询，<span class=\"math inline\">\\(B\\)</span> 做到 <span class=\"math inline\">\\(O(\\sqrt n)\\)</span> 修改，<span class=\"math inline\">\\(O(1)\\)</span> 查询时，复杂度为 <span class=\"math inline\">\\(O(n\\sqrt n)\\)</span>。</p>\r\n<p>因为修改是增大值，查询是前缀 <span class=\"math inline\">\\(\\max\\)</span>，<span class=\"math inline\">\\(A\\)</span> 和 <span class=\"math inline\">\\(B\\)</span> 都可以通过分块实现。</p>\r\n<h3 id=\"cf1562f\">CF1562F</h3>\r\n<blockquote>\r\n<p>有个长度为 <span class=\"math inline\">\\(n\\)</span> 的序列 <span class=\"math inline\">\\(A\\)</span>，元素两两不同且值域连续，但你不知道这个序列，每次可以询问两个不同数的 <span class=\"math inline\">\\(\\text{lcm}\\)</span>，最多使用 <span class=\"math inline\">\\(n+5000\\)</span> 次询问求出 <span class=\"math inline\">\\(A\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(n\\le 10^5,A_i\\le 2\\cdot 10^5\\)</span></p>\r\n</blockquote>\r\n<p>如果 <span class=\"math inline\">\\(\\gcd(a,b)=1\\)</span>，那么 <span class=\"math inline\">\\(\\text{lcm}(a,b)=ab\\)</span>，如果求出了 <span class=\"math inline\">\\(A\\)</span> 序列中最大的质数 <span class=\"math inline\">\\(p\\)</span>，就只需要 <span class=\"math inline\">\\(n-1\\)</span> 次询问就可以求出 <span class=\"math inline\">\\(A\\)</span>。</p>\r\n<p>先考虑 <span class=\"math inline\">\\(p\\)</span> 存在的情况，怎么求出 <span class=\"math inline\">\\(p\\)</span> 和它的位置？询问 <span class=\"math inline\">\\(\\text{lcm}(A_1,A_2),\\text{lcm}(A_2,A_3),\\text{lcm}(A_3,A_4),\\cdots,\\text{lcm}(A_{n-1},n)\\)</span>，所有质因子中最大的就是 <span class=\"math inline\">\\(p\\)</span>，同时也可以推断出 <span class=\"math inline\">\\(p\\)</span> 的位置。然后再进行 <span class=\"math inline\">\\(n-1\\)</span> 次询问就求出了 <span class=\"math inline\">\\(A\\)</span>，询问次数为 <span class=\"math inline\">\\(2n-2\\)</span>，可以处理 <span class=\"math inline\">\\(100&lt;n\\le7500\\)</span>。</p>\r\n<p>再分别考虑 <span class=\"math inline\">\\(n\\le 100\\)</span> 和 <span class=\"math inline\">\\(n&gt;7500\\)</span> 的情况。</p>\r\n<p><span class=\"math inline\">\\(n\\le 100\\)</span> 可以先两两询问 <span class=\"math inline\">\\(\\text{lcm}\\)</span>，再逐个确定。当 <span class=\"math inline\">\\(n&gt;3\\)</span> 时至少有两个奇数，根据两个奇数的 <span class=\"math inline\">\\(\\text{lcm}\\)</span> 为奇数就可以确定所有数的奇偶性，再取 <span class=\"math inline\">\\(\\text{lcm}\\)</span> 中最大的一个，它一定是 <span class=\"math inline\">\\(\\max A_i(\\max A_i-1)\\)</span>，结合奇偶性就可以确定最大的 <span class=\"math inline\">\\(A_i\\)</span>，然后删除最大值，重复上述过程，直到 <span class=\"math inline\">\\(n=3\\)</span> 时，分类讨论即可。</p>\r\n<p>当 <span class=\"math inline\">\\(n&gt;7500\\)</span> 时需要用不超过 <span class=\"math inline\">\\(5000\\)</span> 次询问求出 <span class=\"math inline\">\\(A\\)</span> 序列中最大的质数 <span class=\"math inline\">\\(p\\)</span>，然而比较困难，考虑不找最大的质数，找一个大于 <span class=\"math inline\">\\(450\\)</span> 的质数 <span class=\"math inline\">\\(p&#39;\\)</span> 就行了。</p>\r\n<p>考虑随机询问 <span class=\"math inline\">\\(\\text{lcm}(A_i,A_j)\\)</span>，如果它是两个大于 <span class=\"math inline\">\\(450\\)</span> 的质数 <span class=\"math inline\">\\(p,q\\)</span> 的乘积，那么 <span class=\"math inline\">\\(A_i,A_j\\)</span> 一定就是 <span class=\"math inline\">\\(p,q\\)</span>，考虑进一步确定 <span class=\"math inline\">\\(A_i\\)</span>，随机一个 <span class=\"math inline\">\\(k\\)</span>，如果 <span class=\"math inline\">\\(p\\not|\\text{lcm}(A_i,A_k)\\)</span> 说明 <span class=\"math inline\">\\(A_i=p\\)</span>，如果 <span class=\"math inline\">\\(q\\not|\\text{lcm}(A_j,A_k)\\)</span> 说明 <span class=\"math inline\">\\(A_i=q\\)</span>，期望的总随机次数是 <span class=\"math inline\">\\(O(\\ln^2n)\\)</span>。</p>\r\n<p>考虑 <span class=\"math display\">\\[\r\n\\text{lcm}(p&#39;,x)=\r\n\\begin{cases}\r\nx&amp;(x|p&#39;)\\\\\r\nxp&#39;&amp;(x\\not|p&#39;)\r\n\\end{cases}\r\n\\]</span> 如果 <span class=\"math inline\">\\(\\text{lcm}(p&#39;,x)&gt;2\\cdot 10^5\\)</span> 就说明 <span class=\"math inline\">\\(x\\not|p&#39;\\)</span>，可以确定 <span class=\"math inline\">\\(x\\)</span> 的值，这样至少可以确定 <span class=\"math inline\">\\(n-900\\)</span> 个数，并且最大的质数 <span class=\"math inline\">\\(p\\)</span> 一定被确定了，最后再用 <span class=\"math inline\">\\(p\\)</span> 和剩下的数询问即可。</p>\r\n<h3 id=\"auoj1760\">AUOJ1760</h3>\r\n<blockquote>\r\n<p>有 <span class=\"math inline\">\\(n\\)</span> 个物品，其中可能有一个次品，它的质量与其他物品有差异。你需要多次使用天平后回答谜题：是否存在次品？次品是偏轻还是偏重？称量时，在天平两边放相同数量的物品，以得知那边更重。</p>\r\n<p>构造一个能够解决谜题且称量次数最少的<strong>固定</strong>称量方案。</p>\r\n<p><span class=\"math inline\">\\(n \\le 10^6\\)</span></p>\r\n</blockquote>\r\n<p>考虑什么样的称量方案能够解决谜题。</p>\r\n<p>假设称量次数为 <span class=\"math inline\">\\(m\\)</span>，定义矩阵 <span class=\"math inline\">\\(A\\)</span>： <span class=\"math display\">\\[\r\nA_{i,j}=\r\n\\begin{cases}\r\n-1 &amp;(第 j 次称量物品 i 在天平左边)\\\\\r\n0 &amp;(第 j 次称量物品 i 不在天平上)\\\\\r\n1 &amp;(第 j 次称量物品 i 在天平右边)\r\n\\end{cases}\r\n\\]</span> 首先怎么判断有没有次品：如果有物品没上过天平，哪无论如何都不能判断，否则可以判断，不存在次品当且仅当每次天平都平衡。</p>\r\n<p>得到条件一：<span class=\"math inline\">\\(A_i\\ne \\{0,0,\\cdots, 0\\}\\)</span>。</p>\r\n<p>确定了有次品，怎么确定是哪一个：先考虑已知次品偏重时怎么确定，根据每次天平的倾斜情况，可以得到每次称量时次品在天平的哪一边或不在天平上，定义序列 <span class=\"math inline\">\\(B\\)</span>： <span class=\"math display\">\\[\r\nB_i=\r\n\\begin{cases}\r\n-1 &amp;(第 i 次称量次品在天平左边)\\\\\r\n0 &amp;(第 i 次称量次品不在天平上)\\\\\r\n1 &amp;(第 i 次称量次品在天平右边)\r\n\\end{cases}\r\n\\]</span> 然后看 <span class=\"math inline\">\\(B\\)</span> 和 <span class=\"math inline\">\\(A_?\\)</span> 相等就可以确定次品是哪一个。</p>\r\n<p>但是并不知道次品偏重还是偏轻，上面说了假设次品偏重可以得到一个序列 <span class=\"math inline\">\\(B\\)</span>，类似地假设次品偏轻可以得到一个序列 <span class=\"math inline\">\\(C\\)</span>，并且满足 <span class=\"math inline\">\\(C=-B\\)</span>（元素对于互为相反数），可以解决谜题的条件是 <span class=\"math inline\">\\(B\\)</span> 和 <span class=\"math inline\">\\(C\\)</span> 不能同时和某个 <span class=\"math inline\">\\(A_i\\)</span> 相等。</p>\r\n<p>得到条件二：<span class=\"math inline\">\\(\\forall i \\ne j, A_i\\ne A_j \\land A_i \\ne -A_j\\)</span>。</p>\r\n<p>由于每次称量时两边放相同数量的物品。</p>\r\n<p>得到条件三：<span class=\"math inline\">\\(\\forall j\\in[1,m],\\sum_{i=1}^nA_{i,j}=0\\)</span>。</p>\r\n<p>满足以上三个条件就已经合法了，考虑对于一个 <span class=\"math inline\">\\(m\\)</span>，哪些 <span class=\"math inline\">\\(n\\)</span> 可以构造出 <span class=\"math inline\">\\(A\\)</span> 矩阵。</p>\r\n<p>首先在前两个条件的限制下，<span class=\"math inline\">\\(n\\)</span> 最大能取得 <span class=\"math inline\">\\(\\frac{3^m-1}2\\)</span>，再加上第三个限制，<span class=\"math inline\">\\(n\\)</span> 还能不能取到 <span class=\"math inline\">\\(\\frac{3^m-1}2\\)</span>？</p>\r\n<p>答案是否定的，因为对于所有的方案，<span class=\"math inline\">\\(\\forall j\\in[1,m],\\sum_{i=1}^n|A_{i,j}|=3^{m-1}\\)</span>。</p>\r\n<blockquote>\r\n<p>引理，<span class=\"math inline\">\\(m\\)</span> 次称量可以解决谜题当且仅当 <span class=\"math inline\">\\(n\\le \\frac{3^m-3}2\\)</span>。</p>\r\n</blockquote>\r\n<p>这样就可以求出最小的 <span class=\"math inline\">\\(m\\)</span> 了，怎么求方案？</p>\r\n<p>当 <span class=\"math inline\">\\(3|n\\)</span> 时有一个简单的构造：定义 <span class=\"math inline\">\\(\\text{next}(A)\\)</span> 表示把序列 <span class=\"math inline\">\\(A\\)</span> 每一项循环移位（<span class=\"math inline\">\\(-1\\rightarrow 0,0\\rightarrow 1,1\\rightarrow -1\\)</span>）后得到的序列，不难发现一个事实，<span class=\"math inline\">\\(A,\\text{next}(A),\\text{next}(\\text{next}(A))\\)</span> 这三个序列对应位置之和等于 <span class=\"math inline\">\\(0\\)</span>。</p>\r\n<p>如：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 0 -1 1</span><br><span class=\"line\">-1 1 0 -1</span><br><span class=\"line\">0 -1 1 0</span><br></pre></td></tr></table></figure>\r\n<p>除去 <span class=\"math inline\">\\(\\{-1,-1,\\cdots,-1\\}\\)</span> 和 <span class=\"math inline\">\\(\\{1,1,\\cdots,1\\}\\)</span>，把每三个这样的序列分为一组，恰好可以分成 <span class=\"math inline\">\\(\\frac {3^m-3}3\\)</span> 组，其中两两组互相为相反序列，于是删去一 半这样的组，恰好可以得到一个合法的矩阵 <span class=\"math inline\">\\(A\\)</span>。</p>\r\n<h3 id=\"思路一\">思路一</h3>\r\n<p>当 <span class=\"math inline\">\\(3\\not|n\\)</span> 时，感觉问题非常困难，考虑模拟退火：</p>\r\n<ul>\r\n<li>用 <span class=\"math inline\">\\(\\sum_{j=1}^m|\\sum_{i=1}^nA_{i,j}|\\)</span> 作为一个解的权值，问题就是求权值最小的解。</li>\r\n<li>还是先分组，取若干个组和一个不完整的组作为初始解。</li>\r\n<li>每次以以下方式之一生成一个新解，如果新解更优则接受新解，否则以很低的概率接受新解。\r\n<ul>\r\n<li>选择一个 <span class=\"math inline\">\\(i\\)</span>，将 <span class=\"math inline\">\\(A_i\\)</span> 替换成 <span class=\"math inline\">\\(-A_i\\)</span>。</li>\r\n<li>选择一个 <span class=\"math inline\">\\(i\\)</span>，选择一个 <span class=\"math inline\">\\(B\\)</span> 满足 <span class=\"math inline\">\\(B\\)</span> 和 <span class=\"math inline\">\\(-B\\)</span> 都没有在 <span class=\"math inline\">\\(A\\)</span> 中出现过，令 <span class=\"math inline\">\\(A_i=B\\)</span>。</li>\r\n</ul></li>\r\n</ul>\r\n<p>效率还行，但不稳定，对于少数 <span class=\"math inline\">\\(n\\)</span> 速度极慢，<span class=\"math inline\">\\(n\\le 10^4\\)</span> 是完全没有问题的。</p>\r\n<details>\r\n<summary>\r\n<span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span>\r\n</summary>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> lf = <span class=\"keyword\">double</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">gen</span><span class=\"params\">(ll x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ll k = <span class=\"number\">0x9ddfea08eb382d69</span>ull;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">3</span>) x *= k, x ^= x &gt;&gt; <span class=\"number\">47</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * k;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rnd</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> ll s = <span class=\"built_in\">time</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (s += <span class=\"built_in\">gen</span>(s)) &amp; INT_MAX;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">wrt</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> ed)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> streambuf* out = cout.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc out -&gt; sputc</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> c[<span class=\"number\">11</span>]; <span class=\"keyword\">int</span> sz = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> c[++sz] = x % <span class=\"number\">10</span>, x /= <span class=\"number\">10</span>; <span class=\"keyword\">while</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(sz) <span class=\"built_in\">pc</span>(c[sz--] + <span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"built_in\">pc</span>(ed);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m = <span class=\"number\">2</span>, t = <span class=\"number\">9</span>, nw[<span class=\"number\">15</span>], idx, A[<span class=\"number\">2500000</span>][<span class=\"number\">15</span>], c[<span class=\"number\">15</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &gt; m) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, <span class=\"number\">2</span>, <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">            idx++;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(k, <span class=\"number\">1</span>, m) A[idx][k] = (nw[k] + j) % <span class=\"number\">3</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(idx == t) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(j, <span class=\"number\">-1</span>, <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        nw[i] = j, <span class=\"built_in\">dfs</span>(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(idx == t) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t - <span class=\"number\">3</span> &gt;&gt; <span class=\"number\">1</span> &lt; n) m++, t *= <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"built_in\">wrt</span>(m, <span class=\"number\">10</span>);</span><br><span class=\"line\">    t = t - <span class=\"number\">1</span> &gt;&gt; <span class=\"number\">1</span>, <span class=\"built_in\">dfs</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, m) c[j] += A[i][j];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> su = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) su += <span class=\"built_in\">abs</span>(c[i]);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(su) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"built_in\">rnd</span>() % n + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">rnd</span>() % t &lt; n) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> d = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, m) d += <span class=\"built_in\">abs</span>(c[j] - <span class=\"number\">2</span> * A[i][j]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(d &lt; su || <span class=\"built_in\">rnd</span>() % n &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">                su = d;</span><br><span class=\"line\">                <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, m) c[j] -= <span class=\"number\">2</span> * A[i][j], A[i][j] *= <span class=\"number\">-1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> k = <span class=\"built_in\">rnd</span>() % (t - n) + n + <span class=\"number\">1</span>, d = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, m) d += <span class=\"built_in\">abs</span>(c[j] - A[i][j] + A[k][j]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(d &lt; su || <span class=\"built_in\">rnd</span>() % n &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">                su = d;</span><br><span class=\"line\">                <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, m) c[j] -= A[i][j] - A[k][j], <span class=\"built_in\">swap</span>(A[i][j], A[k][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">per</span>(j, m, <span class=\"number\">1</span>) v = v * <span class=\"number\">3</span> + A[i][j] + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">wrt</span>(v, <span class=\"number\">32</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n</details>\r\n<h3 id=\"思路二\">思路二</h3>\r\n<p>另外，还有一种优秀的乱搞做法。</p>\r\n<ul>\r\n<li>先分组，取若干个组和一个不完整的组作为初始解，那么 <span class=\"math inline\">\\(\\forall j\\in[1,m],|\\sum_{i=1}^nA_{i,j}|\\le 1\\)</span>。</li>\r\n<li>对于每个 <span class=\"math inline\">\\(j\\)</span>，如果 <span class=\"math inline\">\\(\\sum_{i=1}^nA_{i,j}=-1\\)</span>，找到一个 <span class=\"math inline\">\\(i\\)</span> 满足 <span class=\"math inline\">\\(A_{i,j}&lt;1\\)</span> 并且将 <span class=\"math inline\">\\(A_{i,j}\\)</span> 增大一后仍然合法，然后将 <span class=\"math inline\">\\(A_{i,j}\\)</span> 加一。</li>\r\n</ul>\r\n<p>会有极个别 <span class=\"math inline\">\\(n\\)</span> 求出的解不合法，<span class=\"math inline\">\\(10^6\\)</span> 以内应该不会超过 <span class=\"math inline\">\\(10\\)</span> 个，而且都比较小，取决于初始解（所有可以通过）。</p>\r\n<p>结合思路一可以构造出 <span class=\"math inline\">\\(10^6\\)</span> 内的所有 <span class=\"math inline\">\\(n\\)</span>。</p>\r\n<details>\r\n<summary>\r\n<span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span>\r\n</summary>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">wrt</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> ed)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> streambuf* out = cout.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc out -&gt; sputc</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> c[<span class=\"number\">11</span>]; <span class=\"keyword\">int</span> sz = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> c[++sz] = x % <span class=\"number\">10</span>, x /= <span class=\"number\">10</span>; <span class=\"keyword\">while</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(sz) <span class=\"built_in\">pc</span>(c[sz--] + <span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"built_in\">pc</span>(ed);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m = <span class=\"number\">2</span>, t = <span class=\"number\">9</span>, nw[<span class=\"number\">15</span>], idx, A[<span class=\"number\">1000005</span>], c[<span class=\"number\">15</span>], as;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vs[<span class=\"number\">1600000</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i) <span class=\"built_in\">rep</span>(j, <span class=\"number\">-1</span>, <span class=\"number\">1</span>) &#123; nw[i] = j, <span class=\"built_in\">dfs</span>(i - <span class=\"number\">1</span>); <span class=\"keyword\">if</span>(idx == n) <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">per</span>(k, m, <span class=\"number\">1</span>) x = x * <span class=\"number\">3</span> + (j + nw[k]) % <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!x || vs[x] || idx == n) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        A[++idx] = x, vs[x] = vs[t - x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(k, <span class=\"number\">1</span>, m) c[k] += (j + nw[k]) % <span class=\"number\">3</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t - <span class=\"number\">3</span> &gt;&gt; <span class=\"number\">1</span> &lt; n) m++, t *= <span class=\"number\">3</span>;</span><br><span class=\"line\">    t--, vs[t / <span class=\"number\">2</span>] = <span class=\"number\">1</span>, <span class=\"built_in\">wrt</span>(m, <span class=\"number\">10</span>), nw[m] = <span class=\"number\">-1</span>, <span class=\"built_in\">dfs</span>(m - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n % <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) as += <span class=\"built_in\">abs</span>(c[i]);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> th = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!c[j]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> v = A[i] / th % <span class=\"number\">3</span>;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> Try = [&amp;](<span class=\"keyword\">int</span> x) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> nw = A[i] + x * th;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(vs[nw]) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    vs[A[i]] = vs[t - A[i]] = <span class=\"number\">0</span>, vs[nw] = vs[t - nw] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    as -= <span class=\"built_in\">abs</span>(c[j]), c[j] += x, v += x, as += <span class=\"built_in\">abs</span>(c[j]), A[i] = nw;</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(v &lt; <span class=\"number\">2</span> &amp;&amp; c[j] &lt; <span class=\"number\">0</span>) <span class=\"built_in\">Try</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(v &gt; <span class=\"number\">0</span> &amp;&amp; c[j] &gt; <span class=\"number\">0</span>) <span class=\"built_in\">Try</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            th *= <span class=\"number\">3</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">wrt</span>(A[i], <span class=\"number\">32</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n</details>\r\n<h3 id=\"思路三\">思路三</h3>\r\n<p>这是官方解法，说是爬山算法，但感觉比较微妙，因为稍微扰动一下初始解就会有极个别 <span class=\"math inline\">\\(n\\)</span> 跑不出来，流程是这样的：</p>\r\n<ul>\r\n<li><p>用 <span class=\"math inline\">\\(\\sum_{j=1}^m|\\sum_{i=1}^nA_{i,j}|\\)</span> 作为一个解的权值，问题就是求权值最小的解。</p></li>\r\n<li><p><span class=\"math inline\">\\(A\\)</span> 矩阵初始为空，然按字典序<strong>从大到小</strong>枚举长度为 <span class=\"math inline\">\\(m\\)</span>，值域为 <span class=\"math inline\">\\(\\{-1,0,1\\}\\)</span> 的序列 <span class=\"math inline\">\\(B\\)</span>，如果 <span class=\"math inline\">\\(B\\)</span> 和 <span class=\"math inline\">\\(-B\\)</span> 没有在 <span class=\"math inline\">\\(A\\)</span> 出现过，就把 <span class=\"math inline\">\\(B,\\text{next}(B),\\text{next}(\\text{next}(B))\\)</span> 依次加入 <span class=\"math inline\">\\(A\\)</span> 末尾，加入 <span class=\"math inline\">\\(n\\)</span> 行时终止。那么 <span class=\"math inline\">\\(\\forall j\\in[1,m],|\\sum_{i=1}^nA_{i,j}|\\le 1\\)</span>。</p></li>\r\n<li><p>对当前解重复进行如下修改，直到权值为 <span class=\"math inline\">\\(0\\)</span>：</p>\r\n<p>从小到大依次枚举 <span class=\"math inline\">\\(j\\)</span> 和 <span class=\"math inline\">\\(i\\)</span>，然后进行以下操作：</p>\r\n<ul>\r\n<li>如果 <span class=\"math inline\">\\(\\sum_{i=1}^nA_{i,j}=-1\\land A_{i,j}&lt;1\\)</span>，尝试让 <span class=\"math inline\">\\(A_{i,j}\\)</span> 加一。</li>\r\n<li>如果 <span class=\"math inline\">\\(\\sum_{i=1}^nA_{i,j}=1\\)</span>，尝试让 <span class=\"math inline\">\\(A_{i,j}=0\\)</span>。</li>\r\n</ul></li>\r\n</ul>\r\n<p>实测能构造出 <span class=\"math inline\">\\(10^6\\)</span> 内的所有 <span class=\"math inline\">\\(n\\)</span>。</p>\r\n<details>\r\n<summary>\r\n<span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span>\r\n</summary>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">wrt</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> ed)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> streambuf* out = cout.<span class=\"built_in\">rdbuf</span>();</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> pc out -&gt; sputc</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> c[<span class=\"number\">11</span>]; <span class=\"keyword\">int</span> sz = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> c[++sz] = x % <span class=\"number\">10</span>, x /= <span class=\"number\">10</span>; <span class=\"keyword\">while</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(sz) <span class=\"built_in\">pc</span>(c[sz--] + <span class=\"number\">48</span>);</span><br><span class=\"line\">    <span class=\"built_in\">pc</span>(ed);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m = <span class=\"number\">2</span>, t = <span class=\"number\">9</span>, nw[<span class=\"number\">15</span>], idx, A[<span class=\"number\">797170</span>], c[<span class=\"number\">15</span>], as;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vs[<span class=\"number\">1600000</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i) <span class=\"built_in\">per</span>(j, <span class=\"number\">1</span>, <span class=\"number\">-1</span>) &#123; nw[i] = j, <span class=\"built_in\">dfs</span>(i - <span class=\"number\">1</span>); <span class=\"keyword\">if</span>(idx == n) <span class=\"keyword\">break</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">per</span>(k, m, <span class=\"number\">1</span>) x = x * <span class=\"number\">3</span> + (j + nw[k]) % <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == t || vs[x] || idx == n) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        A[++idx] = x, vs[x] = vs[t - x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(k, <span class=\"number\">1</span>, m) c[k] += (j + nw[k]) % <span class=\"number\">3</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t - <span class=\"number\">3</span> &gt;&gt; <span class=\"number\">1</span> &lt; n) m++, t *= <span class=\"number\">3</span>;</span><br><span class=\"line\">    t--, vs[t / <span class=\"number\">2</span>] = <span class=\"number\">1</span>, <span class=\"built_in\">wrt</span>(m, <span class=\"number\">10</span>), nw[m] = <span class=\"number\">1</span>, <span class=\"built_in\">dfs</span>(m - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) as += <span class=\"built_in\">abs</span>(c[i]);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(as) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> th = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!c[j]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> v = A[i] / th % <span class=\"number\">3</span>;</span><br><span class=\"line\">                <span class=\"keyword\">auto</span> Try = [&amp;](<span class=\"keyword\">int</span> x) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> nw = A[i] + x * th;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(vs[nw]) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                    vs[A[i]] = vs[t - A[i]] = <span class=\"number\">0</span>, vs[nw] = vs[t - nw] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    as -= <span class=\"built_in\">abs</span>(c[j]), c[j] += x, v += x, as += <span class=\"built_in\">abs</span>(c[j]), A[i] = nw;</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(v &lt; <span class=\"number\">2</span> &amp;&amp; c[j] &lt; <span class=\"number\">0</span>) <span class=\"built_in\">Try</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(v &gt; <span class=\"number\">0</span> &amp;&amp; c[j] &gt; <span class=\"number\">0</span>) <span class=\"built_in\">Try</span>(-v);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            th *= <span class=\"number\">3</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">wrt</span>(A[i], <span class=\"number\">32</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n</details>\r\n<h3 id=\"auoj1761\">AUOJ1761</h3>\r\n<blockquote>\r\n<p>有一个长度为 <span class=\"math inline\">\\(n\\)</span> 的序列 <span class=\"math inline\">\\(A\\)</span> （下标从 <span class=\"math inline\">\\(1\\)</span> 开始）和一个长度为 <span class=\"math inline\">\\(m\\)</span> 的序列 <span class=\"math inline\">\\(B\\)</span>（下标从 <span class=\"math inline\">\\(0\\)</span> 开始）。</p>\r\n<p><span class=\"math inline\">\\(A\\)</span> 初始全为 <span class=\"math inline\">\\(0\\)</span>，每一天 <span class=\"math inline\">\\(A_i\\)</span> 会增加 <span class=\"math inline\">\\(i\\)</span>，在第 <span class=\"math inline\">\\(j\\)</span> 天，如果 <span class=\"math inline\">\\(A_i&gt;B_{j\\bmod m}\\)</span>，则进行一次操作，令 <span class=\"math inline\">\\(A_i=B_{j\\bmod m}\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(q\\)</span> 次询问，每次询问前 <span class=\"math inline\">\\(d_i\\)</span> 天总共会进行多少次操作。</p>\r\n<p><span class=\"math inline\">\\(n,m,q\\le 3\\cdot 10^5,d_i\\le 3\\cdot 10^{12},t_i\\le 10^{18}\\)</span></p>\r\n</blockquote>\r\n<p>由于 <span class=\"math inline\">\\(d_i\\)</span> 很大，应该会用到操作的周期性，事实上对于每个 <span class=\"math inline\">\\(A_i\\)</span>，从第一次操作它开始周期就为 <span class=\"math inline\">\\(m\\)</span>。</p>\r\n<blockquote>\r\n<p>引理：假设在第 <span class=\"math inline\">\\(p\\)</span> 天操作了 <span class=\"math inline\">\\(A_i\\)</span>，那么它在第 <span class=\"math inline\">\\(p+m\\)</span> 天又会被操作。</p>\r\n</blockquote>\r\n<p>证明：第 <span class=\"math inline\">\\(p-m\\)</span> 天 <span class=\"math inline\">\\(A_i\\)</span> 小于等于第 <span class=\"math inline\">\\(p\\)</span> 天的 <span class=\"math inline\">\\(A_i=B_{p \\bmod m}\\)</span>，感性理解 <span class=\"math inline\">\\(A_i\\)</span> 越小在 <span class=\"math inline\">\\(m\\)</span> 天后越容易操作，第 <span class=\"math inline\">\\(p\\)</span> 天操作了，第 <span class=\"math inline\">\\(p+m\\)</span> 天肯定要操作。</p>\r\n<p>设 <span class=\"math inline\">\\(A_i\\)</span> 第一次操作在第 <span class=\"math inline\">\\(p_i\\)</span> 天，那么在第 <span class=\"math inline\">\\(p_i,p_i+m,p_i+2m,pi+3m,\\cdots\\)</span> 都会操作，于是周期就是 <span class=\"math inline\">\\(m\\)</span>。</p>\r\n<p>不难发现 <span class=\"math inline\">\\(p_i\\)</span> 是递减的，因为任意时刻 <span class=\"math inline\">\\(A\\)</span> 序列都是递增的，每次操作的都是一段后缀。那么对于一次询问，进行过操作的 <span class=\"math inline\">\\(A_i\\)</span> 是一段后缀，只要求出了 <span class=\"math inline\">\\(p_i\\)</span> 就可以二分出这个后缀，下面考虑怎么求 <span class=\"math inline\">\\(p_i\\)</span>。</p>\r\n<p>设 <span class=\"math inline\">\\(pos\\)</span> 表示 <span class=\"math inline\">\\(B\\)</span> 中最小元素的位置，对于每个 <span class=\"math inline\">\\(i\\)</span> 可以直接算出 <span class=\"math inline\">\\(A_i\\)</span> 第一次被 <span class=\"math inline\">\\(B_{pos}\\)</span> 操作的时间 <span class=\"math inline\">\\(T_i\\)</span>，那么 <span class=\"math inline\">\\(p_i\\in[T_i-m+1,T_i]\\)</span>，设 <span class=\"math inline\">\\(p_i=T_i-m+k_i\\)</span>，<span class=\"math inline\">\\(k_i\\)</span> 就是最小的 <span class=\"math inline\">\\(x\\)</span> 满足 <span class=\"math inline\">\\(ix+(T_i-m)i&gt;B_{pos+x}\\)</span>，考虑在线段树上每个结点 <span class=\"math inline\">\\([l,r]\\)</span> 维护 <span class=\"math inline\">\\(\\min_{j=l}^rB_{pos+j}-ij\\)</span>，每次只需要二分出最小的 <span class=\"math inline\">\\(x\\)</span> 满足 <span class=\"math inline\">\\(\\min_{j=1}^x\\{B_{pos+j}-ij\\}&lt;(T_i-m)i\\)</span>，注意到式子是可以斜率优化的，随着 <span class=\"math inline\">\\(i\\)</span> 的增大，对每个结点用一个单调队列维护下凸包。复杂度为 <span class=\"math inline\">\\(O(n\\log n)\\)</span>。这样就求出了 <span class=\"math inline\">\\(p_i\\)</span>。</p>\r\n<p>对于询问 <span class=\"math inline\">\\(d\\)</span>，每个 <span class=\"math inline\">\\(A_i\\)</span> 的贡献可以分为若干个完整周期和一个不完整周期。对于完整周期，由于周期长度为 <span class=\"math inline\">\\(m\\)</span>，可以用线段树直接模拟周期中每一天的修改，然后就知道每个 <span class=\"math inline\">\\(A_i\\)</span> 一个周期被清理多少次。对于不完整周期，可以把所有询问离线下来，然后用一个线段树模拟这个不完整周期，大致思路是在 <span class=\"math inline\">\\(p_i\\bmod m\\)</span> 天插入 <span class=\"math inline\">\\(A_i\\)</span>，在 <span class=\"math inline\">\\(d\\bmod m\\)</span> 天进行查询，但有可能 <span class=\"math inline\">\\(d\\bmod m&lt;p_i\\bmod m\\)</span>，所以实现上需要分类讨论一下。</p>\r\n<h3 id=\"codechef-btree\">CodeChef-btree</h3>\r\n<blockquote>\r\n<p>定义 <span class=\"math inline\">\\(S(u,k)\\)</span> 表示与 <span class=\"math inline\">\\(u\\)</span> 距离不超过 <span class=\"math inline\">\\(k\\)</span> 的点集。</p>\r\n<p>给定一棵 <span class=\"math inline\">\\(n\\)</span> 个点的树，<span class=\"math inline\">\\(q\\)</span> 次询问，每次询问 <span class=\"math inline\">\\(|S(u_1,k_1)\\cup S(u_2,k_2)\\cup S(u_3,k_3)\\cup \\cdots \\cup S(u_{m_i},k_{m_i})|\\)</span> 。</p>\r\n<p><span class=\"math inline\">\\(n,q\\le 5\\cdot 10^4,\\sum_{i=1}^qm_i\\le 5\\cdot 10^5\\)</span>。</p>\r\n</blockquote>\r\n<p>考虑 <span class=\"math inline\">\\(|S(u,k)|\\)</span> 怎么求，可以离线后点分治，也可以建出点分树在线求。</p>\r\n<h4 id=\"sol-1-1\">Sol 1</h4>\r\n<p>先对 <span class=\"math inline\">\\(u_1,u_2,u_3,\\cdots,u_{m_i}\\)</span> 建虚树，假设虚树中非关键点的半径为 <span class=\"math inline\">\\(0\\)</span>。</p>\r\n<p>如果 <span class=\"math inline\">\\((u_1,k_1),(u_2,k_2)\\)</span> 满足 <span class=\"math inline\">\\(k_1-\\text{dis}(u_1,u_2)&gt;k_2\\)</span>，就说明了 <span class=\"math inline\">\\(S(u_2,k_2)\\subsetneq S(u_1,k_1)\\)</span>，即 <span class=\"math inline\">\\(S(u_2,k_2)\\)</span> 是没用的，但不能删去它，而是令 <span class=\"math inline\">\\(k_2=k_1-\\text{dis}(u_1,u_2)\\)</span>。</p>\r\n<p>考虑对所有点的半径更新，直到不能更新为止，一种方法是像 <code>Dijkstra</code> 一样每次取半径最大的点更新周围点的半径，另一种做法是树形 <code>DP</code>，自底向上更新一遍，再自顶向下更新一遍。</p>\r\n<p>然后发现一个很好的性质，记虚树点集为 <span class=\"math inline\">\\(V\\)</span>，边集为 <span class=\"math inline\">\\(E\\)</span>，<span class=\"math inline\">\\(u\\)</span> 的半径为 <span class=\"math inline\">\\(r_u\\)</span>，答案等于 <span class=\"math inline\">\\(\\sum_{u\\in V}|S(u,r_u)|-\\sum_{(u,v)\\in E}|S(u,r_u)\\cap S(v,r_v)|\\)</span>。证明很简单，考虑自顶向下将每个 <span class=\"math inline\">\\(S(u,r_u)\\)</span> 并入，每次新增的点数为 <span class=\"math inline\">\\(|S(u,r_u)|-|S(u,r_u)\\cap S(fa_u,r_{fa_u})|\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(|S(u,r_u)|\\)</span> 可以在点分树上查询，<span class=\"math inline\">\\(|S(u,r_u)\\cap S(v,r_v)|\\)</span> 是一个 <span class=\"math inline\">\\(S(w,r)\\)</span>，其中 <span class=\"math inline\">\\(w\\)</span> 可能是顶点，也可能是一条边的中点，如果在每条边上新建一个点，<span class=\"math inline\">\\(w\\)</span> 就一定是顶点了。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O((n+m)\\log n)\\)</span>。</p>\r\n<h4 id=\"sol-2-1\">Sol 2</h4>\r\n<p>答案求的是并集的大小，是 <code>bitset</code> 可以优化的。</p>\r\n<p>注意到 <span class=\"math inline\">\\(nq \\le 2.5\\cdot 10^9,n\\sum_{i=1}^qm_i\\le 2.5\\cdot 10^{10}\\)</span>，一个时间复杂度 <span class=\"math inline\">\\(O(\\frac{n\\sum_{i=1}^qm_i}\\omega)\\)</span>，空间复杂度 <span class=\"math inline\">\\(O(\\frac{nq}\\omega)\\)</span> 的算法是可以通过的。</p>\r\n<p>怎么快速求 <span class=\"math inline\">\\(S(u,k)\\)</span> 的 <code>bitset</code> 形式，希望能做到 <span class=\"math inline\">\\(O(\\frac n\\omega)\\)</span>。</p>\r\n<p>考虑把所有询问离线下来，在点分治的过程中每个 <span class=\"math inline\">\\(S(u,k)\\)</span> 都被分解成了 <span class=\"math inline\">\\(O(\\log n)\\)</span> 个形如”深度不超过 <span class=\"math inline\">\\(d\\)</span> 的点集”的并，如果每次都把”深度不超过 <span class=\"math inline\">\\(d\\)</span> 的点集”并上去，求 <span class=\"math inline\">\\(S(u,k)\\)</span> 就是 <span class=\"math inline\">\\(O(\\frac{n\\log n}\\omega)\\)</span> 的，不太行。注意到这 <span class=\"math inline\">\\(O(\\log n)\\)</span> 个点集的范围分别为 <span class=\"math inline\">\\(n,\\frac n2,\\frac n4,\\frac n8,\\cdots\\)</span>，总和是 <span class=\"math inline\">\\(2n\\)</span> 的，但每个点集编号的范围都是 <span class=\"math inline\">\\([1,n]\\)</span>，每次并上去就太不优秀了，如何缩小编号的范围？只需要把所有点按照点分树的 <code>DFS</code> 序重新编号，那么每个点集编号的范围就缩小到了 <span class=\"math inline\">\\(n,\\frac n2,\\frac n4,\\frac n8,\\cdots\\)</span>，每次只需要并到一个区间上，复杂度 <span class=\"math inline\">\\(O(\\frac n\\omega)\\)</span>。</p>\r\n<p>做法就是对每个询问开一个 <code>bitset</code>，点分治的过程中更新 <code>bitset</code> 的一个区间，答案就是对于 <code>bitset</code> 的 <code>popcount</code>，需要用 <code>unsigned long long</code> 实现 <code>bitset</code>，<code>popcount</code> 也建议手写，预处理 <span class=\"math inline\">\\([0,65536)\\)</span> 内所有数的 <code>popcount</code>，把每个 <code>unsigned long long</code> 拆成四个 <span class=\"math inline\">\\([0,65536)\\)</span> 内的数。</p>\r\n<p>实测比 Sol 1 快。</p>\r\n<h3 id=\"ural2118\">URAL2118</h3>\r\n<blockquote>\r\n<p>给定前 <span class=\"math inline\">\\(k\\)</span> 个字母的 <span class=\"math inline\">\\(01\\)</span> 前缀编码（不存在一个编码是另一个编码的前缀）。</p>\r\n<p>给定字符串 <span class=\"math inline\">\\(s\\)</span>，设其解码后的 <span class=\"math inline\">\\(01\\)</span> 串为 <span class=\"math inline\">\\(S\\)</span>，求最多能将 <span class=\"math inline\">\\(S\\)</span> 划分为多少段使得每一段都无法解码，无解输出 <span class=\"math inline\">\\(-1\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(k \\le 52, n\\le 10^6\\)</span></p>\r\n</blockquote>\r\n<p>首先考虑两种特殊情况：</p>\r\n<ul>\r\n<li>编码中既有 <span class=\"math inline\">\\(0\\)</span>，也有 <span class=\"math inline\">\\(1\\)</span>，那 <span class=\"math inline\">\\(S\\)</span> 无论怎么划分都可以解码。</li>\r\n<li>编码中既没 <span class=\"math inline\">\\(0\\)</span>，也没 <span class=\"math inline\">\\(1\\)</span>，那么答案为 <span class=\"math inline\">\\(|S|\\)</span>。</li>\r\n</ul>\r\n<p>剩下的情况为：有 <span class=\"math inline\">\\(0\\)</span> 无 <span class=\"math inline\">\\(1\\)</span> 和有 <span class=\"math inline\">\\(1\\)</span> 无 <span class=\"math inline\">\\(0\\)</span>，由于对称性，只考虑有 <span class=\"math inline\">\\(0\\)</span> 无 <span class=\"math inline\">\\(1\\)</span>。</p>\r\n<p>首先答案的上界为 <span class=\"math inline\">\\(1\\)</span> 的个数，因为全 <span class=\"math inline\">\\(0\\)</span> 的一段是可以被解码的。</p>\r\n<p>如果最后一位为 <span class=\"math inline\">\\(1\\)</span>，那么在每个 <span class=\"math inline\">\\(1\\)</span> 后面断开，就可以取到这个上界。</p>\r\n<p>如果最后一位为 <span class=\"math inline\">\\(0\\)</span>，假设最后一段 <span class=\"math inline\">\\(T\\)</span>，可以说明存在最优解满足 <span class=\"math inline\">\\(T\\)</span> 前面是 <span class=\"math inline\">\\(1\\)</span>：假设 <span class=\"math inline\">\\(T\\)</span> 前面有 <strong>连续</strong> 的 <span class=\"math inline\">\\(x\\)</span> 个 <span class=\"math inline\">\\(0\\)</span>，前面总共有 <span class=\"math inline\">\\(y\\)</span> 个 <span class=\"math inline\">\\(1\\)</span>。那么答案的上界为 <span class=\"math inline\">\\(y+1\\)</span>，把这 <span class=\"math inline\">\\(x\\)</span> 个 <span class=\"math inline\">\\(0\\)</span> 加入 <span class=\"math inline\">\\(T\\)</span>，然后在 <span class=\"math inline\">\\(T\\)</span> 前面的每个 <span class=\"math inline\">\\(1\\)</span> 后面断开就可以到达这个上界。</p>\r\n<p>如果 <span class=\"math inline\">\\(T\\)</span> 前面有 <span class=\"math inline\">\\(y\\)</span> 个 <span class=\"math inline\">\\(1\\)</span>，最大段数就是 <span class=\"math inline\">\\(y+1\\)</span>，问题就是求最大的 <span class=\"math inline\">\\(y\\)</span>，假设 <span class=\"math inline\">\\(T&#39;\\)</span> 是最短的无法被解码的后缀，可以说明最大的 <span class=\"math inline\">\\(y\\)</span> 等于 <span class=\"math inline\">\\(T&#39;\\)</span> 前面 <span class=\"math inline\">\\(1\\)</span> 的个数：由于 <span class=\"math inline\">\\(|T|\\ge |T&#39;|\\)</span>，所以 <span class=\"math inline\">\\(y\\)</span> 不会超过 <span class=\"math inline\">\\(T&#39;\\)</span> 前面 <span class=\"math inline\">\\(1\\)</span> 的个数，另外，令 <span class=\"math inline\">\\(T=T&#39;前面极长的一段0+T&#39;\\)</span>，<span class=\"math inline\">\\(y\\)</span> 就可以取到这个上界。</p>\r\n<p>问题转化成了求 <span class=\"math inline\">\\(T&#39;\\)</span>，那么 <span class=\"math inline\">\\(T&#39;\\)</span> 的任何前缀都无法解码，否则 <span class=\"math inline\">\\(T&#39;\\)</span> 不是最短的，记 <span class=\"math inline\">\\(suffix(i)\\)</span> 表示 <span class=\"math inline\">\\(S\\)</span> 长度为 <span class=\"math inline\">\\(i\\)</span> 的后缀，问题就是依次判断 <span class=\"math inline\">\\(suffix(1),suffix(2),suffix(3),\\cdots\\)</span> 是否有前缀可以被解码，<code>AC</code> 自动机即可。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(nk)\\)</span>。</p>\r\n<h3 id=\"graph-subpaths\">Graph Subpaths</h3>\r\n<blockquote>\r\n<p>没有提交地址。</p>\r\n<p>给定一张 <span class=\"math inline\">\\(n\\)</span> 个点 <span class=\"math inline\">\\(m\\)</span> 条边的有向无环图，再给定 <span class=\"math inline\">\\(k\\)</span> 条路径，每条路径长度为 <span class=\"math inline\">\\(l_i\\)</span>，一条合法路径不包含这 <span class=\"math inline\">\\(k\\)</span> 条路径。</p>\r\n<p>对于 <span class=\"math inline\">\\(i \\in [2,n]\\)</span>，求 <span class=\"math inline\">\\(1\\rightarrow i\\)</span> 的合法路径条数。</p>\r\n<p><span class=\"math inline\">\\(n,m,\\sum_{i=1}^kl_i \\le 10^5\\)</span></p>\r\n</blockquote>\r\n<h3 id=\"sol-1-2\">Sol 1</h3>\r\n<p>首先把所有边反向，就转化成了求 <span class=\"math inline\">\\(i\\rightarrow 1\\)</span> 的合法路径条数。</p>\r\n<p>对于边 <span class=\"math inline\">\\((u,v)\\)</span>，标记它的权值为 <span class=\"math inline\">\\(v\\)</span>，设 <span class=\"math inline\">\\(T_i\\)</span> 表示 <span class=\"math inline\">\\(i\\rightarrow 1\\)</span> 所有合法路径组成的 <code>trie</code>，考虑怎么按拓扑序求出每一个 <span class=\"math inline\">\\(T_u\\)</span>，对于边 <span class=\"math inline\">\\((u,v)\\)</span>，<span class=\"math inline\">\\(T_v\\)</span> 是已经求过了，把 <span class=\"math inline\">\\(T_v\\)</span> 复制到根的儿子，但这样会有一些以 <span class=\"math inline\">\\(u\\)</span> 为起点的不合法路径，需要删除这些路径：从 <span class=\"math inline\">\\(T_u\\)</span> 的根出发沿着不合法路径走，把以终点为根的子树删除即可。<span class=\"math inline\">\\(u\\)</span> 的答案就是 <span class=\"math inline\">\\(T_u\\)</span> 的叶子个数。</p>\r\n<p>由于 <span class=\"math inline\">\\(T_u\\)</span> 非常大，当然不能直接存下来，可行的方法是用可持久化的 <code>trie</code>，对于边 <span class=\"math inline\">\\((u,v)\\)</span>，只需要从 <span class=\"math inline\">\\(T_u\\)</span> 的根向 <span class=\"math inline\">\\(T_v\\)</span> 连一条边就行了，而不用复制整棵 <span class=\"math inline\">\\(T_v\\)</span>，删除子树也只需要对路径上的结点建新版本。</p>\r\n<p>一个问题是儿子列表的维护，如果用链表维护的话，删除子树时新建的结点需要从原版本复制整个链表，复杂度可能达到 <span class=\"math inline\">\\(O(n^2)\\)</span>。</p>\r\n<p>用主席树维护儿子列表就可以 <span class=\"math inline\">\\(O(n\\log n)\\)</span> 地新建结点。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n\\log n)\\)</span>。</p>\r\n<h3 id=\"sol-2-2\">Sol 2</h3>\r\n<p>对所有路径建 <code>AC</code> 自动机，不难想到一个 <span class=\"math inline\">\\(O(n^2)\\)</span> 状态的 <code>DP</code>，设 <span class=\"math inline\">\\(f_{i,u}\\)</span> 表示在原图中走到 <span class=\"math inline\">\\(i\\)</span>，<code>AC</code> 自动机上走到 <code>u</code>，且没有经过 <code>AC</code> 自动机上终止结点的路径条数。</p>\r\n<p>由于 <code>AC</code> 自动机上的点对应唯一原图中的点的，所以 <code>DP</code> 状态定义成 <span class=\"math inline\">\\(f_u\\)</span> 就可以转移了。</p>\r\n<p>由于建 <code>AC</code> 自动机需要主席树，复杂度 <span class=\"math inline\">\\(O(n\\log n)\\)</span>。</p>\r\n<h3 id=\"zoj3390\">ZOJ3390</h3>\r\n<blockquote>\r\n<p>对于两棵树 <span class=\"math inline\">\\(T_1,T_2\\)</span>，定义 <span class=\"math inline\">\\(T_1+T_2\\)</span> 表示把根合并，<span class=\"math inline\">\\(T_1\\cdot T_2\\)</span> 表示把 <span class=\"math inline\">\\(T_1\\)</span> 中每个结点换成 <span class=\"math inline\">\\(T_2\\)</span>，<span class=\"math inline\">\\(T_1=T_2\\)</span> 表示树同构。</p>\r\n<p>给定树 <span class=\"math inline\">\\(A,B,C\\)</span>，求 <span class=\"math inline\">\\(X,Y\\)</span> 满足 <span class=\"math inline\">\\(AX+BY=C\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(|A|,|B|,|C| \\le 10^5\\)</span></p>\r\n</blockquote>\r\n<p>设 <span class=\"math inline\">\\(height(T)\\)</span> 表示 <span class=\"math inline\">\\(T\\)</span> 的树高（最深叶子到根的距离）。</p>\r\n<p>可以发现 <span class=\"math inline\">\\(height(T_1+T_2)=\\max(height(T_1),height(T_2)),height(T_1\\cdot T_2)=height(T_1)+height(T_2)\\)</span>。</p>\r\n<p>那么 <span class=\"math inline\">\\(\\max(height(A)+height(X),height(B)+height(Y))=height(C)\\)</span>，假设 <span class=\"math inline\">\\(height(A)+height(X)=height(C)\\)</span>（另一种情况是一样的）。</p>\r\n<p>这样就知道了 <span class=\"math inline\">\\(height(X)\\)</span>，考虑怎么求 <span class=\"math inline\">\\(X\\)</span>，很简单，假设 <span class=\"math inline\">\\(u\\)</span> 为 <span class=\"math inline\">\\(C\\)</span> 中最深叶子的 <span class=\"math inline\">\\(height(X)\\)</span> 级祖先，以 <span class=\"math inline\">\\(u\\)</span> 为根的子树就是 <span class=\"math inline\">\\(X\\)</span>，这样就知道了 <span class=\"math inline\">\\(AX\\)</span>，然后就可以求出 <span class=\"math inline\">\\(BY\\)</span>，再用类似的方法就可以求出 <span class=\"math inline\">\\(Y\\)</span> 了。</p>\r\n<p>虽然思路很简单，但是有一定实现难度，求 <span class=\"math inline\">\\(BY\\)</span> 时树的“减法“，以及判定答案是否合法都需要用到树哈希。</p>\r\n<p>树哈希公式： <span class=\"math display\">\\[\r\nf_u=1+\\sum_{v\\in son(u)}f_v\\cdot \\text{prime}(size_v)\r\n\\]</span> 其中 <span class=\"math inline\">\\(\\text{prime}(i)\\)</span> 表示第 <span class=\"math inline\">\\(i\\)</span> 个质数。</p>\r\n<p><strong>注：</strong>对于两棵大小不同的树 <span class=\"math inline\">\\(T_1,T_2\\)</span>，<span class=\"math inline\">\\(f_{T_1}=f_{T_2}\\)</span> 是可能的，因此哈希应当和子树大小捆绑在一起。</p>\r\n<p><code>Generator</code> ：参数 <span class=\"math inline\">\\(T,A,B,C,D\\)</span> 可调，分别表示数据组数和树 <span class=\"math inline\">\\(A,X,B,Y\\)</span> 的大小。</p>\r\n<details>\r\n<summary>\r\n<span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span>\r\n</summary>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eb emplace_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mp make_pair</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SZ(x) int((x).size())</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l + r) / 2)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lc o * 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rc o * 2 + 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lch l, mid, lc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rch mid + 1, r, rc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> cmi(a, b) (a = min(a, b))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> cma(a, b) (a = max(a, b))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lb lower_bound</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ub upper_bound</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> bs binary_search</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pop __builtin_popcount</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> llpop __builtin_popcountll</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ctz __builtin_ctz</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> llctz __builtin_ctzll</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clz __builtin_clz</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> llclz __builtin_clzll</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> par __builtin_parity</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> llpar __builtin_parityll</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> lf = <span class=\"keyword\">double</span>;</span><br><span class=\"line\"><span class=\"comment\">// using P = pair&lt;int, int&gt;;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> V = vector&lt;<span class=\"keyword\">int</span>&gt;;</span><br><span class=\"line\"><span class=\"comment\">// using cmp = complex&lt;lf&gt;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">gen</span><span class=\"params\">(ll x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ll k = <span class=\"number\">0x9ddfea08eb382d69</span>ull;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">3</span>) x *= k, x ^= x &gt;&gt; <span class=\"number\">47</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x * k;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rnd</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> ll s = <span class=\"built_in\">time</span>(<span class=\"number\">0</span>) + (ll)<span class=\"keyword\">new</span> <span class=\"keyword\">char</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (s += <span class=\"built_in\">gen</span>(s)) &amp; INT_MAX;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">V <span class=\"title\">tmul</span><span class=\"params\">(V a, V b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = a.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>, m = b.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>, su = n;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, <span class=\"number\">2</span>, m) a.<span class=\"built_in\">pb</span>(b[j] == <span class=\"number\">1</span> ? i : b[j] + su - <span class=\"number\">1</span>);</span><br><span class=\"line\">        su += m - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">V <span class=\"title\">tplus</span><span class=\"params\">(V a, V b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = a.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>, m = b.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(j, <span class=\"number\">2</span>, m) a.<span class=\"built_in\">pb</span>(b[j] == <span class=\"number\">1</span> ? <span class=\"number\">1</span> : b[j] + n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">5</span>, A = <span class=\"number\">5</span>, B = <span class=\"number\">5</span>, C = <span class=\"number\">5</span>, D = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> T = <span class=\"number\">100000</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, T);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(kase, <span class=\"number\">1</span>, T) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = <span class=\"built_in\">rnd</span>() % A + <span class=\"number\">1</span>, b = <span class=\"built_in\">rnd</span>() % B + <span class=\"number\">1</span>, c = <span class=\"built_in\">rnd</span>() % C + <span class=\"number\">1</span>, d = <span class=\"built_in\">rnd</span>() % D + <span class=\"number\">1</span>;</span><br><span class=\"line\">        V t1&#123;<span class=\"number\">0</span>&#125;, t2&#123;<span class=\"number\">0</span>&#125;, t3&#123;<span class=\"number\">0</span>&#125;, t4&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> get = [](V&amp; t, <span class=\"keyword\">int</span> n) &#123; <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) t.<span class=\"built_in\">pb</span>(i &gt; <span class=\"number\">1</span> ? <span class=\"built_in\">rnd</span>() % (i - <span class=\"number\">1</span>) + <span class=\"number\">1</span> : <span class=\"number\">0</span>); &#125;;</span><br><span class=\"line\">        <span class=\"built_in\">get</span>(t1, a), <span class=\"built_in\">get</span>(t2, b), <span class=\"built_in\">get</span>(t3, c), <span class=\"built_in\">get</span>(t4, d);</span><br><span class=\"line\">        V t5 = <span class=\"built_in\">tplus</span>(<span class=\"built_in\">tmul</span>(t1, t2), <span class=\"built_in\">tmul</span>(t3, t4));</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d %llu\\n&quot;</span>, a, c, t5.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> prt = [](V&amp; v) &#123; <span class=\"built_in\">For</span>(i, <span class=\"number\">1</span>, v.<span class=\"built_in\">size</span>()) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, v[i]); <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>); &#125;;</span><br><span class=\"line\">        <span class=\"built_in\">prt</span>(t1), <span class=\"built_in\">prt</span>(t3), <span class=\"built_in\">prt</span>(t5);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n</details>\r\n<p><code>Special judge</code>：假设保存为 <code>checker.cpp</code>，编译后在命令行中使用：<code>checker &lt;input-file&gt; &lt;output-file&gt;</code>，答案正确返回值为 <span class=\"math inline\">\\(0\\)</span>，否则返回值为 <span class=\"math inline\">\\(1\\)</span>，输出为第一组出错的数据。</p>\r\n<details>\r\n<summary>\r\n<span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span>\r\n</summary>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eb emplace_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mp make_pair</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fi first </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> se second</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> all(x) (x).begin(), (x).end()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SZ(x) int((x).size())</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l + r) / 2)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lc o * 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rc o * 2 + 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lch l, mid, lc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rch mid + 1, r, rc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> cmi(a, b) (a = min(a, b))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> cma(a, b) (a = max(a, b))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lb lower_bound</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ub upper_bound</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> bs binary_search</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pop __builtin_popcount</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> llpop __builtin_popcountll</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ctz __builtin_ctz</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> llctz __builtin_ctzll</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clz __builtin_clz</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> llclz __builtin_clzll</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> par __builtin_parity</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> llpar __builtin_parityll</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> lf = <span class=\"keyword\">double</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> P = pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;;</span><br><span class=\"line\"><span class=\"keyword\">using</span> V = vector&lt;<span class=\"keyword\">int</span>&gt;;</span><br><span class=\"line\"><span class=\"comment\">// using cmp = complex&lt;lf&gt;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">5</span>, M = <span class=\"number\">1299709</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[M + <span class=\"number\">5</span>], pid, prm[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">V <span class=\"title\">tmul</span><span class=\"params\">(V a, V b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = a.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>, m = b.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>, su = n;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, <span class=\"number\">2</span>, m) a.<span class=\"built_in\">pb</span>(b[j] == <span class=\"number\">1</span> ? i : b[j] + su - <span class=\"number\">1</span>);</span><br><span class=\"line\">        su += m - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">V <span class=\"title\">tplus</span><span class=\"params\">(V a, V b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = a.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>, m = b.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(j, <span class=\"number\">2</span>, m) a.<span class=\"built_in\">pb</span>(b[j] == <span class=\"number\">1</span> ? <span class=\"number\">1</span> : b[j] + n - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">P <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">const</span> V G[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">P <span class=\"title\">re</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v : G[u]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> [h, sz] = <span class=\"built_in\">dfs</span>(v, G);</span><br><span class=\"line\">        re.fi = (re.fi + (ll)h * prm[sz]) % <span class=\"number\">999999937</span>;</span><br><span class=\"line\">        re.se += sz;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> re;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Hash</span><span class=\"params\">(<span class=\"keyword\">const</span> V&amp; t)</span> </span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt; G[N];</span><br><span class=\"line\">    <span class=\"built_in\">For</span>(i, <span class=\"number\">1</span>, t.<span class=\"built_in\">size</span>()) G[t[i]].<span class=\"built_in\">pb</span>(i);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>, G).fi;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">(FILE* f)</span> </span>&#123; <span class=\"keyword\">int</span> x; <span class=\"keyword\">return</span> <span class=\"built_in\">fscanf</span>(f, <span class=\"string\">&quot;%d&quot;</span>, &amp;x) == <span class=\"number\">1</span> ? x : <span class=\"number\">-1</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, M) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!f[i]) prm[++pid] = i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; i * prm[j] &lt;= M; j++) &#123;</span><br><span class=\"line\">            f[i * prm[j]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i % prm[j] == <span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    FILE *in = <span class=\"built_in\">fopen</span>(argv[<span class=\"number\">1</span>], <span class=\"string\">&quot;r&quot;</span>), *out = <span class=\"built_in\">fopen</span>(argv[<span class=\"number\">2</span>], <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> T = <span class=\"built_in\">read</span>(in); T--;) &#123;</span><br><span class=\"line\">        V t1&#123;<span class=\"number\">0</span>&#125;, t2&#123;<span class=\"number\">0</span>&#125;, t3&#123;<span class=\"number\">0</span>&#125;, t4&#123;<span class=\"number\">0</span>&#125;, t5&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> get = [](FILE* f, V&amp; t, <span class=\"keyword\">int</span> n) &#123; <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) t.<span class=\"built_in\">pb</span>(<span class=\"built_in\">read</span>(f)); &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = <span class=\"built_in\">read</span>(in), b = <span class=\"built_in\">read</span>(in), c = <span class=\"built_in\">read</span>(in);</span><br><span class=\"line\">        <span class=\"built_in\">get</span>(in, t1, a), <span class=\"built_in\">get</span>(in, t3, b), <span class=\"built_in\">get</span>(in, t5, c);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> d = <span class=\"built_in\">read</span>(out), e = <span class=\"built_in\">read</span>(out);</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> err = [&amp;]() &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1\\n%d %d %d\\n&quot;</span>, a, b, c);</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, a) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, t1[i]); <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, b) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, t3[i]); <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, c) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, t5[i]);</span><br><span class=\"line\">            <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!~d) <span class=\"built_in\">err</span>();</span><br><span class=\"line\">        <span class=\"built_in\">get</span>(out, t2, d), <span class=\"built_in\">get</span>(out, t4, e);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((ll)a * d + (ll)b * e != c &amp;&amp; <span class=\"built_in\">Hash</span>(<span class=\"built_in\">tplus</span>(<span class=\"built_in\">tmul</span>(t1, t2), <span class=\"built_in\">tmul</span>(t3, t4))) != <span class=\"built_in\">Hash</span>(t5)) <span class=\"built_in\">err</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n</details>\r\n<h3 id=\"izho-2020-d1t3\">IZhO 2020 D1T3</h3>\r\n<blockquote>\r\n<p><a href=\"codeforces.com/group/Uo1lq8ZyWf/contest/265564\">题目链接</a></p>\r\n<p>给定长度为 <span class=\"math inline\">\\(n\\)</span> 的序列 <span class=\"math inline\">\\(A\\)</span>，问有多少三元组 <span class=\"math inline\">\\((i,j,k)\\)</span> 满足 <span class=\"math inline\">\\(i\\le j&lt;k\\)</span> 且 <span class=\"math inline\">\\([i,j]\\)</span> 和 <span class=\"math inline\">\\([j+1,k]\\)</span> 两个区间中数的集合相同。</p>\r\n<p><span class=\"math inline\">\\(n \\le 2\\cdot 10^5\\)</span></p>\r\n</blockquote>\r\n<p>记 <span class=\"math inline\">\\(prev_i\\)</span> 表示 <span class=\"math inline\">\\(A_i\\)</span> 上一次出现的位置，<span class=\"math inline\">\\(next_i\\)</span> 表示 <span class=\"math inline\">\\(A_i\\)</span> 下一次出现的位置。</p>\r\n<p>三元组 <span class=\"math inline\">\\((i,j,k)\\)</span> 合法的充要条件为：</p>\r\n<ul>\r\n<li>区间 <span class=\"math inline\">\\([j+1,k]\\)</span> 中的数都在 <span class=\"math inline\">\\([i,j]\\)</span> 中出现，即 <span class=\"math inline\">\\(i \\le \\min prev_{j+1\\cdots i}\\)</span>，相当于 <span class=\"math inline\">\\(i\\)</span> 有个上界 <span class=\"math inline\">\\(R_{j,k}=\\min prev_{j+1\\cdots k}\\)</span>。</li>\r\n<li>区间 <span class=\"math inline\">\\([i,j]\\)</span> 中的数都在 <span class=\"math inline\">\\([j+1,k]\\)</span> 中出现，即 <span class=\"math inline\">\\(\\max next_{i\\cdots j}\\le k\\)</span>，相当于 <span class=\"math inline\">\\(i\\)</span> 有个下界 <span class=\"math inline\">\\(L_{j,k}\\)</span>，其中 <span class=\"math inline\">\\(L_{j,k}\\)</span> 是最小的 <span class=\"math inline\">\\(i\\)</span> 满足 <span class=\"math inline\">\\(\\max next_{i\\cdots j}\\le k\\)</span>。</li>\r\n</ul>\r\n<p>那么 <span class=\"math inline\">\\((j,k)\\)</span> 的贡献就是 <span class=\"math inline\">\\(\\max(R_{j,k}-L_{j,k}+1,0)\\)</span>，考虑只枚举 <span class=\"math inline\">\\(k\\)</span>，用数据结构动态维护 <span class=\"math inline\">\\(\\sum_{j=1}^{k-1}\\max(R_{j,k}-L_{j,k}+1,0)\\)</span>。</p>\r\n<p>先考虑 <span class=\"math inline\">\\(L_{j,k}\\)</span> 和 <span class=\"math inline\">\\(R_{j,k}\\)</span> 分别怎么维护。</p>\r\n<p>对于 <span class=\"math inline\">\\(R_{j,k}=\\min prev_{j+1\\cdots k}\\)</span>，这是 <span class=\"math inline\">\\(prev\\)</span> 数组上的后缀 <span class=\"math inline\">\\(\\min\\)</span>，当 <span class=\"math inline\">\\(k\\rightarrow k+1\\)</span> 时，<span class=\"math inline\">\\(R_{j,k}\\)</span> 发生的改变是一个后缀变成了 <span class=\"math inline\">\\(prev_{k+1}\\)</span>，具体可以用单调栈求出这个后缀，然后区间赋值。</p>\r\n<p>对于 <span class=\"math inline\">\\(L_{j,k}\\)</span>，直接分析 <span class=\"math inline\">\\(k\\rightarrow k+1\\)</span> 不太行，换一个角度考虑对于一个 <span class=\"math inline\">\\(j\\)</span>，<span class=\"math inline\">\\(L_{j,k}\\)</span> 和 <span class=\"math inline\">\\(k\\)</span> 的关系，<span class=\"math inline\">\\(\\max next_{i\\cdots j}\\)</span> 是 <span class=\"math inline\">\\(next\\)</span> 数组上的后缀 <span class=\"math inline\">\\(\\max\\)</span>，将 <span class=\"math inline\">\\(next_{1\\cdots j}\\)</span> 依次插入单调栈，设单调栈中元素分别为 <span class=\"math inline\">\\(next_{i_1},next_{i_2},next_{i_3},\\cdots,next_{i_k}\\)</span>：</p>\r\n<ul>\r\n<li>当 <span class=\"math inline\">\\(k\\in[j+1,next_{i_k}-1]\\)</span> 时，<span class=\"math inline\">\\(L_{j,k}=\\infty\\)</span>。</li>\r\n<li>当 <span class=\"math inline\">\\(k\\in [next_{i_k},next_{i_{k-1}-1}]\\)</span>，<span class=\"math inline\">\\(L_{j,k}=i_{k-1}+1\\)</span>。</li>\r\n<li><span class=\"math inline\">\\(\\cdots\\)</span></li>\r\n<li>当 <span class=\"math inline\">\\(k\\in [next_{i_1},n]\\)</span>，<span class=\"math inline\">\\(L_{j,k}=1\\)</span>。</li>\r\n</ul>\r\n<p>综上，单调栈元素 <span class=\"math inline\">\\(i_x\\)</span> 意味着当 <span class=\"math inline\">\\(k\\in [next_{i_x},next_{i_{x-1}}-1]\\)</span>，<span class=\"math inline\">\\(L_{j,k}=i_{x-1}+1\\)</span>，假设插入 <span class=\"math inline\">\\(next_y\\)</span> 后 <span class=\"math inline\">\\(next_{i_x}\\)</span> 被弹掉了，那么当 <span class=\"math inline\">\\(j\\in [i_x,y-1],k\\in [next_{i_x},next_{i_{x-1}}-1]\\)</span> 时，<span class=\"math inline\">\\(L_{j,k}=i_{x-1}+1\\)</span>，相当于 <span class=\"math inline\">\\(k\\)</span> 从 <span class=\"math inline\">\\(next_{i_x}-1\\rightarrow next_{i_x}\\)</span> 时，对 <span class=\"math inline\">\\(L_{i_x\\cdots y-1,k}\\)</span> 进行区间赋值为 <span class=\"math inline\">\\(i_x+1\\)</span>。每个单调栈元素意味着一次区间赋值，所以只需要 <span class=\"math inline\">\\(n\\)</span> 次区间赋值就可以维护 <span class=\"math inline\">\\(L_{j,k}\\)</span>。</p>\r\n<p>但维护的是 <span class=\"math inline\">\\(\\sum_{j=1}^{k-1}\\max(R_{j,k}-L_{j,k}+1,0)\\)</span>，相当于夹在两条递增折线之间的面积。由于 <span class=\"math inline\">\\(L_{j,k}\\)</span> 和 <span class=\"math inline\">\\(R_{j,k}\\)</span> 都是随着 <span class=\"math inline\">\\(k\\)</span> 增大而减小的，所以每次赋值都是减小。比如将 <span class=\"math inline\">\\(R_{l\\cdots r,k}\\)</span> 改为 <span class=\"math inline\">\\(v\\)</span>，如果 <span class=\"math inline\">\\(v \\le \\min L_{l\\cdots r,k}\\)</span>，这一段的面积就是 <span class=\"math inline\">\\(0\\)</span>，如果 <span class=\"math inline\">\\(v \\ge \\max L_{l\\cdots r,k}\\)</span>，这一段的面积就是 <span class=\"math inline\">\\(\\sum_{j=l}^rR_{j,k}-\\sum_{j=l}^rL_{j,k}+(r-l+1)\\)</span>，否则可以二分一个分界点 <span class=\"math inline\">\\(x\\)</span>，使得 <span class=\"math inline\">\\(\\forall j \\in[l,x], v\\ge L_{j,k},\\forall j\\in[x+1,r],v\\le L_{j,k}\\)</span>，分界点左右两段分别对应上述两种情况。所以只要维护了 <span class=\"math inline\">\\(L_{j,k},R_{j,k}\\)</span> 的区间 <span class=\"math inline\">\\(\\min,\\max\\)</span> 和 <span class=\"math inline\">\\(sum\\)</span> 就可以维护 <span class=\"math inline\">\\(\\sum_{j=1}^{k-1}\\max(R_{j,k}-L_{j,k}+1,0)\\)</span> 了。</p>\r\n<p>在实现上并不需要求 <span class=\"math inline\">\\(x\\)</span>，假设当前要将 <span class=\"math inline\">\\(L_{ql\\cdots qr,k}\\)</span> 赋值为 <span class=\"math inline\">\\(v\\)</span>，当前线段树结点区间为 <span class=\"math inline\">\\([l,r]\\)</span>，一般区间赋值是在 <span class=\"math inline\">\\(ql\\le l\\land r \\le qr\\)</span> 时停止递归，这里把条件改成 <span class=\"math inline\">\\(ql\\le l\\land r \\le qr \\land (v \\le \\min L_{l\\cdots r,k}\\lor v \\ge \\max L_{l\\cdots r,k})\\)</span> 才可以方便地维护 <span class=\"math inline\">\\(\\sum_{j=1}^{k-1}\\max(R_{j,k}-L_{j,k}+1,0)\\)</span>，由于只有一个分界点，所以复杂度不变。</p>\r\n<p>复杂度 <span class=\"math inline\">\\(O(n\\log n)\\)</span>，实现难度较大，附上代码：</p>\r\n<details>\r\n<summary>\r\n<span style=\"font-size: large; font-weight: bold; color: rgb(33,150,243);\">查看代码</span>\r\n</summary>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mem(a, b) memset(a, b, sizeof a)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> For(i, l, r) for(int i = (l), i##e = (r); i &lt; i##e; i++)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> pb push_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> eb emplace_back</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mid ((l + r) / 2)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lc o * 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rc o * 2 + 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> lch l, mid, lc</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rch mid + 1, r, rc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, a[N], pre[N], nxt[N], L[N];</span><br><span class=\"line\">vector&lt;tuple&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; vl[N], vr[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> tagL[N * <span class=\"number\">4</span>], minL[N * <span class=\"number\">4</span>], maxL[N * <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> tagR[N * <span class=\"number\">4</span>], minR[N * <span class=\"number\">4</span>], maxR[N * <span class=\"number\">4</span>];</span><br><span class=\"line\">ll sum[N * <span class=\"number\">4</span>], sumL[N * <span class=\"number\">4</span>], sumR[N * <span class=\"number\">4</span>], as;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushUp</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    sum[o] = sum[lc] + sum[rc];</span><br><span class=\"line\">    sumL[o] = sumL[lc] + sumL[rc];</span><br><span class=\"line\">    sumR[o] = sumR[lc] + sumR[rc];</span><br><span class=\"line\">    minL[o] = <span class=\"built_in\">min</span>(minL[lc], minL[rc]);</span><br><span class=\"line\">    minR[o] = <span class=\"built_in\">min</span>(minR[lc], minR[rc]);</span><br><span class=\"line\">    maxL[o] = <span class=\"built_in\">max</span>(maxL[lc], maxL[rc]);</span><br><span class=\"line\">    maxR[o] = <span class=\"built_in\">max</span>(maxR[lc], maxR[rc]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushL</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    tagL[o] = minL[o] = maxL[o] = v, sumL[o] = v * (r - l + <span class=\"number\">1ll</span>);</span><br><span class=\"line\">    sum[o] = <span class=\"built_in\">max</span>(sumR[o] - sumL[o], <span class=\"number\">0ll</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushR</span><span class=\"params\">(<span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    tagR[o] = minR[o] = maxR[o] = v, sumR[o] = v * (r - l + <span class=\"number\">1ll</span>);</span><br><span class=\"line\">    sum[o] = <span class=\"built_in\">max</span>(sumR[o] - sumL[o], <span class=\"number\">0ll</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushDown</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(~tagL[o]) <span class=\"built_in\">pushL</span>(tagL[o], lch), <span class=\"built_in\">pushL</span>(tagL[o], rch), tagL[o] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(~tagR[o]) <span class=\"built_in\">pushR</span>(tagR[o], lch), <span class=\"built_in\">pushR</span>(tagR[o], rch), tagR[o] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updL</span><span class=\"params\">(<span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R &amp;&amp; (v &lt;= minR[o] || v &gt;= maxR[o])) <span class=\"keyword\">return</span> <span class=\"built_in\">pushL</span>(v, l, r, o);</span><br><span class=\"line\">    <span class=\"built_in\">pushDown</span>(l, r, o);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L &lt;= mid) <span class=\"built_in\">updL</span>(L, R, v, lch);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(R &gt; mid) <span class=\"built_in\">updL</span>(L, R, v, rch);</span><br><span class=\"line\">    <span class=\"built_in\">pushUp</span>(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">updR</span><span class=\"params\">(<span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R &amp;&amp; (v &gt;= maxL[o] || v &lt;= minL[o])) <span class=\"keyword\">return</span> <span class=\"built_in\">pushR</span>(v, l, r, o);</span><br><span class=\"line\">    <span class=\"built_in\">pushDown</span>(l, r, o);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L &lt;= mid) <span class=\"built_in\">updR</span>(L, R, v, lch);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(R &gt; mid) <span class=\"built_in\">updR</span>(L, R, v, rch);</span><br><span class=\"line\">    <span class=\"built_in\">pushUp</span>(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) L[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) pre[i] = L[a[i]], L[a[i]] = i;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) L[i] = n + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, n, <span class=\"number\">1</span>) nxt[i] = L[a[i]], L[a[i]] = i;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>&amp; j = L[i] = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(; j &amp;&amp; pre[j] &gt;= pre[i]; j = L[j]);</span><br><span class=\"line\">        vr[i].<span class=\"built_in\">eb</span>(<span class=\"built_in\">max</span>(j, <span class=\"number\">1</span>), i - <span class=\"number\">1</span>, pre[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>&amp; j = L[i] = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(; j &amp;&amp; nxt[j] &lt;= nxt[i]; j = L[j])</span><br><span class=\"line\">            vl[nxt[j]].<span class=\"built_in\">eb</span>(<span class=\"built_in\">max</span>(j, <span class=\"number\">1</span>), i - <span class=\"number\">1</span>, L[j]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">mem</span>(tagL, <span class=\"number\">63</span>), <span class=\"built_in\">mem</span>(tagR, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [l, r, v] : vl[i]) <span class=\"built_in\">updL</span>(l, r, v, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [l, r, v] : vr[i]) <span class=\"built_in\">updR</span>(l, r, v, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</span><br><span class=\"line\">        as += sum[<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; as;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n</details>\r\n<h3 id=\"cf566c\">CF566C</h3>\r\n<blockquote>\r\n<p>给定一棵 <span class=\"math inline\">\\(n\\)</span> 个点的带权树，每个点住了 <span class=\"math inline\">\\(w_i\\)</span> 个人，一个人从 <span class=\"math inline\">\\(u\\)</span> 到 <span class=\"math inline\">\\(v\\)</span> 的花费为距离的 <span class=\"math inline\">\\(1.5\\)</span> 次方。</p>\r\n<p>定义 <span class=\"math inline\">\\(f(u)\\)</span> 表示所有人到点 <span class=\"math inline\">\\(u\\)</span> 的总花费，求 <span class=\"math inline\">\\(f(u)\\)</span> 最小的点。</p>\r\n<p><span class=\"math inline\">\\(n \\le 2\\cdot 10^5\\)</span></p>\r\n</blockquote>\r\n<p>首先研究 <span class=\"math inline\">\\(f(u)\\)</span> 有什么性质，假设花费等于距离的话 <span class=\"math inline\">\\(f(u)\\)</span> 就是单峰的，因此猜想 <span class=\"math inline\">\\(f(u)\\)</span> 是单蜂的。</p>\r\n<p>证明：由于 <span class=\"math inline\">\\(w_v\\text{dis}^{1.5}_v(u)\\)</span> 是下凸函数，所以它们加起来也是下凸函数。</p>\r\n<p>回忆实数上的单蜂函数是怎么求最值的：当前确定最优点在 <span class=\"math inline\">\\([l,r]\\)</span> 中，在 <span class=\"math inline\">\\(\\frac {l+r}2\\)</span> 处求导来确定最远点在 <span class=\"math inline\">\\(\\frac {l+r}2\\)</span> 左边还是右边，然后将范围减半。</p>\r\n<p>考虑怎么在树上实现这个过程：求出整棵树的重心，通过确定最优解在重心的哪个子树来将范围减半。</p>\r\n<p>怎么确定最优解在哪棵子树？把 <span class=\"math inline\">\\(f(u)\\)</span> 的定义域扩大，<span class=\"math inline\">\\(u\\)</span> 可以是一条边上的位置。求出重心向各个方向的导数，由于 <span class=\"math inline\">\\(f(u)\\)</span> 单峰，所以最多有一个导数小于 <span class=\"math inline\">\\(0\\)</span>，这是最优解的方向。假设最优解的方向沿着边 <span class=\"math inline\">\\((u,v)\\)</span>，由于 <span class=\"math inline\">\\(f(u)\\)</span> 的最优点可能在 <span class=\"math inline\">\\((u,v)\\)</span> 上，所以 <span class=\"math inline\">\\(v\\)</span> 不一定比 <span class=\"math inline\">\\(u\\)</span> 优，应该把经过的所有点取个最小值作为答案。</p>\r\n<p>根 <span class=\"math inline\">\\(u\\)</span> 向儿子 <span class=\"math inline\">\\(v\\)</span> 方向的导数为： <span class=\"math display\">\\[\r\n\\frac 32\\left(\\sum_{i=1}^nw_i\\sqrt{\\text{dis}(i,u)}-2\\sum_{i\\in \\text{subree}(v)}w_i\\sqrt{\\text{dis}(i,u)}\\right)\r\n\\]</span> 可以 <span class=\"math inline\">\\(O(n)\\)</span> 求出 <span class=\"math inline\">\\(u\\)</span> 向每个儿子的导数，复杂度 <span class=\"math inline\">\\(O(n\\log n)\\)</span>。</p>\r\n"},{"title":"一言（持续更新）","date":"2021-03-13T13:29:55.000Z","updated":"2021-03-13T13:29:55.000Z","_content":"尝试 ```Ctrl + F``` 一下您看过的动漫吧。\n\n- **与众不同的生活方式很累人呢，因为找不到借口。** —— 幸运星\n- **面对就好，去经历就好。** —— 花伞菌\n- **将愿望倾入不愿忘却的回忆中……** —— ef-a tale of memories\n- **美好的人眼里映出的世界也是美好的。** —— ARIA\n- **看似美好的东西，往往藏着陷阱。** —— 只有神知道的世界\n- **天空是连着的，如果我们也能各自发光的话，无论距离有多远，都能看到彼此努力的身影。** —— 龙虎斗\n- **恋ではなく、爱でもなく、もっとずっと 深く重い。** —— sweet   pool\n- **花开花落，再灿烂的星光也会消失。** —— 圣斗士星矢\n- **挡着在我们面前的是巨大庞然的人生，阻隔在我们中间的是广阔无际的时间，对于他们，我们无能为力……** —— 秒速五厘米\n- **我是一个经常笑的人，可我不是经常开心的人。** —— 未闻花名\n- **努力是不会背叛自己的，虽然梦想有时会背叛自己。** —— 我的青春恋爱物语果然有问题\n- **人经历风浪是会变得更强，可是船不同，日积月累的只有伤痛。** —— 海贼王\n- **真相只有一个！** —— 柯南\n- **用你的笑容去改变这个世界，别让这个世界改变了你的笑容。** —— 网络\n- **我有在反省，但我不后悔。** —— 物语系列\n- **我没有梦想，但是我能保护！** —— 假面骑士555\n- **或许只需一滴露水，便能守护这绽放的花朵。** —— 反叛的鲁鲁修\n- **我不会让任何人看到我软弱的一面。** —— 桔梗\n- **当你想做一件事，却无能为力的时候，是最痛苦的。** —— 高达SEED\n- **我的腿让我停下，可是心却不允许我那么做。** —— 钢之炼金术师\n- **我手中的魔法，是守护挚爱的力量，是坚定这个信念所必须的力量，我一定会拯救你的，无论在何时、何地。** —— 魔法少女奈叶\n- **比任何人都要了解自己，比任何人都要关爱自己。喜欢上这样的人，并没有什么奇怪的呢。** —— 初音岛\n- **像平常的你一样引发奇迹吧-** —— 魔法少女小圆\n- **既不回头，何必不忘；既然无缘，何须誓言；今日种种，似水无痕；明夕何夕，君已陌路。** —— 仙剑奇侠传\n- **可是就算我们通一千次短信，我们各自的心，大概也只会相互靠近一厘米吧。** —— 秒速5厘米\n- **所谓的言语，只有当对方听进去了才开始有意义啊。** —— 少年同盟\n- **如果还有来生 ，我无论如何都要来到你身边，我已经没有了其他想要追求的东西，因为没有比你更重要的了。** —— 秒速五厘米\n- **世界上没有一个人能代替另一个人。** —— 人型电脑天使心\n- **其实，恋爱这种东西，当你看上人家的那一刹那就已经失败了。** —— 秋之回忆\n- **隐约雷鸣，阴霾天空，即使天无雨，我亦留此地。** —— 言叶之庭\n- **就是因为你不好，才要留在你身边，给你幸福。** —— 哈尔的移动城堡\n- **微风摇曳着窗帘，夕阳斜射入教室，在那里鼓起勇气告白的少年。即使现在也能清晰地回想起她的声音「当朋友，不行吗？」** —— 果然我的青春恋爱喜剧搞错了\n- **少罗嗦，你还不如虫子呢！** —— 迷糊餐厅\n- **别人恋爱不成功，你连暗恋都不成功！** —— 灌篮高手\n- **就算只有六十亿分之一的机会，我们还是会邂逅。** —— Angel Beats!\n- **魔装少女就是本少爷！** —— 这是僵尸吗？\n- **无法飞翔的翅膀也是有意义的，因为它是曾经翱翔于天空所留下的珍贵回忆。** —— AIR\n- **勇气，就是即便害怕也会去做。** —— 原创\n- **如果我不会飞，那我就只是一只普通的猪。** —— 红猪\n- **要相信同伴，拯救同伴。** —— 绯弹的亚里亚\n- **男人许下的诺言就一定要遵守。** —— 海贼王\n- **那是，未满45秒的邂逅。** —— EF\n- **只要有想见面的人，自己就不再是孤单一人。** —— 夏目友人帐\n- **如果聚集负的感情，世界就会陷入负的洪流；反之聚集正的感情，世界就会循着正道而行。** —— 钢之炼金术师\n- **廉价的自尊、粗劣的傲气，无论哪个后生小辈都很重视这些东西。** —— 狼与香辛料\n- **人不能一个人活下去，不需要任何人的孤独和需要人但得不到的孤独是不一样的。** —— 邻座的怪同学\n- **一个人吃饭，太寂寞了。** —— 无头骑士异闻录\n- **欺骗世界，欺骗最初的你。** —— Steins;Gate\n- **(」?ω?)」うー！(／?ω?)／にゃー！** —— 潜行吧奈亚子\n- **世界上没有偶然，有的只是必然。** —— XXXHolic\n- **从小好女色的男人的想像力比不上狗。** —— 寒蝉鸣泣之时\n- **你愿意陪我走到地狱的底端吗？** —— 魔法禁书目录\n- **错的不是我， 错的是世界。** —— School Day\n- **和哥哥的便当比起来夜空的薯片就像大便一样！只会给我大便的大便夜空是笨蛋～笨蛋～** —— 我的朋友很少\n- **即使如此，我也有我想保护的世界！** —— 高达seed\n- **我很好奇！** —— 冰菓\n- **仍是那么熟悉的味道，只是用墓土和骨灰作成的身体，已经不再有体温。** —— 犬夜叉\n- **我是要成为海贼王的男人！** —— 海贼王\n- **做不到的话，不过就是一死 。但是，赢了就能活下去，要是不战斗就赢不了。** —— 进击的巨人\n- **忘记本身就是一件不可能的事。** —— 我们的存在\n- **我们的夏天仍未结束。** —— 王牌投手\n- **雨，何时停？** —— 秋之回忆\n- **在走廊上跌倒会流鼻血，在人生中跌倒会流眼泪。** —— 龙虎斗\n- **有被杀的觉悟，才有资格开枪。** —— 反叛的鲁路修\n- **已经无法回到过去了。也不知道将来会是什么模样。** —— 文学少女\n- **不要哀求，学会争取；若是如此，终有所获。** —— 交响诗篇\n- **リア充死ね！** —— 我的朋友很少\n- **拿着刀并且可以让人们变得幸福的只有料理人。** —— 假面骑士kabuto\n- **我会跟她结婚，并不是因为她是计算机，而是因为她就是她。同样的，我会喜欢你，也是因为你就是你。** —— 人型电脑天使心\n- **越是试着忘记，越是记得深刻。** —— 天空之城\n- **喜欢上你，爱上你，真是太好了，谢谢。** —— 龙虎斗\n- **我对普通的人类没有兴趣，你们只要是有外星人、未来人、异世界人、超能力者， 就尽管来找我吧！以上！** —— 凉宫春日的忧郁\n- **既然如此，就再努力一次吧。别在这里愁眉不展，也不要再自欺欺人，重新来过！** —— 某科学的超电磁炮\n- **若隐若现才是艺术！** —— 问题儿童来自异世界\n- **我想要握紧的并不是匕首或是什么，只不过是他的掌心而已。** —— 空之境界\n- **下一次重逢，将是何年何月？天空必将见证。** —— SOLA\n- **就连一直都无容身之地的我……也不是可以任意舍弃的生命。** —— 夏目友人帐\n- **所以，他们的祭典还没结束。** —— 我的青春恋爱物语果然有问题\n- **比自己，比梦想更重要的东西永远都存在着...** —— 钢之炼金术师\n- **选择道路的时候怎么犹豫都没有关系，但决定之后就一定要坚持到底！** —— 青之驱魔师\n- **煩い！煩い！煩い！** —— 灼眼的夏娜\n- **重要的是无论我们选择哪条路，都要担负起选择的责任。** —— 蜂蜜与四叶草\n- **因为无法再见面，所以要笑着说再见。** —— AIR\n- **无论乌云有多浓厚，星星也一定还在，只是暂时看不到了而已。** —— 电波女与青春男\n- **如果我拥有如同小狗一样的尾巴的话，肯定会高兴得遮掩不住地摇来摇去吧。** —— 秒速五厘米\n- **在我年轻的时候，不知道什么是恐惧，可偏偏是你的温柔，让我害怕。** —— 东京爱情故事\n- **你不会死的，因为我会保护你.** —— EVA\n- **只是相谈就会开心起来，沉浸在温柔的眼神当中，竭尽全力的思念，悄悄地奉献。** —— School Days\n- **我们虽然距离很远很远，非常非常的远，但是思念或许真的可以穿越时间和距离。** —— 星之声\n- **梦想是否无聊并不是别人来决定的，不管是什么样的梦想，自己拼命努力去追寻才是最重要的。** —— 守护甜心\n- **胜而不灭，霸而不辱，这才是真正的征服。** —— fate zero\n- **我相信十年后的八月，我们还能再相遇。** —— secret base ～君がくれたもの～\n- **相信十年后的八月，我们还会相遇。** —— 未闻花名\n- **你的心可以属于耶稣，但你的屁股永远属于陆战队！** —— 魔法少女陆战队\n- **看到的感受到的永远都不会消失永远都不会忘记，与各种各样的相遇一同永存。** —— 夏目友人帐\n- **我们走过风走过雨，就是没能走进彼此的内心。** —— 自分\n- **烦恼这东西，是只有活着的人，才有的特权哦。** —— 我们的存在\n- **当朋友是不需要什么资格的。** —— 全职猎人\n- **年华无多时，恋爱吧男子！** —— 源君物语\n- **求你，保护那孩子，消除灾厄，抹除祸事。哪怕??那是我自己……** —— 食灵\n- **如果你不能击败你的敌人，那么就加入他们。** —— 加菲猫\n- **我们都在命运之湖上荡舟划桨，波浪起伏着而我们无法逃脱孤航。但是假使我们迷失了方向，波浪将指引我们穿越另一天的曙光。** —— 死神\n- **我们所过的每个平凡的日常，也许就是连续发生的奇迹。** —— 日常\n- **最近困扰我的是小小的分别，总会带来一丝寂寞。短暂的相遇和分别那一分一秒的时间都让我想要无比珍惜。** —— 夏目友人帐\n- **倘若只是为了驱赶心中的寂寞，找谁都可以的。** —— 秒速5厘米\n- **即使从梦中醒来，还会有回忆留下。** —— AIR\n- **能够原谅女人的，才是男人。** —— 海贼王\n- **我会继续等着你，就算是一万二千年。** —— 创圣的大天使EVOL\n- **不管看到什么样的过去，都请不要迷失自己，不管你变成什么样子，我都是你的同伴。** —— angel beats\n- **悲伤教会了我喜悦。** —— 秋之回忆\n- **我到底要以怎么样的速度生活才能与你再次相遇？** —— 秒速五厘米\n- **我的船上没有手下，只有伙伴。** —— 海贼王\n- **就是因为抱有不现实的理想，所以才总是做出如此极端的事情！** —— 逆袭的夏亚\n- **要是因为烦恼很痛苦，就选择了轻松的选项，将来一定会后悔。** —— 樱花庄的宠物女孩\n- **呐，知道么，樱花飘落的速度，是每秒五厘米哦~** —— 秒速五厘米\n- **知道活着的痛苦处的人就能对人温柔，这和软弱是不一样的。** —— eva\n- **比起悲伤来说，无法分享快乐这件事，要更加的寂寞吧。** —— AIR\n- **如果你执意追寻着我的幻影，总有一天会被真正的我打败。** —— 棋魂\n- **乔巴，一个男人，有时候是不能逃避战斗的，尤其是当伙伴的梦想被人嘲笑的时候。** —— 海贼王\n- **你的那双手呢，是为了紧紧抓住什么而存在的哦。** —— 仰望半月的夜空\n- **去死两次！** —— 迷途猫\n- **世界は恋に落ちている。** —— 青春之旅OP（我的世界已坠入爱河）\n- **自身不先改变的话，一切都不会改变。** —— 银魂\n- **就算是对我抱有敌意的人，也是被某个人深爱着而降生在这个世界上的。** —— 罪恶王冠\n- **人生最糟糕的事，一个是饿肚子，一个是孤独。** —— 夏日大作战\n- **我不是萝莉控，是妹控啊！** —— 我的妹妹不可能那么可爱第二季\n- **呐，我们好像是，被宇宙和地球拆散的恋人似的。** —— 星之声\n- **一天吐槽太多次的话，梗也是会用完的。** —— 我的脑内恋爱选项\n- **自己的感觉，不说出来，别人也不会懂，如果不懂，就应该互相沟通。** —— 好想告诉你\n- **心，可是很重的。** —— 哈尔的移动城堡\n- **不能逃避，不能逃避，不能逃避，不能逃避……** —— EVA\n- **以盐水作配菜，糖水做主食，就有种奢侈的感觉呢。** —— 笨蛋测验召唤兽\n- **就算鼻血流尽，也不能放弃妄想。** —— 摇曳百合\n- **爱，其实很简单，困难的是去接受它。** —— 通灵王\n- **我们不应该根据背负的罪孽来选择道路，而应在选择的道路上背负自己的罪孽。** —— 空之境界\n- **只要微笑就可以了。** —— EVA\n- **因为我喜欢你，喜欢得想吃掉你啊！** —— 有顶天家族\n- **求求你，不要对我这么温柔！** —— 秒速五厘米\n- **我觉得你很幸福，因为你可以选择爱我或不爱我，而我只能选择爱你或更爱你。** —— School Days\n- **失去的东西虽然拿不回来，但是，忘记的事情是可以想起来的。** —— TOUCH\n- **你还是这么冷漠啊。不过，仅此而已的话，我是不会泄气的。** —— 银魂\n- **我能够允许你逃避过去，不过至少从现在或者明天开始都不要再逃避。** —— 无头骑士异闻录\n- **正因为听不见和看不到，所以风子才会做这样的事情。** —— clannad\n- **什么都无所谓只想在你身边，什么都无所谓只想和你说话，什么都无所谓所以请你不要逃避。** —— 好想告诉你\n- **我并不羡慕别人的人生，这就是所谓幸福。** —— 幸运星\n- **人能够在心里郁积那么多的事情，而他们又会忘记那么多的事情，真是不可思议……** —— 最终幻想\n- **我要拼，装上假牙也要拼！** —— 灌篮高手\n- **人一生会遇到约2920万人，两个人相爱的概率是0.000049。所以你不爱我，我不怪你。** —— 秒速五厘米\n- **我的内心就和厕纸一样单纯！** —— Little Busters!\n- **我的眼睛，就是为了寻找你而存在的。** —— H2O\n- **烈焰中舞动的火花，将赐予邪恶异性交往以天罚。** —— 潜行吧！奈亚子W\n- **All for one，one for all.** —— 海贼王\n- **老是低着头，幸福可是会离你而去的喔。** —— 我们的仙境\n- **羁绊是那不可切断的深切联系。即使分离，心与心也紧紧的连在一起。** —— 假面骑士kabuto\n- **对不起，风太大，我没有听清楚……** —— 东京巴比伦\n- **你知道雪为什么是白色的吗？因为她忘记了本来的颜色。** —— 反叛的鲁路修\n- **人生在世何其痛苦，所以咖啡至少该甜一点。** —— 我的青春恋爱物语果然有问题\n- **我想让自己强大起来，因为至少我已经有幸和想要保护的人相遇了。** —— 夏目友人帐\n- **我只是做了我能做的事，没有时间想将来。** —— 秒速五厘米\n- **一天最大任务莫过于，好好睡觉，好好醒来。** —— 火影忍者\n- **不相信人咬不到肚脐的，咬破肚脐去死如何？** —— 海猫鸣泣之时\n- **一直保持微笑是有诀窍的，那就是，在想哭的时候放声大哭。** —— 天使领域\n- **女人的武器不是眼泪，而是微笑。** —— 凉宫春日的忧郁\n- **十步做一死，千里不留行，事了拂衣去，深藏功与名~** —— 侠客行\n- **只要有你，我便无所不能。** —— 进击的巨人\n- **不相信自己的人，连努力的价值都没有。** —— 火影忍者\n- **我只对现实世界绝望过，却未对自己绝望过！** —— 只有神知道的世界\n- **虚伪的眼泪，会伤害别人，虚伪的笑容，会伤害自己。** —— 反叛的鲁鲁修\n- **我除了投三分，就什么都没有了……** —— 灌篮高手\n- **(?_?)** —— 进击的巨人\n- **我在人生的道路上迷失了。** —— 火影忍者\n- **历史虽然会一再重演，但人类却无法回到过去。** —— 海贼王\n- **观察铅笔和橡皮，哪个是攻哪个是受，请写出它们晚上的对话。** —— 学生会的一己之见\n- **龙儿是我的，谁都不准碰！** —— 龙虎斗\n- **贫乳是社会地位的象征。是具有稀有价值的！** —— 幸运星\n- **想要试着去相互接近，但最后还是无法敞开心扉，结果就是擦肩而过……** —— 文学少女\n- **扎古不论怎么化妆都不可能变成高达的。** —— 银魂\n- **我在未来等你。** —— 穿越时空的少女\n- **一般来说，时间会把悲伤冲淡，可是在人的生命中，会有那么一两个特殊的存在，他们的逝去，你永远也不会习惯。** —— 冥王神话\n- **懂得认输是非常重要的，不尝到失败的不甘，也就不会明白跌倒后怎么爬起来，更不可能再向前迈进。** —— 笨蛋测验召唤兽\n- **要改变别人的心真是件很难办的事，不过改变自己要容易一点。** —— XXXHolic\n- **我喜欢你们！超喜欢的！大家和我交往吧！绝对会让你们幸福的！** —— 学生会的一己之见\n- **美丽的不是这个世界，而是看世界的你的眼神。** —— 吸血鬼骑士\n- **世界这么大，人生这么长，总会有那么一个人，让你想要温柔的对待。** —— 哈尔的移动城堡\n- **成功率不到2%，那剩下的用勇气来补足吧！** —— 勇者王\n- **我一直都在你身边 ，一直都在。** —— CLANNAD\n- **重要的不是你做了多少事，而是你放了多少心思进去。** —— 凉宫春日的忧郁\n- **哭泣并不能改变任何事情。** —— 推理之绊\n- **代表月亮消灭你！** —— 美少女战士\n- **不要，我现在暂时留在他身边，直到那转瞬即逝的日子到来。** —— 夏目友人帐\n- **就算是自私……我也希望那些人能够永远都有笑容……** —— 夏目友人帐\n- **我们开始一起攀登，这长长的，长长的坡道。** —— Clannad\n- **应该可以了吧，我已经很努力了，应该可以抵达终点了……** —— AIR\n- **离别并不痛苦，因为我们都微笑着。** —— 青之驱魔师\n- **只要能努力，就应当去努力；只要还能前进，就要向前走去。** —— CLANNAD\n- **邂逅本身，就是一种奇迹啊。** —— 游魂\n- **与其被自己的本性牵着走而痛苦，倒不如试着改变自己。** —— 银魂\n- **爱迪生说过：“要把BOSS打倒就要准备足够的等级。”** —— 学生会的一己之见\n- **世界并不完美，却因此而美丽。** —— 奇诺之旅\n- **我们的心就像那天空一样，永不分离。** —— 缘之空\n- **和我定下契约，成为魔法少女吧！** —— 魔法少女小圆\n- **一直注视着你，似近似远，总是触碰不到。** —— 来自风平浪静的明天\n- **我知道的，面码……自己已经死掉这点事，还是知道的……** —— 我们仍未知道那天所看见的花的名字\n- **共道人间惆怅事，不知今夕是何年。** —— 周秦行纪\n- **旅行唯有出发前最愉快，狗儿唯有叫声最吓人，女人唯有背影最美丽。** —— 狼与香辛料\n- **无论你在哪里，就算我看不见你，我也会一直注视着你。** —— 妖精的尾巴\n- **我不渴望什么在别的城市迎来的春天，只要和你在一起的春天就好，只要和你在一起就好** —— CLANNAD\n- **我的愿望是—幸福地活着，幸福地死去。** —— 神不在的星期天\n- **今天你最后遇见的那个人有在微笑吗？** —— 幸运星\n- **我的终点，与幸福同在。** —— AIR\n- **隐约雷鸣，阴霾天空，但盼风雨来，能留你在此。** —— 言叶之庭\n- **我问你：你是我的Master吗？** —— 命运守护夜\n- **私だって今日こそ... 遠野くんに告白するんだ。** —— 秒速五厘米\n- **时间并不存在，存在的只有此刻。** —— 魔女猎人\n- **没有期盼就不会出现奇迹。** —— 古城荆棘王\n- **受尽苦难而不厌，此乃阿修罗之道。** —— 海贼王\n- **如果你都不知道自己想去哪里，那去哪里都是一样的。** —— 柴郡猫\n- **明天，不是你想要就能有的。** —— 未闻花名\n- **明明只是活着，哀伤却无处不在……** —— 秒速五厘米\n- **错误可不是为了别人才改的过来的，要为了自己才能改正。** —— XXXHolic\n- **男人从小的时候就是无药可救的。** —— 秋之回忆\n- **如果我是那雨滴的话，那么，我能够像把不曾交汇的天空与大地连接起来那样，把某人的心串联起来吗？** —— 死神\n- **真可悲，你什么都不知道，在这个世界上没有什么是不重要的！** —— 最终幻想\n- **前天是小兔子，昨天是小鹿，今天是你。** —— CLANNAD\n- **用我的左手将你那个不可理喻的幻想粉碎掉！** —— 魔法禁书目录\n- **堕入黑暗裏的可怜影子啊，停止伤害他人的行为吧，犯下罪行的灵魂……想死一次么？** —— 地狱少女\n- **男人变态有什么错！** —— 寒蝉鸣泣之时\n- **人们只是用好人来称呼对自己有用的人而以，不存在对所有人都有用的人。** —— 进击的巨人\n- **真正的危机不是机器人像人一样思考，而是人像机器一样思考。** —— 凉宫春日的忧郁\n- **人は一生、中二病なんだ。** —— 中二病也要谈恋爱\n- **能够轻易就放弃的梦想，有存在的价值么？** —— 守护甜心\n- **没有谁能够永远坚强下去的，每个人都会有疲累的无法站起的时候。世间的故事，就是为了这一刻而存在的哦。** —— 文学少女\n- **只要你在，我便无所不能。** —— 进击的巨人\n- **24岁的阿升你好，我是15岁的美加子，我现在也还是非常、非常的喜欢阿升哦！** —— 星之声\n- **比希望更炙热，比绝望更深邃，这就是爱啊。** —— 魔法少女小圆-叛逆的物语\n- **如果你愿意的话，让我带您去吧，这座小镇，愿望实现的地方……** —— CLANNAD\n- **窃人者，自失其宝。** —— 假面骑士kabuto\n- **有你在的日子才是我的日常。** —— 琴浦小姐\n- **男人就应该保持冷静，沸腾的水只会被蒸发掉。** —— 假面骑士kabuto\n- **嗯，一个人也要加油，我是坚强的孩子。** —— AIR\n- **时间带着明显的恶意，缓缓在我的头顶流逝。** —— 秒速五厘米\n- **人的记忆本来就是暧昧的，不值得信任。** —— 叛逆的鲁鲁修R2\n- **有光的地方必有影，有影的地方也必定有光，绝望的颜色越是浓重，一定会有光芒耀眼的希望。** —— 银魂\n- **时间可以治愈？如果时间也病了怎么办？** —— 寒蝉鸣泣之时\n- **无论在哪里遇到你，我都会喜欢上你。** —— AngleBeats!\n- **取少量学生放入试管，加入过量作业，生成学霸溶液和不溶于水的学渣。过滤，在学渣中加入过量浓试卷，学渣迅速溶解且产生气泡，学霸则无明显现象。** —— 网络\n- **如果你死了，那什么也改变不了，可如果你还活着，那就能改变一些事情。** —— 最游记\n- **鲁鲁修，你知道雪花为什么是白色的吗？因为已经忘记自己本来是什么颜色啊。** —— 叛逆的鲁鲁修\n- **燃烧吧，我的小宇宙！** —— 圣斗士星矢\n- **无法逃避的是自我，而无法挽回的是过去。** —— 机动战士高达\n- **做出一副温柔的样子来折磨人不是更令人难受吗？** —— 我的青春恋爱物语果然有问题\n- **有些事情我不看透，不是我笨，只是我太善良。** —— 樱桃小丸子\n- **有时语言就像把利刃，使用不当，就会成为凶器。** —— 名侦探柯南\n- **如果能够重生的话，我想，我想成为水母。想成为只是在海里自由地摇摇摆摆的水母。** —— 海月姬\n- **所谓的人类，可是连短短的十分钟也等不起的。** —— Angel Beats!\n- **梦总是有会醒来的时候，不会醒的梦总有一天会变成悲伤。** —— AIR\n- **能哭的地方只有厕所和爸爸的怀里。** —— CLANNAD\n- **你再怎么称赞我，我也不会高兴的，你这个混蛋~** —— 海贼王\n- **除了爱你，我什么都可以。** —— 命运守护夜\n- **败者死于绝望，胜者死于渴望。** —— 戏言系列\n- **给，一辈子朋友劵。** —— 日常\n- **一个人走在路上，形单影只。回首望去，大家都留在远方。回过头来继续前行，这便是所谓坚强。** —— AngelBeats\n- **无知而又纯洁的岁月是任何人都曾拥有的，世界上没有一成不变的事物，所以只要以其他方式找到自己的快乐就行了。** —— CLANNAD\n- **沒有永远下不停的雨。** —— 秋之回憶\n- **不习惯的事越来越多，但我仍在前进……就算步伐很小，我也在一步一步的前进。** —— 夏目友人帐\n- **算了，和你说话感觉就像是大姨妈来了。** —— 龙虎斗\n- **“像你这样的白痴是怎么活过来的？”“因为我很自信。** —— 海贼王\n- **梦想是什么，梦想是现实的延续；现实是什么，现实是梦想的终结。** —— EVA\n- **Time waits for no one.** —— 穿越时空的少女\n- **时间是伟大的作家，总会写下完美的结局。** —— 秋之回忆\n- **真正让我难受的，大概是因为让你看到如此狼狈的自己。** —— 元气少女缘结神\n- **淅淅沥沥的雨，即便能填满路上的水坑，也填不满心中的空洞。** —— 神圣之门\n- **我们总是在注意错过太多，却不注意自己拥有多少。** —— 我们仍未知道那天所看见的花的名字\n- **不管前方的路有多苦，只要走的方向正确，不管多么崎岖不平，都比站在原地更接近幸福。** —— 千与千寻\n- **活在现实中的人是错的，而那些哭泣的人才是正确的，孤独的我们才有人类的样子** —— angel beats\n- **不管是怎样的回忆，都是我们活过的人生。** —— angel beats\n- **我不知道离别的滋味是这样凄凉，我不知道说声再见要这么坚强。** —— 千与千寻\n- **人生就是一列开往坟墓的列车，路途上会有很多站，很难有人可以自始至终陪着走完。当陪你的人要下车时，即使不舍也该心存感激，然后挥手道别。** —— 千与千寻\n- **曾经发生过的事情不可能忘记，只不过是想不起而已。** —— 千与千寻\n- **人永远不知道，谁哪次不经意的跟你说了再见之后，就真的不会再见了。** —— 千与千寻\n- **有阳光的地方就会有阴影，所以有阴影的地方也一定会有阳光。绝望的颜色越是浓厚，在哪里也一定会存在耀眼的希望之光。** —— 银魂\n- **与其想着怎么美丽地牺牲,倒不如想着怎么漂亮地活到最后一刻。** —— 银魂\n- **人就是要以自卑为跳板才能跳得更高。** —— 银魂\n- **为了终止绝望的连锁，希望她能化为照亮正确道路的灯火。** —— Re：从零开始的异世界生活\n- **死亡只要在人生的终点尝试一次就够了~** —— Re：从零开始的异世界生活\n- **真正重要的东西，总是没有的人比拥有的人清楚。** —— 银魂\n- **吾于冥河沉浮,受尽命运捉弄，纵然汝将忘吾，吾亦伴汝身旁。** —— Re：从零开始的异世界生活\n- **关于自己的生活，我和你都不是读者，而是作者。至少结局，还是能自己说了算的。** —— 银魂\n- **努力可是要默默藏起来的。** —— Re：从零开始的异世界生活\n- **拥有和舍弃都很痛苦，既然无论怎样都会痛苦的话，我宁可选择守护它而痛苦。** —— 银魂\n- **只要有你想要保护的东西，那就拔剑好了。** —— 银魂\n- **所谓的王，乃最贪婪，最豪爽，最易怒之人。且清且浊，追求极致人生。为臣者，因之而仰慕，追随其左右。因此，臣民才会有称王之志，追寻自己的理想。** —— fate/zero\n- **不过傲慢分为两种。一种是能力过于低下，还有一种是志向异常远大的。前者显得非常愚蠢，后者是难得一见的珍贵种类。** —— fate/zero\n- **梦存高远，志在争霸，这股热情确实值得赞许。但所谓梦，终有一天是要醒来的。** —— fate/zero\n- **“把剑放下，成为本王的妻子吧。”** —— fate/zero\n- **区区一只趴在地上的蝼蚁，谁允许你抬起头的， 虫子就要有虫子的样子，低头伏地然后去死。** —— fate/zero\n- **即使你忘记了我，我也不会遗忘你。** —— Re：从零开始的异世界生活\n- **不是别人，是我，承认了你的价值。** —— fate/zero\n- **世界上 ，没有一拳解决不了的事，如果有，那就两拳。** —— 一拳超人\n- **明天的事，交给明天的我。** —— 一拳超人\n- **在灾难面前，如果连英雄都逃跑了，那还有谁能站出来？** —— 一拳超人\n- **我不是因为需要你们评论几句才去当英雄的，而是因为我想去当所以我才当的。** —— 一拳超人\n- **由变态化身成为变态，也就是真·变态，也就是说，完全变态呢。** —— 一拳超人\n- **我秃了，我也变强了** —— 一拳超人\n- **为了做一名真正的绅士，即使明知必输无疑，也要有勇气接受挑战！** —— JOJO的奇妙冒险\n- **JOJO，我不想再做人了！！** —— JOJO的奇妙冒险\n- **春天是胖次的季节。** —— 电器街漫画店\n- **我只是个兴趣使然的英雄。** —— 一拳超人\n- **不要为自己的努力道歉，这样太对不起自己了！** —— 火影忍者\n- **这个世界上没有奇迹，有的只是偶然和必然，以及是谁在做些什么。一直期望着能出现奇迹的人们是不会发生奇迹** —— 悠久之翼\n- **伤害别人的人，就要有被伤害的觉悟！** —— 罪恶王冠\n- **即使你忘记我，我也不会遗忘你！** —— 从零开始的异世界生活\n- **我不管这个世上的人怎么说我，我只想依照我的信念做事，绝不后悔，不管现在将来都一样。** —— 火影忍者\n- **人生中有些事你不竭尽所能去做，你永远不知道自己有多出色！** —— 海贼王\n- **正因为生命有限，所以才显得重要，正因为生命有限，所以才更应该努力不懈！** —— 名侦探柯南\n- **人，只有在放弃战斗的时候才算输，只要坚持战斗，就还没输！** —— 进击的巨人\n- **世间本就没有真实的对与错，也没有绝对的善与恶。地狱天堂，一念之间。** —— 地狱少女\n- **天才的字典里，没有不可能这三个字。** —— 灌篮高手\n- **奇迹不是免费的，如果你祈求了希望，也会散播出同等的绝望。** —— 魔法少女小圆\n- **此生无悔入东方，来世愿生幻想乡！** —— 东方project\n- **只要是活着的东西，就算是神我也会杀给你看。** —— 空之境界\n- **我手里拿着刀，没法抱你，我放下刀，没法保护你！** —— 死神\n- **不好意思，我喜欢的是艾米莉亚** —— Re：从零开始的异世界生活\n- **前进吧，星星在你的头上闪耀哦！** —— 四月是你的谎言\n- **星星只有在夜里才璀璨夺目啊。** —— 四月是你的谎言\n- **Eloim Essaim Eloim Essaim 请聆听我的请求。** —— 四月是你的谎言\n- **於此漆黑世界之中，直至光明遍地之时！All Hail Lelouch！** —— 反叛的鲁路修\n- **只有用心才能看到本质，最重要的东西眼睛是无法看到的。** —— LE\n- **春天的最后一场雪，你我的最后一次相聚，能遇见你是最幸福的事了，就此分别吧！请继续向前，迎接樱花漫溢的四月，但请不要忘记我，友人A……** —— 四月是你的谎言\n- **喜欢的人喜欢别人不是很正常吗。** —— 四月是你的谎言\n- **男人只要去行动就好，做得到或做不到，女孩子会来告诉你的。** —— 四月是你的谎言\n- **或许前路永夜，即便如此我也要前进，因为星光即使微弱也会为我照亮前路。** —— 四月是你的谎言\n- **英雄意味着强大，英雄意味着孤独，最后一幕一定是英雄渐行渐远，我的英雄也是那样的存在。** —— 四月是你的谎言\n- **迎接我们的也许是漆黑一片的夜路，即便如此，也要相信自己，勇往直前。 星空会为我们在这条道路上点缀出淡淡星光。** —— 四月是你的谎言\n- **君の名を 今追いかけるよ** —— 君の名は。\n- **谢谢你至今为止都容忍我的任性，我是你的妹妹真的太好了。** —— 俺妹\n- **那东西既然被你知道了，我就没脸活下去了，只有一死了之了！可是我还不想死，所以只好把你杀了啊！** —— 逢坂大河\n- **笨蛋吉娃娃（バカチワワ）** —— 逢坂大河\n- **吵死了吵死了!** —— 逢坂大河\n- **回家后我得好好找你人生咨询一下！** —— 高坂桐乃\n- **Angel大河大人，为了大家能有一个幸福快乐的圣诞，无论是一层皮还是两层皮都给你剥下来，直到最后全裸都没问题的觉悟都做好了！** —— 逢坂大河\n- **告白当天就要H什么的，真是没办法的男人呢。** —— 高坂桐乃\n- **桐乃非常非常不愿意你有女朋友，但是你还愿意和我复合吗。开...开玩笑的，你不要回答我不然我真的会死\\\"** —— 五更琉璃\n- **“我要诅咒！诅咒所有相爱的情侣！诅咒神圣的夜晚！诅咒这整个世界（世界：怪我咯？）！对所有的现充挥下破坏的铁锤！我会让你尝尝……我生涯最大的诅咒！”** —— 千叶の堕天圣黑猫\n- **喂？FFF团团长须川亮吗？这有一个要入团的！** —— 五更琉璃\n- **最有名的莫过于想死一次吗。** —— 阎魔爱\n- **哥哥也可以喜欢上我之外的女孩子，但只有音梦是不可以的！** —— 芳乃樱对朝仓纯\n- **我也做个好孩子，成为这幸福光景的一部分，想成为闪耀在圣诞节的城市里，其中一张幸福的笑脸。** —— 逢坂大河\n- **龙儿是我的！谁都不准碰！** —— 逢坂大河\n- **以后继续来一起练习打篮球** —— 湊智花\n- **请不要跟我搭话。我讨厌你！** —— 八九寺真宵\n- **风子参上！** —— 伊吹风子\n- **男生送的礼物要方便拿来换钱才好吧！** —— 来栖加奈子\n- **你是笨蛋吗？** —— 小桐桐（きりりん）\n- **我跟喜欢成人游戏一样喜欢你** —— 高坂桐乃\n- **最喜欢你了唷！！ 开玩笑的！！啊--！好害羞 有机会的话会再写信给你。 希望那时，能变得更加坦率捏~** —— 久保由利香致小泉花阳\n- **最后，士郎……你要去打的話……必须給我贏！你要是死了话……我饶不了你……** —— 遠坂凜\n- **最后好想有个拥抱....，可是...那种事情怎么能说得出口.....** —— 露西\n- **受虐狂的娇小美少年……真想带回家去养一段时间啊。** —— 赤井林檎\n- **希望老师像帮我一样帮帮れいジ** —— 九重凛\n- **在排练的休息时间里要好好补充水分和盐分哦！** —— 三森铃子致海未\n- **得到更多人的认可，带著大家的爱意加油哦！** —— 内田彩致南小鸟\n- **重新再说一次，至今为止，真的谢谢你。 然后，今后也请多指教了。** —— 楠田亞衣奈致东条希\n- **笨蛋、笨蛋！** —— 星野琉璃\n- **没问题，绝对没问题** —— 木之本樱（无敌咒语）\n- **凡人、笨蛋！** —— 维多利加·德·布洛瓦\n- **笨蛋,蠢货** —— 南千秋\n- **我绝对会成为火影。我从来都是有话直说，这就是我的忍道！** —— 漩涡鸣人\n- **Fightだよじゃねつの！** —— 高坂穗乃果\n- **哦~** —— 袴田日向\n- **绝对要一起去吃拉面喵~** —— 星空凛\n- **不管你在世界的哪个地方，我一定会，再次去见你的。** —— 你的名字\n- **描线一笔接一笔，白色的素描本上渐渐萌生黑意。即便如此，还无法照准记忆中的风景。** —— 你的名字\n- **你会哭着笑，笑着哭，是因为你的心，早已超越了自己啊。** —— 你的名字\n- **醒来的时候 不知道自己为什么哭 时常会有的事情 做过的梦总是回想不起 只是 一种有什么消失的丧失感** —— 你的名字\n- **以彗星为龙，以彗星为绳结。描绘出割裂的彗星舞动的形态。又是一轮岁月。** —— 你的名字\n- **聚拢，成形，捻转，回绕，时而返回，暂歇，再联结。这就是组纽。这就是时间。这就是，联结** —— 你的名字\n- **从你的前前前世开始，我就开始找寻你** —— 你的名字\n- **假如我们相遇，肯定一眼就能认出彼此** —— 你的名字\n- **从现在开始，我将追寻你的名字。** —— 你的名字\n- **我，将某个人，唯一的某个人，试图锁定。我，** —— 你的名字\n- **散落至四方。又或是升起至四方。在无法确认这一事实的浮游感中，彗星耀辉在夜空。彗星裂开，碎片落下。** —— 你的名字\n- **喜欢喜欢轻飘飘喜欢喜欢轻飘飘让我们一起来！** —— Printemps\n- **みんなで作る、最高のライブ！** —— LoveLive! The School idol Movie\n- **凛：450拿来 海：自由女神Shoot！ 希：其实有点像邪神果** —— 乙姬心恋宫殿\n- **脱！！巨乳！** —— 暗杀教室\n- **前天是小兔子,昨天是小鹿,今天是你** —— CLANNAD\n- **有些事情我不看透，不是我太笨，只是我太善良。** —— 樱桃小丸子\n- **彼方为谁，无我有问 ；九月露湿，待君之前** —— 你的名字\n- **会起反作用是吧……明明是想保护，却伤害了；明明想要哭泣， 却微笑着。** —— 吸血鬼骑士\n- **我不是天生的王者 但我骨子里流动着不让我低头的血液** —— 海贼王\n- **不要停止奔跑，不要回顾来路，来路无可眷恋，值得期待的只有前方。** —— 马男波杰克\n- **苹果是给那些为了爱选择死亡的人的奖励** —— 回转企鹅罐\n- **一定要保护自己的梦想，即使牺牲一切。** —— NANA\n- **喜欢你，因为我喜欢你，比地球上任何人都，喜欢你...** —— 名侦探柯南\n- **所谓“大家”，就是无视并牺牲了一部分弱势群体后所达到的虚伪的和平与共识。** —— 果然我的青春恋爱喜剧搞错了\n- **男人至死都是少年** —— 银魂\n- **润滑油是用来防止磨损的东西。在心中有着润滑油也会活得更加轻松吧。** —— 果然我的青春恋爱喜剧搞错了\n- **不能逃避，不能逃避，不能逃避，不能逃避…** —— EVA\n- **我除了投三分，就什么都没有了…** —— 灌篮高手\n- **我会死在这里，我的每一寸肌肤都会腐烂，除了…一寸，这一寸，它是那么的小，那么的脆弱，却是这世上唯一值得拥有的东西，我们决不能失去或者放弃它，我们决不能让别人把它夺走。** —— 碧之轨迹\n- **无论是丢下还是被丢下，这两者都是一样痛苦的。** —— 水果篮子\n- **女生口中的「好人」首先百分之百是「怎样都好的人」的意思，再好也不过止于「方便好使的人」。也就是说，不管怎样都是没戏了。** —— 果然我的青春恋爱喜剧搞错了\n- **今天的风儿有些喧嚣啊。** —— 男子高中生的日常\n- **死对任何人都是残酷的，年轻年老、好人坏人都一样。死是平等的，没哪种死亡是特别残酷的，所以死才可怕。品行、年龄、个性、金钱、美貌，这些东西只在生前才有意义。就因能将一切化为乌有，所以怎样的死都是残酷的。** —— 尸鬼\n- **命运的红线一旦断了，就再也不会接上。** —— 犬夜叉\n- **活下去的意志是最强的力量！** —— 浪客剑心\n- **想要试着去相互接近，但最后还是无法敞开心扉，结果就是擦肩而过…** —— 文学少女\n- **男人的爱情是另存为，女人的爱情是覆盖。** —— 红\n- **不逆 不耻 不憾** —— 舰队Collection\n- **有话直说就是我的忍道！** —— 火影忍者\n- **就连一直都无容身之地的我…也不是可以任意舍弃的生命。** —— 夏目友人帐\n- **明明只是活着，哀伤却无处不在…** —— 秒速五厘米\n- **为了你,如果是为了你,即使我被困在永远的迷宫中,也没关系.** —— 魔法少女小圆\n- **我不渴望什么在别的城市迎来的春天，只要和你在一起的春天就好，只要和你在一起就好…** —— CLANNAD\n- **“像你这样的白痴是怎么活过来的？”“因为我很自信。“** —— 海贼王\n- **汝真是个烂好人** —— 狼与香辛料\n- **我知道的，面码…自己已经死掉这点事，还是知道的…** —— 我们仍未知道那天所看见的花的名字\n- **不习惯的事越来越多，但我仍在前进…就算步伐很小，我也在一步一步的前进。** —— 夏目友人帐\n- **刻意保持距离的人是你，虚拟世界里的区区两公尺，对你来说就真的如此遥不可及?** —— 加速世界\n- **想哭的时候能哭出来，也是一种坚强** —— 翼年代记\n- **如果你愿意的话，让我带您去吧，这座小镇，愿望实现的地方…** —— CLANNAD\n- **有伤害人的人存在的话，也会有能抚慰伤痕的人** —— 水果篮子\n- **会长和往常一样挺着小小的胸部一副自以为了不起的样子套用某本书的内容说道…** —— 学生会的一己之见\n- **我觉得只要这样继续加油，总有一天能赶上他们的。** —— 刀剑神域\n- **如果你是魔女，我只要化身魔王就可以了。** —— 反叛的鲁鲁修\n- **人的一生会遭遇各种各样的事，其中有令人难以置信的事，也有不讲道理的事，但这就是生活。** —— 地狱少女\n- **挡着在我们面前的是巨大庞然的人生，阻隔在我们中间的是广阔无际的时间，对于他们，我们无能为力…** —— 秒速五厘米\n- **叶え！私たちの夢ー。** —— ラブライブ！\n- **人不会对讨厌人要求理由。莫名的生气、莫名的讨厌、莫名的恶心、什么都能成为讨厌人的理由。** —— 果然我的青春恋爱喜剧搞错了\n- **无论发生什么都不要停下。无论到什么时候都要继续前进。 要一直走下去，直到生命终止的那一刻。** —— 驱魔少年\n- **堕入黑暗裏的可怜影子啊，停止伤害他人的行为吧，犯下罪行的灵魂…想死一次么？** —— 地狱少女\n- **我的生命是属于你的，亚丝娜，我将为你而活。** —— 刀剑神域\n- **“如果我不在了，你会怎样？” “我会去找你” “如果找不见呢？” “我会一直，一直，一直找下去”** —— 人鱼森林\n- **将愿望倾入不愿忘却的回忆中…** —— ef-a tale of memories\n- **All for one, one for all.** —— 海贼王\n- **祈求别人幸福的同时,却不得不去诅咒其他的人,我们魔法少女就是这样的构造吧!** —— 魔法少女小圆\n- **人的一生会遭遇各种各样的事，其中有令人难以置信的事，也有不讲道理的事，但都必须予以克服，这就是生活** —— 地狱少女\n- **以为大哭大闹一场就有人来安慰的家伙真是幸福呢。** —— 龙与虎\n- **时间可以治愈？如果时间也病了怎么办** —— 寒蝉明泣之时\n- **如果幸福有形状，该是什么样的呢？它就像玻璃，因为平时察觉不到它的存在，而它却时时在我们身边，最有力的证据就是，只要换一个角度，它就会折射出耀眼的光芒，比谁都过分强调自我的存在。** —— 反叛的鲁鲁修\n- **求你，保护那孩子，消除灾厄，抹除祸事。哪怕…那是我自己…** —— 食灵\n- **不是我，都是社会的错** —— 我的青春恋爱物语果然有问题\n- **El Psy Congroo..** —— 命运石之门\n- **红茶的温度和女人心在任何时代都是难以琢磨呢。** —— 海猫鸣泣之时\n- **并非喜欢、也不是爱。而是更加深刻而沉重的——** —— SWEET POOL\n- **Oh,please don't let me die. Waiting for your touch.** —— Re：从零开始的异世界生活\n- **You Are (Not) Alone;You Can (Not) Advance;You Can (Not) Redo** —— EVA\n- **禁忌算什么！那难道比爱丽丝的命还重要吗？** —— 刀剑神域\n- **MAKE OUR DREAMS ALIVE** —— ラブライブ！\n- **什么都无法舍弃的人，什么都无法改变 。** —— 进击的巨人\n- **知道人的眼睛为什么长在前面吗？那是因为如果想看到远处的风景的话，就只能向前前进。** —— 天元突破：红莲螺岩\n- **春天 马上就要来了  让我与你相遇的春天 就要来了  再也没有你的春天 就要来了** —— 四月是你的谎言\n- **世间万物，如果一直放着不管的话，便一定会向不好的方向发展。就像即使如何的努力也无法阻止宇宙变冷一样。只是按照‘常理进行’不断积累而构筑出的世界，无论如何也无法脱离物理法则的束缚。** —— 虚渊玄\n- **无可替代的存在什么的不是很可怕吗？一旦失去就再也无法取回；绝对不能容忍失败；无法再一次得到。** —— 果然我的青春恋爱喜剧搞错了\n- **其实...根本就没有什么天堂和地狱吧....** —— 死亡笔记\n- **真正重要的东西，永远都是非常简单的。** —— Clannad\n- **我已经准备好了足够挡雨的伞，可是却迟迟没有等到雨的到来，这样的尴尬只是我漫长人生中的小插曲罢了。** —— 千与千寻\n- **我觉得在这里干尽坏事的玩家，都是些在现实世界中也烂到骨子里的家伙。** —— 刀剑神域\n- **是你赢了...哲...** —— 黑子的篮球\n- **我们一直在一起，所以最后也想在你身旁。** —— 火影忍者\n- **人们只是用好人来称呼对自己有用的人而以，不存在对所有人都有用的人** —— 进击的巨人\n- **要是太勉强自己的话，总有一天会受伤的** —— 吸血鬼骑士\n- **我本身得不到答案。所以，我希望有能够答出来之物的诞生。** —— Fate/Stay Night\n- **最初的一步，泪水之后再一次，雕刻的风景线，消逝在黄昏中的风，直到梦的最后。** —— Clannad\n- **应该可以了吧，我已经很努力了，应该可以抵达终点了…** —— AIR\n- **所谓的奇迹就是要发生之后才会有价值存在的吧** —— EVA\n- **笑是对身边的事物感到一瞬间的幸福而表现出来的东西。** —— CLANNAD\n- **休息对于生存而言，也是紧要问题** —— 虫师\n- **比自己,比梦想更重要的东西永远都存在着...** —— 钢之炼金术师\n- **失礼。噛みました** —— 化物语(上)\n- **驱动着这个世界的，并非只有眼睛能够看到的东西。就像只观察结晶回路的轮盘是无法知晓齿轮的运动一样……** —— 空之轨迹\n- **是个男人就要对自己的人生负责** —— 麻辣教师\n- **我们不是狼，我们只是长着獠牙的羊......** —— 羊之歌\n- **没有偶然的必然，只有必然的偶然** —— 魔卡少女樱\n- **我觉得你很幸福，因为你可以选择爱或者不爱我，而我只能选择爱或者更爱你** —— 草莓100%\n- **前天是兔子，昨天是小鹿，今天是你** —— Clannad\n- **ご無事で何よりです。** —— 妖狐X僕ss\n- **少年少女 向前走吧。** —— 阳炎PROJECT\n- **过分的神圣，往往比恶魔更加恶质。** —— 黑执事\n- **正因生来一无所有，因此我们能拥有一切。** —— 游戏人生\n- **我从来都不是什么天才，只是一个普通人，是一个连一个小女孩都保护不了的普通的、渺小的人类啊。** —— 钢之炼金术师\n- **我不会去统治这片大海，在这片大海上，最自由的人就是海贼王！** —— 海贼王\n- **失礼、噛みました** —— 化物语\n- **她有心，她的心在我这里。** —— 人形电脑天使心\n- **努力不会背叛自己，虽然有时会背叛梦想** —— 我的青春恋爱物语果然有问题\n- **超频链接** —— 加速世界\n- **若没有可依靠之处，便也找不到自己的归宿，躲躲藏藏随波逐流，依附于某物，却又一头撞在看不见的墙壁上。** —— 我的青春恋爱物语果然有问题\n- **就算是自私…我也希望那些人能够永远都有笑容…** —— 夏目友人帐\n- **挚友的执念烙印此身，无尽的黑暗化为光明，天上天下，一骑当神！** —— 天元突破：红莲螺岩\n- **人在直面恐惧的时候，自身的灵魂将会受到考验。降生于这世界，究竟有何所求，要成何事，其本性会暴露无遗。** —— PSYCHO-PASS\n- **整个社会对我都很苛刻。所以至少让我自己宽容一下我自己吧。如果大家都对自己更宽容一点的话。大家都变成废柴就没有废柴了。** —— 果然我的青春恋爱喜剧搞错了\n- **还能再见面吗? 一定能见面的** —— Fantastic Children\n- **即使你忘却了我，我也不会遗忘你。** —— 菜月昂\n- **不要伤害自己，别人总会这样做。** —— 天国王朝\n- **我喜欢你，比世界上任何人都喜欢你。** —— 名侦探柯南\n- **人是可以改变一切的，世上的一切。** —— 吹响！上低音号\n- **所谓的「改变自己，世界就会随之改变」这种事，是不可能的。** —— 我的青春恋爱物语果然有问题\n- **我想成为一个温柔的人，因为曾被温柔的人那样对待，深深了解那种被温柔相待的感觉。** —— 夏目友人帐\n- **你喜欢的人已经心有所属不是正常的吗，因为你喜欢他，所以你的眼中就只有她。人啊，总是盲目地去爱。** —— 四月是你的谎言\n- **忍者的才能不在于所掌握忍术的多少，而在于永不放弃的毅力.笔直向前绝不违背自己的誓言，还有不管何时都不放弃.** —— 火影忍者\n- **我动身踏上旅程，是为了与你道别。** —— 追逐繁星的孩子\n- **大家即将各自展开旅程，挥别这个没落的城镇。** —— 仰望半月的夜空\n- **正气和狂气，理性和知性，自信和确信，在悲剧性的不合理世界，故事开始了。** —— 绝园的暴风雨\n- **将所有人类当成玩偶的神,本身居然也是个小丑啊。** —— Fate/Zero\n- **即使想放弃，也没法放弃最想要的东西，这就是人** —— 悠久之翼\n- **拿起武器，无论顺从还是逃跑，都无法得到自由，既然如此，我们只能战斗，为了自由，站起来吧。** —— 妖精的尾巴\n- **所谓长大成人，就是不断聚了散，散了又聚。为了让彼此不会受伤害而保持一个适当的距离。** —— 新世纪福音战士\n- **如果说怪盗是一个技艺精湛，盗取财宝的艺术家，那么侦探就只是跟在怪盗后面吹毛求疵，充其量不过是个评论家。** —— 名侦探柯南\n- **我不相信人类......但是，我相信人类的“可能性”** —— 游戏人生\n- **即使作为代价要夺走我什么，即使接下来等待我的是什么，即使那样，我无论如何都不想失去他。** —— 少年阴阳师\n- **据说之所以有人出现在梦中，是因为对方想见你的心情穿过身体，飞进了你的梦中。** —— 蜂蜜与四叶草\n- **好梦向来易醒。** —— 风之谷\n- **追逐梦想的人比抓住梦想的人更能发挥实力。** —— 银魂\n- **因为世界并不如你想象的那样坏。** —— 无头骑士异闻录\n- **人只会看到自己想看到的、听到自己想听到的，我也并不例外。** —— 我的青春恋爱物语果然有问题\n- **美丽的不是这个世界，而是接受了这个世界的你的眼睛。** —— 吸血鬼骑士\n- **干燥的冷气，尘埃的味道，我在其中……踏上旅途。** —— 四月是你的谎言\n- **人总有一天都会死的，但正因为生命是有限的，才能够欢喜和悲伤。** —— 通灵王\n- **舞台上演员不能无视剧本随便演，华丽地退场才是完成使命。** —— 绝园的暴风雨\n- **只顾着追求新事物，却不回顾历史，怎么会有未来。** —— 虞美人盛开的山坡\n- **为什么妈妈就不明白无所事事的忙碌呢。** —— 白熊咖啡屋\n- **好红，每当想起你，枫叶就会被染红。** —— 银仙\n- **也许正义并非太阳，而是如同星星一般的东西，天空中有无数的星星，彼此不断抵消着其他星星的光芒。** —— 亚尔斯兰战纪\n- **起风了,唯有努力生存。** —— 起风了\n- **走过一段路 回头看 原来那些痛得快要死去的事情是可以一笑而过的。** —— 黑子的篮球\n- **我们都在梦中，一个叫青春的梦里。梦总有一天会醒来，而回忆会一直闪烁。** —— 校园迷糊大王\n- **王冠会让戴上它的人高人一头，是地位的象征。但王冠真正的意义是：当灾难从天而降时，我会为你们抵挡一切，永远让你们只看到金色的希望。** —— 星游记\n- **只要怀着理想而行动，就算结果不尽如人意也没有关系。但是如果失去了理想，那就真的一无所有了，连自己珍视的人都保护不了。** —— 境界的彼方\n- **如果要伤害别人的感情才能实现的话，对那个人来说梦想就已经不能称之为梦想了。** —— 名侦探柯南\n- **我不会忘记，一直，都留在我的心间。** —— 文学少女\n- **当一个胖纸没有什么不好，最起码可以温暖其他的人。** —— 龙猫\n- **是鸣人改变了我！是鸣人的笑脸拯救了我！所以，如果是为了保护鸣人，就算死，我也无可畏惧，因为我，最喜欢鸣人了。** ——  火影忍者\n- **总在不停寻觅你的踪影，无论十字路口抑或梦境之中，明知你不在，却依然不停地找寻。** —— 秒速五厘米\n- **你受伤的时候，我永远都在。** —— 多啦A梦\n- **在未知的未来将要发生的事，一定有它的意义** —— 火影忍者\n- **那只萤火虫在很长很长的时间里都是独自一人生活，甚至忘了自己是只萤火虫。** —— 小鸠\n- **最近的烦恼是小小的离别带来的寂寞，一瞬间的邂逅与分别，这一个一个的刹那，我想好好珍惜起来。** —— 夏目友人帐\n- **如果基拉被抓住了，那他就是邪恶，如果基拉统治了世界，那他就是正义。** —— 死亡笔记\n- **无论最终的结果是什么，只要这是自己选择的道路。** —— 龙与虎\n- **在面对这些强敌之前...一定要先将眼前敌人逐个打败吧。** —— 网球王子\n- **物转星移，花开花落，周而复始，生生不息，但今昔已非昨日，然今日花容依旧。** —— 虫师\n- **隐藏的是心中的秘密，照耀两人的是star和snow……** —— 名侦探柯南\n- **从进入厨房的瞬间开始，你们就肩负着烹饪美食的责任。** —— 食戟之灵\n- **生活坏到一定程度就会好起来，因为它无法更坏。** —— 龙猫\n- **当你决定了要向前迈进的那一刻, 你就已经踏出前进的一步了。** —— Canvas2 ～七彩的素描～\n- **我再也不要看见她哭的样子了，就算我从此从她心目中消失。** —— 名侦探柯南\n- **无限接近于零，却又不等于零的可能性。** —— 游戏人生\n- **在弱者眼里可能是这样，不过，我的确很强。** —— 蔷薇少女\n- **我无法抗拒泡面这种没营养又廉价的口感。** —— 银仙\n- **荣耀就在彼方，遥不可及才要挑战，歌颂霸道，展现霸道，为了守护我背影的臣子。** —— RIDER Fate/Zero\n- **活着本身就是一种价值，因为还有明天。** —— 高达\n- **大家互相帮助，一起成功，一起幸福什么的，不过是种理想。** —— 我的青春恋爱物语果然有问题\n- **话说回来，现充还真是麻烦啊。** —— 我的青春恋爱物语果然有问题\n- **重逢的时候没想到我会这样喜欢他，虽然你不是我交往的第一人，可却是我的初恋，虽然你可能并不知道。** —— 世界第一初恋\n- **有了喜欢的人，就会在意各种小事，感觉很不自由，但是，为了那些小事左思右想，心里竟然会这么快乐。** —— 闪烁的青春\n- **就算世上有着所谓的“好女人”，也不会有着“和我关系好的女人”。** —— 我的青春恋爱物语果然有问题\n- **必须洗净一切往事，否则你永远无法清楚自由地看这个世界** —— 死神\n- **己所欲者，杀而夺之，亦同天赐** —— 游戏人生\n- **即使你已经习惯了受伤害，也有人看了会心疼的。** —— 我的恋爱物语果然有问题\n- **这个世界上没有完美的人类，所以，人无法自己一个人活著。** —— 不可思议游戏\n- **我们会，慢慢长大成人，随着季节的不停变换 路边盛开的鲜花也在不断变化。** —— 未闻花名\n- **只要一天活著,难过的事总有一天会让你笑著说出来。** —— 天空之城\n- **命运的红线一旦断了，就再也接不上了。** —— 犬夜叉\n- **一举一动，都是承诺，会被另一个人看在眼里，记在心上的。** —— 悬崖上的金鱼姬\n- **如果你一个人把什么都做完了，那我做什么？** —— 元气少女缘结神\n- **在自称善意的之时，即存恶意。** —— 罪恶王冠\n- **正因为生命有限，所以才显得更重要，正因为生命有限，所以才更应该努力不懈。** —— 名侦探柯南\n- **总觉得跟你在一起，不管多高的地方都可以到达。** —— 网球王子\n- **人这种东西，除了为了永不满足的欲望追求新的刺激之外，也是重视稀少价值之物的奇怪生物。** —— gosick\n- **那些坚定决心的人们，会展现出好脸色。** —— 闪电十一人\n- **世界不完美 所以才显得美丽** —— 钢之炼金术士\n- **即使匍匐在地，也要持续前进，这才是你的作风。现在的你只靠一些漂亮话当借口，在高墙前使性子，不过是个小鬼罢了。** —— 银魂\n- **明明喜欢的不得了，可是看到对方幸福洋溢的表情，却觉得很难过、很痛苦，胸口发疼。** —— 彩云国物语\n- **失望了吗？没错，世上或许有些东西别打开比较好，真正把心打开的人多么麻烦啊！** —— 绝望先生\n- **哭也不会改变什么，这个世界从来不会对任何人温柔。** —— 黑执事\n- **不论是过去还是未来，我都会保护你！** —— 旋风管家\n- **自己的过去会被当做笑话或者捏他的形式，被他人随随便便的共有化。** —— 我的青春恋爱物语果然有问题\n- **因为等待的越久，重逢时就越幸福啊。** —— 名侦探柯南\n- **我在时光斑驳深处，聆听到花开的声音。** —— 未闻花名\n- **神会对努力之人微笑，这是骗人的，但我们偶然会被命运之神垂青。** —— 吹响吧！上低音号\n- **大国战争之后还会繁荣富强，而只有小国涂炭遭殃，让世界感受痛苦吧。** —— 火影忍者\n- **人生最糟糕的事，一个是饿肚子，一个是孤独。** —— 夏日大作战\n- **你指尖跳动的电光，是我此生不变的信仰** —— 某科学的超电磁炮\n- **温柔解救不了这个世界** —— 罪恶王冠\n- **代你见证世界的终结，来世再续梦之伊甸** —— Eden*/b站弹幕\n- **今日已成往昔，明日即将到来，为此理所当然之事，感到无比痛心。** —— 寻找失去的未来\n- **我活在我的时间里，她活在她的时间里，因此，我们时间交错的瞬间，对我而言比任何事物都宝贵。** —— 她与她的猫\n- **人类，在决战之时难道会选择自己不擅长的武器来战斗吗？** —— 只有神知道的世界\n- **这只手，暂时不洗了** —— 小林家的龙女仆\n- **重要的人，不能忘记的人，不想忘记的人。 你，是谁？** —— 你的名字\n- **正是在对未来没有任何希望的时候，一个人能坚持到什么地步，才真正体现出这个人有多坚强。** —— 来自新世界\n- **除了这一颗心，都是你的。** —— 人渣的本愿\n- **正是因为这一点一滴觉得还有希望的自己，才是最无可救药的吧。** —— 人渣的本愿\n- **我们都很执着,而且思念的越深,越是绝望。** —— 人渣的本愿\n- **一个人觉得寂寞，和另一个人相互依偎又有什么错** —— 人渣的本愿\n- **想象力足以改变一切。** —— 来自新世界\n- **越是珍惜呆在这里的时间，今后就越是悲伤吧。但是我认为不能称之为「后悔」。** —— 小林家的龙女仆\n- **大部分人并不想长大，只是没办法继续当一个小孩子** —— 小林家的龙女仆\n- **不得了不得了** —— 小林家的龙女仆\n- **你已经不是我的狗了。** —— 龙与虎\n- **正因为有忘也忘不了的回忆，才会变得坚强，这就是所谓的成长吧！** —— 火影忍者\n- **其实我对混合咖啡还是很有自信的** —— 珈百璃的堕落\n- **如果当初握住的不是硬币，而是勇者的手......** —— 中二病也要谈恋爱 恋！\n- **只要是正义的一方，无论手段多么卑鄙都可以被原谅** —— 东京喰种\n- **你偶尔也该回头看看，那些在你身后的人，说不定已经追到你脚边了！！！** —— 妖精的尾巴\n- **因为喜欢你，所以想继续相信下去。** —— 空之境界\n- **自杀是没有理由的，只是今天没有飞起来罢了。** —— 空之境界\n- **听说，樱花花瓣飘落的速度，是每秒5厘米，思念的距离到底有多远。如果樱花下落时是有声音的，你会不会听到我对你的思念** —— 秒速五厘米\n- **在下雪时。第一次相会时。雪白的夜与漆黑的伞。只要有你在身边。只要你露出微笑。就是幸福。** —— 空之境界\n- **身体被冻僵了，仅有吐出的气息略带热度。望着彼此即将停止的心脏鼓动。 然后，极为珍惜的记忆随即就会消失而化为眷恋。** —— 空之境界\n- **对于虚伪而言，真实的光明或许过于耀眼了** —— 蔷薇少女\n- **好了 接下来就让你们见识一下程序员的本事** —— 骑士与魔法\n- **如果结果不如你所愿，就在尘埃落定前奋力一搏。** —— 夏目友人帐\n- **如果因为害怕失败，而不去努力，那就不会有能够成功的人。** —— 樱花庄的宠物女孩\n- **你一直相信的事，也让我相信吧。活着，是件美好的事。** —— Angle Beats\n- **我只希望，我喜欢的人可以健康的活着。** —— 人渣的本愿\n- **正因为生来什么都没有，因此我们能拥有一切。** —— 游戏人生\n- **未来的事无人知晓，所以它才如同这重逢一般，拥有着无限的可能性。** —— 命运石之门\n- **只要努力活下去，总有一天会笑着回忆。** —— 不可思议游戏\n- **想说什么就说，想做什么就做，我们不就是这么一直过来的吗？** —— LoveLive!\n- **也许一个人的快乐会建立在另一个人或者很多人的痛苦之上。但是，自己种下的祸根终有一天会报应在自己的身上的。** —— 地狱少女\n\n- **何必去在意自己与别人相比是否特别呢？即便只有一个人也好。只要有一个认为自己特别的人，我觉得那就足够了。** —— 冰菓\n\n- **虚伪的眼泪，会伤害别人，虚伪的笑容，会伤害自己。** —— 叛逆的鲁鲁修\n\n- **空太是笨蛋！** —— 樱花庄的宠物女孩\n\n- **不敢反抗压迫的心理将伴你一生** —— 狂赌深渊\n\n- **未来的旅程是如此遥远，能见到的光明却是如此稀少。即使如此——我仍然没有完全放弃希望。** —— 刀剑神域\n\n- **契约者不会做梦。** —— 黑之契约者\n\n- **不可结缘** —— 夏目友人帐\n\n- **去做你喜欢做的事吧 这就是所谓的那啥...青春嘛** —— 月色真美\n\n- **重要的感情总是非常单纯 自然脱口而出的** —— GAMERS电玩咖！\n\n- **This is your dream! Anything you can do in your dreams, you can do now!** —— My Little Pony: Friendship is Magic\n\n- **What about super-ultra-extreme-awesomazing?** —— My Little Pony: Friendship is Magic\n\n- **We've learned that friendship isn't always easy, but there's no doubt it's worth fighting for!** —— My Little Pony: Friendship is Magic\n\n- **今宵之月，绝不西沉。只此美梦，不再苏醒。从今往后，生生世世，长相厮守，为你立誓。** —— 银魂\n\n- **打架这玩意，不就是为了守护什么东西吗？** —— 银魂\n\n- **届けて— 切なさには 名前をつけようか“Snow halation”** —— Snow Halation\n\n- **我是想被包养，但不会接受施舍** —— 我的青春恋爱物语果然有问题\n\n- **善于破坏气氛的人，不仅能破坏好的气氛，其实也能把坏的气氛破坏掉。** —— 我的青春恋爱物语果然有问题\n\n- **为什么要称赞他人？那是为了把对方捧到更高的地方更容易绊他的脚，为了把他从高处摔下来。这就叫做称赞杀人法。** —— 我的青春恋爱物语果然有问题\n\n- **女生口中的「好人」首先百分之百是「怎样都好的人」的意思，再好也不过止于「方便好使的人」。也就是说，不管怎样都是没戏了** —— 我的青春恋爱物语果然有问题\n\n- **夜晚还远远没有结束!** —— 春宵苦短，少女前进吧！\n\n- **只要世间有酒,我就喝不够!** —— 春宵苦短，少女前进吧！\n\n- **如果我们能活着出去，千山万水，你愿意陪我一起看吗？** —— 狐妖小红娘\n\n- **不可结缘,徒增寂寞** —— 夏目友人帐\n\n- **就算世界终结，也无所谓** —— 少女终末旅行\n\n- **遇到事情不能坐以待毙！** —— 捷德奥特曼\n\n- **为了爱，与梦想！** —— 眼大人\n\n- **今日的余晖和你最后那天给我的拥抱，同一个温度** —— Myself\n\n- **想和你重新认识一次 从你叫什么名字说起。** —— 你的名字\n\n- **不管你在世界的哪个地方，我一定会，再次去见你的。** —— 你的名字\n\n- **只要记住你的名字，不管你在世界的哪个地方 ，我一定会，去见你。** —— 你的名字\n\n- **和绝望，和睦相处** —— 少女终末旅行\n\n- **愿你有一天，能与你最重要的人重逢** —— 可塑性记忆\n\n- **不相信人咬不到肚脐的，咬破肚脐去死如何？** —— 海猫鸣泣之时\n\n- **梦想是否无聊并不是别人来决定的，不管是什么样的梦想，自己拼命努力去追寻才是最重要的。** —— 守护甜心\n\n- **将愿望倾入不愿忘却的回忆中??** —— ef-a tale of memories\n\n- **倘若只是为了驱赶心中的寂寞，找谁都可以的。** —— 秒速5厘米\n\n- **什么都无法舍弃的人，什么都无法改变 。** —— 进击的巨人\n\n- **比希望更炙热，比绝望更深邃，这就是爱啊。** —— 魔法少女小圆-叛逆的物语\n\n- **我们都在命运之湖上荡舟划桨，波浪起伏着而我们无法逃脱孤航。但是假使我们迷失了方向，波浪将指引我们穿越另一天的曙光。** —— 死神\n\n- **懂得认输是非常重要的，不尝到失败的不甘，也就不会明白跌倒后怎么爬起来，更不可能再向前迈进。** —— 笨蛋测验召唤兽\n\n- **重要的不是你做了多少事，而是你放了多少心思进去。** —— 凉宫春日的忧郁\n\n- **就算是自私??我也希望那些人能够永远都有笑容??** —— 夏目友人帐\n\n- **(」?ω?)」うー！(／?ω?)／にゃー！** —— 潜行吧奈亚子\n\n- **欺骗世界，欺骗最初的你。** —— Steins;Gate\n\n- **在走廊上跌倒会流鼻血，在人生中跌倒会流眼泪。** —— 龙虎斗\n\n- **相信十年后的八月，我们还会相遇。** —— 未闻花名\n\n- **男人就应该保持冷静，沸腾的水只会被蒸发掉。** —— 假面骑士kabuto\n\n- **不管看到什么样的过去，都请不要迷失自己，不管你变成什么样子，我都是你的同伴。** —— angel beats\n\n- **想要试着去相互接近，但最后还是无法敞开心扉，结果就是擦肩而过??** —— 文学少女\n\n- **不能逃避，不能逃避，不能逃避，不能逃避??** —— EVA\n\n- **我终不能改变那个开始，何不忘了那个结局呢。** —— 悟空传\n\n- **因为我想活着，我不能掩藏我心中的本欲，正如我心中爱你美丽,又怎能嘴上装四大皆空。** —— 悟空传\n\n- **这短短的一生，我们最终都会失去。你不妨大胆一些，爱一个人，攀一座山，追一个梦。** —— 大鱼海棠\n\n- **出来吧，刻刻帝！** —— 时崎狂三\n\n- **翠星石最喜欢苍星石的说,所以到死也要在一起的说...** —— Rozen Maiden\n\n- **都是时辰的错！** —— Fate/Zero\n\n- **鸣神の　少しとよみて　さし昙り　雨も降らんか　君を留めん** —— 言叶之庭\n\n- **所谓爱情，是对对自己最重要的人，以慈悲的心保护他的想法。** —— 火影忍者\n\n- **旅行唯有出发前最愉快，狗儿唯有叫声最吓人，女人唯有背影最美丽。** —— 狼与香辛料\n\n- **让我们开始我们的约会（战争）吧** —— 约会大作战\n\n- **连我爸都没打过我** —— 高达0079\n\n- **这是你所不能理解的，人类感情的极致，比希望更热烈，比绝望更深邃——爱！** —— 魔法少女小圆新篇 叛逆的物语\n\n- **What, so everyone's supposed to sleep every single night now? You realize that nighttime makes up half of all time?** —— Rick\n\n- **人生没有彩排，只有现场直播，所以做最好的自己。** —— Internet\n\n- **对自己有自信时，不能对别人说「期待」。所谓的「期待」是放弃时的托词，因为别无选择。若缺少这种无奈感，这个词就太虚伪了。** —— 冰菓\n\n- **人难免伤害别人,也难免受伤,不过,人是不会轻易讨厌别人的.** —— 火影忍者\n\n- **以智者之名，为愚者代辩。** —— Gosick\n\n- **清算，终将到来。** —— Stellaris\n\n- **据说啊 叹气会让幸福溜走的** —— 再见了 我们的幼儿园\n\n- **你将不再是道具，而是人如其名的人。** —— 紫罗兰永恒的花园\n\n- **人没有回忆是无法活下去的哟** —— AIR\n\n- **只要万事俱备，就能一直保持冷静，无论发生什么事，都不会害怕。** —— 银魂\n\n- **正因为不会发生，人们才称它为”奇迹“** —— KANON\n\n- **我想成为一个温柔的人,因为曾被温柔的人那样对待,深深了解那种被温柔相待的感觉。** —— 夏目友人帐\n\n- **我喜欢的人…也能喜欢上自己，我认为这就是奇迹。** —— 月色真美\n\n- **大圣此去欲何? 踏南天，碎凌霄！若一去不回.... 便一去不回！** —— 影视\n\n- **我们一直在离别中，比如和爱的人，和伤害，甚至和时光。** —— 萤火虫之墓\n\n- **至少恋爱不是种机会，我认为它是一种意志。** —— 月色真美\n\n- **幸福感就如沉积在悲哀之河底下 隐隐发光的金砂** —— 月色真美\n\n- **有样东西是其他生物绝对没有，只有人类才有 那就是人有秘密。** —— 月色真美\n\n- **爱一定存在于世上 一定存在 无从寻觅的是爱的表现 是它的表达方式** —— 月色真美\n\n- **把同班的可爱女同学娶回家就是我最大的梦想** —— 月色真美\n\n- **在狂热思绪下喊出的爱情宣言中，存在着爱情的实体** —— 月色真美\n\n- **回首前尘，尽是可耻的过往** —— 月色真美\n\n- **月色如水，虽不如阳光般耀眼，但我的眼中却只有比那月色更可爱的你。心跳不知不觉中加速，嘴角也绷不住那溢出来的幸福笑意。月色确实醉人，却是因为你才显得更美** —— 月色真美\n\n- **“不管你我相距多远，我都想告诉你 我对你的心意不会变，给即将去到陌生城市的你 ，我永远喜欢你”** —— 月色真美\n\n- **我们人是需要吃饭、工作和休息的生物，只要满足了其中一项，其他两项也会逐渐满足，而当这三项都满足后，就会得到强烈的存在感。** —— 银魂\n\n- **看来这世界 似乎还想要驯服我 那就如你所愿吧 我会美丽地挣扎到底** —— 你的名字\n\n- **如果，樱花掉落的速度是每秒5厘米，那么两颗心需要多久才能靠近？** —— 秒速五厘米\n\n- **坐上与学校相反方向的电车，展开没有目标的旅行，去往那从未见过的地方** —— 比宇宙更远的地方\n\n- **不是为了战斗而活着，而是为了活着而战斗。** —— 《DARLING in the FRANXX》\n\n- **幸福的回忆，美满的回忆不一定会成为救赎，有时候，回忆越是美满便越痛苦，也有时候，会越害怕，无论是对于将要离开的人来说，还是对于被留下的人来说，都不可能会成为一种救赎。** —— 可塑性记忆\n\n- **恋爱不是谈出来的，而是陷进去的。** —— GAMER电玩咖！\n\n- **我们的哀伤和年龄是没有关系的。** —— 樱桃小丸子\n\n- **总在不停寻觅你的踪影，无论十字路口抑或梦境之中，明知你不在，却依然不停地找寻。** —— 秒速五厘米\n\n- **我想你们的努力一定会有回报的** —— 龙与虎\n\n- **人生不如意十有八九！** —— 龙与虎\n\n- **此身为剑所天成，身如钢铁，心似琉璃。** —— Fate\n\n- **我的梦想实现了，也留下了美好的回忆，我已经没有任何遗憾了。** —— 末日时在做什么?有没有空?可以来拯救吗?\n\n- **死者的血泪混入滚滚的流沙之中...将会赐予修罗更强的力量...** —— 火影忍者\n\n- **有型的东西终究会消逝，不过……终于，这份回忆还是永远不朽的…** —— 火影忍者\n\n- **人啊...想要保护重要东西的时候，就真的能变得很坚强。** —— 火影忍者\n\n- **寂寞阴暗中度过，孤单孕育了怨与悲凉。锋利的伤痛刺入了我们彼此胸膛，这是我们无法躲避的惩罚，是我们不该任人生撩拨忧伤，不该走过之后又往回看。** —— 火影忍者\n\n- **哪怕是打断你的手脚，也要把你带回去。** —— 火影忍者\n\n- **从你站在桥上看我的 那一刻起你就是我的世界。** —— 火影忍者\n\n- **龙儿是我的，谁都不许碰。** —— 龙与虎\n\n- **卧龙低伏，入我阵来。** —— 一人之下\n\n- **好红，每当想起你，枫叶就会被染红。** —— 银仙\n\n- **相信十年后的八月，我们还会相遇。** —— 未闻花名\n\n- **应该可以了吧，我已经很努力了，应该可以抵达终点了……** —— AIR\n\n- **殺してあげる** —— 緋色月下、狂咲ノ絶\n\n- **能力越大,责任越大** —— 蜘蛛侠\n\n- **不要随便贬低自己** —— 终将成为你\n\n- **我不喜欢这世界，我只喜欢你** —— 乔一\n\n- **神啊 我的人生到底为何而存在呢** —— 蜂蜜与四叶草\n\n- **想象力是武器，没有想象力的人会先死。** —— 哥布林杀手\n\n- **我们只是历史的过客，目标渺茫，无地自容。我们没有世界大战可以经历，也没有经济大萧条可以恐慌。我们的战争充其量不过是内心之战，我们最大的恐慌就是自己的生活。** —— 搏击俱乐部\n\n- **有的只是很简单的唯一的思想…只此一个！“胜利然后支配”！仅此而已...这才是我唯一的满足感！…至于过程和方法之类…并不重要！** —— JOJO的奇妙冒险\n\n- **王有王的才能，厨师有厨师的才能，替身之间是没有强弱之分的** —— JOJO的奇妙冒险\n\n- **如果我们能活着出去的话，千山万水，你愿意陪我一起看吗？** —— 狐妖小红娘\n\n- **如果可以，愿来生你不要忘记我，我也不要忘记你那熟悉的温柔。** —— 狐妖小红娘\n\n- **我愿意呀，五十年前就愿意了。** —— 狐妖小红娘\n\n- **而我不知不觉把自己遗忘，只想为你完成那个梦想。** —— 狐妖小红娘\n\n- **让我成为你的双眼，把那世界万千，描绘在你面前。** —— 狐妖小红娘\n\n- **有很多辛苦的事情，从结果上来说并不好。但是一起努力的过程，绝对不是没用的。我是这么想的。所以现在不是停滞不前的时候。** —— 如果有个妹妹就好了\n\n- **你们这些天才止步不前的时候，我会走得更远。** —— 如果有个妹妹就好了\n\n- **有些景色必须前进才能看到，那么只有勇往直前。** —— 如果有个妹妹就好了\n\n- **果然啊，创造一样东西很开心。让别人享受自己创造的东西，是一种幸福呢。** —— 如果有个妹妹就好了\n\n- **世界上哪有不会输的英雄啊** —— 凸变英雄\n\n- **我怕失去了你，我的世界就没有了光明** —— 凸变英雄\n\n- **虽然有时候，不知道要写些什么，有时候，却有很多想说的，来不及记录。回忆一转身，就悄悄溜走了。** —— 凸变英雄\n\n- **哭过喊过便会停止哭泣** —— 从零开始的异世界生活\n\n- **很抱歉，前面是单行道，你就乖乖的夹着尾巴耸拉着脑袋返回原点吧！** —— 一方通行\n\n- **即便我弱了，也并不代表你强了。** —— 魔法禁书目录\n\n- **小鬼，你为坠入不幸深渊之人而心痛  我不会多言，只不过周遭充斥不幸，而你的小船仅能载一人，若救助其他人，只会让彼此沉没。** —— 文豪野犬\n\n- **死亡不是终点，被遗忘才是。** —— 寻梦环游记\n\n- **世界上的人都变成废柴，这个世界就没有废柴了。** —— 春物\n\n- **青春是谎言，是邪恶。** —— 春物\n\n- **纵使日薄西山。** —— 末日时在做什么\n\n- **孤高的游荡灵魂不需要羁绊之地** —— 春物\n\n- **我的金子，只给千寻。** —— 千与千寻\n\n- **步伐虽小，密而不停** —— 实验品家庭\n\n- **只会比大小真是没品** —— 某科学的超电磁炮S\n\n- **问灵十三载，等一不归人。** —— 魔道祖师\n\n- **如果我是雨的话，也能像连接那永远都不将交汇的天空和大地一样，去连接某个人的心吗。** —— BLEACH\n\n- **你还是...笑起来...最棒了** —— 最终幻想XIV\n\n- **'Cause rainbow won't light up the sky unless you let it rain.** —— My Little Pony: Friendship is Magic\n\n- **千山万水，因你不过毫厘** —— 狐妖小红娘\n\n- **古往传奇多少别离，我 只是不经意 遇到了你** —— 狐妖小红娘\n\n- **或许，你认为你的心已经给了他。但是，我会证明……我有一颗爱你的心！** —— 狐妖小红娘\n\n- **你相信时间会抚平一切，可时过境迁，你已不复醒** —— 动画\n\n- **不拼尽全力去试一下，又怎么会知道啊** —— 刺客伍六七\n\n- **我今天就要带她走，我看谁敢拦我！** —— 刺客伍六七\n\n- **你们人类让我明白了一个道理，那就是这个世界是不讲道理的** —— 刺客伍六七\n\n- **人各有命，上天注定。有人天生为王，有人落草为寇。脚下的路如果不是你自己的选择，那么旅程的终点在哪儿也没人知道，你会走到哪儿，会碰到谁，都不一定。** —— 镇魂街\n\n- **世界是无情的，并不存在与生俱来的英雄。 所以只能由刚好在旁边的人粉墨登场， 演一出英雄的戏码。** —— 魔法禁书目录\n\n- **樱花满地集于我心，楪舞纷飞祈愿相随** —— 罪恶王冠\n\n- **人的能力是有极限的。我从短暂的人生当中学到一件事……越是玩弄计谋,就越会发现人类的能力是有极限的……除非超越人类。** —— JOJO的奇妙冒险\n\n- **那似乎是比翼鸟。这种鸟天生单翼，须靠雌雄二鸟相互依偎才能翱翔天际，是种有缺陷的生物。但是，不知为何，我却感受到了这种生活方式的美妙。** —— Darling in the FRANXX\n\n- **追寻只是因为无法抓获，想要触碰，只是因为知道自己触碰不到。** —— FLCL Progressive\n\n- **世界上所有的不利情况都是因为当事者的能力不足造成的** —— 东京喰种\n\n- **一个人有表里两面，你能看到的，仅仅是其中一面而已。** —— 零的执行人\n\n- **不知彼此来世相逢。是否还能记得我是谁？** —— 狐妖小红娘\n\n- **与其因为不信任而后悔，不如因为相信而后悔。** —— 刀剑神域\n\n- **人生没有那么多的捷径，你不知道路的尽头是什么，但你必须向前走。** —— 刀剑神域\n\n- **一个人决定寂寞，和另一个人相互依偎又有什么错** —— 人渣的本愿\n\n- **我可从来不认为恐惧可以成为舍弃他人的借口，人不能因为恐惧，就连身为人类的品性都丢掉。** —— 铁甲城的卡巴内瑞\n\n- **你知道吗？从人眼的高度能看到的地平线，是离自身的距离大约是4公里。** —— 青春猪头少年不会梦到兔女郎学姐\n\n- **梦想是一个天真的词，实现梦想是一个残酷的词** —— 哆啦A梦\n\n- **既然今天是昨天，那么睡到明天就好。** —— 青春猪头少年不会梦到兔女郎学姐\n\n- **做不到的事没必要勉强去做，不也挺好吗？** —— 青春猪头少年不会梦到兔女郎学姐\n\n- **给我高高的飞起来啊！** —— 星游记\n\n- **要是眼睁睁的看着重要的同伴死去，就算是死，我也不能瞑目。** —— 家庭教师\n\n- **你的败因只有一个，就是与我为敌。 -** —— 家庭教师\n\n- **如果真是这样， 就由我来把彭格列毁灭！** —— 家庭教师\n\n- **十代目的意志就是我们的意志！** —— 家庭教师\n\n- **但我拒绝！我岸边露伴最喜欢的事情之一，就是向那些自以为是的家伙说，NO！** —— JOJO的奇妙冒险\n\n- **人类的赞歌就是勇气的赞歌！** —— JOJO的奇妙冒险\n\n- **大家都是伪善者，世间充斥着不真实。** —— 无头骑士异闻录\n\n- **不服从命令的人是人渣，抛弃同伴的人连人渣都不如。** —— 火影忍者\n\n- **砸瓦鲁多！** —— JOJO的奇妙冒险\n\n- **背后即是祖国，我们无路可退。** —— 那年那兔那些事\n\n- **不能输，笑吧！** —— 约定的梦幻岛\n\n- **不管是怎样的回忆，都是我们活过的人生。** —— Angel Beats!\n\n- **孤独的我们才有人类的样子。** —— Angel Beats!\n\n- **声起立华乐独奏，曲末音无心结弦。** —— Angel Beats!\n\n- **不愿意的时候，逃跑也没有关系！** —— 灵能百分百\n\n- **邪王真眼是最强的** —— 中二病也要谈恋爱\n\n- **大部分人并不想长大 只是没办法继续当一个小孩子。** —— 小林家的龙女仆\n\n- **从开始的第一天起，就回不去了。** —— 流浪地球\n\n- **欧拉欧拉欧拉欧拉！** —— JOJO的奇妙冒险\n\n- **一举一动，都是承诺，会被另一个人看在眼里，记在心上的。** —— 悬崖上的金鱼姬\n\n- **人各有命，上天注定。有人天生为王，有人落草为寇。脚下的路，如果不是自己的选择，那旅程的终点在哪儿，也没人知道，你会走到哪儿，会碰到谁，都不一定。** —— 镇魂街\n\n- **成一事者，是失之不渝的愚者；毁一事者，是停滞不前的贤者。** —— 不正经的魔法讲师\n\n- **到底是，为什么呢？** —— 金木研\n\n- **我爱你，与你何干？** —— 歌德\n\n- **即使我弱了，也并不代表你强了** —— 魔法禁书目录 第二季\n\n- **正因为有了音乐，才有了相遇的瞬间，有了相会的感动，有了相逢的人们，有了邂逅的思念。** —— 四月是你的谎言\n\n- **你驻足于春色中，于那独一无二的春色之中。** —— 四月是你的谎言\n\n- **每当心情郁闷的时候，用手托腮就好，手臂会因为帮上忙而开心的。** —— 四月是你的谎言\n\n- **你的所言所行，全都闪烁着光芒，太过刺目，于是我闭上双眼，但内心还是无法停止对你的憧憬。** —— 四月是你的谎言\n\n- **或许前路永夜，即便如此我也要前进，因为星光即使微弱也会为我照亮前途。** —— 四月是你的谎言\n\n- **九月是蒲公英漫飞的季节，我喜欢这个季节，只可惜今天是九月的最后一天了** —— 我是江小白\n\n- **不辜负年华，做自己想做的事，唱自己想唱的歌** —— 我是江小白\n\n- **世间有很多事情，人们无法从它寂静的表象，猜测到暗涌，就像一个人和另一个人的相遇** —— 我是江小白\n\n- **用我那牵强的微笑，活出无人能比的骄傲。** —— 黑执事\n\n- **人类的赞歌就是勇气的赞歌** —— JOJO的奇妙冒险\n\n- **我没有任何理由为了那些人让自己的人生付之一炬！** —— 三月的狮子\n\n- **但是，我没有后悔，不能后悔，因为，我所做的事情一定没有错！** —— 三月的狮子\n\n- **相信奇迹的人，本身就和奇迹一样了不起。** —— 星游记\n\n- **即使天无雨，我亦留此地。** —— 言叶之庭\n\n- **有些梦想虽然遥不可及，但不是不可能实现。只要我足够的强。** —— 秦时明月\n\n- **有一天，你到了人类的世界，不要去爱上一个人，因为，爱上一个人，会让你真正变成孤单一人。** —— 朝花夕誓\n\n- **经为流逝的日月。纬为人们的生业。** —— 朝花夕誓\n\n- **悲痛的事，温柔以对；难过的事，坚强以对。** —— 朝花夕誓\n\n- **叫做妈妈的人，是不会哭的。** —— 朝花夕誓\n\n- **每一个兔子都有一个大国梦** —— 那年那兔那些事\n\n- **乘上与平时相反的列车，为了去见从未见过的风景。** —— 比宇宙更远的地方\n\n- **我不做人了！** —— JOJO的奇妙冒险\n\n- **我是否住进了某人的心房呢？** —— 四月是你的谎言\n\n- **那么难受，那么痛苦，可是 世界这么美丽...让我如何能够忘记！** —— 朝花夕誓\n\n- **雁过拔毛，兽走留皮。涂山，我罩的，懂？** —— 狐妖小红娘\n\n- **那天，我见过的最强剑客，提起了天下最强的宝剑······却早已没了剑心。** —— 狐妖小红娘\n\n- **知识是很美的，它们可以让你不出家门就了解这世上的许多事。** —— 妖精的尾巴\n\n- **尽情的依靠我吧，因为总有一天我也会依靠你的。** —— 妖精的尾巴\n\n- **电助！凉子，看到了吗！** —— 电脑线圈\n\n- **I met the girl under full-bloomed cherry blossoms, and my fate has begun to change.** —— 四月是你的谎言\n\n- **不相信自己的人，连努力的价值都没有。** —— 火影忍者\n\n- **我一点也不走运。** —— Fairy gone\n\n- **我从未让你们骄傲，你们却待我如宝。** —— Az殇芯的chx\n\n- **错的不是我，而是这个世界！** —— 东京喰种\n\n- **你驻足于春色中，于那独一无二的春色之中。** —— 四月是你的谎言\n\n- **和她相遇的瞬间，我的人生就改变了。所见所闻所感，目之所及全都开始变得多姿多彩起来。** —— 四月是你的谎言\n\n- **やり遂げたよ、最後まで。** —— ラブライブ\n\n- **要把所有的夜归还给星河，把所有的春光归还给疏疏篱落，把所有的慵慵沉迷与不前，归还给过去的我。** —— 德卡先生的信箱\n\n- **总有一天，我要撕碎这片虚伪的星空。** —— 黑之契约者\n\n- **那么，开始实验吧！** —— 假面骑士Build\n\n- **我看到这个世界的恶意，我们正在接受考验。** —— 机动战士高达00\n\n- **喜欢上一个人就是变得束手无策。** —— 悠久之翼2\n\n- **所谓人，无论是谁到了最后，都会形单影只。** —— 悠久之翼2\n\n- **长大了，才能体会什么是责任！** —— 家庭\n\n- **你是否会等待着我?我还想变的更加完美...** —— LoveLive!Sunshine!\n\n- **我只是想要得到「我没有逃避」的记忆吧。** —— 三月的狮子\n\n- **人生海海，敢死不叫勇气，活着才需要勇气。** —— 麦家-人生海海\n\n- **我无知又愚蠢，世界残酷又疯狂。** —— 进击的巨人\n\n- **我的面包！** —— Clannad\n\n- **是我，是我先，明明都是我先来的，接吻也好，拥抱也好，还是喜欢上那家伙也好。** —— 白色相簿2\n\n- **一旦醉心于狩猎，不到最后关头不会发现自己才是猎物。** —— 来自新世界\n\n- **人类这种生物，不管有过多少不得不伴着泪水吞咽的教训，只要过了咽喉，所有教训便又会被彻底遗忘。** —— 来自新世界\n\n- **即使我变弱了，也不代表你变强了。** —— 魔法禁书目录\n\n- **喜欢和不讨厌之间可是有着数亿光年的距离的。** —— 四月是你的谎言\n\n- **痛苦着痛苦着，满脑子只能想我的事。** —— 四月是你的谎言\n\n- **我拼命地挣扎，我对活下去的执著，都是因为你，是你让我，对和你一起度过的那段时光无比留恋。** —— 四月是你的谎言\n\n- **站起来！站起来啊！你是我的腿吧！站起来啊！** —— 四月是你的谎言\n\n- **我不甘心，明明你为我做了那么多，我却什么都不能为你做。** —— 四月是你的谎言\n\n- **等着我，有马，不对，别回头，向前进，你要一直向前，我一定会追上来的。** —— 四月是你的谎言\n\n- **就此分别吧！请继续向前，迎接樱花漫溢的四月，但请不要忘记我，友人A……** —— 四月是你的谎言\n\n- **那里还有——医生的房间啊！** —— Fate / Grand Order\n\n- **因为我...我希望不做任何的努力，让对方喜欢上最真实的我。** —— 女高中生的无所事事\n\n- **没有一封信是不必被送达的。** —— 紫罗兰永恒花园\n\n- **我觉得，不改变也很好。** —— 来自风平浪静的明天\n\n- **痴情的妖怪啊,请再等一世吧。** —— 狐妖小红娘\n\n- **你从我的手中展翅高飞，我深受打击。在这世上的某处，再次寻找崭新的你的影子，那就是我们之间的美好结局。** —— 骚动时节的少女们啊\n\n- **一旦你尝试过天空的味道，你就会永远向上仰望** —— 列奥那多·达芬奇\n\n- **人间不温柔** —— 李诞\n\n- **知道和感觉到是两码事。** —— 《看见》\n\n- **只要学不死，就往死里学。** —— 网络热语\n\n- **我是奥尔加·伊滋卡，几颗子弹不要紧的！** —— 机动战士高达：铁血的孤儿\n\n- **死亡的尽头，没有神** —— 机动战士高达00:先驱者的觉醒\n\n- **只要能和大家一起唱歌，大概就算毕业以后我们分开了，只要听见这首歌就能回想起现在。** —— TARI TARI\n\n- **我没能说出口，不管是那句「我走了」，还是那句「对不起」，或者那句「谢谢」...** —— TARI TARI\n\n- **现世为梦，夜梦为真。** —— 《xxxholic》\n\n- **隐约雷鸣阴霾天空即使风无雨我亦留此地** —— 言叶之庭\n\n- **今天不想做，所以才要做** —— 春上村树\n\n- **嗯，明白。我们是天人的Gundam Meister** —— 机动战士高达00\n\n- **不动身的话就永远无法追寻，哪怕是休息也不会就此停下。** —— Aqours\n\n- **朝着下一道光芒横渡大海吧！** —— Aqours\n\n- **这个世界啊，很美丽的，很广大的，很辽阔的！** —— Darling in the FRANXX\n\n- **我对Darling啊，最喜欢了。我们从今以后，都要在一起哦。** —— Darling in the FRANXX\n\n- **为了传达不到的思念而苦恼，只会感到痛不欲生。** —— WHITE FIRST LOVE\n\n- **千军万马滚滚来，不知何人留情怀！** —— Other\n\n- **用决斗......给大家......带来笑容......** —— 游戏王<A-RCV>\n\n- **别人的看法都是狗屁，你是谁只有你自己说了才算，这是爹教我的道理。** —— 哪吒之魔童降世\n\n- **或许前路永夜，即便如此我也要前进，因为星光即使微弱也会为我照亮前路。** —— 四月是你的谎言\n\n- **这个世上没有无用的齿轮，也只有齿轮本身能决定自己的用途。** —— 嫌疑人x的献身\n\n- **光就是羁绊之力，它会再度被某人继承，散发出耀眼的光。** —— 奈克瑟斯奥特曼\n\n- **人们渴望像鸟儿一样自由自在地飞翔，可他们并没有想过，鸟儿也并不自由，它们之所以飞翔，是为了生存。** —— 奈克瑟斯奥特曼\n\n- **记忆是不会消失的，只是一时想不起来了而已。** —— 千与千寻\n\n- **我不借助别人的力量就没办法跟仰慕的人聊天吗？** —— 女高中生的虚度日常\n\n- **强韧，无敌，最强！玉碎，粉碎，大喝彩！** —— 海马濑人\n\n- **人的好意是沉重的。** —— 黑神\n\n- **我们所度过的每个平凡的日常，也许就是连续发生的奇迹。** —— 日常\n\n- **我最喜欢三月的风，四月的雨，不落的太阳和最好的你** —— 闺密\n\n- **在末日中，人们总想寻找希望，但要真有希望的话，那还叫希望吗？** —— 灵笼\n\n- **可爱即是正义。** —— 游戏人生\n\n- **在末日中，人们总想寻找希望，但要真有希望的话，那还叫末日吗？** —— 灵笼\n\n- **只要抗争下去就能带来奇迹，这是恐怖分子的教诲，你给我记清楚了。** —— 未来日记\n\n- **相信奇迹的人本身就和奇迹一样了不起啊** —— 星游记\n\n- **人类的赞歌就是勇气的赞歌。** —— JOJO的奇妙冒险\n\n- **你们腌太监也不会动人脑子啊！** —— 铁心搏奕\n\n- **这是你所不能理解的，人类感情的极致，比希望更热烈，比绝望更深邃——爱！** —— 魔法少女小圆新篇\n\n- **我不要你觉得，我要我觉得。** —— 中餐厅\n\n- **神啊，求求你。已经足够了。已经没事了。我们都会熬过去的。** —— 天气之子\n\n- **自古以来，天空上就是另一个世界。** —— 天气之子\n\n- **在东京的天空上，我们决定性的改变了世界的模样。** —— 天气之子\n\n- **向天空拼命伸出的双手，发射那么巨大的东西，只是为了寻找超出想象的彼岸所存在的东西。** —— 秒速五厘米\n\n- **你是否会等待着我？我会变得更加完美！** —— Aqours\n\n- **さあ，Games始めましょうか** —— 游戏人生\n\n- **被一个自己不感兴趣的人示好，你不觉得没有比这更恶心的事吗** —— 人渣的本愿\n\n- **世界上所有的不利状况都是因为当事者的能力不足** —— 东京喰种\n\n- **在虚构现实里寻求现实感的人才有问题** —— 凉宫春日的忧郁\n\n- **Ex - ploooosion !** —— 为美好的世界献上祝福\n\n- **是我，是我先，明明都是我先来的……接吻也好，拥抱也好，还是喜欢上那家伙也好** —— 白色相簿2\n\n- **没有一个世界会比活在这个世界痛苦** —— 黑岩射手\n\n- **如果把那一端的敌人全部杀掉的话，我们就能自由了吗？** —— 进击的巨人\n\n- **今后我们来度过满是愉快之事的人生吧** —— Charlotte\n\n- **如果一切都是镜花水月，那就让这万物走向终结。如果一切皆是命中注定，那就让这世界消失殆尽。** —— 失落的歌谣\n\n- **能够用自己喜欢的工作维持生活是件很幸福的事情** —— 白箱\n\n- **有的鱼是永远关不住的，因为他们属于天空。** —— 大鱼海棠\n\n- **我会化作人间的风雨陪在你的身边** —— 大鱼海棠\n\n- **你以为你接受的是谁的爱，是一个天神的爱！他背叛所有神灵去爱你，为你忍受一切痛苦。** —— 大鱼海棠\n\n- **深藏不露是一种卓越的才能** —— 欢迎来到实力至上主义的教室\n\n- **这样叹气的话，幸福会像四处逃散的小蜘蛛一样溜走的。** —— 辉夜大小姐想让我告白\n\n- **世上所以不公平之事是由于当事人能力不足所致。** —— 金木研\n\n- **雨滴降落的速度是每秒十米，我该用怎么样的速度，才能将你挽留？** —— 言叶之庭\n\n- **樱花落下的速度是每秒五厘米， 我该用怎么样的速度，才能与你相遇。** —— 秒速五厘米\n\n- **如果当时我们说了再见，后来是不是就可以再见** —— 昨日青空\n\n- **音无结弦之日 跃动天使之心 立于浮华之世 奏响天籁之音** —— Angel Beats!\n\n- **温柔正确的人总是难以生存，因为这世界既不温柔，也不正确。** —— 我的青春恋爱物语果然有问题\n\n- **我一直注视着你，似近，似远。但你永远，看不见我……** —— 来自风平浪静的明天\n\n- **与其被人扯碎校服，撕破心灵，倒不如直接剁碎自己的躯体，来得痛快。** —— 黑岩射手\n\n- **目标是以科学的力量凌驾于超能力之上，为了伯伦希尔的荣耀。** —— 小绿和小蓝\n\n- **这东西是越嚼越有味哦~** —— BanG Dream! 2nd Season\n\n- **即使再也没有晴天也没有关系.** —— 天气之子\n\n- **我一直以为最糟糕的情况是你离开我，其实最令我难过的，是你不快乐。** —— 精灵旅社\n\n- **キラキラ☆ドキドキ** —— 戸山香澄\n\n- **我下定决心要当海贼王，就算因此而战死，那也无所谓。** —— 海贼王\n\n- **规则是用来被打破的。** —— 机械公敌\n\n- **木叶飞舞之处，火亦生生不息** —— 火影忍者\n\n- **当我拔出第二把剑时，就是为了我所爱之人** —— 刀剑神域\n\n- **你指尖跃动的电光，是我此生不变的信仰，唯我超电磁炮永世长存。** —— 某科学的超电磁炮\n\n- **遇事不决，量子力学。** —— 青春期猪头少年不会梦到兔女郎学姐\n\n- **我们终会相遇相知，在那悠远的苍穹。** —— 缘之空\n\n- **Star Burst Stream!** —— 刀剑神域\n\n- **虽然想做一团火，却成了一块透视苦难的冰** —— 卡夫卡研究\n\n- **生命可以随心所欲，但不能随波逐流** —— 猫的报恩\n\n- **我们所度过的每个平凡的日常，也许就是连续发生的奇迹** —— 日常\n\n- **加油** —— 自编\n\n- **夕阳真是耀眼无比啊。** —— 女高中生的虚度日常\n\n- **今天我就要带她走，我看谁敢拦我** —— 刺客伍六七\n\n- **这里有你,他现在只有我了。** —— 罗小黑战记\n\n- **星空之所以美丽，就是因为在无限的宇宙中，不管黑暗如何蔓延，都有星星的光芒去把它照亮。世界也是这样，有绝望的地方，就会有希望产生。** —— 星游记\n\n- **我来做最不想做的事情了。** —— 22/7\n\n- **你只见树，未见森林** —— 火影忍者\n\n- **你就赌我会死吧，因为你逢赌必输。** —— 火影忍者\n\n- **奶奶说过，男人有两件事不能做——绝不能让女孩子流泪和浪费食物。** —— 假面骑士Kabuto\n\n- **正因为这样，我才决定任何时候都要尽全力享受人生，这样的话，无论什么时候死去，都是最幸福的一生了吧** —— 恋爱随意链接\n\n- **正因为有了所有的过去，才成就了现在的我。否定自己所走过的路途，就意味着否定现在的自己。** —— 恋爱随意链接\n\n- **每个人每一天的价值都是完全相等的，无论做什么，都不会改变我今天活着的价值。** —— 我想吃掉你的胰脏\n\n- **我这个人呀，能过着这样平凡普通的日子就很开心了。** —— 我想吃掉你的胰脏\n\n- **每个人能走到现在，都是自己选择的结果。** —— 我想吃掉你的胰脏\n\n- **都说樱花飘落时让人伤感，而我看到樱花盛开也觉得伤感，因为我会计算，我还能再看几次樱花盛开呢。** —— 我想吃掉你的胰脏\n\n- **只要人活在这世上就一定是有意义的，怎么活是自己选的。** —— 我想吃掉你的胰脏\n\n- **人生，一半是现实，一半是梦想。一念花开，一念花落。** —— 火影忍者\n\n- **我希望，我能完全信任你，我还从来没有能这样信任过谁。我也希望，你将给我最大的支持。** —— 安妮日记\n\n- **愿你有一天，能和你最重要的人重逢。** —— 可塑性记忆\n\n- **告诉我，神会流血吗？——神不会，但你会。** —— 烦人的村民\n\n- **さあ、始めようか。(那么，游戏开始吧。)** —— No Game No Life\n\n- **我讨厌温柔的女孩子，温柔的女孩子其实对所有人都温柔，而我却会误以为只对自己温柔，然后沾沾自喜得意忘形，最后弄得不欢而散，双方都受到伤害，所以我才讨厌温柔的女孩子。** —— 我的青春恋爱物语果然有问题\n\n- **无知而又纯洁的岁月。是任何人都曾拥有的。世界上没有一成不变的事务。所以只要以其他方式找到自己的快乐就行了。** —— CLANNAD\n\n- **粉色蓝宝石的宝石语是「献给弱者的正义」。** —— 宝石商人理查德的谜鉴定\n\n- **喂，前面可是地狱啊！おい、この先は地狱だぜ！** —— Fate/stay night\n\n- **Steel is my body, and fire is my blood.** —— Fate/stay night\n\n- **游龙当归海，海不迎我自来也。** —— 火影鸣人\n\n- **孩子，我愿意为你而前行。** —— 灵笼\n\n- **世界上一切不利状况，都是因为当事人的能力不足。** —— 东京食尸鬼\n\n- **隐约雷鸣，阴霾天空，即使天无雨，我亦留此地。** —— 言叶之庭\n\n- **没有未来的未来不是我想要的未来。** —— 境界的彼方\n\n- **只要怀着理想而行动，就算结果不尽如人意也没有关系。但是如果失去了理想，那就真的一无所有了，连自己珍视的人都保护不了。** —— 境界的彼方\n\n- **我喜欢你，比这个世界上其他任何人都喜欢你，我永远都会喜欢你的。只有我的这份心情是不会输给任何人的，即使我的这个身体毁灭了、从世界上消失了，来世我肯定还是会喜欢上你的。** —— 境界的彼方\n\n- **愿有朝一日与你见面还能释放温暖拥你入怀。** —— 境界的彼方\n\n- **已经没什么好害怕了。** —— 魔法少女小圆\n\n- **声起立华乐独奏，曲末音无心结弦。** —— Angel Beats!\n\n- **总在不停寻觅你的踪影，无论十字路口抑或梦境之中，明知你不在，却依然不停地找寻。** —— 秒速5厘米\n\n- **只要引导着二人的两把命运之剑还在身边，我们就绝不会失败。** —— 刀剑神域\n\n- **这虽然这是游戏，但可不是闹着玩的。** —— 刀剑神域\n\n- **花开得太好，所以摇摇欲坠；这一切的事情，老得这样快；世间一直熙攘着。** —— 素年锦时\n\n- **人要意识到自己过得悲哀，需要很长时间；要意识到其实不必如此，则需要更久。** —— 马男波杰克\n\n- **从这里（太空）根本看不到什么国境线，只有地球。** —— 星空清理者\n\n- **你那无聊的幻想，就由我来打破！** —— 魔法禁书目录\n\n- **正义不是行使武力的理由，而是正相反——为了将动武的理由正当化，人们才会高喊正义。** —— 末日时在做什么？有没有空？可以来拯救吗？\n\n- **君子无争，含光无形，坐忘无心。** —— 秦时明月\n\n- **我在这里只学会一件事，那就是不到最后绝不轻言放弃。如果回到了现实世界，我一定会再度和桐人你相遇，然后重新喜欢上你。** —— 刀剑神域\n\n- **最近我很喜欢明天见这句话，因为只要许下约定，就能期待明天的到来。** —— 结城友奈是勇者\n\n- **就算没有意义，偶尔也会有好事发生。** —— 终末少女旅行\n\n- **你将不再是道具，而是成为人如其名的人。** —— 紫罗兰的永恒花园\n\n- **大家热爱的事物，擅长的事物都不同，都拥有自己的世界，一个人一个世界，这些互相连接的话，就会展开许多的可能性，广大、未知，就像是宇宙一样。** —— 恋爱小行星\n\n- **无论人生过得怎么样，都不要失去自己活着的意义，努力的去追逐心中的梦想，留下自己曾经在这个世界活过的痕迹，不要等到一切都失去了才追悔莫及。** —— 天使的心跳\n\n- **人生没有那么多预算，不要等到到死后世界叹息，珍惜眼前所有。相信每天都是新的开始，都充满希望.** —— 天使的心跳\n\n- **真真需要记住的不是立华奏，而是天使身体里跳动的那颗永不结弦之心。** —— 天使的心跳\n\n- **人总有一天会孤独一人，然后活在自己的回忆中。为了能笑着于孤独相依为命，我决定战斗下去，决定不会再以泪洗面。** —— 天使的心跳\n\n- **与绝望~和睦相处。** —— 少女终末旅行\n\n- **人类的赞歌是勇气的赞歌，人类的伟大是勇气的伟大！** —— JOJO的奇妙冒险\n\n- **孤独的人不会伤害别人，只会不断地伤害自己罢了。** —— 我的青春恋爱物语果然有问题\n\n- **枷锁，自然规律，时光的流逝，名为身体的容器，名为心灵的自我。** —— 四月一日灵异事件薄\n\n- **没事没事，不同朋友擅长的事情也不同。** —— 兽娘动物园\n\n- **如果有人对我说抱有希望是错误的花，我会无数次回答“不是这样的”，无论什么时候都一定会这样撑下去。** —— 魔法少女小圆\n\n- **这么温暖的世界里有我，要感谢神明了。** —— Comic Girls\n\n- **Don't forget. Always,somewhere,someone is fighting for you. As long as you remember her,you are not alone.** —— 魔法少女小圆\n\n- **这就是人类感情的极致，比希望更炽热，比绝望更深邃的，爱哟！** —— 魔法少女小圆\n\n- **露珠落去花留着，花萎露珠未消去。奈何露已随风去，花间寻觅不见珠。** —— 学园孤岛\n\n- **波，高低起伏的东西；波，产生后开始扩散；波，自己无法抵抗的东西。** —— 四月一日灵异事件薄\n\n- **在這手心之中的，就是“心”啊。** —— 死神\n\n- **木叶飞舞之处，火亦生生不息。** —— 火影忍者\n\n- **你以为我是谁？这是我埋下的因，我要亲手解决这一切。** —— 某科学的超电磁炮\n\n- **只要呼唤你的名字，我们的牵绊就永远不会消逝。** —— 紫罗兰永恒花园外传：永远与自动手记人偶\n\n- **我也许能再一次找到活着的目的，也许能再一次找到活着的意义，为了那些人，奉献出我的人生的话……** —— Angelbeats\n\n- **别低下头  排球是一门积极向上的运动！** —— 排球少年\n\n- **理解何为孤单，努力想得到爱的你，内心的悲伤是否稍微宣泄了呢？** —— 夏目友人帐\n\n- **自己不经意的一句话，触动了别人的心。** —— 恋如雨止\n\n- **游荡的孤高灵魂不需要羁绊之处。** —— 我的青春恋爱物语果然有问题\n\n- **如果说现在的日子过得很穷困，那我就去喜欢上穷困。** —— 隐瞒之事\n\n- **人和人之间就像这风筝一样，拉的太紧就飞不远，放的太松又掉下来，而当它飞的很高很高你还拽着不放，它就有可能会断掉，再也回不来了。** —— 灵契\n\n- **一日为灵，终生为影，灵气共生，魂命无分，阴阳调和，万物皆宁。** —— 灵契\n\n- **端木熙，别忘了，你是我的祭司，谁也别来跟我争，他神龙章轩不可以，神也不行。** —— 灵契\n\n- **从今往后，你不能斩的人我来斩，你不能伤的人我来杀，既然你要保护这个世界，那我便保护你，这就是我的信念！** —— 灵契\n\n- **千载流年一如梦，月落山河一世倾。** —— 灵契\n\n- **不可结缘，徒留寂寞……** —— 夏目友人帐\n\n- **一代锤子一代皇，代代锤子教做人！** —— 斗罗大陆\n\n- **花早晚会凋谢，记忆最终也会消散。** —— 镇魂街\n\n- **所谓首领，只不过是被势力绑架上制高点的走狗而已。而且，都是身不由己的走狗。** —— 狐妖小红娘\n\n- **无论是人类还是妖怪，只要内心希望他人接触，那么就是相同的存在；会因独处而感到寂寞，也会害怕踏出第一步。** —— 夏目友人帐\n\n- **未来始终掌握在自己手中，从中滑落的，我们称之为过去。** —— 末日时在做什么？有没有空？可以来拯救吗？\n\n- **我不努力，就见不到你了啊。** —— 昨日之歌\n\n- **无可取代的东西要到失去后才知道珍惜呢。** —— 干物妹小埋\n\n- **没有什么背叛，只不过是忠诚过期了而已。** —— 凹凸世界\n\n- **Ko no Dio da!** —— JOJO的奇妙冒险\n\n- **我们不是大人，而是同学吧。** —— 恋如雨止\n\n- **今天的我，凌驾于阿修罗之上！** —— 机动战士高达00\n\n- **Exia，驱逐目标！** —— 机动战士高达00\n\n- **花无凋零之时，爱无传达之期，爱情亘古不变，紫罗兰永世长存。** —— 紫罗兰永恒花园\n\n- **相比昨日明日，今天更适合开始。** —— Comic Girls\n\n- **呐~~凯利，你想成为怎样的大人。** —— Fate/Zero\n\n- **当敌人变成战友多半是为了生存，而战友变成敌人多半是为了金钱。** —— 端脑\n\n- **正因为听不见和看不到，所以风子才会做这样的事情。** —— Clannad\n\n- **我们开始一起攀登，这长长的，长长的坡道。** —— Clannad\n\n- **无知而又纯洁的岁月是任何人都曾拥有的，世界上没有一成不变的事物，所以只要以其他方式找到自己的快乐就行了。** —— Clannad\n\n- **前天是小兔子，昨天是小鹿，今天是你。** —— Clannad\n\n- **能哭的地方只有厕所和爸爸的怀里。** —— Clannad\n\n- **美好的事情，现在才开始呐。** —— Clannad\n\n- **什么叫忍者？学会忍耐的人就叫忍者。** —— 哔哩哔哩","source":"_posts/yi-yan.md","raw":"---\ntitle: 一言（持续更新）\ndate: 2021-03-13 21:29:55\nupdated: 2021-03-13 21:29:55\ntags: [其他,持续更新]\n---\n尝试 ```Ctrl + F``` 一下您看过的动漫吧。\n\n- **与众不同的生活方式很累人呢，因为找不到借口。** —— 幸运星\n- **面对就好，去经历就好。** —— 花伞菌\n- **将愿望倾入不愿忘却的回忆中……** —— ef-a tale of memories\n- **美好的人眼里映出的世界也是美好的。** —— ARIA\n- **看似美好的东西，往往藏着陷阱。** —— 只有神知道的世界\n- **天空是连着的，如果我们也能各自发光的话，无论距离有多远，都能看到彼此努力的身影。** —— 龙虎斗\n- **恋ではなく、爱でもなく、もっとずっと 深く重い。** —— sweet   pool\n- **花开花落，再灿烂的星光也会消失。** —— 圣斗士星矢\n- **挡着在我们面前的是巨大庞然的人生，阻隔在我们中间的是广阔无际的时间，对于他们，我们无能为力……** —— 秒速五厘米\n- **我是一个经常笑的人，可我不是经常开心的人。** —— 未闻花名\n- **努力是不会背叛自己的，虽然梦想有时会背叛自己。** —— 我的青春恋爱物语果然有问题\n- **人经历风浪是会变得更强，可是船不同，日积月累的只有伤痛。** —— 海贼王\n- **真相只有一个！** —— 柯南\n- **用你的笑容去改变这个世界，别让这个世界改变了你的笑容。** —— 网络\n- **我有在反省，但我不后悔。** —— 物语系列\n- **我没有梦想，但是我能保护！** —— 假面骑士555\n- **或许只需一滴露水，便能守护这绽放的花朵。** —— 反叛的鲁鲁修\n- **我不会让任何人看到我软弱的一面。** —— 桔梗\n- **当你想做一件事，却无能为力的时候，是最痛苦的。** —— 高达SEED\n- **我的腿让我停下，可是心却不允许我那么做。** —— 钢之炼金术师\n- **我手中的魔法，是守护挚爱的力量，是坚定这个信念所必须的力量，我一定会拯救你的，无论在何时、何地。** —— 魔法少女奈叶\n- **比任何人都要了解自己，比任何人都要关爱自己。喜欢上这样的人，并没有什么奇怪的呢。** —— 初音岛\n- **像平常的你一样引发奇迹吧-** —— 魔法少女小圆\n- **既不回头，何必不忘；既然无缘，何须誓言；今日种种，似水无痕；明夕何夕，君已陌路。** —— 仙剑奇侠传\n- **可是就算我们通一千次短信，我们各自的心，大概也只会相互靠近一厘米吧。** —— 秒速5厘米\n- **所谓的言语，只有当对方听进去了才开始有意义啊。** —— 少年同盟\n- **如果还有来生 ，我无论如何都要来到你身边，我已经没有了其他想要追求的东西，因为没有比你更重要的了。** —— 秒速五厘米\n- **世界上没有一个人能代替另一个人。** —— 人型电脑天使心\n- **其实，恋爱这种东西，当你看上人家的那一刹那就已经失败了。** —— 秋之回忆\n- **隐约雷鸣，阴霾天空，即使天无雨，我亦留此地。** —— 言叶之庭\n- **就是因为你不好，才要留在你身边，给你幸福。** —— 哈尔的移动城堡\n- **微风摇曳着窗帘，夕阳斜射入教室，在那里鼓起勇气告白的少年。即使现在也能清晰地回想起她的声音「当朋友，不行吗？」** —— 果然我的青春恋爱喜剧搞错了\n- **少罗嗦，你还不如虫子呢！** —— 迷糊餐厅\n- **别人恋爱不成功，你连暗恋都不成功！** —— 灌篮高手\n- **就算只有六十亿分之一的机会，我们还是会邂逅。** —— Angel Beats!\n- **魔装少女就是本少爷！** —— 这是僵尸吗？\n- **无法飞翔的翅膀也是有意义的，因为它是曾经翱翔于天空所留下的珍贵回忆。** —— AIR\n- **勇气，就是即便害怕也会去做。** —— 原创\n- **如果我不会飞，那我就只是一只普通的猪。** —— 红猪\n- **要相信同伴，拯救同伴。** —— 绯弹的亚里亚\n- **男人许下的诺言就一定要遵守。** —— 海贼王\n- **那是，未满45秒的邂逅。** —— EF\n- **只要有想见面的人，自己就不再是孤单一人。** —— 夏目友人帐\n- **如果聚集负的感情，世界就会陷入负的洪流；反之聚集正的感情，世界就会循着正道而行。** —— 钢之炼金术师\n- **廉价的自尊、粗劣的傲气，无论哪个后生小辈都很重视这些东西。** —— 狼与香辛料\n- **人不能一个人活下去，不需要任何人的孤独和需要人但得不到的孤独是不一样的。** —— 邻座的怪同学\n- **一个人吃饭，太寂寞了。** —— 无头骑士异闻录\n- **欺骗世界，欺骗最初的你。** —— Steins;Gate\n- **(」?ω?)」うー！(／?ω?)／にゃー！** —— 潜行吧奈亚子\n- **世界上没有偶然，有的只是必然。** —— XXXHolic\n- **从小好女色的男人的想像力比不上狗。** —— 寒蝉鸣泣之时\n- **你愿意陪我走到地狱的底端吗？** —— 魔法禁书目录\n- **错的不是我， 错的是世界。** —— School Day\n- **和哥哥的便当比起来夜空的薯片就像大便一样！只会给我大便的大便夜空是笨蛋～笨蛋～** —— 我的朋友很少\n- **即使如此，我也有我想保护的世界！** —— 高达seed\n- **我很好奇！** —— 冰菓\n- **仍是那么熟悉的味道，只是用墓土和骨灰作成的身体，已经不再有体温。** —— 犬夜叉\n- **我是要成为海贼王的男人！** —— 海贼王\n- **做不到的话，不过就是一死 。但是，赢了就能活下去，要是不战斗就赢不了。** —— 进击的巨人\n- **忘记本身就是一件不可能的事。** —— 我们的存在\n- **我们的夏天仍未结束。** —— 王牌投手\n- **雨，何时停？** —— 秋之回忆\n- **在走廊上跌倒会流鼻血，在人生中跌倒会流眼泪。** —— 龙虎斗\n- **有被杀的觉悟，才有资格开枪。** —— 反叛的鲁路修\n- **已经无法回到过去了。也不知道将来会是什么模样。** —— 文学少女\n- **不要哀求，学会争取；若是如此，终有所获。** —— 交响诗篇\n- **リア充死ね！** —— 我的朋友很少\n- **拿着刀并且可以让人们变得幸福的只有料理人。** —— 假面骑士kabuto\n- **我会跟她结婚，并不是因为她是计算机，而是因为她就是她。同样的，我会喜欢你，也是因为你就是你。** —— 人型电脑天使心\n- **越是试着忘记，越是记得深刻。** —— 天空之城\n- **喜欢上你，爱上你，真是太好了，谢谢。** —— 龙虎斗\n- **我对普通的人类没有兴趣，你们只要是有外星人、未来人、异世界人、超能力者， 就尽管来找我吧！以上！** —— 凉宫春日的忧郁\n- **既然如此，就再努力一次吧。别在这里愁眉不展，也不要再自欺欺人，重新来过！** —— 某科学的超电磁炮\n- **若隐若现才是艺术！** —— 问题儿童来自异世界\n- **我想要握紧的并不是匕首或是什么，只不过是他的掌心而已。** —— 空之境界\n- **下一次重逢，将是何年何月？天空必将见证。** —— SOLA\n- **就连一直都无容身之地的我……也不是可以任意舍弃的生命。** —— 夏目友人帐\n- **所以，他们的祭典还没结束。** —— 我的青春恋爱物语果然有问题\n- **比自己，比梦想更重要的东西永远都存在着...** —— 钢之炼金术师\n- **选择道路的时候怎么犹豫都没有关系，但决定之后就一定要坚持到底！** —— 青之驱魔师\n- **煩い！煩い！煩い！** —— 灼眼的夏娜\n- **重要的是无论我们选择哪条路，都要担负起选择的责任。** —— 蜂蜜与四叶草\n- **因为无法再见面，所以要笑着说再见。** —— AIR\n- **无论乌云有多浓厚，星星也一定还在，只是暂时看不到了而已。** —— 电波女与青春男\n- **如果我拥有如同小狗一样的尾巴的话，肯定会高兴得遮掩不住地摇来摇去吧。** —— 秒速五厘米\n- **在我年轻的时候，不知道什么是恐惧，可偏偏是你的温柔，让我害怕。** —— 东京爱情故事\n- **你不会死的，因为我会保护你.** —— EVA\n- **只是相谈就会开心起来，沉浸在温柔的眼神当中，竭尽全力的思念，悄悄地奉献。** —— School Days\n- **我们虽然距离很远很远，非常非常的远，但是思念或许真的可以穿越时间和距离。** —— 星之声\n- **梦想是否无聊并不是别人来决定的，不管是什么样的梦想，自己拼命努力去追寻才是最重要的。** —— 守护甜心\n- **胜而不灭，霸而不辱，这才是真正的征服。** —— fate zero\n- **我相信十年后的八月，我们还能再相遇。** —— secret base ～君がくれたもの～\n- **相信十年后的八月，我们还会相遇。** —— 未闻花名\n- **你的心可以属于耶稣，但你的屁股永远属于陆战队！** —— 魔法少女陆战队\n- **看到的感受到的永远都不会消失永远都不会忘记，与各种各样的相遇一同永存。** —— 夏目友人帐\n- **我们走过风走过雨，就是没能走进彼此的内心。** —— 自分\n- **烦恼这东西，是只有活着的人，才有的特权哦。** —— 我们的存在\n- **当朋友是不需要什么资格的。** —— 全职猎人\n- **年华无多时，恋爱吧男子！** —— 源君物语\n- **求你，保护那孩子，消除灾厄，抹除祸事。哪怕??那是我自己……** —— 食灵\n- **如果你不能击败你的敌人，那么就加入他们。** —— 加菲猫\n- **我们都在命运之湖上荡舟划桨，波浪起伏着而我们无法逃脱孤航。但是假使我们迷失了方向，波浪将指引我们穿越另一天的曙光。** —— 死神\n- **我们所过的每个平凡的日常，也许就是连续发生的奇迹。** —— 日常\n- **最近困扰我的是小小的分别，总会带来一丝寂寞。短暂的相遇和分别那一分一秒的时间都让我想要无比珍惜。** —— 夏目友人帐\n- **倘若只是为了驱赶心中的寂寞，找谁都可以的。** —— 秒速5厘米\n- **即使从梦中醒来，还会有回忆留下。** —— AIR\n- **能够原谅女人的，才是男人。** —— 海贼王\n- **我会继续等着你，就算是一万二千年。** —— 创圣的大天使EVOL\n- **不管看到什么样的过去，都请不要迷失自己，不管你变成什么样子，我都是你的同伴。** —— angel beats\n- **悲伤教会了我喜悦。** —— 秋之回忆\n- **我到底要以怎么样的速度生活才能与你再次相遇？** —— 秒速五厘米\n- **我的船上没有手下，只有伙伴。** —— 海贼王\n- **就是因为抱有不现实的理想，所以才总是做出如此极端的事情！** —— 逆袭的夏亚\n- **要是因为烦恼很痛苦，就选择了轻松的选项，将来一定会后悔。** —— 樱花庄的宠物女孩\n- **呐，知道么，樱花飘落的速度，是每秒五厘米哦~** —— 秒速五厘米\n- **知道活着的痛苦处的人就能对人温柔，这和软弱是不一样的。** —— eva\n- **比起悲伤来说，无法分享快乐这件事，要更加的寂寞吧。** —— AIR\n- **如果你执意追寻着我的幻影，总有一天会被真正的我打败。** —— 棋魂\n- **乔巴，一个男人，有时候是不能逃避战斗的，尤其是当伙伴的梦想被人嘲笑的时候。** —— 海贼王\n- **你的那双手呢，是为了紧紧抓住什么而存在的哦。** —— 仰望半月的夜空\n- **去死两次！** —— 迷途猫\n- **世界は恋に落ちている。** —— 青春之旅OP（我的世界已坠入爱河）\n- **自身不先改变的话，一切都不会改变。** —— 银魂\n- **就算是对我抱有敌意的人，也是被某个人深爱着而降生在这个世界上的。** —— 罪恶王冠\n- **人生最糟糕的事，一个是饿肚子，一个是孤独。** —— 夏日大作战\n- **我不是萝莉控，是妹控啊！** —— 我的妹妹不可能那么可爱第二季\n- **呐，我们好像是，被宇宙和地球拆散的恋人似的。** —— 星之声\n- **一天吐槽太多次的话，梗也是会用完的。** —— 我的脑内恋爱选项\n- **自己的感觉，不说出来，别人也不会懂，如果不懂，就应该互相沟通。** —— 好想告诉你\n- **心，可是很重的。** —— 哈尔的移动城堡\n- **不能逃避，不能逃避，不能逃避，不能逃避……** —— EVA\n- **以盐水作配菜，糖水做主食，就有种奢侈的感觉呢。** —— 笨蛋测验召唤兽\n- **就算鼻血流尽，也不能放弃妄想。** —— 摇曳百合\n- **爱，其实很简单，困难的是去接受它。** —— 通灵王\n- **我们不应该根据背负的罪孽来选择道路，而应在选择的道路上背负自己的罪孽。** —— 空之境界\n- **只要微笑就可以了。** —— EVA\n- **因为我喜欢你，喜欢得想吃掉你啊！** —— 有顶天家族\n- **求求你，不要对我这么温柔！** —— 秒速五厘米\n- **我觉得你很幸福，因为你可以选择爱我或不爱我，而我只能选择爱你或更爱你。** —— School Days\n- **失去的东西虽然拿不回来，但是，忘记的事情是可以想起来的。** —— TOUCH\n- **你还是这么冷漠啊。不过，仅此而已的话，我是不会泄气的。** —— 银魂\n- **我能够允许你逃避过去，不过至少从现在或者明天开始都不要再逃避。** —— 无头骑士异闻录\n- **正因为听不见和看不到，所以风子才会做这样的事情。** —— clannad\n- **什么都无所谓只想在你身边，什么都无所谓只想和你说话，什么都无所谓所以请你不要逃避。** —— 好想告诉你\n- **我并不羡慕别人的人生，这就是所谓幸福。** —— 幸运星\n- **人能够在心里郁积那么多的事情，而他们又会忘记那么多的事情，真是不可思议……** —— 最终幻想\n- **我要拼，装上假牙也要拼！** —— 灌篮高手\n- **人一生会遇到约2920万人，两个人相爱的概率是0.000049。所以你不爱我，我不怪你。** —— 秒速五厘米\n- **我的内心就和厕纸一样单纯！** —— Little Busters!\n- **我的眼睛，就是为了寻找你而存在的。** —— H2O\n- **烈焰中舞动的火花，将赐予邪恶异性交往以天罚。** —— 潜行吧！奈亚子W\n- **All for one，one for all.** —— 海贼王\n- **老是低着头，幸福可是会离你而去的喔。** —— 我们的仙境\n- **羁绊是那不可切断的深切联系。即使分离，心与心也紧紧的连在一起。** —— 假面骑士kabuto\n- **对不起，风太大，我没有听清楚……** —— 东京巴比伦\n- **你知道雪为什么是白色的吗？因为她忘记了本来的颜色。** —— 反叛的鲁路修\n- **人生在世何其痛苦，所以咖啡至少该甜一点。** —— 我的青春恋爱物语果然有问题\n- **我想让自己强大起来，因为至少我已经有幸和想要保护的人相遇了。** —— 夏目友人帐\n- **我只是做了我能做的事，没有时间想将来。** —— 秒速五厘米\n- **一天最大任务莫过于，好好睡觉，好好醒来。** —— 火影忍者\n- **不相信人咬不到肚脐的，咬破肚脐去死如何？** —— 海猫鸣泣之时\n- **一直保持微笑是有诀窍的，那就是，在想哭的时候放声大哭。** —— 天使领域\n- **女人的武器不是眼泪，而是微笑。** —— 凉宫春日的忧郁\n- **十步做一死，千里不留行，事了拂衣去，深藏功与名~** —— 侠客行\n- **只要有你，我便无所不能。** —— 进击的巨人\n- **不相信自己的人，连努力的价值都没有。** —— 火影忍者\n- **我只对现实世界绝望过，却未对自己绝望过！** —— 只有神知道的世界\n- **虚伪的眼泪，会伤害别人，虚伪的笑容，会伤害自己。** —— 反叛的鲁鲁修\n- **我除了投三分，就什么都没有了……** —— 灌篮高手\n- **(?_?)** —— 进击的巨人\n- **我在人生的道路上迷失了。** —— 火影忍者\n- **历史虽然会一再重演，但人类却无法回到过去。** —— 海贼王\n- **观察铅笔和橡皮，哪个是攻哪个是受，请写出它们晚上的对话。** —— 学生会的一己之见\n- **龙儿是我的，谁都不准碰！** —— 龙虎斗\n- **贫乳是社会地位的象征。是具有稀有价值的！** —— 幸运星\n- **想要试着去相互接近，但最后还是无法敞开心扉，结果就是擦肩而过……** —— 文学少女\n- **扎古不论怎么化妆都不可能变成高达的。** —— 银魂\n- **我在未来等你。** —— 穿越时空的少女\n- **一般来说，时间会把悲伤冲淡，可是在人的生命中，会有那么一两个特殊的存在，他们的逝去，你永远也不会习惯。** —— 冥王神话\n- **懂得认输是非常重要的，不尝到失败的不甘，也就不会明白跌倒后怎么爬起来，更不可能再向前迈进。** —— 笨蛋测验召唤兽\n- **要改变别人的心真是件很难办的事，不过改变自己要容易一点。** —— XXXHolic\n- **我喜欢你们！超喜欢的！大家和我交往吧！绝对会让你们幸福的！** —— 学生会的一己之见\n- **美丽的不是这个世界，而是看世界的你的眼神。** —— 吸血鬼骑士\n- **世界这么大，人生这么长，总会有那么一个人，让你想要温柔的对待。** —— 哈尔的移动城堡\n- **成功率不到2%，那剩下的用勇气来补足吧！** —— 勇者王\n- **我一直都在你身边 ，一直都在。** —— CLANNAD\n- **重要的不是你做了多少事，而是你放了多少心思进去。** —— 凉宫春日的忧郁\n- **哭泣并不能改变任何事情。** —— 推理之绊\n- **代表月亮消灭你！** —— 美少女战士\n- **不要，我现在暂时留在他身边，直到那转瞬即逝的日子到来。** —— 夏目友人帐\n- **就算是自私……我也希望那些人能够永远都有笑容……** —— 夏目友人帐\n- **我们开始一起攀登，这长长的，长长的坡道。** —— Clannad\n- **应该可以了吧，我已经很努力了，应该可以抵达终点了……** —— AIR\n- **离别并不痛苦，因为我们都微笑着。** —— 青之驱魔师\n- **只要能努力，就应当去努力；只要还能前进，就要向前走去。** —— CLANNAD\n- **邂逅本身，就是一种奇迹啊。** —— 游魂\n- **与其被自己的本性牵着走而痛苦，倒不如试着改变自己。** —— 银魂\n- **爱迪生说过：“要把BOSS打倒就要准备足够的等级。”** —— 学生会的一己之见\n- **世界并不完美，却因此而美丽。** —— 奇诺之旅\n- **我们的心就像那天空一样，永不分离。** —— 缘之空\n- **和我定下契约，成为魔法少女吧！** —— 魔法少女小圆\n- **一直注视着你，似近似远，总是触碰不到。** —— 来自风平浪静的明天\n- **我知道的，面码……自己已经死掉这点事，还是知道的……** —— 我们仍未知道那天所看见的花的名字\n- **共道人间惆怅事，不知今夕是何年。** —— 周秦行纪\n- **旅行唯有出发前最愉快，狗儿唯有叫声最吓人，女人唯有背影最美丽。** —— 狼与香辛料\n- **无论你在哪里，就算我看不见你，我也会一直注视着你。** —— 妖精的尾巴\n- **我不渴望什么在别的城市迎来的春天，只要和你在一起的春天就好，只要和你在一起就好** —— CLANNAD\n- **我的愿望是—幸福地活着，幸福地死去。** —— 神不在的星期天\n- **今天你最后遇见的那个人有在微笑吗？** —— 幸运星\n- **我的终点，与幸福同在。** —— AIR\n- **隐约雷鸣，阴霾天空，但盼风雨来，能留你在此。** —— 言叶之庭\n- **我问你：你是我的Master吗？** —— 命运守护夜\n- **私だって今日こそ... 遠野くんに告白するんだ。** —— 秒速五厘米\n- **时间并不存在，存在的只有此刻。** —— 魔女猎人\n- **没有期盼就不会出现奇迹。** —— 古城荆棘王\n- **受尽苦难而不厌，此乃阿修罗之道。** —— 海贼王\n- **如果你都不知道自己想去哪里，那去哪里都是一样的。** —— 柴郡猫\n- **明天，不是你想要就能有的。** —— 未闻花名\n- **明明只是活着，哀伤却无处不在……** —— 秒速五厘米\n- **错误可不是为了别人才改的过来的，要为了自己才能改正。** —— XXXHolic\n- **男人从小的时候就是无药可救的。** —— 秋之回忆\n- **如果我是那雨滴的话，那么，我能够像把不曾交汇的天空与大地连接起来那样，把某人的心串联起来吗？** —— 死神\n- **真可悲，你什么都不知道，在这个世界上没有什么是不重要的！** —— 最终幻想\n- **前天是小兔子，昨天是小鹿，今天是你。** —— CLANNAD\n- **用我的左手将你那个不可理喻的幻想粉碎掉！** —— 魔法禁书目录\n- **堕入黑暗裏的可怜影子啊，停止伤害他人的行为吧，犯下罪行的灵魂……想死一次么？** —— 地狱少女\n- **男人变态有什么错！** —— 寒蝉鸣泣之时\n- **人们只是用好人来称呼对自己有用的人而以，不存在对所有人都有用的人。** —— 进击的巨人\n- **真正的危机不是机器人像人一样思考，而是人像机器一样思考。** —— 凉宫春日的忧郁\n- **人は一生、中二病なんだ。** —— 中二病也要谈恋爱\n- **能够轻易就放弃的梦想，有存在的价值么？** —— 守护甜心\n- **没有谁能够永远坚强下去的，每个人都会有疲累的无法站起的时候。世间的故事，就是为了这一刻而存在的哦。** —— 文学少女\n- **只要你在，我便无所不能。** —— 进击的巨人\n- **24岁的阿升你好，我是15岁的美加子，我现在也还是非常、非常的喜欢阿升哦！** —— 星之声\n- **比希望更炙热，比绝望更深邃，这就是爱啊。** —— 魔法少女小圆-叛逆的物语\n- **如果你愿意的话，让我带您去吧，这座小镇，愿望实现的地方……** —— CLANNAD\n- **窃人者，自失其宝。** —— 假面骑士kabuto\n- **有你在的日子才是我的日常。** —— 琴浦小姐\n- **男人就应该保持冷静，沸腾的水只会被蒸发掉。** —— 假面骑士kabuto\n- **嗯，一个人也要加油，我是坚强的孩子。** —— AIR\n- **时间带着明显的恶意，缓缓在我的头顶流逝。** —— 秒速五厘米\n- **人的记忆本来就是暧昧的，不值得信任。** —— 叛逆的鲁鲁修R2\n- **有光的地方必有影，有影的地方也必定有光，绝望的颜色越是浓重，一定会有光芒耀眼的希望。** —— 银魂\n- **时间可以治愈？如果时间也病了怎么办？** —— 寒蝉鸣泣之时\n- **无论在哪里遇到你，我都会喜欢上你。** —— AngleBeats!\n- **取少量学生放入试管，加入过量作业，生成学霸溶液和不溶于水的学渣。过滤，在学渣中加入过量浓试卷，学渣迅速溶解且产生气泡，学霸则无明显现象。** —— 网络\n- **如果你死了，那什么也改变不了，可如果你还活着，那就能改变一些事情。** —— 最游记\n- **鲁鲁修，你知道雪花为什么是白色的吗？因为已经忘记自己本来是什么颜色啊。** —— 叛逆的鲁鲁修\n- **燃烧吧，我的小宇宙！** —— 圣斗士星矢\n- **无法逃避的是自我，而无法挽回的是过去。** —— 机动战士高达\n- **做出一副温柔的样子来折磨人不是更令人难受吗？** —— 我的青春恋爱物语果然有问题\n- **有些事情我不看透，不是我笨，只是我太善良。** —— 樱桃小丸子\n- **有时语言就像把利刃，使用不当，就会成为凶器。** —— 名侦探柯南\n- **如果能够重生的话，我想，我想成为水母。想成为只是在海里自由地摇摇摆摆的水母。** —— 海月姬\n- **所谓的人类，可是连短短的十分钟也等不起的。** —— Angel Beats!\n- **梦总是有会醒来的时候，不会醒的梦总有一天会变成悲伤。** —— AIR\n- **能哭的地方只有厕所和爸爸的怀里。** —— CLANNAD\n- **你再怎么称赞我，我也不会高兴的，你这个混蛋~** —— 海贼王\n- **除了爱你，我什么都可以。** —— 命运守护夜\n- **败者死于绝望，胜者死于渴望。** —— 戏言系列\n- **给，一辈子朋友劵。** —— 日常\n- **一个人走在路上，形单影只。回首望去，大家都留在远方。回过头来继续前行，这便是所谓坚强。** —— AngelBeats\n- **无知而又纯洁的岁月是任何人都曾拥有的，世界上没有一成不变的事物，所以只要以其他方式找到自己的快乐就行了。** —— CLANNAD\n- **沒有永远下不停的雨。** —— 秋之回憶\n- **不习惯的事越来越多，但我仍在前进……就算步伐很小，我也在一步一步的前进。** —— 夏目友人帐\n- **算了，和你说话感觉就像是大姨妈来了。** —— 龙虎斗\n- **“像你这样的白痴是怎么活过来的？”“因为我很自信。** —— 海贼王\n- **梦想是什么，梦想是现实的延续；现实是什么，现实是梦想的终结。** —— EVA\n- **Time waits for no one.** —— 穿越时空的少女\n- **时间是伟大的作家，总会写下完美的结局。** —— 秋之回忆\n- **真正让我难受的，大概是因为让你看到如此狼狈的自己。** —— 元气少女缘结神\n- **淅淅沥沥的雨，即便能填满路上的水坑，也填不满心中的空洞。** —— 神圣之门\n- **我们总是在注意错过太多，却不注意自己拥有多少。** —— 我们仍未知道那天所看见的花的名字\n- **不管前方的路有多苦，只要走的方向正确，不管多么崎岖不平，都比站在原地更接近幸福。** —— 千与千寻\n- **活在现实中的人是错的，而那些哭泣的人才是正确的，孤独的我们才有人类的样子** —— angel beats\n- **不管是怎样的回忆，都是我们活过的人生。** —— angel beats\n- **我不知道离别的滋味是这样凄凉，我不知道说声再见要这么坚强。** —— 千与千寻\n- **人生就是一列开往坟墓的列车，路途上会有很多站，很难有人可以自始至终陪着走完。当陪你的人要下车时，即使不舍也该心存感激，然后挥手道别。** —— 千与千寻\n- **曾经发生过的事情不可能忘记，只不过是想不起而已。** —— 千与千寻\n- **人永远不知道，谁哪次不经意的跟你说了再见之后，就真的不会再见了。** —— 千与千寻\n- **有阳光的地方就会有阴影，所以有阴影的地方也一定会有阳光。绝望的颜色越是浓厚，在哪里也一定会存在耀眼的希望之光。** —— 银魂\n- **与其想着怎么美丽地牺牲,倒不如想着怎么漂亮地活到最后一刻。** —— 银魂\n- **人就是要以自卑为跳板才能跳得更高。** —— 银魂\n- **为了终止绝望的连锁，希望她能化为照亮正确道路的灯火。** —— Re：从零开始的异世界生活\n- **死亡只要在人生的终点尝试一次就够了~** —— Re：从零开始的异世界生活\n- **真正重要的东西，总是没有的人比拥有的人清楚。** —— 银魂\n- **吾于冥河沉浮,受尽命运捉弄，纵然汝将忘吾，吾亦伴汝身旁。** —— Re：从零开始的异世界生活\n- **关于自己的生活，我和你都不是读者，而是作者。至少结局，还是能自己说了算的。** —— 银魂\n- **努力可是要默默藏起来的。** —— Re：从零开始的异世界生活\n- **拥有和舍弃都很痛苦，既然无论怎样都会痛苦的话，我宁可选择守护它而痛苦。** —— 银魂\n- **只要有你想要保护的东西，那就拔剑好了。** —— 银魂\n- **所谓的王，乃最贪婪，最豪爽，最易怒之人。且清且浊，追求极致人生。为臣者，因之而仰慕，追随其左右。因此，臣民才会有称王之志，追寻自己的理想。** —— fate/zero\n- **不过傲慢分为两种。一种是能力过于低下，还有一种是志向异常远大的。前者显得非常愚蠢，后者是难得一见的珍贵种类。** —— fate/zero\n- **梦存高远，志在争霸，这股热情确实值得赞许。但所谓梦，终有一天是要醒来的。** —— fate/zero\n- **“把剑放下，成为本王的妻子吧。”** —— fate/zero\n- **区区一只趴在地上的蝼蚁，谁允许你抬起头的， 虫子就要有虫子的样子，低头伏地然后去死。** —— fate/zero\n- **即使你忘记了我，我也不会遗忘你。** —— Re：从零开始的异世界生活\n- **不是别人，是我，承认了你的价值。** —— fate/zero\n- **世界上 ，没有一拳解决不了的事，如果有，那就两拳。** —— 一拳超人\n- **明天的事，交给明天的我。** —— 一拳超人\n- **在灾难面前，如果连英雄都逃跑了，那还有谁能站出来？** —— 一拳超人\n- **我不是因为需要你们评论几句才去当英雄的，而是因为我想去当所以我才当的。** —— 一拳超人\n- **由变态化身成为变态，也就是真·变态，也就是说，完全变态呢。** —— 一拳超人\n- **我秃了，我也变强了** —— 一拳超人\n- **为了做一名真正的绅士，即使明知必输无疑，也要有勇气接受挑战！** —— JOJO的奇妙冒险\n- **JOJO，我不想再做人了！！** —— JOJO的奇妙冒险\n- **春天是胖次的季节。** —— 电器街漫画店\n- **我只是个兴趣使然的英雄。** —— 一拳超人\n- **不要为自己的努力道歉，这样太对不起自己了！** —— 火影忍者\n- **这个世界上没有奇迹，有的只是偶然和必然，以及是谁在做些什么。一直期望着能出现奇迹的人们是不会发生奇迹** —— 悠久之翼\n- **伤害别人的人，就要有被伤害的觉悟！** —— 罪恶王冠\n- **即使你忘记我，我也不会遗忘你！** —— 从零开始的异世界生活\n- **我不管这个世上的人怎么说我，我只想依照我的信念做事，绝不后悔，不管现在将来都一样。** —— 火影忍者\n- **人生中有些事你不竭尽所能去做，你永远不知道自己有多出色！** —— 海贼王\n- **正因为生命有限，所以才显得重要，正因为生命有限，所以才更应该努力不懈！** —— 名侦探柯南\n- **人，只有在放弃战斗的时候才算输，只要坚持战斗，就还没输！** —— 进击的巨人\n- **世间本就没有真实的对与错，也没有绝对的善与恶。地狱天堂，一念之间。** —— 地狱少女\n- **天才的字典里，没有不可能这三个字。** —— 灌篮高手\n- **奇迹不是免费的，如果你祈求了希望，也会散播出同等的绝望。** —— 魔法少女小圆\n- **此生无悔入东方，来世愿生幻想乡！** —— 东方project\n- **只要是活着的东西，就算是神我也会杀给你看。** —— 空之境界\n- **我手里拿着刀，没法抱你，我放下刀，没法保护你！** —— 死神\n- **不好意思，我喜欢的是艾米莉亚** —— Re：从零开始的异世界生活\n- **前进吧，星星在你的头上闪耀哦！** —— 四月是你的谎言\n- **星星只有在夜里才璀璨夺目啊。** —— 四月是你的谎言\n- **Eloim Essaim Eloim Essaim 请聆听我的请求。** —— 四月是你的谎言\n- **於此漆黑世界之中，直至光明遍地之时！All Hail Lelouch！** —— 反叛的鲁路修\n- **只有用心才能看到本质，最重要的东西眼睛是无法看到的。** —— LE\n- **春天的最后一场雪，你我的最后一次相聚，能遇见你是最幸福的事了，就此分别吧！请继续向前，迎接樱花漫溢的四月，但请不要忘记我，友人A……** —— 四月是你的谎言\n- **喜欢的人喜欢别人不是很正常吗。** —— 四月是你的谎言\n- **男人只要去行动就好，做得到或做不到，女孩子会来告诉你的。** —— 四月是你的谎言\n- **或许前路永夜，即便如此我也要前进，因为星光即使微弱也会为我照亮前路。** —— 四月是你的谎言\n- **英雄意味着强大，英雄意味着孤独，最后一幕一定是英雄渐行渐远，我的英雄也是那样的存在。** —— 四月是你的谎言\n- **迎接我们的也许是漆黑一片的夜路，即便如此，也要相信自己，勇往直前。 星空会为我们在这条道路上点缀出淡淡星光。** —— 四月是你的谎言\n- **君の名を 今追いかけるよ** —— 君の名は。\n- **谢谢你至今为止都容忍我的任性，我是你的妹妹真的太好了。** —— 俺妹\n- **那东西既然被你知道了，我就没脸活下去了，只有一死了之了！可是我还不想死，所以只好把你杀了啊！** —— 逢坂大河\n- **笨蛋吉娃娃（バカチワワ）** —— 逢坂大河\n- **吵死了吵死了!** —— 逢坂大河\n- **回家后我得好好找你人生咨询一下！** —— 高坂桐乃\n- **Angel大河大人，为了大家能有一个幸福快乐的圣诞，无论是一层皮还是两层皮都给你剥下来，直到最后全裸都没问题的觉悟都做好了！** —— 逢坂大河\n- **告白当天就要H什么的，真是没办法的男人呢。** —— 高坂桐乃\n- **桐乃非常非常不愿意你有女朋友，但是你还愿意和我复合吗。开...开玩笑的，你不要回答我不然我真的会死\\\"** —— 五更琉璃\n- **“我要诅咒！诅咒所有相爱的情侣！诅咒神圣的夜晚！诅咒这整个世界（世界：怪我咯？）！对所有的现充挥下破坏的铁锤！我会让你尝尝……我生涯最大的诅咒！”** —— 千叶の堕天圣黑猫\n- **喂？FFF团团长须川亮吗？这有一个要入团的！** —— 五更琉璃\n- **最有名的莫过于想死一次吗。** —— 阎魔爱\n- **哥哥也可以喜欢上我之外的女孩子，但只有音梦是不可以的！** —— 芳乃樱对朝仓纯\n- **我也做个好孩子，成为这幸福光景的一部分，想成为闪耀在圣诞节的城市里，其中一张幸福的笑脸。** —— 逢坂大河\n- **龙儿是我的！谁都不准碰！** —— 逢坂大河\n- **以后继续来一起练习打篮球** —— 湊智花\n- **请不要跟我搭话。我讨厌你！** —— 八九寺真宵\n- **风子参上！** —— 伊吹风子\n- **男生送的礼物要方便拿来换钱才好吧！** —— 来栖加奈子\n- **你是笨蛋吗？** —— 小桐桐（きりりん）\n- **我跟喜欢成人游戏一样喜欢你** —— 高坂桐乃\n- **最喜欢你了唷！！ 开玩笑的！！啊--！好害羞 有机会的话会再写信给你。 希望那时，能变得更加坦率捏~** —— 久保由利香致小泉花阳\n- **最后，士郎……你要去打的話……必须給我贏！你要是死了话……我饶不了你……** —— 遠坂凜\n- **最后好想有个拥抱....，可是...那种事情怎么能说得出口.....** —— 露西\n- **受虐狂的娇小美少年……真想带回家去养一段时间啊。** —— 赤井林檎\n- **希望老师像帮我一样帮帮れいジ** —— 九重凛\n- **在排练的休息时间里要好好补充水分和盐分哦！** —— 三森铃子致海未\n- **得到更多人的认可，带著大家的爱意加油哦！** —— 内田彩致南小鸟\n- **重新再说一次，至今为止，真的谢谢你。 然后，今后也请多指教了。** —— 楠田亞衣奈致东条希\n- **笨蛋、笨蛋！** —— 星野琉璃\n- **没问题，绝对没问题** —— 木之本樱（无敌咒语）\n- **凡人、笨蛋！** —— 维多利加·德·布洛瓦\n- **笨蛋,蠢货** —— 南千秋\n- **我绝对会成为火影。我从来都是有话直说，这就是我的忍道！** —— 漩涡鸣人\n- **Fightだよじゃねつの！** —— 高坂穗乃果\n- **哦~** —— 袴田日向\n- **绝对要一起去吃拉面喵~** —— 星空凛\n- **不管你在世界的哪个地方，我一定会，再次去见你的。** —— 你的名字\n- **描线一笔接一笔，白色的素描本上渐渐萌生黑意。即便如此，还无法照准记忆中的风景。** —— 你的名字\n- **你会哭着笑，笑着哭，是因为你的心，早已超越了自己啊。** —— 你的名字\n- **醒来的时候 不知道自己为什么哭 时常会有的事情 做过的梦总是回想不起 只是 一种有什么消失的丧失感** —— 你的名字\n- **以彗星为龙，以彗星为绳结。描绘出割裂的彗星舞动的形态。又是一轮岁月。** —— 你的名字\n- **聚拢，成形，捻转，回绕，时而返回，暂歇，再联结。这就是组纽。这就是时间。这就是，联结** —— 你的名字\n- **从你的前前前世开始，我就开始找寻你** —— 你的名字\n- **假如我们相遇，肯定一眼就能认出彼此** —— 你的名字\n- **从现在开始，我将追寻你的名字。** —— 你的名字\n- **我，将某个人，唯一的某个人，试图锁定。我，** —— 你的名字\n- **散落至四方。又或是升起至四方。在无法确认这一事实的浮游感中，彗星耀辉在夜空。彗星裂开，碎片落下。** —— 你的名字\n- **喜欢喜欢轻飘飘喜欢喜欢轻飘飘让我们一起来！** —— Printemps\n- **みんなで作る、最高のライブ！** —— LoveLive! The School idol Movie\n- **凛：450拿来 海：自由女神Shoot！ 希：其实有点像邪神果** —— 乙姬心恋宫殿\n- **脱！！巨乳！** —— 暗杀教室\n- **前天是小兔子,昨天是小鹿,今天是你** —— CLANNAD\n- **有些事情我不看透，不是我太笨，只是我太善良。** —— 樱桃小丸子\n- **彼方为谁，无我有问 ；九月露湿，待君之前** —— 你的名字\n- **会起反作用是吧……明明是想保护，却伤害了；明明想要哭泣， 却微笑着。** —— 吸血鬼骑士\n- **我不是天生的王者 但我骨子里流动着不让我低头的血液** —— 海贼王\n- **不要停止奔跑，不要回顾来路，来路无可眷恋，值得期待的只有前方。** —— 马男波杰克\n- **苹果是给那些为了爱选择死亡的人的奖励** —— 回转企鹅罐\n- **一定要保护自己的梦想，即使牺牲一切。** —— NANA\n- **喜欢你，因为我喜欢你，比地球上任何人都，喜欢你...** —— 名侦探柯南\n- **所谓“大家”，就是无视并牺牲了一部分弱势群体后所达到的虚伪的和平与共识。** —— 果然我的青春恋爱喜剧搞错了\n- **男人至死都是少年** —— 银魂\n- **润滑油是用来防止磨损的东西。在心中有着润滑油也会活得更加轻松吧。** —— 果然我的青春恋爱喜剧搞错了\n- **不能逃避，不能逃避，不能逃避，不能逃避…** —— EVA\n- **我除了投三分，就什么都没有了…** —— 灌篮高手\n- **我会死在这里，我的每一寸肌肤都会腐烂，除了…一寸，这一寸，它是那么的小，那么的脆弱，却是这世上唯一值得拥有的东西，我们决不能失去或者放弃它，我们决不能让别人把它夺走。** —— 碧之轨迹\n- **无论是丢下还是被丢下，这两者都是一样痛苦的。** —— 水果篮子\n- **女生口中的「好人」首先百分之百是「怎样都好的人」的意思，再好也不过止于「方便好使的人」。也就是说，不管怎样都是没戏了。** —— 果然我的青春恋爱喜剧搞错了\n- **今天的风儿有些喧嚣啊。** —— 男子高中生的日常\n- **死对任何人都是残酷的，年轻年老、好人坏人都一样。死是平等的，没哪种死亡是特别残酷的，所以死才可怕。品行、年龄、个性、金钱、美貌，这些东西只在生前才有意义。就因能将一切化为乌有，所以怎样的死都是残酷的。** —— 尸鬼\n- **命运的红线一旦断了，就再也不会接上。** —— 犬夜叉\n- **活下去的意志是最强的力量！** —— 浪客剑心\n- **想要试着去相互接近，但最后还是无法敞开心扉，结果就是擦肩而过…** —— 文学少女\n- **男人的爱情是另存为，女人的爱情是覆盖。** —— 红\n- **不逆 不耻 不憾** —— 舰队Collection\n- **有话直说就是我的忍道！** —— 火影忍者\n- **就连一直都无容身之地的我…也不是可以任意舍弃的生命。** —— 夏目友人帐\n- **明明只是活着，哀伤却无处不在…** —— 秒速五厘米\n- **为了你,如果是为了你,即使我被困在永远的迷宫中,也没关系.** —— 魔法少女小圆\n- **我不渴望什么在别的城市迎来的春天，只要和你在一起的春天就好，只要和你在一起就好…** —— CLANNAD\n- **“像你这样的白痴是怎么活过来的？”“因为我很自信。“** —— 海贼王\n- **汝真是个烂好人** —— 狼与香辛料\n- **我知道的，面码…自己已经死掉这点事，还是知道的…** —— 我们仍未知道那天所看见的花的名字\n- **不习惯的事越来越多，但我仍在前进…就算步伐很小，我也在一步一步的前进。** —— 夏目友人帐\n- **刻意保持距离的人是你，虚拟世界里的区区两公尺，对你来说就真的如此遥不可及?** —— 加速世界\n- **想哭的时候能哭出来，也是一种坚强** —— 翼年代记\n- **如果你愿意的话，让我带您去吧，这座小镇，愿望实现的地方…** —— CLANNAD\n- **有伤害人的人存在的话，也会有能抚慰伤痕的人** —— 水果篮子\n- **会长和往常一样挺着小小的胸部一副自以为了不起的样子套用某本书的内容说道…** —— 学生会的一己之见\n- **我觉得只要这样继续加油，总有一天能赶上他们的。** —— 刀剑神域\n- **如果你是魔女，我只要化身魔王就可以了。** —— 反叛的鲁鲁修\n- **人的一生会遭遇各种各样的事，其中有令人难以置信的事，也有不讲道理的事，但这就是生活。** —— 地狱少女\n- **挡着在我们面前的是巨大庞然的人生，阻隔在我们中间的是广阔无际的时间，对于他们，我们无能为力…** —— 秒速五厘米\n- **叶え！私たちの夢ー。** —— ラブライブ！\n- **人不会对讨厌人要求理由。莫名的生气、莫名的讨厌、莫名的恶心、什么都能成为讨厌人的理由。** —— 果然我的青春恋爱喜剧搞错了\n- **无论发生什么都不要停下。无论到什么时候都要继续前进。 要一直走下去，直到生命终止的那一刻。** —— 驱魔少年\n- **堕入黑暗裏的可怜影子啊，停止伤害他人的行为吧，犯下罪行的灵魂…想死一次么？** —— 地狱少女\n- **我的生命是属于你的，亚丝娜，我将为你而活。** —— 刀剑神域\n- **“如果我不在了，你会怎样？” “我会去找你” “如果找不见呢？” “我会一直，一直，一直找下去”** —— 人鱼森林\n- **将愿望倾入不愿忘却的回忆中…** —— ef-a tale of memories\n- **All for one, one for all.** —— 海贼王\n- **祈求别人幸福的同时,却不得不去诅咒其他的人,我们魔法少女就是这样的构造吧!** —— 魔法少女小圆\n- **人的一生会遭遇各种各样的事，其中有令人难以置信的事，也有不讲道理的事，但都必须予以克服，这就是生活** —— 地狱少女\n- **以为大哭大闹一场就有人来安慰的家伙真是幸福呢。** —— 龙与虎\n- **时间可以治愈？如果时间也病了怎么办** —— 寒蝉明泣之时\n- **如果幸福有形状，该是什么样的呢？它就像玻璃，因为平时察觉不到它的存在，而它却时时在我们身边，最有力的证据就是，只要换一个角度，它就会折射出耀眼的光芒，比谁都过分强调自我的存在。** —— 反叛的鲁鲁修\n- **求你，保护那孩子，消除灾厄，抹除祸事。哪怕…那是我自己…** —— 食灵\n- **不是我，都是社会的错** —— 我的青春恋爱物语果然有问题\n- **El Psy Congroo..** —— 命运石之门\n- **红茶的温度和女人心在任何时代都是难以琢磨呢。** —— 海猫鸣泣之时\n- **并非喜欢、也不是爱。而是更加深刻而沉重的——** —— SWEET POOL\n- **Oh,please don't let me die. Waiting for your touch.** —— Re：从零开始的异世界生活\n- **You Are (Not) Alone;You Can (Not) Advance;You Can (Not) Redo** —— EVA\n- **禁忌算什么！那难道比爱丽丝的命还重要吗？** —— 刀剑神域\n- **MAKE OUR DREAMS ALIVE** —— ラブライブ！\n- **什么都无法舍弃的人，什么都无法改变 。** —— 进击的巨人\n- **知道人的眼睛为什么长在前面吗？那是因为如果想看到远处的风景的话，就只能向前前进。** —— 天元突破：红莲螺岩\n- **春天 马上就要来了  让我与你相遇的春天 就要来了  再也没有你的春天 就要来了** —— 四月是你的谎言\n- **世间万物，如果一直放着不管的话，便一定会向不好的方向发展。就像即使如何的努力也无法阻止宇宙变冷一样。只是按照‘常理进行’不断积累而构筑出的世界，无论如何也无法脱离物理法则的束缚。** —— 虚渊玄\n- **无可替代的存在什么的不是很可怕吗？一旦失去就再也无法取回；绝对不能容忍失败；无法再一次得到。** —— 果然我的青春恋爱喜剧搞错了\n- **其实...根本就没有什么天堂和地狱吧....** —— 死亡笔记\n- **真正重要的东西，永远都是非常简单的。** —— Clannad\n- **我已经准备好了足够挡雨的伞，可是却迟迟没有等到雨的到来，这样的尴尬只是我漫长人生中的小插曲罢了。** —— 千与千寻\n- **我觉得在这里干尽坏事的玩家，都是些在现实世界中也烂到骨子里的家伙。** —— 刀剑神域\n- **是你赢了...哲...** —— 黑子的篮球\n- **我们一直在一起，所以最后也想在你身旁。** —— 火影忍者\n- **人们只是用好人来称呼对自己有用的人而以，不存在对所有人都有用的人** —— 进击的巨人\n- **要是太勉强自己的话，总有一天会受伤的** —— 吸血鬼骑士\n- **我本身得不到答案。所以，我希望有能够答出来之物的诞生。** —— Fate/Stay Night\n- **最初的一步，泪水之后再一次，雕刻的风景线，消逝在黄昏中的风，直到梦的最后。** —— Clannad\n- **应该可以了吧，我已经很努力了，应该可以抵达终点了…** —— AIR\n- **所谓的奇迹就是要发生之后才会有价值存在的吧** —— EVA\n- **笑是对身边的事物感到一瞬间的幸福而表现出来的东西。** —— CLANNAD\n- **休息对于生存而言，也是紧要问题** —— 虫师\n- **比自己,比梦想更重要的东西永远都存在着...** —— 钢之炼金术师\n- **失礼。噛みました** —— 化物语(上)\n- **驱动着这个世界的，并非只有眼睛能够看到的东西。就像只观察结晶回路的轮盘是无法知晓齿轮的运动一样……** —— 空之轨迹\n- **是个男人就要对自己的人生负责** —— 麻辣教师\n- **我们不是狼，我们只是长着獠牙的羊......** —— 羊之歌\n- **没有偶然的必然，只有必然的偶然** —— 魔卡少女樱\n- **我觉得你很幸福，因为你可以选择爱或者不爱我，而我只能选择爱或者更爱你** —— 草莓100%\n- **前天是兔子，昨天是小鹿，今天是你** —— Clannad\n- **ご無事で何よりです。** —— 妖狐X僕ss\n- **少年少女 向前走吧。** —— 阳炎PROJECT\n- **过分的神圣，往往比恶魔更加恶质。** —— 黑执事\n- **正因生来一无所有，因此我们能拥有一切。** —— 游戏人生\n- **我从来都不是什么天才，只是一个普通人，是一个连一个小女孩都保护不了的普通的、渺小的人类啊。** —— 钢之炼金术师\n- **我不会去统治这片大海，在这片大海上，最自由的人就是海贼王！** —— 海贼王\n- **失礼、噛みました** —— 化物语\n- **她有心，她的心在我这里。** —— 人形电脑天使心\n- **努力不会背叛自己，虽然有时会背叛梦想** —— 我的青春恋爱物语果然有问题\n- **超频链接** —— 加速世界\n- **若没有可依靠之处，便也找不到自己的归宿，躲躲藏藏随波逐流，依附于某物，却又一头撞在看不见的墙壁上。** —— 我的青春恋爱物语果然有问题\n- **就算是自私…我也希望那些人能够永远都有笑容…** —— 夏目友人帐\n- **挚友的执念烙印此身，无尽的黑暗化为光明，天上天下，一骑当神！** —— 天元突破：红莲螺岩\n- **人在直面恐惧的时候，自身的灵魂将会受到考验。降生于这世界，究竟有何所求，要成何事，其本性会暴露无遗。** —— PSYCHO-PASS\n- **整个社会对我都很苛刻。所以至少让我自己宽容一下我自己吧。如果大家都对自己更宽容一点的话。大家都变成废柴就没有废柴了。** —— 果然我的青春恋爱喜剧搞错了\n- **还能再见面吗? 一定能见面的** —— Fantastic Children\n- **即使你忘却了我，我也不会遗忘你。** —— 菜月昂\n- **不要伤害自己，别人总会这样做。** —— 天国王朝\n- **我喜欢你，比世界上任何人都喜欢你。** —— 名侦探柯南\n- **人是可以改变一切的，世上的一切。** —— 吹响！上低音号\n- **所谓的「改变自己，世界就会随之改变」这种事，是不可能的。** —— 我的青春恋爱物语果然有问题\n- **我想成为一个温柔的人，因为曾被温柔的人那样对待，深深了解那种被温柔相待的感觉。** —— 夏目友人帐\n- **你喜欢的人已经心有所属不是正常的吗，因为你喜欢他，所以你的眼中就只有她。人啊，总是盲目地去爱。** —— 四月是你的谎言\n- **忍者的才能不在于所掌握忍术的多少，而在于永不放弃的毅力.笔直向前绝不违背自己的誓言，还有不管何时都不放弃.** —— 火影忍者\n- **我动身踏上旅程，是为了与你道别。** —— 追逐繁星的孩子\n- **大家即将各自展开旅程，挥别这个没落的城镇。** —— 仰望半月的夜空\n- **正气和狂气，理性和知性，自信和确信，在悲剧性的不合理世界，故事开始了。** —— 绝园的暴风雨\n- **将所有人类当成玩偶的神,本身居然也是个小丑啊。** —— Fate/Zero\n- **即使想放弃，也没法放弃最想要的东西，这就是人** —— 悠久之翼\n- **拿起武器，无论顺从还是逃跑，都无法得到自由，既然如此，我们只能战斗，为了自由，站起来吧。** —— 妖精的尾巴\n- **所谓长大成人，就是不断聚了散，散了又聚。为了让彼此不会受伤害而保持一个适当的距离。** —— 新世纪福音战士\n- **如果说怪盗是一个技艺精湛，盗取财宝的艺术家，那么侦探就只是跟在怪盗后面吹毛求疵，充其量不过是个评论家。** —— 名侦探柯南\n- **我不相信人类......但是，我相信人类的“可能性”** —— 游戏人生\n- **即使作为代价要夺走我什么，即使接下来等待我的是什么，即使那样，我无论如何都不想失去他。** —— 少年阴阳师\n- **据说之所以有人出现在梦中，是因为对方想见你的心情穿过身体，飞进了你的梦中。** —— 蜂蜜与四叶草\n- **好梦向来易醒。** —— 风之谷\n- **追逐梦想的人比抓住梦想的人更能发挥实力。** —— 银魂\n- **因为世界并不如你想象的那样坏。** —— 无头骑士异闻录\n- **人只会看到自己想看到的、听到自己想听到的，我也并不例外。** —— 我的青春恋爱物语果然有问题\n- **美丽的不是这个世界，而是接受了这个世界的你的眼睛。** —— 吸血鬼骑士\n- **干燥的冷气，尘埃的味道，我在其中……踏上旅途。** —— 四月是你的谎言\n- **人总有一天都会死的，但正因为生命是有限的，才能够欢喜和悲伤。** —— 通灵王\n- **舞台上演员不能无视剧本随便演，华丽地退场才是完成使命。** —— 绝园的暴风雨\n- **只顾着追求新事物，却不回顾历史，怎么会有未来。** —— 虞美人盛开的山坡\n- **为什么妈妈就不明白无所事事的忙碌呢。** —— 白熊咖啡屋\n- **好红，每当想起你，枫叶就会被染红。** —— 银仙\n- **也许正义并非太阳，而是如同星星一般的东西，天空中有无数的星星，彼此不断抵消着其他星星的光芒。** —— 亚尔斯兰战纪\n- **起风了,唯有努力生存。** —— 起风了\n- **走过一段路 回头看 原来那些痛得快要死去的事情是可以一笑而过的。** —— 黑子的篮球\n- **我们都在梦中，一个叫青春的梦里。梦总有一天会醒来，而回忆会一直闪烁。** —— 校园迷糊大王\n- **王冠会让戴上它的人高人一头，是地位的象征。但王冠真正的意义是：当灾难从天而降时，我会为你们抵挡一切，永远让你们只看到金色的希望。** —— 星游记\n- **只要怀着理想而行动，就算结果不尽如人意也没有关系。但是如果失去了理想，那就真的一无所有了，连自己珍视的人都保护不了。** —— 境界的彼方\n- **如果要伤害别人的感情才能实现的话，对那个人来说梦想就已经不能称之为梦想了。** —— 名侦探柯南\n- **我不会忘记，一直，都留在我的心间。** —— 文学少女\n- **当一个胖纸没有什么不好，最起码可以温暖其他的人。** —— 龙猫\n- **是鸣人改变了我！是鸣人的笑脸拯救了我！所以，如果是为了保护鸣人，就算死，我也无可畏惧，因为我，最喜欢鸣人了。** ——  火影忍者\n- **总在不停寻觅你的踪影，无论十字路口抑或梦境之中，明知你不在，却依然不停地找寻。** —— 秒速五厘米\n- **你受伤的时候，我永远都在。** —— 多啦A梦\n- **在未知的未来将要发生的事，一定有它的意义** —— 火影忍者\n- **那只萤火虫在很长很长的时间里都是独自一人生活，甚至忘了自己是只萤火虫。** —— 小鸠\n- **最近的烦恼是小小的离别带来的寂寞，一瞬间的邂逅与分别，这一个一个的刹那，我想好好珍惜起来。** —— 夏目友人帐\n- **如果基拉被抓住了，那他就是邪恶，如果基拉统治了世界，那他就是正义。** —— 死亡笔记\n- **无论最终的结果是什么，只要这是自己选择的道路。** —— 龙与虎\n- **在面对这些强敌之前...一定要先将眼前敌人逐个打败吧。** —— 网球王子\n- **物转星移，花开花落，周而复始，生生不息，但今昔已非昨日，然今日花容依旧。** —— 虫师\n- **隐藏的是心中的秘密，照耀两人的是star和snow……** —— 名侦探柯南\n- **从进入厨房的瞬间开始，你们就肩负着烹饪美食的责任。** —— 食戟之灵\n- **生活坏到一定程度就会好起来，因为它无法更坏。** —— 龙猫\n- **当你决定了要向前迈进的那一刻, 你就已经踏出前进的一步了。** —— Canvas2 ～七彩的素描～\n- **我再也不要看见她哭的样子了，就算我从此从她心目中消失。** —— 名侦探柯南\n- **无限接近于零，却又不等于零的可能性。** —— 游戏人生\n- **在弱者眼里可能是这样，不过，我的确很强。** —— 蔷薇少女\n- **我无法抗拒泡面这种没营养又廉价的口感。** —— 银仙\n- **荣耀就在彼方，遥不可及才要挑战，歌颂霸道，展现霸道，为了守护我背影的臣子。** —— RIDER Fate/Zero\n- **活着本身就是一种价值，因为还有明天。** —— 高达\n- **大家互相帮助，一起成功，一起幸福什么的，不过是种理想。** —— 我的青春恋爱物语果然有问题\n- **话说回来，现充还真是麻烦啊。** —— 我的青春恋爱物语果然有问题\n- **重逢的时候没想到我会这样喜欢他，虽然你不是我交往的第一人，可却是我的初恋，虽然你可能并不知道。** —— 世界第一初恋\n- **有了喜欢的人，就会在意各种小事，感觉很不自由，但是，为了那些小事左思右想，心里竟然会这么快乐。** —— 闪烁的青春\n- **就算世上有着所谓的“好女人”，也不会有着“和我关系好的女人”。** —— 我的青春恋爱物语果然有问题\n- **必须洗净一切往事，否则你永远无法清楚自由地看这个世界** —— 死神\n- **己所欲者，杀而夺之，亦同天赐** —— 游戏人生\n- **即使你已经习惯了受伤害，也有人看了会心疼的。** —— 我的恋爱物语果然有问题\n- **这个世界上没有完美的人类，所以，人无法自己一个人活著。** —— 不可思议游戏\n- **我们会，慢慢长大成人，随着季节的不停变换 路边盛开的鲜花也在不断变化。** —— 未闻花名\n- **只要一天活著,难过的事总有一天会让你笑著说出来。** —— 天空之城\n- **命运的红线一旦断了，就再也接不上了。** —— 犬夜叉\n- **一举一动，都是承诺，会被另一个人看在眼里，记在心上的。** —— 悬崖上的金鱼姬\n- **如果你一个人把什么都做完了，那我做什么？** —— 元气少女缘结神\n- **在自称善意的之时，即存恶意。** —— 罪恶王冠\n- **正因为生命有限，所以才显得更重要，正因为生命有限，所以才更应该努力不懈。** —— 名侦探柯南\n- **总觉得跟你在一起，不管多高的地方都可以到达。** —— 网球王子\n- **人这种东西，除了为了永不满足的欲望追求新的刺激之外，也是重视稀少价值之物的奇怪生物。** —— gosick\n- **那些坚定决心的人们，会展现出好脸色。** —— 闪电十一人\n- **世界不完美 所以才显得美丽** —— 钢之炼金术士\n- **即使匍匐在地，也要持续前进，这才是你的作风。现在的你只靠一些漂亮话当借口，在高墙前使性子，不过是个小鬼罢了。** —— 银魂\n- **明明喜欢的不得了，可是看到对方幸福洋溢的表情，却觉得很难过、很痛苦，胸口发疼。** —— 彩云国物语\n- **失望了吗？没错，世上或许有些东西别打开比较好，真正把心打开的人多么麻烦啊！** —— 绝望先生\n- **哭也不会改变什么，这个世界从来不会对任何人温柔。** —— 黑执事\n- **不论是过去还是未来，我都会保护你！** —— 旋风管家\n- **自己的过去会被当做笑话或者捏他的形式，被他人随随便便的共有化。** —— 我的青春恋爱物语果然有问题\n- **因为等待的越久，重逢时就越幸福啊。** —— 名侦探柯南\n- **我在时光斑驳深处，聆听到花开的声音。** —— 未闻花名\n- **神会对努力之人微笑，这是骗人的，但我们偶然会被命运之神垂青。** —— 吹响吧！上低音号\n- **大国战争之后还会繁荣富强，而只有小国涂炭遭殃，让世界感受痛苦吧。** —— 火影忍者\n- **人生最糟糕的事，一个是饿肚子，一个是孤独。** —— 夏日大作战\n- **你指尖跳动的电光，是我此生不变的信仰** —— 某科学的超电磁炮\n- **温柔解救不了这个世界** —— 罪恶王冠\n- **代你见证世界的终结，来世再续梦之伊甸** —— Eden*/b站弹幕\n- **今日已成往昔，明日即将到来，为此理所当然之事，感到无比痛心。** —— 寻找失去的未来\n- **我活在我的时间里，她活在她的时间里，因此，我们时间交错的瞬间，对我而言比任何事物都宝贵。** —— 她与她的猫\n- **人类，在决战之时难道会选择自己不擅长的武器来战斗吗？** —— 只有神知道的世界\n- **这只手，暂时不洗了** —— 小林家的龙女仆\n- **重要的人，不能忘记的人，不想忘记的人。 你，是谁？** —— 你的名字\n- **正是在对未来没有任何希望的时候，一个人能坚持到什么地步，才真正体现出这个人有多坚强。** —— 来自新世界\n- **除了这一颗心，都是你的。** —— 人渣的本愿\n- **正是因为这一点一滴觉得还有希望的自己，才是最无可救药的吧。** —— 人渣的本愿\n- **我们都很执着,而且思念的越深,越是绝望。** —— 人渣的本愿\n- **一个人觉得寂寞，和另一个人相互依偎又有什么错** —— 人渣的本愿\n- **想象力足以改变一切。** —— 来自新世界\n- **越是珍惜呆在这里的时间，今后就越是悲伤吧。但是我认为不能称之为「后悔」。** —— 小林家的龙女仆\n- **大部分人并不想长大，只是没办法继续当一个小孩子** —— 小林家的龙女仆\n- **不得了不得了** —— 小林家的龙女仆\n- **你已经不是我的狗了。** —— 龙与虎\n- **正因为有忘也忘不了的回忆，才会变得坚强，这就是所谓的成长吧！** —— 火影忍者\n- **其实我对混合咖啡还是很有自信的** —— 珈百璃的堕落\n- **如果当初握住的不是硬币，而是勇者的手......** —— 中二病也要谈恋爱 恋！\n- **只要是正义的一方，无论手段多么卑鄙都可以被原谅** —— 东京喰种\n- **你偶尔也该回头看看，那些在你身后的人，说不定已经追到你脚边了！！！** —— 妖精的尾巴\n- **因为喜欢你，所以想继续相信下去。** —— 空之境界\n- **自杀是没有理由的，只是今天没有飞起来罢了。** —— 空之境界\n- **听说，樱花花瓣飘落的速度，是每秒5厘米，思念的距离到底有多远。如果樱花下落时是有声音的，你会不会听到我对你的思念** —— 秒速五厘米\n- **在下雪时。第一次相会时。雪白的夜与漆黑的伞。只要有你在身边。只要你露出微笑。就是幸福。** —— 空之境界\n- **身体被冻僵了，仅有吐出的气息略带热度。望着彼此即将停止的心脏鼓动。 然后，极为珍惜的记忆随即就会消失而化为眷恋。** —— 空之境界\n- **对于虚伪而言，真实的光明或许过于耀眼了** —— 蔷薇少女\n- **好了 接下来就让你们见识一下程序员的本事** —— 骑士与魔法\n- **如果结果不如你所愿，就在尘埃落定前奋力一搏。** —— 夏目友人帐\n- **如果因为害怕失败，而不去努力，那就不会有能够成功的人。** —— 樱花庄的宠物女孩\n- **你一直相信的事，也让我相信吧。活着，是件美好的事。** —— Angle Beats\n- **我只希望，我喜欢的人可以健康的活着。** —— 人渣的本愿\n- **正因为生来什么都没有，因此我们能拥有一切。** —— 游戏人生\n- **未来的事无人知晓，所以它才如同这重逢一般，拥有着无限的可能性。** —— 命运石之门\n- **只要努力活下去，总有一天会笑着回忆。** —— 不可思议游戏\n- **想说什么就说，想做什么就做，我们不就是这么一直过来的吗？** —— LoveLive!\n- **也许一个人的快乐会建立在另一个人或者很多人的痛苦之上。但是，自己种下的祸根终有一天会报应在自己的身上的。** —— 地狱少女\n\n- **何必去在意自己与别人相比是否特别呢？即便只有一个人也好。只要有一个认为自己特别的人，我觉得那就足够了。** —— 冰菓\n\n- **虚伪的眼泪，会伤害别人，虚伪的笑容，会伤害自己。** —— 叛逆的鲁鲁修\n\n- **空太是笨蛋！** —— 樱花庄的宠物女孩\n\n- **不敢反抗压迫的心理将伴你一生** —— 狂赌深渊\n\n- **未来的旅程是如此遥远，能见到的光明却是如此稀少。即使如此——我仍然没有完全放弃希望。** —— 刀剑神域\n\n- **契约者不会做梦。** —— 黑之契约者\n\n- **不可结缘** —— 夏目友人帐\n\n- **去做你喜欢做的事吧 这就是所谓的那啥...青春嘛** —— 月色真美\n\n- **重要的感情总是非常单纯 自然脱口而出的** —— GAMERS电玩咖！\n\n- **This is your dream! Anything you can do in your dreams, you can do now!** —— My Little Pony: Friendship is Magic\n\n- **What about super-ultra-extreme-awesomazing?** —— My Little Pony: Friendship is Magic\n\n- **We've learned that friendship isn't always easy, but there's no doubt it's worth fighting for!** —— My Little Pony: Friendship is Magic\n\n- **今宵之月，绝不西沉。只此美梦，不再苏醒。从今往后，生生世世，长相厮守，为你立誓。** —— 银魂\n\n- **打架这玩意，不就是为了守护什么东西吗？** —— 银魂\n\n- **届けて— 切なさには 名前をつけようか“Snow halation”** —— Snow Halation\n\n- **我是想被包养，但不会接受施舍** —— 我的青春恋爱物语果然有问题\n\n- **善于破坏气氛的人，不仅能破坏好的气氛，其实也能把坏的气氛破坏掉。** —— 我的青春恋爱物语果然有问题\n\n- **为什么要称赞他人？那是为了把对方捧到更高的地方更容易绊他的脚，为了把他从高处摔下来。这就叫做称赞杀人法。** —— 我的青春恋爱物语果然有问题\n\n- **女生口中的「好人」首先百分之百是「怎样都好的人」的意思，再好也不过止于「方便好使的人」。也就是说，不管怎样都是没戏了** —— 我的青春恋爱物语果然有问题\n\n- **夜晚还远远没有结束!** —— 春宵苦短，少女前进吧！\n\n- **只要世间有酒,我就喝不够!** —— 春宵苦短，少女前进吧！\n\n- **如果我们能活着出去，千山万水，你愿意陪我一起看吗？** —— 狐妖小红娘\n\n- **不可结缘,徒增寂寞** —— 夏目友人帐\n\n- **就算世界终结，也无所谓** —— 少女终末旅行\n\n- **遇到事情不能坐以待毙！** —— 捷德奥特曼\n\n- **为了爱，与梦想！** —— 眼大人\n\n- **今日的余晖和你最后那天给我的拥抱，同一个温度** —— Myself\n\n- **想和你重新认识一次 从你叫什么名字说起。** —— 你的名字\n\n- **不管你在世界的哪个地方，我一定会，再次去见你的。** —— 你的名字\n\n- **只要记住你的名字，不管你在世界的哪个地方 ，我一定会，去见你。** —— 你的名字\n\n- **和绝望，和睦相处** —— 少女终末旅行\n\n- **愿你有一天，能与你最重要的人重逢** —— 可塑性记忆\n\n- **不相信人咬不到肚脐的，咬破肚脐去死如何？** —— 海猫鸣泣之时\n\n- **梦想是否无聊并不是别人来决定的，不管是什么样的梦想，自己拼命努力去追寻才是最重要的。** —— 守护甜心\n\n- **将愿望倾入不愿忘却的回忆中??** —— ef-a tale of memories\n\n- **倘若只是为了驱赶心中的寂寞，找谁都可以的。** —— 秒速5厘米\n\n- **什么都无法舍弃的人，什么都无法改变 。** —— 进击的巨人\n\n- **比希望更炙热，比绝望更深邃，这就是爱啊。** —— 魔法少女小圆-叛逆的物语\n\n- **我们都在命运之湖上荡舟划桨，波浪起伏着而我们无法逃脱孤航。但是假使我们迷失了方向，波浪将指引我们穿越另一天的曙光。** —— 死神\n\n- **懂得认输是非常重要的，不尝到失败的不甘，也就不会明白跌倒后怎么爬起来，更不可能再向前迈进。** —— 笨蛋测验召唤兽\n\n- **重要的不是你做了多少事，而是你放了多少心思进去。** —— 凉宫春日的忧郁\n\n- **就算是自私??我也希望那些人能够永远都有笑容??** —— 夏目友人帐\n\n- **(」?ω?)」うー！(／?ω?)／にゃー！** —— 潜行吧奈亚子\n\n- **欺骗世界，欺骗最初的你。** —— Steins;Gate\n\n- **在走廊上跌倒会流鼻血，在人生中跌倒会流眼泪。** —— 龙虎斗\n\n- **相信十年后的八月，我们还会相遇。** —— 未闻花名\n\n- **男人就应该保持冷静，沸腾的水只会被蒸发掉。** —— 假面骑士kabuto\n\n- **不管看到什么样的过去，都请不要迷失自己，不管你变成什么样子，我都是你的同伴。** —— angel beats\n\n- **想要试着去相互接近，但最后还是无法敞开心扉，结果就是擦肩而过??** —— 文学少女\n\n- **不能逃避，不能逃避，不能逃避，不能逃避??** —— EVA\n\n- **我终不能改变那个开始，何不忘了那个结局呢。** —— 悟空传\n\n- **因为我想活着，我不能掩藏我心中的本欲，正如我心中爱你美丽,又怎能嘴上装四大皆空。** —— 悟空传\n\n- **这短短的一生，我们最终都会失去。你不妨大胆一些，爱一个人，攀一座山，追一个梦。** —— 大鱼海棠\n\n- **出来吧，刻刻帝！** —— 时崎狂三\n\n- **翠星石最喜欢苍星石的说,所以到死也要在一起的说...** —— Rozen Maiden\n\n- **都是时辰的错！** —— Fate/Zero\n\n- **鸣神の　少しとよみて　さし昙り　雨も降らんか　君を留めん** —— 言叶之庭\n\n- **所谓爱情，是对对自己最重要的人，以慈悲的心保护他的想法。** —— 火影忍者\n\n- **旅行唯有出发前最愉快，狗儿唯有叫声最吓人，女人唯有背影最美丽。** —— 狼与香辛料\n\n- **让我们开始我们的约会（战争）吧** —— 约会大作战\n\n- **连我爸都没打过我** —— 高达0079\n\n- **这是你所不能理解的，人类感情的极致，比希望更热烈，比绝望更深邃——爱！** —— 魔法少女小圆新篇 叛逆的物语\n\n- **What, so everyone's supposed to sleep every single night now? You realize that nighttime makes up half of all time?** —— Rick\n\n- **人生没有彩排，只有现场直播，所以做最好的自己。** —— Internet\n\n- **对自己有自信时，不能对别人说「期待」。所谓的「期待」是放弃时的托词，因为别无选择。若缺少这种无奈感，这个词就太虚伪了。** —— 冰菓\n\n- **人难免伤害别人,也难免受伤,不过,人是不会轻易讨厌别人的.** —— 火影忍者\n\n- **以智者之名，为愚者代辩。** —— Gosick\n\n- **清算，终将到来。** —— Stellaris\n\n- **据说啊 叹气会让幸福溜走的** —— 再见了 我们的幼儿园\n\n- **你将不再是道具，而是人如其名的人。** —— 紫罗兰永恒的花园\n\n- **人没有回忆是无法活下去的哟** —— AIR\n\n- **只要万事俱备，就能一直保持冷静，无论发生什么事，都不会害怕。** —— 银魂\n\n- **正因为不会发生，人们才称它为”奇迹“** —— KANON\n\n- **我想成为一个温柔的人,因为曾被温柔的人那样对待,深深了解那种被温柔相待的感觉。** —— 夏目友人帐\n\n- **我喜欢的人…也能喜欢上自己，我认为这就是奇迹。** —— 月色真美\n\n- **大圣此去欲何? 踏南天，碎凌霄！若一去不回.... 便一去不回！** —— 影视\n\n- **我们一直在离别中，比如和爱的人，和伤害，甚至和时光。** —— 萤火虫之墓\n\n- **至少恋爱不是种机会，我认为它是一种意志。** —— 月色真美\n\n- **幸福感就如沉积在悲哀之河底下 隐隐发光的金砂** —— 月色真美\n\n- **有样东西是其他生物绝对没有，只有人类才有 那就是人有秘密。** —— 月色真美\n\n- **爱一定存在于世上 一定存在 无从寻觅的是爱的表现 是它的表达方式** —— 月色真美\n\n- **把同班的可爱女同学娶回家就是我最大的梦想** —— 月色真美\n\n- **在狂热思绪下喊出的爱情宣言中，存在着爱情的实体** —— 月色真美\n\n- **回首前尘，尽是可耻的过往** —— 月色真美\n\n- **月色如水，虽不如阳光般耀眼，但我的眼中却只有比那月色更可爱的你。心跳不知不觉中加速，嘴角也绷不住那溢出来的幸福笑意。月色确实醉人，却是因为你才显得更美** —— 月色真美\n\n- **“不管你我相距多远，我都想告诉你 我对你的心意不会变，给即将去到陌生城市的你 ，我永远喜欢你”** —— 月色真美\n\n- **我们人是需要吃饭、工作和休息的生物，只要满足了其中一项，其他两项也会逐渐满足，而当这三项都满足后，就会得到强烈的存在感。** —— 银魂\n\n- **看来这世界 似乎还想要驯服我 那就如你所愿吧 我会美丽地挣扎到底** —— 你的名字\n\n- **如果，樱花掉落的速度是每秒5厘米，那么两颗心需要多久才能靠近？** —— 秒速五厘米\n\n- **坐上与学校相反方向的电车，展开没有目标的旅行，去往那从未见过的地方** —— 比宇宙更远的地方\n\n- **不是为了战斗而活着，而是为了活着而战斗。** —— 《DARLING in the FRANXX》\n\n- **幸福的回忆，美满的回忆不一定会成为救赎，有时候，回忆越是美满便越痛苦，也有时候，会越害怕，无论是对于将要离开的人来说，还是对于被留下的人来说，都不可能会成为一种救赎。** —— 可塑性记忆\n\n- **恋爱不是谈出来的，而是陷进去的。** —— GAMER电玩咖！\n\n- **我们的哀伤和年龄是没有关系的。** —— 樱桃小丸子\n\n- **总在不停寻觅你的踪影，无论十字路口抑或梦境之中，明知你不在，却依然不停地找寻。** —— 秒速五厘米\n\n- **我想你们的努力一定会有回报的** —— 龙与虎\n\n- **人生不如意十有八九！** —— 龙与虎\n\n- **此身为剑所天成，身如钢铁，心似琉璃。** —— Fate\n\n- **我的梦想实现了，也留下了美好的回忆，我已经没有任何遗憾了。** —— 末日时在做什么?有没有空?可以来拯救吗?\n\n- **死者的血泪混入滚滚的流沙之中...将会赐予修罗更强的力量...** —— 火影忍者\n\n- **有型的东西终究会消逝，不过……终于，这份回忆还是永远不朽的…** —— 火影忍者\n\n- **人啊...想要保护重要东西的时候，就真的能变得很坚强。** —— 火影忍者\n\n- **寂寞阴暗中度过，孤单孕育了怨与悲凉。锋利的伤痛刺入了我们彼此胸膛，这是我们无法躲避的惩罚，是我们不该任人生撩拨忧伤，不该走过之后又往回看。** —— 火影忍者\n\n- **哪怕是打断你的手脚，也要把你带回去。** —— 火影忍者\n\n- **从你站在桥上看我的 那一刻起你就是我的世界。** —— 火影忍者\n\n- **龙儿是我的，谁都不许碰。** —— 龙与虎\n\n- **卧龙低伏，入我阵来。** —— 一人之下\n\n- **好红，每当想起你，枫叶就会被染红。** —— 银仙\n\n- **相信十年后的八月，我们还会相遇。** —— 未闻花名\n\n- **应该可以了吧，我已经很努力了，应该可以抵达终点了……** —— AIR\n\n- **殺してあげる** —— 緋色月下、狂咲ノ絶\n\n- **能力越大,责任越大** —— 蜘蛛侠\n\n- **不要随便贬低自己** —— 终将成为你\n\n- **我不喜欢这世界，我只喜欢你** —— 乔一\n\n- **神啊 我的人生到底为何而存在呢** —— 蜂蜜与四叶草\n\n- **想象力是武器，没有想象力的人会先死。** —— 哥布林杀手\n\n- **我们只是历史的过客，目标渺茫，无地自容。我们没有世界大战可以经历，也没有经济大萧条可以恐慌。我们的战争充其量不过是内心之战，我们最大的恐慌就是自己的生活。** —— 搏击俱乐部\n\n- **有的只是很简单的唯一的思想…只此一个！“胜利然后支配”！仅此而已...这才是我唯一的满足感！…至于过程和方法之类…并不重要！** —— JOJO的奇妙冒险\n\n- **王有王的才能，厨师有厨师的才能，替身之间是没有强弱之分的** —— JOJO的奇妙冒险\n\n- **如果我们能活着出去的话，千山万水，你愿意陪我一起看吗？** —— 狐妖小红娘\n\n- **如果可以，愿来生你不要忘记我，我也不要忘记你那熟悉的温柔。** —— 狐妖小红娘\n\n- **我愿意呀，五十年前就愿意了。** —— 狐妖小红娘\n\n- **而我不知不觉把自己遗忘，只想为你完成那个梦想。** —— 狐妖小红娘\n\n- **让我成为你的双眼，把那世界万千，描绘在你面前。** —— 狐妖小红娘\n\n- **有很多辛苦的事情，从结果上来说并不好。但是一起努力的过程，绝对不是没用的。我是这么想的。所以现在不是停滞不前的时候。** —— 如果有个妹妹就好了\n\n- **你们这些天才止步不前的时候，我会走得更远。** —— 如果有个妹妹就好了\n\n- **有些景色必须前进才能看到，那么只有勇往直前。** —— 如果有个妹妹就好了\n\n- **果然啊，创造一样东西很开心。让别人享受自己创造的东西，是一种幸福呢。** —— 如果有个妹妹就好了\n\n- **世界上哪有不会输的英雄啊** —— 凸变英雄\n\n- **我怕失去了你，我的世界就没有了光明** —— 凸变英雄\n\n- **虽然有时候，不知道要写些什么，有时候，却有很多想说的，来不及记录。回忆一转身，就悄悄溜走了。** —— 凸变英雄\n\n- **哭过喊过便会停止哭泣** —— 从零开始的异世界生活\n\n- **很抱歉，前面是单行道，你就乖乖的夹着尾巴耸拉着脑袋返回原点吧！** —— 一方通行\n\n- **即便我弱了，也并不代表你强了。** —— 魔法禁书目录\n\n- **小鬼，你为坠入不幸深渊之人而心痛  我不会多言，只不过周遭充斥不幸，而你的小船仅能载一人，若救助其他人，只会让彼此沉没。** —— 文豪野犬\n\n- **死亡不是终点，被遗忘才是。** —— 寻梦环游记\n\n- **世界上的人都变成废柴，这个世界就没有废柴了。** —— 春物\n\n- **青春是谎言，是邪恶。** —— 春物\n\n- **纵使日薄西山。** —— 末日时在做什么\n\n- **孤高的游荡灵魂不需要羁绊之地** —— 春物\n\n- **我的金子，只给千寻。** —— 千与千寻\n\n- **步伐虽小，密而不停** —— 实验品家庭\n\n- **只会比大小真是没品** —— 某科学的超电磁炮S\n\n- **问灵十三载，等一不归人。** —— 魔道祖师\n\n- **如果我是雨的话，也能像连接那永远都不将交汇的天空和大地一样，去连接某个人的心吗。** —— BLEACH\n\n- **你还是...笑起来...最棒了** —— 最终幻想XIV\n\n- **'Cause rainbow won't light up the sky unless you let it rain.** —— My Little Pony: Friendship is Magic\n\n- **千山万水，因你不过毫厘** —— 狐妖小红娘\n\n- **古往传奇多少别离，我 只是不经意 遇到了你** —— 狐妖小红娘\n\n- **或许，你认为你的心已经给了他。但是，我会证明……我有一颗爱你的心！** —— 狐妖小红娘\n\n- **你相信时间会抚平一切，可时过境迁，你已不复醒** —— 动画\n\n- **不拼尽全力去试一下，又怎么会知道啊** —— 刺客伍六七\n\n- **我今天就要带她走，我看谁敢拦我！** —— 刺客伍六七\n\n- **你们人类让我明白了一个道理，那就是这个世界是不讲道理的** —— 刺客伍六七\n\n- **人各有命，上天注定。有人天生为王，有人落草为寇。脚下的路如果不是你自己的选择，那么旅程的终点在哪儿也没人知道，你会走到哪儿，会碰到谁，都不一定。** —— 镇魂街\n\n- **世界是无情的，并不存在与生俱来的英雄。 所以只能由刚好在旁边的人粉墨登场， 演一出英雄的戏码。** —— 魔法禁书目录\n\n- **樱花满地集于我心，楪舞纷飞祈愿相随** —— 罪恶王冠\n\n- **人的能力是有极限的。我从短暂的人生当中学到一件事……越是玩弄计谋,就越会发现人类的能力是有极限的……除非超越人类。** —— JOJO的奇妙冒险\n\n- **那似乎是比翼鸟。这种鸟天生单翼，须靠雌雄二鸟相互依偎才能翱翔天际，是种有缺陷的生物。但是，不知为何，我却感受到了这种生活方式的美妙。** —— Darling in the FRANXX\n\n- **追寻只是因为无法抓获，想要触碰，只是因为知道自己触碰不到。** —— FLCL Progressive\n\n- **世界上所有的不利情况都是因为当事者的能力不足造成的** —— 东京喰种\n\n- **一个人有表里两面，你能看到的，仅仅是其中一面而已。** —— 零的执行人\n\n- **不知彼此来世相逢。是否还能记得我是谁？** —— 狐妖小红娘\n\n- **与其因为不信任而后悔，不如因为相信而后悔。** —— 刀剑神域\n\n- **人生没有那么多的捷径，你不知道路的尽头是什么，但你必须向前走。** —— 刀剑神域\n\n- **一个人决定寂寞，和另一个人相互依偎又有什么错** —— 人渣的本愿\n\n- **我可从来不认为恐惧可以成为舍弃他人的借口，人不能因为恐惧，就连身为人类的品性都丢掉。** —— 铁甲城的卡巴内瑞\n\n- **你知道吗？从人眼的高度能看到的地平线，是离自身的距离大约是4公里。** —— 青春猪头少年不会梦到兔女郎学姐\n\n- **梦想是一个天真的词，实现梦想是一个残酷的词** —— 哆啦A梦\n\n- **既然今天是昨天，那么睡到明天就好。** —— 青春猪头少年不会梦到兔女郎学姐\n\n- **做不到的事没必要勉强去做，不也挺好吗？** —— 青春猪头少年不会梦到兔女郎学姐\n\n- **给我高高的飞起来啊！** —— 星游记\n\n- **要是眼睁睁的看着重要的同伴死去，就算是死，我也不能瞑目。** —— 家庭教师\n\n- **你的败因只有一个，就是与我为敌。 -** —— 家庭教师\n\n- **如果真是这样， 就由我来把彭格列毁灭！** —— 家庭教师\n\n- **十代目的意志就是我们的意志！** —— 家庭教师\n\n- **但我拒绝！我岸边露伴最喜欢的事情之一，就是向那些自以为是的家伙说，NO！** —— JOJO的奇妙冒险\n\n- **人类的赞歌就是勇气的赞歌！** —— JOJO的奇妙冒险\n\n- **大家都是伪善者，世间充斥着不真实。** —— 无头骑士异闻录\n\n- **不服从命令的人是人渣，抛弃同伴的人连人渣都不如。** —— 火影忍者\n\n- **砸瓦鲁多！** —— JOJO的奇妙冒险\n\n- **背后即是祖国，我们无路可退。** —— 那年那兔那些事\n\n- **不能输，笑吧！** —— 约定的梦幻岛\n\n- **不管是怎样的回忆，都是我们活过的人生。** —— Angel Beats!\n\n- **孤独的我们才有人类的样子。** —— Angel Beats!\n\n- **声起立华乐独奏，曲末音无心结弦。** —— Angel Beats!\n\n- **不愿意的时候，逃跑也没有关系！** —— 灵能百分百\n\n- **邪王真眼是最强的** —— 中二病也要谈恋爱\n\n- **大部分人并不想长大 只是没办法继续当一个小孩子。** —— 小林家的龙女仆\n\n- **从开始的第一天起，就回不去了。** —— 流浪地球\n\n- **欧拉欧拉欧拉欧拉！** —— JOJO的奇妙冒险\n\n- **一举一动，都是承诺，会被另一个人看在眼里，记在心上的。** —— 悬崖上的金鱼姬\n\n- **人各有命，上天注定。有人天生为王，有人落草为寇。脚下的路，如果不是自己的选择，那旅程的终点在哪儿，也没人知道，你会走到哪儿，会碰到谁，都不一定。** —— 镇魂街\n\n- **成一事者，是失之不渝的愚者；毁一事者，是停滞不前的贤者。** —— 不正经的魔法讲师\n\n- **到底是，为什么呢？** —— 金木研\n\n- **我爱你，与你何干？** —— 歌德\n\n- **即使我弱了，也并不代表你强了** —— 魔法禁书目录 第二季\n\n- **正因为有了音乐，才有了相遇的瞬间，有了相会的感动，有了相逢的人们，有了邂逅的思念。** —— 四月是你的谎言\n\n- **你驻足于春色中，于那独一无二的春色之中。** —— 四月是你的谎言\n\n- **每当心情郁闷的时候，用手托腮就好，手臂会因为帮上忙而开心的。** —— 四月是你的谎言\n\n- **你的所言所行，全都闪烁着光芒，太过刺目，于是我闭上双眼，但内心还是无法停止对你的憧憬。** —— 四月是你的谎言\n\n- **或许前路永夜，即便如此我也要前进，因为星光即使微弱也会为我照亮前途。** —— 四月是你的谎言\n\n- **九月是蒲公英漫飞的季节，我喜欢这个季节，只可惜今天是九月的最后一天了** —— 我是江小白\n\n- **不辜负年华，做自己想做的事，唱自己想唱的歌** —— 我是江小白\n\n- **世间有很多事情，人们无法从它寂静的表象，猜测到暗涌，就像一个人和另一个人的相遇** —— 我是江小白\n\n- **用我那牵强的微笑，活出无人能比的骄傲。** —— 黑执事\n\n- **人类的赞歌就是勇气的赞歌** —— JOJO的奇妙冒险\n\n- **我没有任何理由为了那些人让自己的人生付之一炬！** —— 三月的狮子\n\n- **但是，我没有后悔，不能后悔，因为，我所做的事情一定没有错！** —— 三月的狮子\n\n- **相信奇迹的人，本身就和奇迹一样了不起。** —— 星游记\n\n- **即使天无雨，我亦留此地。** —— 言叶之庭\n\n- **有些梦想虽然遥不可及，但不是不可能实现。只要我足够的强。** —— 秦时明月\n\n- **有一天，你到了人类的世界，不要去爱上一个人，因为，爱上一个人，会让你真正变成孤单一人。** —— 朝花夕誓\n\n- **经为流逝的日月。纬为人们的生业。** —— 朝花夕誓\n\n- **悲痛的事，温柔以对；难过的事，坚强以对。** —— 朝花夕誓\n\n- **叫做妈妈的人，是不会哭的。** —— 朝花夕誓\n\n- **每一个兔子都有一个大国梦** —— 那年那兔那些事\n\n- **乘上与平时相反的列车，为了去见从未见过的风景。** —— 比宇宙更远的地方\n\n- **我不做人了！** —— JOJO的奇妙冒险\n\n- **我是否住进了某人的心房呢？** —— 四月是你的谎言\n\n- **那么难受，那么痛苦，可是 世界这么美丽...让我如何能够忘记！** —— 朝花夕誓\n\n- **雁过拔毛，兽走留皮。涂山，我罩的，懂？** —— 狐妖小红娘\n\n- **那天，我见过的最强剑客，提起了天下最强的宝剑······却早已没了剑心。** —— 狐妖小红娘\n\n- **知识是很美的，它们可以让你不出家门就了解这世上的许多事。** —— 妖精的尾巴\n\n- **尽情的依靠我吧，因为总有一天我也会依靠你的。** —— 妖精的尾巴\n\n- **电助！凉子，看到了吗！** —— 电脑线圈\n\n- **I met the girl under full-bloomed cherry blossoms, and my fate has begun to change.** —— 四月是你的谎言\n\n- **不相信自己的人，连努力的价值都没有。** —— 火影忍者\n\n- **我一点也不走运。** —— Fairy gone\n\n- **我从未让你们骄傲，你们却待我如宝。** —— Az殇芯的chx\n\n- **错的不是我，而是这个世界！** —— 东京喰种\n\n- **你驻足于春色中，于那独一无二的春色之中。** —— 四月是你的谎言\n\n- **和她相遇的瞬间，我的人生就改变了。所见所闻所感，目之所及全都开始变得多姿多彩起来。** —— 四月是你的谎言\n\n- **やり遂げたよ、最後まで。** —— ラブライブ\n\n- **要把所有的夜归还给星河，把所有的春光归还给疏疏篱落，把所有的慵慵沉迷与不前，归还给过去的我。** —— 德卡先生的信箱\n\n- **总有一天，我要撕碎这片虚伪的星空。** —— 黑之契约者\n\n- **那么，开始实验吧！** —— 假面骑士Build\n\n- **我看到这个世界的恶意，我们正在接受考验。** —— 机动战士高达00\n\n- **喜欢上一个人就是变得束手无策。** —— 悠久之翼2\n\n- **所谓人，无论是谁到了最后，都会形单影只。** —— 悠久之翼2\n\n- **长大了，才能体会什么是责任！** —— 家庭\n\n- **你是否会等待着我?我还想变的更加完美...** —— LoveLive!Sunshine!\n\n- **我只是想要得到「我没有逃避」的记忆吧。** —— 三月的狮子\n\n- **人生海海，敢死不叫勇气，活着才需要勇气。** —— 麦家-人生海海\n\n- **我无知又愚蠢，世界残酷又疯狂。** —— 进击的巨人\n\n- **我的面包！** —— Clannad\n\n- **是我，是我先，明明都是我先来的，接吻也好，拥抱也好，还是喜欢上那家伙也好。** —— 白色相簿2\n\n- **一旦醉心于狩猎，不到最后关头不会发现自己才是猎物。** —— 来自新世界\n\n- **人类这种生物，不管有过多少不得不伴着泪水吞咽的教训，只要过了咽喉，所有教训便又会被彻底遗忘。** —— 来自新世界\n\n- **即使我变弱了，也不代表你变强了。** —— 魔法禁书目录\n\n- **喜欢和不讨厌之间可是有着数亿光年的距离的。** —— 四月是你的谎言\n\n- **痛苦着痛苦着，满脑子只能想我的事。** —— 四月是你的谎言\n\n- **我拼命地挣扎，我对活下去的执著，都是因为你，是你让我，对和你一起度过的那段时光无比留恋。** —— 四月是你的谎言\n\n- **站起来！站起来啊！你是我的腿吧！站起来啊！** —— 四月是你的谎言\n\n- **我不甘心，明明你为我做了那么多，我却什么都不能为你做。** —— 四月是你的谎言\n\n- **等着我，有马，不对，别回头，向前进，你要一直向前，我一定会追上来的。** —— 四月是你的谎言\n\n- **就此分别吧！请继续向前，迎接樱花漫溢的四月，但请不要忘记我，友人A……** —— 四月是你的谎言\n\n- **那里还有——医生的房间啊！** —— Fate / Grand Order\n\n- **因为我...我希望不做任何的努力，让对方喜欢上最真实的我。** —— 女高中生的无所事事\n\n- **没有一封信是不必被送达的。** —— 紫罗兰永恒花园\n\n- **我觉得，不改变也很好。** —— 来自风平浪静的明天\n\n- **痴情的妖怪啊,请再等一世吧。** —— 狐妖小红娘\n\n- **你从我的手中展翅高飞，我深受打击。在这世上的某处，再次寻找崭新的你的影子，那就是我们之间的美好结局。** —— 骚动时节的少女们啊\n\n- **一旦你尝试过天空的味道，你就会永远向上仰望** —— 列奥那多·达芬奇\n\n- **人间不温柔** —— 李诞\n\n- **知道和感觉到是两码事。** —— 《看见》\n\n- **只要学不死，就往死里学。** —— 网络热语\n\n- **我是奥尔加·伊滋卡，几颗子弹不要紧的！** —— 机动战士高达：铁血的孤儿\n\n- **死亡的尽头，没有神** —— 机动战士高达00:先驱者的觉醒\n\n- **只要能和大家一起唱歌，大概就算毕业以后我们分开了，只要听见这首歌就能回想起现在。** —— TARI TARI\n\n- **我没能说出口，不管是那句「我走了」，还是那句「对不起」，或者那句「谢谢」...** —— TARI TARI\n\n- **现世为梦，夜梦为真。** —— 《xxxholic》\n\n- **隐约雷鸣阴霾天空即使风无雨我亦留此地** —— 言叶之庭\n\n- **今天不想做，所以才要做** —— 春上村树\n\n- **嗯，明白。我们是天人的Gundam Meister** —— 机动战士高达00\n\n- **不动身的话就永远无法追寻，哪怕是休息也不会就此停下。** —— Aqours\n\n- **朝着下一道光芒横渡大海吧！** —— Aqours\n\n- **这个世界啊，很美丽的，很广大的，很辽阔的！** —— Darling in the FRANXX\n\n- **我对Darling啊，最喜欢了。我们从今以后，都要在一起哦。** —— Darling in the FRANXX\n\n- **为了传达不到的思念而苦恼，只会感到痛不欲生。** —— WHITE FIRST LOVE\n\n- **千军万马滚滚来，不知何人留情怀！** —— Other\n\n- **用决斗......给大家......带来笑容......** —— 游戏王<A-RCV>\n\n- **别人的看法都是狗屁，你是谁只有你自己说了才算，这是爹教我的道理。** —— 哪吒之魔童降世\n\n- **或许前路永夜，即便如此我也要前进，因为星光即使微弱也会为我照亮前路。** —— 四月是你的谎言\n\n- **这个世上没有无用的齿轮，也只有齿轮本身能决定自己的用途。** —— 嫌疑人x的献身\n\n- **光就是羁绊之力，它会再度被某人继承，散发出耀眼的光。** —— 奈克瑟斯奥特曼\n\n- **人们渴望像鸟儿一样自由自在地飞翔，可他们并没有想过，鸟儿也并不自由，它们之所以飞翔，是为了生存。** —— 奈克瑟斯奥特曼\n\n- **记忆是不会消失的，只是一时想不起来了而已。** —— 千与千寻\n\n- **我不借助别人的力量就没办法跟仰慕的人聊天吗？** —— 女高中生的虚度日常\n\n- **强韧，无敌，最强！玉碎，粉碎，大喝彩！** —— 海马濑人\n\n- **人的好意是沉重的。** —— 黑神\n\n- **我们所度过的每个平凡的日常，也许就是连续发生的奇迹。** —— 日常\n\n- **我最喜欢三月的风，四月的雨，不落的太阳和最好的你** —— 闺密\n\n- **在末日中，人们总想寻找希望，但要真有希望的话，那还叫希望吗？** —— 灵笼\n\n- **可爱即是正义。** —— 游戏人生\n\n- **在末日中，人们总想寻找希望，但要真有希望的话，那还叫末日吗？** —— 灵笼\n\n- **只要抗争下去就能带来奇迹，这是恐怖分子的教诲，你给我记清楚了。** —— 未来日记\n\n- **相信奇迹的人本身就和奇迹一样了不起啊** —— 星游记\n\n- **人类的赞歌就是勇气的赞歌。** —— JOJO的奇妙冒险\n\n- **你们腌太监也不会动人脑子啊！** —— 铁心搏奕\n\n- **这是你所不能理解的，人类感情的极致，比希望更热烈，比绝望更深邃——爱！** —— 魔法少女小圆新篇\n\n- **我不要你觉得，我要我觉得。** —— 中餐厅\n\n- **神啊，求求你。已经足够了。已经没事了。我们都会熬过去的。** —— 天气之子\n\n- **自古以来，天空上就是另一个世界。** —— 天气之子\n\n- **在东京的天空上，我们决定性的改变了世界的模样。** —— 天气之子\n\n- **向天空拼命伸出的双手，发射那么巨大的东西，只是为了寻找超出想象的彼岸所存在的东西。** —— 秒速五厘米\n\n- **你是否会等待着我？我会变得更加完美！** —— Aqours\n\n- **さあ，Games始めましょうか** —— 游戏人生\n\n- **被一个自己不感兴趣的人示好，你不觉得没有比这更恶心的事吗** —— 人渣的本愿\n\n- **世界上所有的不利状况都是因为当事者的能力不足** —— 东京喰种\n\n- **在虚构现实里寻求现实感的人才有问题** —— 凉宫春日的忧郁\n\n- **Ex - ploooosion !** —— 为美好的世界献上祝福\n\n- **是我，是我先，明明都是我先来的……接吻也好，拥抱也好，还是喜欢上那家伙也好** —— 白色相簿2\n\n- **没有一个世界会比活在这个世界痛苦** —— 黑岩射手\n\n- **如果把那一端的敌人全部杀掉的话，我们就能自由了吗？** —— 进击的巨人\n\n- **今后我们来度过满是愉快之事的人生吧** —— Charlotte\n\n- **如果一切都是镜花水月，那就让这万物走向终结。如果一切皆是命中注定，那就让这世界消失殆尽。** —— 失落的歌谣\n\n- **能够用自己喜欢的工作维持生活是件很幸福的事情** —— 白箱\n\n- **有的鱼是永远关不住的，因为他们属于天空。** —— 大鱼海棠\n\n- **我会化作人间的风雨陪在你的身边** —— 大鱼海棠\n\n- **你以为你接受的是谁的爱，是一个天神的爱！他背叛所有神灵去爱你，为你忍受一切痛苦。** —— 大鱼海棠\n\n- **深藏不露是一种卓越的才能** —— 欢迎来到实力至上主义的教室\n\n- **这样叹气的话，幸福会像四处逃散的小蜘蛛一样溜走的。** —— 辉夜大小姐想让我告白\n\n- **世上所以不公平之事是由于当事人能力不足所致。** —— 金木研\n\n- **雨滴降落的速度是每秒十米，我该用怎么样的速度，才能将你挽留？** —— 言叶之庭\n\n- **樱花落下的速度是每秒五厘米， 我该用怎么样的速度，才能与你相遇。** —— 秒速五厘米\n\n- **如果当时我们说了再见，后来是不是就可以再见** —— 昨日青空\n\n- **音无结弦之日 跃动天使之心 立于浮华之世 奏响天籁之音** —— Angel Beats!\n\n- **温柔正确的人总是难以生存，因为这世界既不温柔，也不正确。** —— 我的青春恋爱物语果然有问题\n\n- **我一直注视着你，似近，似远。但你永远，看不见我……** —— 来自风平浪静的明天\n\n- **与其被人扯碎校服，撕破心灵，倒不如直接剁碎自己的躯体，来得痛快。** —— 黑岩射手\n\n- **目标是以科学的力量凌驾于超能力之上，为了伯伦希尔的荣耀。** —— 小绿和小蓝\n\n- **这东西是越嚼越有味哦~** —— BanG Dream! 2nd Season\n\n- **即使再也没有晴天也没有关系.** —— 天气之子\n\n- **我一直以为最糟糕的情况是你离开我，其实最令我难过的，是你不快乐。** —— 精灵旅社\n\n- **キラキラ☆ドキドキ** —— 戸山香澄\n\n- **我下定决心要当海贼王，就算因此而战死，那也无所谓。** —— 海贼王\n\n- **规则是用来被打破的。** —— 机械公敌\n\n- **木叶飞舞之处，火亦生生不息** —— 火影忍者\n\n- **当我拔出第二把剑时，就是为了我所爱之人** —— 刀剑神域\n\n- **你指尖跃动的电光，是我此生不变的信仰，唯我超电磁炮永世长存。** —— 某科学的超电磁炮\n\n- **遇事不决，量子力学。** —— 青春期猪头少年不会梦到兔女郎学姐\n\n- **我们终会相遇相知，在那悠远的苍穹。** —— 缘之空\n\n- **Star Burst Stream!** —— 刀剑神域\n\n- **虽然想做一团火，却成了一块透视苦难的冰** —— 卡夫卡研究\n\n- **生命可以随心所欲，但不能随波逐流** —— 猫的报恩\n\n- **我们所度过的每个平凡的日常，也许就是连续发生的奇迹** —— 日常\n\n- **加油** —— 自编\n\n- **夕阳真是耀眼无比啊。** —— 女高中生的虚度日常\n\n- **今天我就要带她走，我看谁敢拦我** —— 刺客伍六七\n\n- **这里有你,他现在只有我了。** —— 罗小黑战记\n\n- **星空之所以美丽，就是因为在无限的宇宙中，不管黑暗如何蔓延，都有星星的光芒去把它照亮。世界也是这样，有绝望的地方，就会有希望产生。** —— 星游记\n\n- **我来做最不想做的事情了。** —— 22/7\n\n- **你只见树，未见森林** —— 火影忍者\n\n- **你就赌我会死吧，因为你逢赌必输。** —— 火影忍者\n\n- **奶奶说过，男人有两件事不能做——绝不能让女孩子流泪和浪费食物。** —— 假面骑士Kabuto\n\n- **正因为这样，我才决定任何时候都要尽全力享受人生，这样的话，无论什么时候死去，都是最幸福的一生了吧** —— 恋爱随意链接\n\n- **正因为有了所有的过去，才成就了现在的我。否定自己所走过的路途，就意味着否定现在的自己。** —— 恋爱随意链接\n\n- **每个人每一天的价值都是完全相等的，无论做什么，都不会改变我今天活着的价值。** —— 我想吃掉你的胰脏\n\n- **我这个人呀，能过着这样平凡普通的日子就很开心了。** —— 我想吃掉你的胰脏\n\n- **每个人能走到现在，都是自己选择的结果。** —— 我想吃掉你的胰脏\n\n- **都说樱花飘落时让人伤感，而我看到樱花盛开也觉得伤感，因为我会计算，我还能再看几次樱花盛开呢。** —— 我想吃掉你的胰脏\n\n- **只要人活在这世上就一定是有意义的，怎么活是自己选的。** —— 我想吃掉你的胰脏\n\n- **人生，一半是现实，一半是梦想。一念花开，一念花落。** —— 火影忍者\n\n- **我希望，我能完全信任你，我还从来没有能这样信任过谁。我也希望，你将给我最大的支持。** —— 安妮日记\n\n- **愿你有一天，能和你最重要的人重逢。** —— 可塑性记忆\n\n- **告诉我，神会流血吗？——神不会，但你会。** —— 烦人的村民\n\n- **さあ、始めようか。(那么，游戏开始吧。)** —— No Game No Life\n\n- **我讨厌温柔的女孩子，温柔的女孩子其实对所有人都温柔，而我却会误以为只对自己温柔，然后沾沾自喜得意忘形，最后弄得不欢而散，双方都受到伤害，所以我才讨厌温柔的女孩子。** —— 我的青春恋爱物语果然有问题\n\n- **无知而又纯洁的岁月。是任何人都曾拥有的。世界上没有一成不变的事务。所以只要以其他方式找到自己的快乐就行了。** —— CLANNAD\n\n- **粉色蓝宝石的宝石语是「献给弱者的正义」。** —— 宝石商人理查德的谜鉴定\n\n- **喂，前面可是地狱啊！おい、この先は地狱だぜ！** —— Fate/stay night\n\n- **Steel is my body, and fire is my blood.** —— Fate/stay night\n\n- **游龙当归海，海不迎我自来也。** —— 火影鸣人\n\n- **孩子，我愿意为你而前行。** —— 灵笼\n\n- **世界上一切不利状况，都是因为当事人的能力不足。** —— 东京食尸鬼\n\n- **隐约雷鸣，阴霾天空，即使天无雨，我亦留此地。** —— 言叶之庭\n\n- **没有未来的未来不是我想要的未来。** —— 境界的彼方\n\n- **只要怀着理想而行动，就算结果不尽如人意也没有关系。但是如果失去了理想，那就真的一无所有了，连自己珍视的人都保护不了。** —— 境界的彼方\n\n- **我喜欢你，比这个世界上其他任何人都喜欢你，我永远都会喜欢你的。只有我的这份心情是不会输给任何人的，即使我的这个身体毁灭了、从世界上消失了，来世我肯定还是会喜欢上你的。** —— 境界的彼方\n\n- **愿有朝一日与你见面还能释放温暖拥你入怀。** —— 境界的彼方\n\n- **已经没什么好害怕了。** —— 魔法少女小圆\n\n- **声起立华乐独奏，曲末音无心结弦。** —— Angel Beats!\n\n- **总在不停寻觅你的踪影，无论十字路口抑或梦境之中，明知你不在，却依然不停地找寻。** —— 秒速5厘米\n\n- **只要引导着二人的两把命运之剑还在身边，我们就绝不会失败。** —— 刀剑神域\n\n- **这虽然这是游戏，但可不是闹着玩的。** —— 刀剑神域\n\n- **花开得太好，所以摇摇欲坠；这一切的事情，老得这样快；世间一直熙攘着。** —— 素年锦时\n\n- **人要意识到自己过得悲哀，需要很长时间；要意识到其实不必如此，则需要更久。** —— 马男波杰克\n\n- **从这里（太空）根本看不到什么国境线，只有地球。** —— 星空清理者\n\n- **你那无聊的幻想，就由我来打破！** —— 魔法禁书目录\n\n- **正义不是行使武力的理由，而是正相反——为了将动武的理由正当化，人们才会高喊正义。** —— 末日时在做什么？有没有空？可以来拯救吗？\n\n- **君子无争，含光无形，坐忘无心。** —— 秦时明月\n\n- **我在这里只学会一件事，那就是不到最后绝不轻言放弃。如果回到了现实世界，我一定会再度和桐人你相遇，然后重新喜欢上你。** —— 刀剑神域\n\n- **最近我很喜欢明天见这句话，因为只要许下约定，就能期待明天的到来。** —— 结城友奈是勇者\n\n- **就算没有意义，偶尔也会有好事发生。** —— 终末少女旅行\n\n- **你将不再是道具，而是成为人如其名的人。** —— 紫罗兰的永恒花园\n\n- **大家热爱的事物，擅长的事物都不同，都拥有自己的世界，一个人一个世界，这些互相连接的话，就会展开许多的可能性，广大、未知，就像是宇宙一样。** —— 恋爱小行星\n\n- **无论人生过得怎么样，都不要失去自己活着的意义，努力的去追逐心中的梦想，留下自己曾经在这个世界活过的痕迹，不要等到一切都失去了才追悔莫及。** —— 天使的心跳\n\n- **人生没有那么多预算，不要等到到死后世界叹息，珍惜眼前所有。相信每天都是新的开始，都充满希望.** —— 天使的心跳\n\n- **真真需要记住的不是立华奏，而是天使身体里跳动的那颗永不结弦之心。** —— 天使的心跳\n\n- **人总有一天会孤独一人，然后活在自己的回忆中。为了能笑着于孤独相依为命，我决定战斗下去，决定不会再以泪洗面。** —— 天使的心跳\n\n- **与绝望~和睦相处。** —— 少女终末旅行\n\n- **人类的赞歌是勇气的赞歌，人类的伟大是勇气的伟大！** —— JOJO的奇妙冒险\n\n- **孤独的人不会伤害别人，只会不断地伤害自己罢了。** —— 我的青春恋爱物语果然有问题\n\n- **枷锁，自然规律，时光的流逝，名为身体的容器，名为心灵的自我。** —— 四月一日灵异事件薄\n\n- **没事没事，不同朋友擅长的事情也不同。** —— 兽娘动物园\n\n- **如果有人对我说抱有希望是错误的花，我会无数次回答“不是这样的”，无论什么时候都一定会这样撑下去。** —— 魔法少女小圆\n\n- **这么温暖的世界里有我，要感谢神明了。** —— Comic Girls\n\n- **Don't forget. Always,somewhere,someone is fighting for you. As long as you remember her,you are not alone.** —— 魔法少女小圆\n\n- **这就是人类感情的极致，比希望更炽热，比绝望更深邃的，爱哟！** —— 魔法少女小圆\n\n- **露珠落去花留着，花萎露珠未消去。奈何露已随风去，花间寻觅不见珠。** —— 学园孤岛\n\n- **波，高低起伏的东西；波，产生后开始扩散；波，自己无法抵抗的东西。** —— 四月一日灵异事件薄\n\n- **在這手心之中的，就是“心”啊。** —— 死神\n\n- **木叶飞舞之处，火亦生生不息。** —— 火影忍者\n\n- **你以为我是谁？这是我埋下的因，我要亲手解决这一切。** —— 某科学的超电磁炮\n\n- **只要呼唤你的名字，我们的牵绊就永远不会消逝。** —— 紫罗兰永恒花园外传：永远与自动手记人偶\n\n- **我也许能再一次找到活着的目的，也许能再一次找到活着的意义，为了那些人，奉献出我的人生的话……** —— Angelbeats\n\n- **别低下头  排球是一门积极向上的运动！** —— 排球少年\n\n- **理解何为孤单，努力想得到爱的你，内心的悲伤是否稍微宣泄了呢？** —— 夏目友人帐\n\n- **自己不经意的一句话，触动了别人的心。** —— 恋如雨止\n\n- **游荡的孤高灵魂不需要羁绊之处。** —— 我的青春恋爱物语果然有问题\n\n- **如果说现在的日子过得很穷困，那我就去喜欢上穷困。** —— 隐瞒之事\n\n- **人和人之间就像这风筝一样，拉的太紧就飞不远，放的太松又掉下来，而当它飞的很高很高你还拽着不放，它就有可能会断掉，再也回不来了。** —— 灵契\n\n- **一日为灵，终生为影，灵气共生，魂命无分，阴阳调和，万物皆宁。** —— 灵契\n\n- **端木熙，别忘了，你是我的祭司，谁也别来跟我争，他神龙章轩不可以，神也不行。** —— 灵契\n\n- **从今往后，你不能斩的人我来斩，你不能伤的人我来杀，既然你要保护这个世界，那我便保护你，这就是我的信念！** —— 灵契\n\n- **千载流年一如梦，月落山河一世倾。** —— 灵契\n\n- **不可结缘，徒留寂寞……** —— 夏目友人帐\n\n- **一代锤子一代皇，代代锤子教做人！** —— 斗罗大陆\n\n- **花早晚会凋谢，记忆最终也会消散。** —— 镇魂街\n\n- **所谓首领，只不过是被势力绑架上制高点的走狗而已。而且，都是身不由己的走狗。** —— 狐妖小红娘\n\n- **无论是人类还是妖怪，只要内心希望他人接触，那么就是相同的存在；会因独处而感到寂寞，也会害怕踏出第一步。** —— 夏目友人帐\n\n- **未来始终掌握在自己手中，从中滑落的，我们称之为过去。** —— 末日时在做什么？有没有空？可以来拯救吗？\n\n- **我不努力，就见不到你了啊。** —— 昨日之歌\n\n- **无可取代的东西要到失去后才知道珍惜呢。** —— 干物妹小埋\n\n- **没有什么背叛，只不过是忠诚过期了而已。** —— 凹凸世界\n\n- **Ko no Dio da!** —— JOJO的奇妙冒险\n\n- **我们不是大人，而是同学吧。** —— 恋如雨止\n\n- **今天的我，凌驾于阿修罗之上！** —— 机动战士高达00\n\n- **Exia，驱逐目标！** —— 机动战士高达00\n\n- **花无凋零之时，爱无传达之期，爱情亘古不变，紫罗兰永世长存。** —— 紫罗兰永恒花园\n\n- **相比昨日明日，今天更适合开始。** —— Comic Girls\n\n- **呐~~凯利，你想成为怎样的大人。** —— Fate/Zero\n\n- **当敌人变成战友多半是为了生存，而战友变成敌人多半是为了金钱。** —— 端脑\n\n- **正因为听不见和看不到，所以风子才会做这样的事情。** —— Clannad\n\n- **我们开始一起攀登，这长长的，长长的坡道。** —— Clannad\n\n- **无知而又纯洁的岁月是任何人都曾拥有的，世界上没有一成不变的事物，所以只要以其他方式找到自己的快乐就行了。** —— Clannad\n\n- **前天是小兔子，昨天是小鹿，今天是你。** —— Clannad\n\n- **能哭的地方只有厕所和爸爸的怀里。** —— Clannad\n\n- **美好的事情，现在才开始呐。** —— Clannad\n\n- **什么叫忍者？学会忍耐的人就叫忍者。** —— 哔哩哔哩","slug":"yi-yan","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cktfuxh47007rootn51ys72sz","content":"<p>尝试 <code>Ctrl + F</code> 一下您看过的动漫吧。</p>\r\n<ul>\r\n<li><p><strong>与众不同的生活方式很累人呢，因为找不到借口。</strong> —— 幸运星</p></li>\r\n<li><p><strong>面对就好，去经历就好。</strong> —— 花伞菌</p></li>\r\n<li><p><strong>将愿望倾入不愿忘却的回忆中……</strong> —— ef-a tale of memories</p></li>\r\n<li><p><strong>美好的人眼里映出的世界也是美好的。</strong> —— ARIA</p></li>\r\n<li><p><strong>看似美好的东西，往往藏着陷阱。</strong> —— 只有神知道的世界</p></li>\r\n<li><p><strong>天空是连着的，如果我们也能各自发光的话，无论距离有多远，都能看到彼此努力的身影。</strong> —— 龙虎斗</p></li>\r\n<li><p><strong>恋ではなく、爱でもなく、もっとずっと 深く重い。</strong> —— sweet pool</p></li>\r\n<li><p><strong>花开花落，再灿烂的星光也会消失。</strong> —— 圣斗士星矢</p></li>\r\n<li><p><strong>挡着在我们面前的是巨大庞然的人生，阻隔在我们中间的是广阔无际的时间，对于他们，我们无能为力……</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>我是一个经常笑的人，可我不是经常开心的人。</strong> —— 未闻花名</p></li>\r\n<li><p><strong>努力是不会背叛自己的，虽然梦想有时会背叛自己。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>人经历风浪是会变得更强，可是船不同，日积月累的只有伤痛。</strong> —— 海贼王</p></li>\r\n<li><p><strong>真相只有一个！</strong> —— 柯南</p></li>\r\n<li><p><strong>用你的笑容去改变这个世界，别让这个世界改变了你的笑容。</strong> —— 网络</p></li>\r\n<li><p><strong>我有在反省，但我不后悔。</strong> —— 物语系列</p></li>\r\n<li><p><strong>我没有梦想，但是我能保护！</strong> —— 假面骑士555</p></li>\r\n<li><p><strong>或许只需一滴露水，便能守护这绽放的花朵。</strong> —— 反叛的鲁鲁修</p></li>\r\n<li><p><strong>我不会让任何人看到我软弱的一面。</strong> —— 桔梗</p></li>\r\n<li><p><strong>当你想做一件事，却无能为力的时候，是最痛苦的。</strong> —— 高达SEED</p></li>\r\n<li><p><strong>我的腿让我停下，可是心却不允许我那么做。</strong> —— 钢之炼金术师</p></li>\r\n<li><p><strong>我手中的魔法，是守护挚爱的力量，是坚定这个信念所必须的力量，我一定会拯救你的，无论在何时、何地。</strong> —— 魔法少女奈叶</p></li>\r\n<li><p><strong>比任何人都要了解自己，比任何人都要关爱自己。喜欢上这样的人，并没有什么奇怪的呢。</strong> —— 初音岛</p></li>\r\n<li><p><strong>像平常的你一样引发奇迹吧-</strong> —— 魔法少女小圆</p></li>\r\n<li><p><strong>既不回头，何必不忘；既然无缘，何须誓言；今日种种，似水无痕；明夕何夕，君已陌路。</strong> —— 仙剑奇侠传</p></li>\r\n<li><p><strong>可是就算我们通一千次短信，我们各自的心，大概也只会相互靠近一厘米吧。</strong> —— 秒速5厘米</p></li>\r\n<li><p><strong>所谓的言语，只有当对方听进去了才开始有意义啊。</strong> —— 少年同盟</p></li>\r\n<li><p><strong>如果还有来生 ，我无论如何都要来到你身边，我已经没有了其他想要追求的东西，因为没有比你更重要的了。</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>世界上没有一个人能代替另一个人。</strong> —— 人型电脑天使心</p></li>\r\n<li><p><strong>其实，恋爱这种东西，当你看上人家的那一刹那就已经失败了。</strong> —— 秋之回忆</p></li>\r\n<li><p><strong>隐约雷鸣，阴霾天空，即使天无雨，我亦留此地。</strong> —— 言叶之庭</p></li>\r\n<li><p><strong>就是因为你不好，才要留在你身边，给你幸福。</strong> —— 哈尔的移动城堡</p></li>\r\n<li><p><strong>微风摇曳着窗帘，夕阳斜射入教室，在那里鼓起勇气告白的少年。即使现在也能清晰地回想起她的声音「当朋友，不行吗？」</strong> —— 果然我的青春恋爱喜剧搞错了</p></li>\r\n<li><p><strong>少罗嗦，你还不如虫子呢！</strong> —— 迷糊餐厅</p></li>\r\n<li><p><strong>别人恋爱不成功，你连暗恋都不成功！</strong> —— 灌篮高手</p></li>\r\n<li><p><strong>就算只有六十亿分之一的机会，我们还是会邂逅。</strong> —— Angel Beats!</p></li>\r\n<li><p><strong>魔装少女就是本少爷！</strong> —— 这是僵尸吗？</p></li>\r\n<li><p><strong>无法飞翔的翅膀也是有意义的，因为它是曾经翱翔于天空所留下的珍贵回忆。</strong> —— AIR</p></li>\r\n<li><p><strong>勇气，就是即便害怕也会去做。</strong> —— 原创</p></li>\r\n<li><p><strong>如果我不会飞，那我就只是一只普通的猪。</strong> —— 红猪</p></li>\r\n<li><p><strong>要相信同伴，拯救同伴。</strong> —— 绯弹的亚里亚</p></li>\r\n<li><p><strong>男人许下的诺言就一定要遵守。</strong> —— 海贼王</p></li>\r\n<li><p><strong>那是，未满45秒的邂逅。</strong> —— EF</p></li>\r\n<li><p><strong>只要有想见面的人，自己就不再是孤单一人。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>如果聚集负的感情，世界就会陷入负的洪流；反之聚集正的感情，世界就会循着正道而行。</strong> —— 钢之炼金术师</p></li>\r\n<li><p><strong>廉价的自尊、粗劣的傲气，无论哪个后生小辈都很重视这些东西。</strong> —— 狼与香辛料</p></li>\r\n<li><p><strong>人不能一个人活下去，不需要任何人的孤独和需要人但得不到的孤独是不一样的。</strong> —— 邻座的怪同学</p></li>\r\n<li><p><strong>一个人吃饭，太寂寞了。</strong> —— 无头骑士异闻录</p></li>\r\n<li><p><strong>欺骗世界，欺骗最初的你。</strong> —— Steins;Gate</p></li>\r\n<li><p><strong>(」?ω?)」うー！(／?ω?)／にゃー！</strong> —— 潜行吧奈亚子</p></li>\r\n<li><p><strong>世界上没有偶然，有的只是必然。</strong> —— XXXHolic</p></li>\r\n<li><p><strong>从小好女色的男人的想像力比不上狗。</strong> —— 寒蝉鸣泣之时</p></li>\r\n<li><p><strong>你愿意陪我走到地狱的底端吗？</strong> —— 魔法禁书目录</p></li>\r\n<li><p><strong>错的不是我， 错的是世界。</strong> —— School Day</p></li>\r\n<li><p><strong>和哥哥的便当比起来夜空的薯片就像大便一样！只会给我大便的大便夜空是笨蛋～笨蛋～</strong> —— 我的朋友很少</p></li>\r\n<li><p><strong>即使如此，我也有我想保护的世界！</strong> —— 高达seed</p></li>\r\n<li><p><strong>我很好奇！</strong> —— 冰菓</p></li>\r\n<li><p><strong>仍是那么熟悉的味道，只是用墓土和骨灰作成的身体，已经不再有体温。</strong> —— 犬夜叉</p></li>\r\n<li><p><strong>我是要成为海贼王的男人！</strong> —— 海贼王</p></li>\r\n<li><p><strong>做不到的话，不过就是一死 。但是，赢了就能活下去，要是不战斗就赢不了。</strong> —— 进击的巨人</p></li>\r\n<li><p><strong>忘记本身就是一件不可能的事。</strong> —— 我们的存在</p></li>\r\n<li><p><strong>我们的夏天仍未结束。</strong> —— 王牌投手</p></li>\r\n<li><p><strong>雨，何时停？</strong> —— 秋之回忆</p></li>\r\n<li><p><strong>在走廊上跌倒会流鼻血，在人生中跌倒会流眼泪。</strong> —— 龙虎斗</p></li>\r\n<li><p><strong>有被杀的觉悟，才有资格开枪。</strong> —— 反叛的鲁路修</p></li>\r\n<li><p><strong>已经无法回到过去了。也不知道将来会是什么模样。</strong> —— 文学少女</p></li>\r\n<li><p><strong>不要哀求，学会争取；若是如此，终有所获。</strong> —— 交响诗篇</p></li>\r\n<li><p><strong>リア充死ね！</strong> —— 我的朋友很少</p></li>\r\n<li><p><strong>拿着刀并且可以让人们变得幸福的只有料理人。</strong> —— 假面骑士kabuto</p></li>\r\n<li><p><strong>我会跟她结婚，并不是因为她是计算机，而是因为她就是她。同样的，我会喜欢你，也是因为你就是你。</strong> —— 人型电脑天使心</p></li>\r\n<li><p><strong>越是试着忘记，越是记得深刻。</strong> —— 天空之城</p></li>\r\n<li><p><strong>喜欢上你，爱上你，真是太好了，谢谢。</strong> —— 龙虎斗</p></li>\r\n<li><p><strong>我对普通的人类没有兴趣，你们只要是有外星人、未来人、异世界人、超能力者， 就尽管来找我吧！以上！</strong> —— 凉宫春日的忧郁</p></li>\r\n<li><p><strong>既然如此，就再努力一次吧。别在这里愁眉不展，也不要再自欺欺人，重新来过！</strong> —— 某科学的超电磁炮</p></li>\r\n<li><p><strong>若隐若现才是艺术！</strong> —— 问题儿童来自异世界</p></li>\r\n<li><p><strong>我想要握紧的并不是匕首或是什么，只不过是他的掌心而已。</strong> —— 空之境界</p></li>\r\n<li><p><strong>下一次重逢，将是何年何月？天空必将见证。</strong> —— SOLA</p></li>\r\n<li><p><strong>就连一直都无容身之地的我……也不是可以任意舍弃的生命。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>所以，他们的祭典还没结束。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>比自己，比梦想更重要的东西永远都存在着...</strong> —— 钢之炼金术师</p></li>\r\n<li><p><strong>选择道路的时候怎么犹豫都没有关系，但决定之后就一定要坚持到底！</strong> —— 青之驱魔师</p></li>\r\n<li><p><strong>煩い！煩い！煩い！</strong> —— 灼眼的夏娜</p></li>\r\n<li><p><strong>重要的是无论我们选择哪条路，都要担负起选择的责任。</strong> —— 蜂蜜与四叶草</p></li>\r\n<li><p><strong>因为无法再见面，所以要笑着说再见。</strong> —— AIR</p></li>\r\n<li><p><strong>无论乌云有多浓厚，星星也一定还在，只是暂时看不到了而已。</strong> —— 电波女与青春男</p></li>\r\n<li><p><strong>如果我拥有如同小狗一样的尾巴的话，肯定会高兴得遮掩不住地摇来摇去吧。</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>在我年轻的时候，不知道什么是恐惧，可偏偏是你的温柔，让我害怕。</strong> —— 东京爱情故事</p></li>\r\n<li><p><strong>你不会死的，因为我会保护你.</strong> —— EVA</p></li>\r\n<li><p><strong>只是相谈就会开心起来，沉浸在温柔的眼神当中，竭尽全力的思念，悄悄地奉献。</strong> —— School Days</p></li>\r\n<li><p><strong>我们虽然距离很远很远，非常非常的远，但是思念或许真的可以穿越时间和距离。</strong> —— 星之声</p></li>\r\n<li><p><strong>梦想是否无聊并不是别人来决定的，不管是什么样的梦想，自己拼命努力去追寻才是最重要的。</strong> —— 守护甜心</p></li>\r\n<li><p><strong>胜而不灭，霸而不辱，这才是真正的征服。</strong> —— fate zero</p></li>\r\n<li><p><strong>我相信十年后的八月，我们还能再相遇。</strong> —— secret base ～君がくれたもの～</p></li>\r\n<li><p><strong>相信十年后的八月，我们还会相遇。</strong> —— 未闻花名</p></li>\r\n<li><p><strong>你的心可以属于耶稣，但你的屁股永远属于陆战队！</strong> —— 魔法少女陆战队</p></li>\r\n<li><p><strong>看到的感受到的永远都不会消失永远都不会忘记，与各种各样的相遇一同永存。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>我们走过风走过雨，就是没能走进彼此的内心。</strong> —— 自分</p></li>\r\n<li><p><strong>烦恼这东西，是只有活着的人，才有的特权哦。</strong> —— 我们的存在</p></li>\r\n<li><p><strong>当朋友是不需要什么资格的。</strong> —— 全职猎人</p></li>\r\n<li><p><strong>年华无多时，恋爱吧男子！</strong> —— 源君物语</p></li>\r\n<li><p><strong>求你，保护那孩子，消除灾厄，抹除祸事。哪怕??那是我自己……</strong> —— 食灵</p></li>\r\n<li><p><strong>如果你不能击败你的敌人，那么就加入他们。</strong> —— 加菲猫</p></li>\r\n<li><p><strong>我们都在命运之湖上荡舟划桨，波浪起伏着而我们无法逃脱孤航。但是假使我们迷失了方向，波浪将指引我们穿越另一天的曙光。</strong> —— 死神</p></li>\r\n<li><p><strong>我们所过的每个平凡的日常，也许就是连续发生的奇迹。</strong> —— 日常</p></li>\r\n<li><p><strong>最近困扰我的是小小的分别，总会带来一丝寂寞。短暂的相遇和分别那一分一秒的时间都让我想要无比珍惜。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>倘若只是为了驱赶心中的寂寞，找谁都可以的。</strong> —— 秒速5厘米</p></li>\r\n<li><p><strong>即使从梦中醒来，还会有回忆留下。</strong> —— AIR</p></li>\r\n<li><p><strong>能够原谅女人的，才是男人。</strong> —— 海贼王</p></li>\r\n<li><p><strong>我会继续等着你，就算是一万二千年。</strong> —— 创圣的大天使EVOL</p></li>\r\n<li><p><strong>不管看到什么样的过去，都请不要迷失自己，不管你变成什么样子，我都是你的同伴。</strong> —— angel beats</p></li>\r\n<li><p><strong>悲伤教会了我喜悦。</strong> —— 秋之回忆</p></li>\r\n<li><p><strong>我到底要以怎么样的速度生活才能与你再次相遇？</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>我的船上没有手下，只有伙伴。</strong> —— 海贼王</p></li>\r\n<li><p><strong>就是因为抱有不现实的理想，所以才总是做出如此极端的事情！</strong> —— 逆袭的夏亚</p></li>\r\n<li><p><strong>要是因为烦恼很痛苦，就选择了轻松的选项，将来一定会后悔。</strong> —— 樱花庄的宠物女孩</p></li>\r\n<li><p><strong>呐，知道么，樱花飘落的速度，是每秒五厘米哦~</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>知道活着的痛苦处的人就能对人温柔，这和软弱是不一样的。</strong> —— eva</p></li>\r\n<li><p><strong>比起悲伤来说，无法分享快乐这件事，要更加的寂寞吧。</strong> —— AIR</p></li>\r\n<li><p><strong>如果你执意追寻着我的幻影，总有一天会被真正的我打败。</strong> —— 棋魂</p></li>\r\n<li><p><strong>乔巴，一个男人，有时候是不能逃避战斗的，尤其是当伙伴的梦想被人嘲笑的时候。</strong> —— 海贼王</p></li>\r\n<li><p><strong>你的那双手呢，是为了紧紧抓住什么而存在的哦。</strong> —— 仰望半月的夜空</p></li>\r\n<li><p><strong>去死两次！</strong> —— 迷途猫</p></li>\r\n<li><p><strong>世界は恋に落ちている。</strong> —— 青春之旅OP（我的世界已坠入爱河）</p></li>\r\n<li><p><strong>自身不先改变的话，一切都不会改变。</strong> —— 银魂</p></li>\r\n<li><p><strong>就算是对我抱有敌意的人，也是被某个人深爱着而降生在这个世界上的。</strong> —— 罪恶王冠</p></li>\r\n<li><p><strong>人生最糟糕的事，一个是饿肚子，一个是孤独。</strong> —— 夏日大作战</p></li>\r\n<li><p><strong>我不是萝莉控，是妹控啊！</strong> —— 我的妹妹不可能那么可爱第二季</p></li>\r\n<li><p><strong>呐，我们好像是，被宇宙和地球拆散的恋人似的。</strong> —— 星之声</p></li>\r\n<li><p><strong>一天吐槽太多次的话，梗也是会用完的。</strong> —— 我的脑内恋爱选项</p></li>\r\n<li><p><strong>自己的感觉，不说出来，别人也不会懂，如果不懂，就应该互相沟通。</strong> —— 好想告诉你</p></li>\r\n<li><p><strong>心，可是很重的。</strong> —— 哈尔的移动城堡</p></li>\r\n<li><p><strong>不能逃避，不能逃避，不能逃避，不能逃避……</strong> —— EVA</p></li>\r\n<li><p><strong>以盐水作配菜，糖水做主食，就有种奢侈的感觉呢。</strong> —— 笨蛋测验召唤兽</p></li>\r\n<li><p><strong>就算鼻血流尽，也不能放弃妄想。</strong> —— 摇曳百合</p></li>\r\n<li><p><strong>爱，其实很简单，困难的是去接受它。</strong> —— 通灵王</p></li>\r\n<li><p><strong>我们不应该根据背负的罪孽来选择道路，而应在选择的道路上背负自己的罪孽。</strong> —— 空之境界</p></li>\r\n<li><p><strong>只要微笑就可以了。</strong> —— EVA</p></li>\r\n<li><p><strong>因为我喜欢你，喜欢得想吃掉你啊！</strong> —— 有顶天家族</p></li>\r\n<li><p><strong>求求你，不要对我这么温柔！</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>我觉得你很幸福，因为你可以选择爱我或不爱我，而我只能选择爱你或更爱你。</strong> —— School Days</p></li>\r\n<li><p><strong>失去的东西虽然拿不回来，但是，忘记的事情是可以想起来的。</strong> —— TOUCH</p></li>\r\n<li><p><strong>你还是这么冷漠啊。不过，仅此而已的话，我是不会泄气的。</strong> —— 银魂</p></li>\r\n<li><p><strong>我能够允许你逃避过去，不过至少从现在或者明天开始都不要再逃避。</strong> —— 无头骑士异闻录</p></li>\r\n<li><p><strong>正因为听不见和看不到，所以风子才会做这样的事情。</strong> —— clannad</p></li>\r\n<li><p><strong>什么都无所谓只想在你身边，什么都无所谓只想和你说话，什么都无所谓所以请你不要逃避。</strong> —— 好想告诉你</p></li>\r\n<li><p><strong>我并不羡慕别人的人生，这就是所谓幸福。</strong> —— 幸运星</p></li>\r\n<li><p><strong>人能够在心里郁积那么多的事情，而他们又会忘记那么多的事情，真是不可思议……</strong> —— 最终幻想</p></li>\r\n<li><p><strong>我要拼，装上假牙也要拼！</strong> —— 灌篮高手</p></li>\r\n<li><p><strong>人一生会遇到约2920万人，两个人相爱的概率是0.000049。所以你不爱我，我不怪你。</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>我的内心就和厕纸一样单纯！</strong> —— Little Busters!</p></li>\r\n<li><p><strong>我的眼睛，就是为了寻找你而存在的。</strong> —— H2O</p></li>\r\n<li><p><strong>烈焰中舞动的火花，将赐予邪恶异性交往以天罚。</strong> —— 潜行吧！奈亚子W</p></li>\r\n<li><p><strong>All for one，one for all.</strong> —— 海贼王</p></li>\r\n<li><p><strong>老是低着头，幸福可是会离你而去的喔。</strong> —— 我们的仙境</p></li>\r\n<li><p><strong>羁绊是那不可切断的深切联系。即使分离，心与心也紧紧的连在一起。</strong> —— 假面骑士kabuto</p></li>\r\n<li><p><strong>对不起，风太大，我没有听清楚……</strong> —— 东京巴比伦</p></li>\r\n<li><p><strong>你知道雪为什么是白色的吗？因为她忘记了本来的颜色。</strong> —— 反叛的鲁路修</p></li>\r\n<li><p><strong>人生在世何其痛苦，所以咖啡至少该甜一点。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>我想让自己强大起来，因为至少我已经有幸和想要保护的人相遇了。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>我只是做了我能做的事，没有时间想将来。</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>一天最大任务莫过于，好好睡觉，好好醒来。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>不相信人咬不到肚脐的，咬破肚脐去死如何？</strong> —— 海猫鸣泣之时</p></li>\r\n<li><p><strong>一直保持微笑是有诀窍的，那就是，在想哭的时候放声大哭。</strong> —— 天使领域</p></li>\r\n<li><p><strong>女人的武器不是眼泪，而是微笑。</strong> —— 凉宫春日的忧郁</p></li>\r\n<li><p><strong>十步做一死，千里不留行，事了拂衣去，深藏功与名~</strong> —— 侠客行</p></li>\r\n<li><p><strong>只要有你，我便无所不能。</strong> —— 进击的巨人</p></li>\r\n<li><p><strong>不相信自己的人，连努力的价值都没有。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>我只对现实世界绝望过，却未对自己绝望过！</strong> —— 只有神知道的世界</p></li>\r\n<li><p><strong>虚伪的眼泪，会伤害别人，虚伪的笑容，会伤害自己。</strong> —— 反叛的鲁鲁修</p></li>\r\n<li><p><strong>我除了投三分，就什么都没有了……</strong> —— 灌篮高手</p></li>\r\n<li><p>**(?_?)** —— 进击的巨人</p></li>\r\n<li><p><strong>我在人生的道路上迷失了。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>历史虽然会一再重演，但人类却无法回到过去。</strong> —— 海贼王</p></li>\r\n<li><p><strong>观察铅笔和橡皮，哪个是攻哪个是受，请写出它们晚上的对话。</strong> —— 学生会的一己之见</p></li>\r\n<li><p><strong>龙儿是我的，谁都不准碰！</strong> —— 龙虎斗</p></li>\r\n<li><p><strong>贫乳是社会地位的象征。是具有稀有价值的！</strong> —— 幸运星</p></li>\r\n<li><p><strong>想要试着去相互接近，但最后还是无法敞开心扉，结果就是擦肩而过……</strong> —— 文学少女</p></li>\r\n<li><p><strong>扎古不论怎么化妆都不可能变成高达的。</strong> —— 银魂</p></li>\r\n<li><p><strong>我在未来等你。</strong> —— 穿越时空的少女</p></li>\r\n<li><p><strong>一般来说，时间会把悲伤冲淡，可是在人的生命中，会有那么一两个特殊的存在，他们的逝去，你永远也不会习惯。</strong> —— 冥王神话</p></li>\r\n<li><p><strong>懂得认输是非常重要的，不尝到失败的不甘，也就不会明白跌倒后怎么爬起来，更不可能再向前迈进。</strong> —— 笨蛋测验召唤兽</p></li>\r\n<li><p><strong>要改变别人的心真是件很难办的事，不过改变自己要容易一点。</strong> —— XXXHolic</p></li>\r\n<li><p><strong>我喜欢你们！超喜欢的！大家和我交往吧！绝对会让你们幸福的！</strong> —— 学生会的一己之见</p></li>\r\n<li><p><strong>美丽的不是这个世界，而是看世界的你的眼神。</strong> —— 吸血鬼骑士</p></li>\r\n<li><p><strong>世界这么大，人生这么长，总会有那么一个人，让你想要温柔的对待。</strong> —— 哈尔的移动城堡</p></li>\r\n<li><p><strong>成功率不到2%，那剩下的用勇气来补足吧！</strong> —— 勇者王</p></li>\r\n<li><p><strong>我一直都在你身边 ，一直都在。</strong> —— CLANNAD</p></li>\r\n<li><p><strong>重要的不是你做了多少事，而是你放了多少心思进去。</strong> —— 凉宫春日的忧郁</p></li>\r\n<li><p><strong>哭泣并不能改变任何事情。</strong> —— 推理之绊</p></li>\r\n<li><p><strong>代表月亮消灭你！</strong> —— 美少女战士</p></li>\r\n<li><p><strong>不要，我现在暂时留在他身边，直到那转瞬即逝的日子到来。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>就算是自私……我也希望那些人能够永远都有笑容……</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>我们开始一起攀登，这长长的，长长的坡道。</strong> —— Clannad</p></li>\r\n<li><p><strong>应该可以了吧，我已经很努力了，应该可以抵达终点了……</strong> —— AIR</p></li>\r\n<li><p><strong>离别并不痛苦，因为我们都微笑着。</strong> —— 青之驱魔师</p></li>\r\n<li><p><strong>只要能努力，就应当去努力；只要还能前进，就要向前走去。</strong> —— CLANNAD</p></li>\r\n<li><p><strong>邂逅本身，就是一种奇迹啊。</strong> —— 游魂</p></li>\r\n<li><p><strong>与其被自己的本性牵着走而痛苦，倒不如试着改变自己。</strong> —— 银魂</p></li>\r\n<li><p><strong>爱迪生说过：“要把BOSS打倒就要准备足够的等级。”</strong> —— 学生会的一己之见</p></li>\r\n<li><p><strong>世界并不完美，却因此而美丽。</strong> —— 奇诺之旅</p></li>\r\n<li><p><strong>我们的心就像那天空一样，永不分离。</strong> —— 缘之空</p></li>\r\n<li><p><strong>和我定下契约，成为魔法少女吧！</strong> —— 魔法少女小圆</p></li>\r\n<li><p><strong>一直注视着你，似近似远，总是触碰不到。</strong> —— 来自风平浪静的明天</p></li>\r\n<li><p><strong>我知道的，面码……自己已经死掉这点事，还是知道的……</strong> —— 我们仍未知道那天所看见的花的名字</p></li>\r\n<li><p><strong>共道人间惆怅事，不知今夕是何年。</strong> —— 周秦行纪</p></li>\r\n<li><p><strong>旅行唯有出发前最愉快，狗儿唯有叫声最吓人，女人唯有背影最美丽。</strong> —— 狼与香辛料</p></li>\r\n<li><p><strong>无论你在哪里，就算我看不见你，我也会一直注视着你。</strong> —— 妖精的尾巴</p></li>\r\n<li><p><strong>我不渴望什么在别的城市迎来的春天，只要和你在一起的春天就好，只要和你在一起就好</strong> —— CLANNAD</p></li>\r\n<li><p><strong>我的愿望是—幸福地活着，幸福地死去。</strong> —— 神不在的星期天</p></li>\r\n<li><p><strong>今天你最后遇见的那个人有在微笑吗？</strong> —— 幸运星</p></li>\r\n<li><p><strong>我的终点，与幸福同在。</strong> —— AIR</p></li>\r\n<li><p><strong>隐约雷鸣，阴霾天空，但盼风雨来，能留你在此。</strong> —— 言叶之庭</p></li>\r\n<li><p><strong>我问你：你是我的Master吗？</strong> —— 命运守护夜</p></li>\r\n<li><p><strong>私だって今日こそ... 遠野くんに告白するんだ。</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>时间并不存在，存在的只有此刻。</strong> —— 魔女猎人</p></li>\r\n<li><p><strong>没有期盼就不会出现奇迹。</strong> —— 古城荆棘王</p></li>\r\n<li><p><strong>受尽苦难而不厌，此乃阿修罗之道。</strong> —— 海贼王</p></li>\r\n<li><p><strong>如果你都不知道自己想去哪里，那去哪里都是一样的。</strong> —— 柴郡猫</p></li>\r\n<li><p><strong>明天，不是你想要就能有的。</strong> —— 未闻花名</p></li>\r\n<li><p><strong>明明只是活着，哀伤却无处不在……</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>错误可不是为了别人才改的过来的，要为了自己才能改正。</strong> —— XXXHolic</p></li>\r\n<li><p><strong>男人从小的时候就是无药可救的。</strong> —— 秋之回忆</p></li>\r\n<li><p><strong>如果我是那雨滴的话，那么，我能够像把不曾交汇的天空与大地连接起来那样，把某人的心串联起来吗？</strong> —— 死神</p></li>\r\n<li><p><strong>真可悲，你什么都不知道，在这个世界上没有什么是不重要的！</strong> —— 最终幻想</p></li>\r\n<li><p><strong>前天是小兔子，昨天是小鹿，今天是你。</strong> —— CLANNAD</p></li>\r\n<li><p><strong>用我的左手将你那个不可理喻的幻想粉碎掉！</strong> —— 魔法禁书目录</p></li>\r\n<li><p><strong>堕入黑暗裏的可怜影子啊，停止伤害他人的行为吧，犯下罪行的灵魂……想死一次么？</strong> —— 地狱少女</p></li>\r\n<li><p><strong>男人变态有什么错！</strong> —— 寒蝉鸣泣之时</p></li>\r\n<li><p><strong>人们只是用好人来称呼对自己有用的人而以，不存在对所有人都有用的人。</strong> —— 进击的巨人</p></li>\r\n<li><p><strong>真正的危机不是机器人像人一样思考，而是人像机器一样思考。</strong> —— 凉宫春日的忧郁</p></li>\r\n<li><p><strong>人は一生、中二病なんだ。</strong> —— 中二病也要谈恋爱</p></li>\r\n<li><p><strong>能够轻易就放弃的梦想，有存在的价值么？</strong> —— 守护甜心</p></li>\r\n<li><p><strong>没有谁能够永远坚强下去的，每个人都会有疲累的无法站起的时候。世间的故事，就是为了这一刻而存在的哦。</strong> —— 文学少女</p></li>\r\n<li><p><strong>只要你在，我便无所不能。</strong> —— 进击的巨人</p></li>\r\n<li><p><strong>24岁的阿升你好，我是15岁的美加子，我现在也还是非常、非常的喜欢阿升哦！</strong> —— 星之声</p></li>\r\n<li><p><strong>比希望更炙热，比绝望更深邃，这就是爱啊。</strong> —— 魔法少女小圆-叛逆的物语</p></li>\r\n<li><p><strong>如果你愿意的话，让我带您去吧，这座小镇，愿望实现的地方……</strong> —— CLANNAD</p></li>\r\n<li><p><strong>窃人者，自失其宝。</strong> —— 假面骑士kabuto</p></li>\r\n<li><p><strong>有你在的日子才是我的日常。</strong> —— 琴浦小姐</p></li>\r\n<li><p><strong>男人就应该保持冷静，沸腾的水只会被蒸发掉。</strong> —— 假面骑士kabuto</p></li>\r\n<li><p><strong>嗯，一个人也要加油，我是坚强的孩子。</strong> —— AIR</p></li>\r\n<li><p><strong>时间带着明显的恶意，缓缓在我的头顶流逝。</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>人的记忆本来就是暧昧的，不值得信任。</strong> —— 叛逆的鲁鲁修R2</p></li>\r\n<li><p><strong>有光的地方必有影，有影的地方也必定有光，绝望的颜色越是浓重，一定会有光芒耀眼的希望。</strong> —— 银魂</p></li>\r\n<li><p><strong>时间可以治愈？如果时间也病了怎么办？</strong> —— 寒蝉鸣泣之时</p></li>\r\n<li><p><strong>无论在哪里遇到你，我都会喜欢上你。</strong> —— AngleBeats!</p></li>\r\n<li><p><strong>取少量学生放入试管，加入过量作业，生成学霸溶液和不溶于水的学渣。过滤，在学渣中加入过量浓试卷，学渣迅速溶解且产生气泡，学霸则无明显现象。</strong> —— 网络</p></li>\r\n<li><p><strong>如果你死了，那什么也改变不了，可如果你还活着，那就能改变一些事情。</strong> —— 最游记</p></li>\r\n<li><p><strong>鲁鲁修，你知道雪花为什么是白色的吗？因为已经忘记自己本来是什么颜色啊。</strong> —— 叛逆的鲁鲁修</p></li>\r\n<li><p><strong>燃烧吧，我的小宇宙！</strong> —— 圣斗士星矢</p></li>\r\n<li><p><strong>无法逃避的是自我，而无法挽回的是过去。</strong> —— 机动战士高达</p></li>\r\n<li><p><strong>做出一副温柔的样子来折磨人不是更令人难受吗？</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>有些事情我不看透，不是我笨，只是我太善良。</strong> —— 樱桃小丸子</p></li>\r\n<li><p><strong>有时语言就像把利刃，使用不当，就会成为凶器。</strong> —— 名侦探柯南</p></li>\r\n<li><p><strong>如果能够重生的话，我想，我想成为水母。想成为只是在海里自由地摇摇摆摆的水母。</strong> —— 海月姬</p></li>\r\n<li><p><strong>所谓的人类，可是连短短的十分钟也等不起的。</strong> —— Angel Beats!</p></li>\r\n<li><p><strong>梦总是有会醒来的时候，不会醒的梦总有一天会变成悲伤。</strong> —— AIR</p></li>\r\n<li><p><strong>能哭的地方只有厕所和爸爸的怀里。</strong> —— CLANNAD</p></li>\r\n<li><p><strong>你再怎么称赞我，我也不会高兴的，你这个混蛋~</strong> —— 海贼王</p></li>\r\n<li><p><strong>除了爱你，我什么都可以。</strong> —— 命运守护夜</p></li>\r\n<li><p><strong>败者死于绝望，胜者死于渴望。</strong> —— 戏言系列</p></li>\r\n<li><p><strong>给，一辈子朋友劵。</strong> —— 日常</p></li>\r\n<li><p><strong>一个人走在路上，形单影只。回首望去，大家都留在远方。回过头来继续前行，这便是所谓坚强。</strong> —— AngelBeats</p></li>\r\n<li><p><strong>无知而又纯洁的岁月是任何人都曾拥有的，世界上没有一成不变的事物，所以只要以其他方式找到自己的快乐就行了。</strong> —— CLANNAD</p></li>\r\n<li><p><strong>沒有永远下不停的雨。</strong> —— 秋之回憶</p></li>\r\n<li><p><strong>不习惯的事越来越多，但我仍在前进……就算步伐很小，我也在一步一步的前进。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>算了，和你说话感觉就像是大姨妈来了。</strong> —— 龙虎斗</p></li>\r\n<li><p><strong>“像你这样的白痴是怎么活过来的？”“因为我很自信。</strong> —— 海贼王</p></li>\r\n<li><p><strong>梦想是什么，梦想是现实的延续；现实是什么，现实是梦想的终结。</strong> —— EVA</p></li>\r\n<li><p><strong>Time waits for no one.</strong> —— 穿越时空的少女</p></li>\r\n<li><p><strong>时间是伟大的作家，总会写下完美的结局。</strong> —— 秋之回忆</p></li>\r\n<li><p><strong>真正让我难受的，大概是因为让你看到如此狼狈的自己。</strong> —— 元气少女缘结神</p></li>\r\n<li><p><strong>淅淅沥沥的雨，即便能填满路上的水坑，也填不满心中的空洞。</strong> —— 神圣之门</p></li>\r\n<li><p><strong>我们总是在注意错过太多，却不注意自己拥有多少。</strong> —— 我们仍未知道那天所看见的花的名字</p></li>\r\n<li><p><strong>不管前方的路有多苦，只要走的方向正确，不管多么崎岖不平，都比站在原地更接近幸福。</strong> —— 千与千寻</p></li>\r\n<li><p><strong>活在现实中的人是错的，而那些哭泣的人才是正确的，孤独的我们才有人类的样子</strong> —— angel beats</p></li>\r\n<li><p><strong>不管是怎样的回忆，都是我们活过的人生。</strong> —— angel beats</p></li>\r\n<li><p><strong>我不知道离别的滋味是这样凄凉，我不知道说声再见要这么坚强。</strong> —— 千与千寻</p></li>\r\n<li><p><strong>人生就是一列开往坟墓的列车，路途上会有很多站，很难有人可以自始至终陪着走完。当陪你的人要下车时，即使不舍也该心存感激，然后挥手道别。</strong> —— 千与千寻</p></li>\r\n<li><p><strong>曾经发生过的事情不可能忘记，只不过是想不起而已。</strong> —— 千与千寻</p></li>\r\n<li><p><strong>人永远不知道，谁哪次不经意的跟你说了再见之后，就真的不会再见了。</strong> —— 千与千寻</p></li>\r\n<li><p><strong>有阳光的地方就会有阴影，所以有阴影的地方也一定会有阳光。绝望的颜色越是浓厚，在哪里也一定会存在耀眼的希望之光。</strong> —— 银魂</p></li>\r\n<li><p><strong>与其想着怎么美丽地牺牲,倒不如想着怎么漂亮地活到最后一刻。</strong> —— 银魂</p></li>\r\n<li><p><strong>人就是要以自卑为跳板才能跳得更高。</strong> —— 银魂</p></li>\r\n<li><p><strong>为了终止绝望的连锁，希望她能化为照亮正确道路的灯火。</strong> —— Re：从零开始的异世界生活</p></li>\r\n<li><p><strong>死亡只要在人生的终点尝试一次就够了~</strong> —— Re：从零开始的异世界生活</p></li>\r\n<li><p><strong>真正重要的东西，总是没有的人比拥有的人清楚。</strong> —— 银魂</p></li>\r\n<li><p><strong>吾于冥河沉浮,受尽命运捉弄，纵然汝将忘吾，吾亦伴汝身旁。</strong> —— Re：从零开始的异世界生活</p></li>\r\n<li><p><strong>关于自己的生活，我和你都不是读者，而是作者。至少结局，还是能自己说了算的。</strong> —— 银魂</p></li>\r\n<li><p><strong>努力可是要默默藏起来的。</strong> —— Re：从零开始的异世界生活</p></li>\r\n<li><p><strong>拥有和舍弃都很痛苦，既然无论怎样都会痛苦的话，我宁可选择守护它而痛苦。</strong> —— 银魂</p></li>\r\n<li><p><strong>只要有你想要保护的东西，那就拔剑好了。</strong> —— 银魂</p></li>\r\n<li><p><strong>所谓的王，乃最贪婪，最豪爽，最易怒之人。且清且浊，追求极致人生。为臣者，因之而仰慕，追随其左右。因此，臣民才会有称王之志，追寻自己的理想。</strong> —— fate/zero</p></li>\r\n<li><p><strong>不过傲慢分为两种。一种是能力过于低下，还有一种是志向异常远大的。前者显得非常愚蠢，后者是难得一见的珍贵种类。</strong> —— fate/zero</p></li>\r\n<li><p><strong>梦存高远，志在争霸，这股热情确实值得赞许。但所谓梦，终有一天是要醒来的。</strong> —— fate/zero</p></li>\r\n<li><p><strong>“把剑放下，成为本王的妻子吧。”</strong> —— fate/zero</p></li>\r\n<li><p><strong>区区一只趴在地上的蝼蚁，谁允许你抬起头的， 虫子就要有虫子的样子，低头伏地然后去死。</strong> —— fate/zero</p></li>\r\n<li><p><strong>即使你忘记了我，我也不会遗忘你。</strong> —— Re：从零开始的异世界生活</p></li>\r\n<li><p><strong>不是别人，是我，承认了你的价值。</strong> —— fate/zero</p></li>\r\n<li><p><strong>世界上 ，没有一拳解决不了的事，如果有，那就两拳。</strong> —— 一拳超人</p></li>\r\n<li><p><strong>明天的事，交给明天的我。</strong> —— 一拳超人</p></li>\r\n<li><p><strong>在灾难面前，如果连英雄都逃跑了，那还有谁能站出来？</strong> —— 一拳超人</p></li>\r\n<li><p><strong>我不是因为需要你们评论几句才去当英雄的，而是因为我想去当所以我才当的。</strong> —— 一拳超人</p></li>\r\n<li><p><strong>由变态化身成为变态，也就是真·变态，也就是说，完全变态呢。</strong> —— 一拳超人</p></li>\r\n<li><p><strong>我秃了，我也变强了</strong> —— 一拳超人</p></li>\r\n<li><p><strong>为了做一名真正的绅士，即使明知必输无疑，也要有勇气接受挑战！</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>JOJO，我不想再做人了！！</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>春天是胖次的季节。</strong> —— 电器街漫画店</p></li>\r\n<li><p><strong>我只是个兴趣使然的英雄。</strong> —— 一拳超人</p></li>\r\n<li><p><strong>不要为自己的努力道歉，这样太对不起自己了！</strong> —— 火影忍者</p></li>\r\n<li><p><strong>这个世界上没有奇迹，有的只是偶然和必然，以及是谁在做些什么。一直期望着能出现奇迹的人们是不会发生奇迹</strong> —— 悠久之翼</p></li>\r\n<li><p><strong>伤害别人的人，就要有被伤害的觉悟！</strong> —— 罪恶王冠</p></li>\r\n<li><p><strong>即使你忘记我，我也不会遗忘你！</strong> —— 从零开始的异世界生活</p></li>\r\n<li><p><strong>我不管这个世上的人怎么说我，我只想依照我的信念做事，绝不后悔，不管现在将来都一样。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>人生中有些事你不竭尽所能去做，你永远不知道自己有多出色！</strong> —— 海贼王</p></li>\r\n<li><p><strong>正因为生命有限，所以才显得重要，正因为生命有限，所以才更应该努力不懈！</strong> —— 名侦探柯南</p></li>\r\n<li><p><strong>人，只有在放弃战斗的时候才算输，只要坚持战斗，就还没输！</strong> —— 进击的巨人</p></li>\r\n<li><p><strong>世间本就没有真实的对与错，也没有绝对的善与恶。地狱天堂，一念之间。</strong> —— 地狱少女</p></li>\r\n<li><p><strong>天才的字典里，没有不可能这三个字。</strong> —— 灌篮高手</p></li>\r\n<li><p><strong>奇迹不是免费的，如果你祈求了希望，也会散播出同等的绝望。</strong> —— 魔法少女小圆</p></li>\r\n<li><p><strong>此生无悔入东方，来世愿生幻想乡！</strong> —— 东方project</p></li>\r\n<li><p><strong>只要是活着的东西，就算是神我也会杀给你看。</strong> —— 空之境界</p></li>\r\n<li><p><strong>我手里拿着刀，没法抱你，我放下刀，没法保护你！</strong> —— 死神</p></li>\r\n<li><p><strong>不好意思，我喜欢的是艾米莉亚</strong> —— Re：从零开始的异世界生活</p></li>\r\n<li><p><strong>前进吧，星星在你的头上闪耀哦！</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>星星只有在夜里才璀璨夺目啊。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>Eloim Essaim Eloim Essaim 请聆听我的请求。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>於此漆黑世界之中，直至光明遍地之时！All Hail Lelouch！</strong> —— 反叛的鲁路修</p></li>\r\n<li><p><strong>只有用心才能看到本质，最重要的东西眼睛是无法看到的。</strong> —— LE</p></li>\r\n<li><p><strong>春天的最后一场雪，你我的最后一次相聚，能遇见你是最幸福的事了，就此分别吧！请继续向前，迎接樱花漫溢的四月，但请不要忘记我，友人A……</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>喜欢的人喜欢别人不是很正常吗。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>男人只要去行动就好，做得到或做不到，女孩子会来告诉你的。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>或许前路永夜，即便如此我也要前进，因为星光即使微弱也会为我照亮前路。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>英雄意味着强大，英雄意味着孤独，最后一幕一定是英雄渐行渐远，我的英雄也是那样的存在。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>迎接我们的也许是漆黑一片的夜路，即便如此，也要相信自己，勇往直前。 星空会为我们在这条道路上点缀出淡淡星光。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>君の名を 今追いかけるよ</strong> —— 君の名は。</p></li>\r\n<li><p><strong>谢谢你至今为止都容忍我的任性，我是你的妹妹真的太好了。</strong> —— 俺妹</p></li>\r\n<li><p><strong>那东西既然被你知道了，我就没脸活下去了，只有一死了之了！可是我还不想死，所以只好把你杀了啊！</strong> —— 逢坂大河</p></li>\r\n<li><p><strong>笨蛋吉娃娃（バカチワワ）</strong> —— 逢坂大河</p></li>\r\n<li><p><strong>吵死了吵死了!</strong> —— 逢坂大河</p></li>\r\n<li><p><strong>回家后我得好好找你人生咨询一下！</strong> —— 高坂桐乃</p></li>\r\n<li><p><strong>Angel大河大人，为了大家能有一个幸福快乐的圣诞，无论是一层皮还是两层皮都给你剥下来，直到最后全裸都没问题的觉悟都做好了！</strong> —— 逢坂大河</p></li>\r\n<li><p><strong>告白当天就要H什么的，真是没办法的男人呢。</strong> —— 高坂桐乃</p></li>\r\n<li><p><strong>桐乃非常非常不愿意你有女朋友，但是你还愿意和我复合吗。开...开玩笑的，你不要回答我不然我真的会死\"</strong> —— 五更琉璃</p></li>\r\n<li><p><strong>“我要诅咒！诅咒所有相爱的情侣！诅咒神圣的夜晚！诅咒这整个世界（世界：怪我咯？）！对所有的现充挥下破坏的铁锤！我会让你尝尝……我生涯最大的诅咒！”</strong> —— 千叶の堕天圣黑猫</p></li>\r\n<li><p><strong>喂？FFF团团长须川亮吗？这有一个要入团的！</strong> —— 五更琉璃</p></li>\r\n<li><p><strong>最有名的莫过于想死一次吗。</strong> —— 阎魔爱</p></li>\r\n<li><p><strong>哥哥也可以喜欢上我之外的女孩子，但只有音梦是不可以的！</strong> —— 芳乃樱对朝仓纯</p></li>\r\n<li><p><strong>我也做个好孩子，成为这幸福光景的一部分，想成为闪耀在圣诞节的城市里，其中一张幸福的笑脸。</strong> —— 逢坂大河</p></li>\r\n<li><p><strong>龙儿是我的！谁都不准碰！</strong> —— 逢坂大河</p></li>\r\n<li><p><strong>以后继续来一起练习打篮球</strong> —— 湊智花</p></li>\r\n<li><p><strong>请不要跟我搭话。我讨厌你！</strong> —— 八九寺真宵</p></li>\r\n<li><p><strong>风子参上！</strong> —— 伊吹风子</p></li>\r\n<li><p><strong>男生送的礼物要方便拿来换钱才好吧！</strong> —— 来栖加奈子</p></li>\r\n<li><p><strong>你是笨蛋吗？</strong> —— 小桐桐（きりりん）</p></li>\r\n<li><p><strong>我跟喜欢成人游戏一样喜欢你</strong> —— 高坂桐乃</p></li>\r\n<li><p><strong>最喜欢你了唷！！ 开玩笑的！！啊--！好害羞 有机会的话会再写信给你。 希望那时，能变得更加坦率捏~</strong> —— 久保由利香致小泉花阳</p></li>\r\n<li><p><strong>最后，士郎……你要去打的話……必须給我贏！你要是死了话……我饶不了你……</strong> —— 遠坂凜</p></li>\r\n<li><p><strong>最后好想有个拥抱....，可是...那种事情怎么能说得出口.....</strong> —— 露西</p></li>\r\n<li><p><strong>受虐狂的娇小美少年……真想带回家去养一段时间啊。</strong> —— 赤井林檎</p></li>\r\n<li><p><strong>希望老师像帮我一样帮帮れいジ</strong> —— 九重凛</p></li>\r\n<li><p><strong>在排练的休息时间里要好好补充水分和盐分哦！</strong> —— 三森铃子致海未</p></li>\r\n<li><p><strong>得到更多人的认可，带著大家的爱意加油哦！</strong> —— 内田彩致南小鸟</p></li>\r\n<li><p><strong>重新再说一次，至今为止，真的谢谢你。 然后，今后也请多指教了。</strong> —— 楠田亞衣奈致东条希</p></li>\r\n<li><p><strong>笨蛋、笨蛋！</strong> —— 星野琉璃</p></li>\r\n<li><p><strong>没问题，绝对没问题</strong> —— 木之本樱（无敌咒语）</p></li>\r\n<li><p><strong>凡人、笨蛋！</strong> —— 维多利加·德·布洛瓦</p></li>\r\n<li><p><strong>笨蛋,蠢货</strong> —— 南千秋</p></li>\r\n<li><p><strong>我绝对会成为火影。我从来都是有话直说，这就是我的忍道！</strong> —— 漩涡鸣人</p></li>\r\n<li><p><strong>Fightだよじゃねつの！</strong> —— 高坂穗乃果</p></li>\r\n<li><p><strong>哦~</strong> —— 袴田日向</p></li>\r\n<li><p><strong>绝对要一起去吃拉面喵~</strong> —— 星空凛</p></li>\r\n<li><p><strong>不管你在世界的哪个地方，我一定会，再次去见你的。</strong> —— 你的名字</p></li>\r\n<li><p><strong>描线一笔接一笔，白色的素描本上渐渐萌生黑意。即便如此，还无法照准记忆中的风景。</strong> —— 你的名字</p></li>\r\n<li><p><strong>你会哭着笑，笑着哭，是因为你的心，早已超越了自己啊。</strong> —— 你的名字</p></li>\r\n<li><p><strong>醒来的时候 不知道自己为什么哭 时常会有的事情 做过的梦总是回想不起 只是 一种有什么消失的丧失感</strong> —— 你的名字</p></li>\r\n<li><p><strong>以彗星为龙，以彗星为绳结。描绘出割裂的彗星舞动的形态。又是一轮岁月。</strong> —— 你的名字</p></li>\r\n<li><p><strong>聚拢，成形，捻转，回绕，时而返回，暂歇，再联结。这就是组纽。这就是时间。这就是，联结</strong> —— 你的名字</p></li>\r\n<li><p><strong>从你的前前前世开始，我就开始找寻你</strong> —— 你的名字</p></li>\r\n<li><p><strong>假如我们相遇，肯定一眼就能认出彼此</strong> —— 你的名字</p></li>\r\n<li><p><strong>从现在开始，我将追寻你的名字。</strong> —— 你的名字</p></li>\r\n<li><p><strong>我，将某个人，唯一的某个人，试图锁定。我，</strong> —— 你的名字</p></li>\r\n<li><p><strong>散落至四方。又或是升起至四方。在无法确认这一事实的浮游感中，彗星耀辉在夜空。彗星裂开，碎片落下。</strong> —— 你的名字</p></li>\r\n<li><p><strong>喜欢喜欢轻飘飘喜欢喜欢轻飘飘让我们一起来！</strong> —— Printemps</p></li>\r\n<li><p><strong>みんなで作る、最高のライブ！</strong> —— LoveLive! The School idol Movie</p></li>\r\n<li><p><strong>凛：450拿来 海：自由女神Shoot！ 希：其实有点像邪神果</strong> —— 乙姬心恋宫殿</p></li>\r\n<li><p><strong>脱！！巨乳！</strong> —— 暗杀教室</p></li>\r\n<li><p><strong>前天是小兔子,昨天是小鹿,今天是你</strong> —— CLANNAD</p></li>\r\n<li><p><strong>有些事情我不看透，不是我太笨，只是我太善良。</strong> —— 樱桃小丸子</p></li>\r\n<li><p><strong>彼方为谁，无我有问 ；九月露湿，待君之前</strong> —— 你的名字</p></li>\r\n<li><p><strong>会起反作用是吧……明明是想保护，却伤害了；明明想要哭泣， 却微笑着。</strong> —— 吸血鬼骑士</p></li>\r\n<li><p><strong>我不是天生的王者 但我骨子里流动着不让我低头的血液</strong> —— 海贼王</p></li>\r\n<li><p><strong>不要停止奔跑，不要回顾来路，来路无可眷恋，值得期待的只有前方。</strong> —— 马男波杰克</p></li>\r\n<li><p><strong>苹果是给那些为了爱选择死亡的人的奖励</strong> —— 回转企鹅罐</p></li>\r\n<li><p><strong>一定要保护自己的梦想，即使牺牲一切。</strong> —— NANA</p></li>\r\n<li><p><strong>喜欢你，因为我喜欢你，比地球上任何人都，喜欢你...</strong> —— 名侦探柯南</p></li>\r\n<li><p><strong>所谓“大家”，就是无视并牺牲了一部分弱势群体后所达到的虚伪的和平与共识。</strong> —— 果然我的青春恋爱喜剧搞错了</p></li>\r\n<li><p><strong>男人至死都是少年</strong> —— 银魂</p></li>\r\n<li><p><strong>润滑油是用来防止磨损的东西。在心中有着润滑油也会活得更加轻松吧。</strong> —— 果然我的青春恋爱喜剧搞错了</p></li>\r\n<li><p><strong>不能逃避，不能逃避，不能逃避，不能逃避…</strong> —— EVA</p></li>\r\n<li><p><strong>我除了投三分，就什么都没有了…</strong> —— 灌篮高手</p></li>\r\n<li><p><strong>我会死在这里，我的每一寸肌肤都会腐烂，除了…一寸，这一寸，它是那么的小，那么的脆弱，却是这世上唯一值得拥有的东西，我们决不能失去或者放弃它，我们决不能让别人把它夺走。</strong> —— 碧之轨迹</p></li>\r\n<li><p><strong>无论是丢下还是被丢下，这两者都是一样痛苦的。</strong> —— 水果篮子</p></li>\r\n<li><p><strong>女生口中的「好人」首先百分之百是「怎样都好的人」的意思，再好也不过止于「方便好使的人」。也就是说，不管怎样都是没戏了。</strong> —— 果然我的青春恋爱喜剧搞错了</p></li>\r\n<li><p><strong>今天的风儿有些喧嚣啊。</strong> —— 男子高中生的日常</p></li>\r\n<li><p><strong>死对任何人都是残酷的，年轻年老、好人坏人都一样。死是平等的，没哪种死亡是特别残酷的，所以死才可怕。品行、年龄、个性、金钱、美貌，这些东西只在生前才有意义。就因能将一切化为乌有，所以怎样的死都是残酷的。</strong> —— 尸鬼</p></li>\r\n<li><p><strong>命运的红线一旦断了，就再也不会接上。</strong> —— 犬夜叉</p></li>\r\n<li><p><strong>活下去的意志是最强的力量！</strong> —— 浪客剑心</p></li>\r\n<li><p><strong>想要试着去相互接近，但最后还是无法敞开心扉，结果就是擦肩而过…</strong> —— 文学少女</p></li>\r\n<li><p><strong>男人的爱情是另存为，女人的爱情是覆盖。</strong> —— 红</p></li>\r\n<li><p><strong>不逆 不耻 不憾</strong> —— 舰队Collection</p></li>\r\n<li><p><strong>有话直说就是我的忍道！</strong> —— 火影忍者</p></li>\r\n<li><p><strong>就连一直都无容身之地的我…也不是可以任意舍弃的生命。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>明明只是活着，哀伤却无处不在…</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>为了你,如果是为了你,即使我被困在永远的迷宫中,也没关系.</strong> —— 魔法少女小圆</p></li>\r\n<li><p><strong>我不渴望什么在别的城市迎来的春天，只要和你在一起的春天就好，只要和你在一起就好…</strong> —— CLANNAD</p></li>\r\n<li><p><strong>“像你这样的白痴是怎么活过来的？”“因为我很自信。“</strong> —— 海贼王</p></li>\r\n<li><p><strong>汝真是个烂好人</strong> —— 狼与香辛料</p></li>\r\n<li><p><strong>我知道的，面码…自己已经死掉这点事，还是知道的…</strong> —— 我们仍未知道那天所看见的花的名字</p></li>\r\n<li><p><strong>不习惯的事越来越多，但我仍在前进…就算步伐很小，我也在一步一步的前进。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>刻意保持距离的人是你，虚拟世界里的区区两公尺，对你来说就真的如此遥不可及?</strong> —— 加速世界</p></li>\r\n<li><p><strong>想哭的时候能哭出来，也是一种坚强</strong> —— 翼年代记</p></li>\r\n<li><p><strong>如果你愿意的话，让我带您去吧，这座小镇，愿望实现的地方…</strong> —— CLANNAD</p></li>\r\n<li><p><strong>有伤害人的人存在的话，也会有能抚慰伤痕的人</strong> —— 水果篮子</p></li>\r\n<li><p><strong>会长和往常一样挺着小小的胸部一副自以为了不起的样子套用某本书的内容说道…</strong> —— 学生会的一己之见</p></li>\r\n<li><p><strong>我觉得只要这样继续加油，总有一天能赶上他们的。</strong> —— 刀剑神域</p></li>\r\n<li><p><strong>如果你是魔女，我只要化身魔王就可以了。</strong> —— 反叛的鲁鲁修</p></li>\r\n<li><p><strong>人的一生会遭遇各种各样的事，其中有令人难以置信的事，也有不讲道理的事，但这就是生活。</strong> —— 地狱少女</p></li>\r\n<li><p><strong>挡着在我们面前的是巨大庞然的人生，阻隔在我们中间的是广阔无际的时间，对于他们，我们无能为力…</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>叶え！私たちの夢ー。</strong> —— ラブライブ！</p></li>\r\n<li><p><strong>人不会对讨厌人要求理由。莫名的生气、莫名的讨厌、莫名的恶心、什么都能成为讨厌人的理由。</strong> —— 果然我的青春恋爱喜剧搞错了</p></li>\r\n<li><p><strong>无论发生什么都不要停下。无论到什么时候都要继续前进。 要一直走下去，直到生命终止的那一刻。</strong> —— 驱魔少年</p></li>\r\n<li><p><strong>堕入黑暗裏的可怜影子啊，停止伤害他人的行为吧，犯下罪行的灵魂…想死一次么？</strong> —— 地狱少女</p></li>\r\n<li><p><strong>我的生命是属于你的，亚丝娜，我将为你而活。</strong> —— 刀剑神域</p></li>\r\n<li><p><strong>“如果我不在了，你会怎样？” “我会去找你” “如果找不见呢？” “我会一直，一直，一直找下去”</strong> —— 人鱼森林</p></li>\r\n<li><p><strong>将愿望倾入不愿忘却的回忆中…</strong> —— ef-a tale of memories</p></li>\r\n<li><p><strong>All for one, one for all.</strong> —— 海贼王</p></li>\r\n<li><p><strong>祈求别人幸福的同时,却不得不去诅咒其他的人,我们魔法少女就是这样的构造吧!</strong> —— 魔法少女小圆</p></li>\r\n<li><p><strong>人的一生会遭遇各种各样的事，其中有令人难以置信的事，也有不讲道理的事，但都必须予以克服，这就是生活</strong> —— 地狱少女</p></li>\r\n<li><p><strong>以为大哭大闹一场就有人来安慰的家伙真是幸福呢。</strong> —— 龙与虎</p></li>\r\n<li><p><strong>时间可以治愈？如果时间也病了怎么办</strong> —— 寒蝉明泣之时</p></li>\r\n<li><p><strong>如果幸福有形状，该是什么样的呢？它就像玻璃，因为平时察觉不到它的存在，而它却时时在我们身边，最有力的证据就是，只要换一个角度，它就会折射出耀眼的光芒，比谁都过分强调自我的存在。</strong> —— 反叛的鲁鲁修</p></li>\r\n<li><p><strong>求你，保护那孩子，消除灾厄，抹除祸事。哪怕…那是我自己…</strong> —— 食灵</p></li>\r\n<li><p><strong>不是我，都是社会的错</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>El Psy Congroo..</strong> —— 命运石之门</p></li>\r\n<li><p><strong>红茶的温度和女人心在任何时代都是难以琢磨呢。</strong> —— 海猫鸣泣之时</p></li>\r\n<li><p><strong>并非喜欢、也不是爱。而是更加深刻而沉重的——</strong> —— SWEET POOL</p></li>\r\n<li><p><strong>Oh,please don't let me die. Waiting for your touch.</strong> —— Re：从零开始的异世界生活</p></li>\r\n<li><p><strong>You Are (Not) Alone;You Can (Not) Advance;You Can (Not) Redo</strong> —— EVA</p></li>\r\n<li><p><strong>禁忌算什么！那难道比爱丽丝的命还重要吗？</strong> —— 刀剑神域</p></li>\r\n<li><p><strong>MAKE OUR DREAMS ALIVE</strong> —— ラブライブ！</p></li>\r\n<li><p><strong>什么都无法舍弃的人，什么都无法改变 。</strong> —— 进击的巨人</p></li>\r\n<li><p><strong>知道人的眼睛为什么长在前面吗？那是因为如果想看到远处的风景的话，就只能向前前进。</strong> —— 天元突破：红莲螺岩</p></li>\r\n<li><p><strong>春天 马上就要来了 让我与你相遇的春天 就要来了 再也没有你的春天 就要来了</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>世间万物，如果一直放着不管的话，便一定会向不好的方向发展。就像即使如何的努力也无法阻止宇宙变冷一样。只是按照‘常理进行’不断积累而构筑出的世界，无论如何也无法脱离物理法则的束缚。</strong> —— 虚渊玄</p></li>\r\n<li><p><strong>无可替代的存在什么的不是很可怕吗？一旦失去就再也无法取回；绝对不能容忍失败；无法再一次得到。</strong> —— 果然我的青春恋爱喜剧搞错了</p></li>\r\n<li><p><strong>其实...根本就没有什么天堂和地狱吧....</strong> —— 死亡笔记</p></li>\r\n<li><p><strong>真正重要的东西，永远都是非常简单的。</strong> —— Clannad</p></li>\r\n<li><p><strong>我已经准备好了足够挡雨的伞，可是却迟迟没有等到雨的到来，这样的尴尬只是我漫长人生中的小插曲罢了。</strong> —— 千与千寻</p></li>\r\n<li><p><strong>我觉得在这里干尽坏事的玩家，都是些在现实世界中也烂到骨子里的家伙。</strong> —— 刀剑神域</p></li>\r\n<li><p><strong>是你赢了...哲...</strong> —— 黑子的篮球</p></li>\r\n<li><p><strong>我们一直在一起，所以最后也想在你身旁。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>人们只是用好人来称呼对自己有用的人而以，不存在对所有人都有用的人</strong> —— 进击的巨人</p></li>\r\n<li><p><strong>要是太勉强自己的话，总有一天会受伤的</strong> —— 吸血鬼骑士</p></li>\r\n<li><p><strong>我本身得不到答案。所以，我希望有能够答出来之物的诞生。</strong> —— Fate/Stay Night</p></li>\r\n<li><p><strong>最初的一步，泪水之后再一次，雕刻的风景线，消逝在黄昏中的风，直到梦的最后。</strong> —— Clannad</p></li>\r\n<li><p><strong>应该可以了吧，我已经很努力了，应该可以抵达终点了…</strong> —— AIR</p></li>\r\n<li><p><strong>所谓的奇迹就是要发生之后才会有价值存在的吧</strong> —— EVA</p></li>\r\n<li><p><strong>笑是对身边的事物感到一瞬间的幸福而表现出来的东西。</strong> —— CLANNAD</p></li>\r\n<li><p><strong>休息对于生存而言，也是紧要问题</strong> —— 虫师</p></li>\r\n<li><p><strong>比自己,比梦想更重要的东西永远都存在着...</strong> —— 钢之炼金术师</p></li>\r\n<li><p><strong>失礼。噛みました</strong> —— 化物语(上)</p></li>\r\n<li><p><strong>驱动着这个世界的，并非只有眼睛能够看到的东西。就像只观察结晶回路的轮盘是无法知晓齿轮的运动一样……</strong> —— 空之轨迹</p></li>\r\n<li><p><strong>是个男人就要对自己的人生负责</strong> —— 麻辣教师</p></li>\r\n<li><p><strong>我们不是狼，我们只是长着獠牙的羊......</strong> —— 羊之歌</p></li>\r\n<li><p><strong>没有偶然的必然，只有必然的偶然</strong> —— 魔卡少女樱</p></li>\r\n<li><p><strong>我觉得你很幸福，因为你可以选择爱或者不爱我，而我只能选择爱或者更爱你</strong> —— 草莓100%</p></li>\r\n<li><p><strong>前天是兔子，昨天是小鹿，今天是你</strong> —— Clannad</p></li>\r\n<li><p><strong>ご無事で何よりです。</strong> —— 妖狐X僕ss</p></li>\r\n<li><p><strong>少年少女 向前走吧。</strong> —— 阳炎PROJECT</p></li>\r\n<li><p><strong>过分的神圣，往往比恶魔更加恶质。</strong> —— 黑执事</p></li>\r\n<li><p><strong>正因生来一无所有，因此我们能拥有一切。</strong> —— 游戏人生</p></li>\r\n<li><p><strong>我从来都不是什么天才，只是一个普通人，是一个连一个小女孩都保护不了的普通的、渺小的人类啊。</strong> —— 钢之炼金术师</p></li>\r\n<li><p><strong>我不会去统治这片大海，在这片大海上，最自由的人就是海贼王！</strong> —— 海贼王</p></li>\r\n<li><p><strong>失礼、噛みました</strong> —— 化物语</p></li>\r\n<li><p><strong>她有心，她的心在我这里。</strong> —— 人形电脑天使心</p></li>\r\n<li><p><strong>努力不会背叛自己，虽然有时会背叛梦想</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>超频链接</strong> —— 加速世界</p></li>\r\n<li><p><strong>若没有可依靠之处，便也找不到自己的归宿，躲躲藏藏随波逐流，依附于某物，却又一头撞在看不见的墙壁上。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>就算是自私…我也希望那些人能够永远都有笑容…</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>挚友的执念烙印此身，无尽的黑暗化为光明，天上天下，一骑当神！</strong> —— 天元突破：红莲螺岩</p></li>\r\n<li><p><strong>人在直面恐惧的时候，自身的灵魂将会受到考验。降生于这世界，究竟有何所求，要成何事，其本性会暴露无遗。</strong> —— PSYCHO-PASS</p></li>\r\n<li><p><strong>整个社会对我都很苛刻。所以至少让我自己宽容一下我自己吧。如果大家都对自己更宽容一点的话。大家都变成废柴就没有废柴了。</strong> —— 果然我的青春恋爱喜剧搞错了</p></li>\r\n<li><p><strong>还能再见面吗? 一定能见面的</strong> —— Fantastic Children</p></li>\r\n<li><p><strong>即使你忘却了我，我也不会遗忘你。</strong> —— 菜月昂</p></li>\r\n<li><p><strong>不要伤害自己，别人总会这样做。</strong> —— 天国王朝</p></li>\r\n<li><p><strong>我喜欢你，比世界上任何人都喜欢你。</strong> —— 名侦探柯南</p></li>\r\n<li><p><strong>人是可以改变一切的，世上的一切。</strong> —— 吹响！上低音号</p></li>\r\n<li><p><strong>所谓的「改变自己，世界就会随之改变」这种事，是不可能的。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>我想成为一个温柔的人，因为曾被温柔的人那样对待，深深了解那种被温柔相待的感觉。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>你喜欢的人已经心有所属不是正常的吗，因为你喜欢他，所以你的眼中就只有她。人啊，总是盲目地去爱。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>忍者的才能不在于所掌握忍术的多少，而在于永不放弃的毅力.笔直向前绝不违背自己的誓言，还有不管何时都不放弃.</strong> —— 火影忍者</p></li>\r\n<li><p><strong>我动身踏上旅程，是为了与你道别。</strong> —— 追逐繁星的孩子</p></li>\r\n<li><p><strong>大家即将各自展开旅程，挥别这个没落的城镇。</strong> —— 仰望半月的夜空</p></li>\r\n<li><p><strong>正气和狂气，理性和知性，自信和确信，在悲剧性的不合理世界，故事开始了。</strong> —— 绝园的暴风雨</p></li>\r\n<li><p><strong>将所有人类当成玩偶的神,本身居然也是个小丑啊。</strong> —— Fate/Zero</p></li>\r\n<li><p><strong>即使想放弃，也没法放弃最想要的东西，这就是人</strong> —— 悠久之翼</p></li>\r\n<li><p><strong>拿起武器，无论顺从还是逃跑，都无法得到自由，既然如此，我们只能战斗，为了自由，站起来吧。</strong> —— 妖精的尾巴</p></li>\r\n<li><p><strong>所谓长大成人，就是不断聚了散，散了又聚。为了让彼此不会受伤害而保持一个适当的距离。</strong> —— 新世纪福音战士</p></li>\r\n<li><p><strong>如果说怪盗是一个技艺精湛，盗取财宝的艺术家，那么侦探就只是跟在怪盗后面吹毛求疵，充其量不过是个评论家。</strong> —— 名侦探柯南</p></li>\r\n<li><p><strong>我不相信人类......但是，我相信人类的“可能性”</strong> —— 游戏人生</p></li>\r\n<li><p><strong>即使作为代价要夺走我什么，即使接下来等待我的是什么，即使那样，我无论如何都不想失去他。</strong> —— 少年阴阳师</p></li>\r\n<li><p><strong>据说之所以有人出现在梦中，是因为对方想见你的心情穿过身体，飞进了你的梦中。</strong> —— 蜂蜜与四叶草</p></li>\r\n<li><p><strong>好梦向来易醒。</strong> —— 风之谷</p></li>\r\n<li><p><strong>追逐梦想的人比抓住梦想的人更能发挥实力。</strong> —— 银魂</p></li>\r\n<li><p><strong>因为世界并不如你想象的那样坏。</strong> —— 无头骑士异闻录</p></li>\r\n<li><p><strong>人只会看到自己想看到的、听到自己想听到的，我也并不例外。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>美丽的不是这个世界，而是接受了这个世界的你的眼睛。</strong> —— 吸血鬼骑士</p></li>\r\n<li><p><strong>干燥的冷气，尘埃的味道，我在其中……踏上旅途。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>人总有一天都会死的，但正因为生命是有限的，才能够欢喜和悲伤。</strong> —— 通灵王</p></li>\r\n<li><p><strong>舞台上演员不能无视剧本随便演，华丽地退场才是完成使命。</strong> —— 绝园的暴风雨</p></li>\r\n<li><p><strong>只顾着追求新事物，却不回顾历史，怎么会有未来。</strong> —— 虞美人盛开的山坡</p></li>\r\n<li><p><strong>为什么妈妈就不明白无所事事的忙碌呢。</strong> —— 白熊咖啡屋</p></li>\r\n<li><p><strong>好红，每当想起你，枫叶就会被染红。</strong> —— 银仙</p></li>\r\n<li><p><strong>也许正义并非太阳，而是如同星星一般的东西，天空中有无数的星星，彼此不断抵消着其他星星的光芒。</strong> —— 亚尔斯兰战纪</p></li>\r\n<li><p><strong>起风了,唯有努力生存。</strong> —— 起风了</p></li>\r\n<li><p><strong>走过一段路 回头看 原来那些痛得快要死去的事情是可以一笑而过的。</strong> —— 黑子的篮球</p></li>\r\n<li><p><strong>我们都在梦中，一个叫青春的梦里。梦总有一天会醒来，而回忆会一直闪烁。</strong> —— 校园迷糊大王</p></li>\r\n<li><p><strong>王冠会让戴上它的人高人一头，是地位的象征。但王冠真正的意义是：当灾难从天而降时，我会为你们抵挡一切，永远让你们只看到金色的希望。</strong> —— 星游记</p></li>\r\n<li><p><strong>只要怀着理想而行动，就算结果不尽如人意也没有关系。但是如果失去了理想，那就真的一无所有了，连自己珍视的人都保护不了。</strong> —— 境界的彼方</p></li>\r\n<li><p><strong>如果要伤害别人的感情才能实现的话，对那个人来说梦想就已经不能称之为梦想了。</strong> —— 名侦探柯南</p></li>\r\n<li><p><strong>我不会忘记，一直，都留在我的心间。</strong> —— 文学少女</p></li>\r\n<li><p><strong>当一个胖纸没有什么不好，最起码可以温暖其他的人。</strong> —— 龙猫</p></li>\r\n<li><p><strong>是鸣人改变了我！是鸣人的笑脸拯救了我！所以，如果是为了保护鸣人，就算死，我也无可畏惧，因为我，最喜欢鸣人了。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>总在不停寻觅你的踪影，无论十字路口抑或梦境之中，明知你不在，却依然不停地找寻。</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>你受伤的时候，我永远都在。</strong> —— 多啦A梦</p></li>\r\n<li><p><strong>在未知的未来将要发生的事，一定有它的意义</strong> —— 火影忍者</p></li>\r\n<li><p><strong>那只萤火虫在很长很长的时间里都是独自一人生活，甚至忘了自己是只萤火虫。</strong> —— 小鸠</p></li>\r\n<li><p><strong>最近的烦恼是小小的离别带来的寂寞，一瞬间的邂逅与分别，这一个一个的刹那，我想好好珍惜起来。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>如果基拉被抓住了，那他就是邪恶，如果基拉统治了世界，那他就是正义。</strong> —— 死亡笔记</p></li>\r\n<li><p><strong>无论最终的结果是什么，只要这是自己选择的道路。</strong> —— 龙与虎</p></li>\r\n<li><p><strong>在面对这些强敌之前...一定要先将眼前敌人逐个打败吧。</strong> —— 网球王子</p></li>\r\n<li><p><strong>物转星移，花开花落，周而复始，生生不息，但今昔已非昨日，然今日花容依旧。</strong> —— 虫师</p></li>\r\n<li><p><strong>隐藏的是心中的秘密，照耀两人的是star和snow……</strong> —— 名侦探柯南</p></li>\r\n<li><p><strong>从进入厨房的瞬间开始，你们就肩负着烹饪美食的责任。</strong> —— 食戟之灵</p></li>\r\n<li><p><strong>生活坏到一定程度就会好起来，因为它无法更坏。</strong> —— 龙猫</p></li>\r\n<li><p><strong>当你决定了要向前迈进的那一刻, 你就已经踏出前进的一步了。</strong> —— Canvas2 ～七彩的素描～</p></li>\r\n<li><p><strong>我再也不要看见她哭的样子了，就算我从此从她心目中消失。</strong> —— 名侦探柯南</p></li>\r\n<li><p><strong>无限接近于零，却又不等于零的可能性。</strong> —— 游戏人生</p></li>\r\n<li><p><strong>在弱者眼里可能是这样，不过，我的确很强。</strong> —— 蔷薇少女</p></li>\r\n<li><p><strong>我无法抗拒泡面这种没营养又廉价的口感。</strong> —— 银仙</p></li>\r\n<li><p><strong>荣耀就在彼方，遥不可及才要挑战，歌颂霸道，展现霸道，为了守护我背影的臣子。</strong> —— RIDER Fate/Zero</p></li>\r\n<li><p><strong>活着本身就是一种价值，因为还有明天。</strong> —— 高达</p></li>\r\n<li><p><strong>大家互相帮助，一起成功，一起幸福什么的，不过是种理想。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>话说回来，现充还真是麻烦啊。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>重逢的时候没想到我会这样喜欢他，虽然你不是我交往的第一人，可却是我的初恋，虽然你可能并不知道。</strong> —— 世界第一初恋</p></li>\r\n<li><p><strong>有了喜欢的人，就会在意各种小事，感觉很不自由，但是，为了那些小事左思右想，心里竟然会这么快乐。</strong> —— 闪烁的青春</p></li>\r\n<li><p><strong>就算世上有着所谓的“好女人”，也不会有着“和我关系好的女人”。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>必须洗净一切往事，否则你永远无法清楚自由地看这个世界</strong> —— 死神</p></li>\r\n<li><p><strong>己所欲者，杀而夺之，亦同天赐</strong> —— 游戏人生</p></li>\r\n<li><p><strong>即使你已经习惯了受伤害，也有人看了会心疼的。</strong> —— 我的恋爱物语果然有问题</p></li>\r\n<li><p><strong>这个世界上没有完美的人类，所以，人无法自己一个人活著。</strong> —— 不可思议游戏</p></li>\r\n<li><p><strong>我们会，慢慢长大成人，随着季节的不停变换 路边盛开的鲜花也在不断变化。</strong> —— 未闻花名</p></li>\r\n<li><p><strong>只要一天活著,难过的事总有一天会让你笑著说出来。</strong> —— 天空之城</p></li>\r\n<li><p><strong>命运的红线一旦断了，就再也接不上了。</strong> —— 犬夜叉</p></li>\r\n<li><p><strong>一举一动，都是承诺，会被另一个人看在眼里，记在心上的。</strong> —— 悬崖上的金鱼姬</p></li>\r\n<li><p><strong>如果你一个人把什么都做完了，那我做什么？</strong> —— 元气少女缘结神</p></li>\r\n<li><p><strong>在自称善意的之时，即存恶意。</strong> —— 罪恶王冠</p></li>\r\n<li><p><strong>正因为生命有限，所以才显得更重要，正因为生命有限，所以才更应该努力不懈。</strong> —— 名侦探柯南</p></li>\r\n<li><p><strong>总觉得跟你在一起，不管多高的地方都可以到达。</strong> —— 网球王子</p></li>\r\n<li><p><strong>人这种东西，除了为了永不满足的欲望追求新的刺激之外，也是重视稀少价值之物的奇怪生物。</strong> —— gosick</p></li>\r\n<li><p><strong>那些坚定决心的人们，会展现出好脸色。</strong> —— 闪电十一人</p></li>\r\n<li><p><strong>世界不完美 所以才显得美丽</strong> —— 钢之炼金术士</p></li>\r\n<li><p><strong>即使匍匐在地，也要持续前进，这才是你的作风。现在的你只靠一些漂亮话当借口，在高墙前使性子，不过是个小鬼罢了。</strong> —— 银魂</p></li>\r\n<li><p><strong>明明喜欢的不得了，可是看到对方幸福洋溢的表情，却觉得很难过、很痛苦，胸口发疼。</strong> —— 彩云国物语</p></li>\r\n<li><p><strong>失望了吗？没错，世上或许有些东西别打开比较好，真正把心打开的人多么麻烦啊！</strong> —— 绝望先生</p></li>\r\n<li><p><strong>哭也不会改变什么，这个世界从来不会对任何人温柔。</strong> —— 黑执事</p></li>\r\n<li><p><strong>不论是过去还是未来，我都会保护你！</strong> —— 旋风管家</p></li>\r\n<li><p><strong>自己的过去会被当做笑话或者捏他的形式，被他人随随便便的共有化。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>因为等待的越久，重逢时就越幸福啊。</strong> —— 名侦探柯南</p></li>\r\n<li><p><strong>我在时光斑驳深处，聆听到花开的声音。</strong> —— 未闻花名</p></li>\r\n<li><p><strong>神会对努力之人微笑，这是骗人的，但我们偶然会被命运之神垂青。</strong> —— 吹响吧！上低音号</p></li>\r\n<li><p><strong>大国战争之后还会繁荣富强，而只有小国涂炭遭殃，让世界感受痛苦吧。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>人生最糟糕的事，一个是饿肚子，一个是孤独。</strong> —— 夏日大作战</p></li>\r\n<li><p><strong>你指尖跳动的电光，是我此生不变的信仰</strong> —— 某科学的超电磁炮</p></li>\r\n<li><p><strong>温柔解救不了这个世界</strong> —— 罪恶王冠</p></li>\r\n<li><p><strong>代你见证世界的终结，来世再续梦之伊甸</strong> —— Eden*/b站弹幕</p></li>\r\n<li><p><strong>今日已成往昔，明日即将到来，为此理所当然之事，感到无比痛心。</strong> —— 寻找失去的未来</p></li>\r\n<li><p><strong>我活在我的时间里，她活在她的时间里，因此，我们时间交错的瞬间，对我而言比任何事物都宝贵。</strong> —— 她与她的猫</p></li>\r\n<li><p><strong>人类，在决战之时难道会选择自己不擅长的武器来战斗吗？</strong> —— 只有神知道的世界</p></li>\r\n<li><p><strong>这只手，暂时不洗了</strong> —— 小林家的龙女仆</p></li>\r\n<li><p><strong>重要的人，不能忘记的人，不想忘记的人。 你，是谁？</strong> —— 你的名字</p></li>\r\n<li><p><strong>正是在对未来没有任何希望的时候，一个人能坚持到什么地步，才真正体现出这个人有多坚强。</strong> —— 来自新世界</p></li>\r\n<li><p><strong>除了这一颗心，都是你的。</strong> —— 人渣的本愿</p></li>\r\n<li><p><strong>正是因为这一点一滴觉得还有希望的自己，才是最无可救药的吧。</strong> —— 人渣的本愿</p></li>\r\n<li><p><strong>我们都很执着,而且思念的越深,越是绝望。</strong> —— 人渣的本愿</p></li>\r\n<li><p><strong>一个人觉得寂寞，和另一个人相互依偎又有什么错</strong> —— 人渣的本愿</p></li>\r\n<li><p><strong>想象力足以改变一切。</strong> —— 来自新世界</p></li>\r\n<li><p><strong>越是珍惜呆在这里的时间，今后就越是悲伤吧。但是我认为不能称之为「后悔」。</strong> —— 小林家的龙女仆</p></li>\r\n<li><p><strong>大部分人并不想长大，只是没办法继续当一个小孩子</strong> —— 小林家的龙女仆</p></li>\r\n<li><p><strong>不得了不得了</strong> —— 小林家的龙女仆</p></li>\r\n<li><p><strong>你已经不是我的狗了。</strong> —— 龙与虎</p></li>\r\n<li><p><strong>正因为有忘也忘不了的回忆，才会变得坚强，这就是所谓的成长吧！</strong> —— 火影忍者</p></li>\r\n<li><p><strong>其实我对混合咖啡还是很有自信的</strong> —— 珈百璃的堕落</p></li>\r\n<li><p><strong>如果当初握住的不是硬币，而是勇者的手......</strong> —— 中二病也要谈恋爱 恋！</p></li>\r\n<li><p><strong>只要是正义的一方，无论手段多么卑鄙都可以被原谅</strong> —— 东京喰种</p></li>\r\n<li><p><strong>你偶尔也该回头看看，那些在你身后的人，说不定已经追到你脚边了！！！</strong> —— 妖精的尾巴</p></li>\r\n<li><p><strong>因为喜欢你，所以想继续相信下去。</strong> —— 空之境界</p></li>\r\n<li><p><strong>自杀是没有理由的，只是今天没有飞起来罢了。</strong> —— 空之境界</p></li>\r\n<li><p><strong>听说，樱花花瓣飘落的速度，是每秒5厘米，思念的距离到底有多远。如果樱花下落时是有声音的，你会不会听到我对你的思念</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>在下雪时。第一次相会时。雪白的夜与漆黑的伞。只要有你在身边。只要你露出微笑。就是幸福。</strong> —— 空之境界</p></li>\r\n<li><p><strong>身体被冻僵了，仅有吐出的气息略带热度。望着彼此即将停止的心脏鼓动。 然后，极为珍惜的记忆随即就会消失而化为眷恋。</strong> —— 空之境界</p></li>\r\n<li><p><strong>对于虚伪而言，真实的光明或许过于耀眼了</strong> —— 蔷薇少女</p></li>\r\n<li><p><strong>好了 接下来就让你们见识一下程序员的本事</strong> —— 骑士与魔法</p></li>\r\n<li><p><strong>如果结果不如你所愿，就在尘埃落定前奋力一搏。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>如果因为害怕失败，而不去努力，那就不会有能够成功的人。</strong> —— 樱花庄的宠物女孩</p></li>\r\n<li><p><strong>你一直相信的事，也让我相信吧。活着，是件美好的事。</strong> —— Angle Beats</p></li>\r\n<li><p><strong>我只希望，我喜欢的人可以健康的活着。</strong> —— 人渣的本愿</p></li>\r\n<li><p><strong>正因为生来什么都没有，因此我们能拥有一切。</strong> —— 游戏人生</p></li>\r\n<li><p><strong>未来的事无人知晓，所以它才如同这重逢一般，拥有着无限的可能性。</strong> —— 命运石之门</p></li>\r\n<li><p><strong>只要努力活下去，总有一天会笑着回忆。</strong> —— 不可思议游戏</p></li>\r\n<li><p><strong>想说什么就说，想做什么就做，我们不就是这么一直过来的吗？</strong> —— LoveLive!</p></li>\r\n<li><p><strong>也许一个人的快乐会建立在另一个人或者很多人的痛苦之上。但是，自己种下的祸根终有一天会报应在自己的身上的。</strong> —— 地狱少女</p></li>\r\n<li><p><strong>何必去在意自己与别人相比是否特别呢？即便只有一个人也好。只要有一个认为自己特别的人，我觉得那就足够了。</strong> —— 冰菓</p></li>\r\n<li><p><strong>虚伪的眼泪，会伤害别人，虚伪的笑容，会伤害自己。</strong> —— 叛逆的鲁鲁修</p></li>\r\n<li><p><strong>空太是笨蛋！</strong> —— 樱花庄的宠物女孩</p></li>\r\n<li><p><strong>不敢反抗压迫的心理将伴你一生</strong> —— 狂赌深渊</p></li>\r\n<li><p><strong>未来的旅程是如此遥远，能见到的光明却是如此稀少。即使如此——我仍然没有完全放弃希望。</strong> —— 刀剑神域</p></li>\r\n<li><p><strong>契约者不会做梦。</strong> —— 黑之契约者</p></li>\r\n<li><p><strong>不可结缘</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>去做你喜欢做的事吧 这就是所谓的那啥...青春嘛</strong> —— 月色真美</p></li>\r\n<li><p><strong>重要的感情总是非常单纯 自然脱口而出的</strong> —— GAMERS电玩咖！</p></li>\r\n<li><p><strong>This is your dream! Anything you can do in your dreams, you can do now!</strong> —— My Little Pony: Friendship is Magic</p></li>\r\n<li><p><strong>What about super-ultra-extreme-awesomazing?</strong> —— My Little Pony: Friendship is Magic</p></li>\r\n<li><p><strong>We've learned that friendship isn't always easy, but there's no doubt it's worth fighting for!</strong> —— My Little Pony: Friendship is Magic</p></li>\r\n<li><p><strong>今宵之月，绝不西沉。只此美梦，不再苏醒。从今往后，生生世世，长相厮守，为你立誓。</strong> —— 银魂</p></li>\r\n<li><p><strong>打架这玩意，不就是为了守护什么东西吗？</strong> —— 银魂</p></li>\r\n<li><p><strong>届けて— 切なさには 名前をつけようか“Snow halation”</strong> —— Snow Halation</p></li>\r\n<li><p><strong>我是想被包养，但不会接受施舍</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>善于破坏气氛的人，不仅能破坏好的气氛，其实也能把坏的气氛破坏掉。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>为什么要称赞他人？那是为了把对方捧到更高的地方更容易绊他的脚，为了把他从高处摔下来。这就叫做称赞杀人法。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>女生口中的「好人」首先百分之百是「怎样都好的人」的意思，再好也不过止于「方便好使的人」。也就是说，不管怎样都是没戏了</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>夜晚还远远没有结束!</strong> —— 春宵苦短，少女前进吧！</p></li>\r\n<li><p><strong>只要世间有酒,我就喝不够!</strong> —— 春宵苦短，少女前进吧！</p></li>\r\n<li><p><strong>如果我们能活着出去，千山万水，你愿意陪我一起看吗？</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>不可结缘,徒增寂寞</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>就算世界终结，也无所谓</strong> —— 少女终末旅行</p></li>\r\n<li><p><strong>遇到事情不能坐以待毙！</strong> —— 捷德奥特曼</p></li>\r\n<li><p><strong>为了爱，与梦想！</strong> —— 眼大人</p></li>\r\n<li><p><strong>今日的余晖和你最后那天给我的拥抱，同一个温度</strong> —— Myself</p></li>\r\n<li><p><strong>想和你重新认识一次 从你叫什么名字说起。</strong> —— 你的名字</p></li>\r\n<li><p><strong>不管你在世界的哪个地方，我一定会，再次去见你的。</strong> —— 你的名字</p></li>\r\n<li><p><strong>只要记住你的名字，不管你在世界的哪个地方 ，我一定会，去见你。</strong> —— 你的名字</p></li>\r\n<li><p><strong>和绝望，和睦相处</strong> —— 少女终末旅行</p></li>\r\n<li><p><strong>愿你有一天，能与你最重要的人重逢</strong> —— 可塑性记忆</p></li>\r\n<li><p><strong>不相信人咬不到肚脐的，咬破肚脐去死如何？</strong> —— 海猫鸣泣之时</p></li>\r\n<li><p><strong>梦想是否无聊并不是别人来决定的，不管是什么样的梦想，自己拼命努力去追寻才是最重要的。</strong> —— 守护甜心</p></li>\r\n<li><p><strong>将愿望倾入不愿忘却的回忆中??</strong> —— ef-a tale of memories</p></li>\r\n<li><p><strong>倘若只是为了驱赶心中的寂寞，找谁都可以的。</strong> —— 秒速5厘米</p></li>\r\n<li><p><strong>什么都无法舍弃的人，什么都无法改变 。</strong> —— 进击的巨人</p></li>\r\n<li><p><strong>比希望更炙热，比绝望更深邃，这就是爱啊。</strong> —— 魔法少女小圆-叛逆的物语</p></li>\r\n<li><p><strong>我们都在命运之湖上荡舟划桨，波浪起伏着而我们无法逃脱孤航。但是假使我们迷失了方向，波浪将指引我们穿越另一天的曙光。</strong> —— 死神</p></li>\r\n<li><p><strong>懂得认输是非常重要的，不尝到失败的不甘，也就不会明白跌倒后怎么爬起来，更不可能再向前迈进。</strong> —— 笨蛋测验召唤兽</p></li>\r\n<li><p><strong>重要的不是你做了多少事，而是你放了多少心思进去。</strong> —— 凉宫春日的忧郁</p></li>\r\n<li><p><strong>就算是自私??我也希望那些人能够永远都有笑容??</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>(」?ω?)」うー！(／?ω?)／にゃー！</strong> —— 潜行吧奈亚子</p></li>\r\n<li><p><strong>欺骗世界，欺骗最初的你。</strong> —— Steins;Gate</p></li>\r\n<li><p><strong>在走廊上跌倒会流鼻血，在人生中跌倒会流眼泪。</strong> —— 龙虎斗</p></li>\r\n<li><p><strong>相信十年后的八月，我们还会相遇。</strong> —— 未闻花名</p></li>\r\n<li><p><strong>男人就应该保持冷静，沸腾的水只会被蒸发掉。</strong> —— 假面骑士kabuto</p></li>\r\n<li><p><strong>不管看到什么样的过去，都请不要迷失自己，不管你变成什么样子，我都是你的同伴。</strong> —— angel beats</p></li>\r\n<li><p><strong>想要试着去相互接近，但最后还是无法敞开心扉，结果就是擦肩而过??</strong> —— 文学少女</p></li>\r\n<li><p><strong>不能逃避，不能逃避，不能逃避，不能逃避??</strong> —— EVA</p></li>\r\n<li><p><strong>我终不能改变那个开始，何不忘了那个结局呢。</strong> —— 悟空传</p></li>\r\n<li><p><strong>因为我想活着，我不能掩藏我心中的本欲，正如我心中爱你美丽,又怎能嘴上装四大皆空。</strong> —— 悟空传</p></li>\r\n<li><p><strong>这短短的一生，我们最终都会失去。你不妨大胆一些，爱一个人，攀一座山，追一个梦。</strong> —— 大鱼海棠</p></li>\r\n<li><p><strong>出来吧，刻刻帝！</strong> —— 时崎狂三</p></li>\r\n<li><p><strong>翠星石最喜欢苍星石的说,所以到死也要在一起的说...</strong> —— Rozen Maiden</p></li>\r\n<li><p><strong>都是时辰的错！</strong> —— Fate/Zero</p></li>\r\n<li><p><strong>鸣神の　少しとよみて　さし昙り　雨も降らんか　君を留めん</strong> —— 言叶之庭</p></li>\r\n<li><p><strong>所谓爱情，是对对自己最重要的人，以慈悲的心保护他的想法。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>旅行唯有出发前最愉快，狗儿唯有叫声最吓人，女人唯有背影最美丽。</strong> —— 狼与香辛料</p></li>\r\n<li><p><strong>让我们开始我们的约会（战争）吧</strong> —— 约会大作战</p></li>\r\n<li><p><strong>连我爸都没打过我</strong> —— 高达0079</p></li>\r\n<li><p><strong>这是你所不能理解的，人类感情的极致，比希望更热烈，比绝望更深邃——爱！</strong> —— 魔法少女小圆新篇 叛逆的物语</p></li>\r\n<li><p><strong>What, so everyone's supposed to sleep every single night now? You realize that nighttime makes up half of all time?</strong> —— Rick</p></li>\r\n<li><p><strong>人生没有彩排，只有现场直播，所以做最好的自己。</strong> —— Internet</p></li>\r\n<li><p><strong>对自己有自信时，不能对别人说「期待」。所谓的「期待」是放弃时的托词，因为别无选择。若缺少这种无奈感，这个词就太虚伪了。</strong> —— 冰菓</p></li>\r\n<li><p><strong>人难免伤害别人,也难免受伤,不过,人是不会轻易讨厌别人的.</strong> —— 火影忍者</p></li>\r\n<li><p><strong>以智者之名，为愚者代辩。</strong> —— Gosick</p></li>\r\n<li><p><strong>清算，终将到来。</strong> —— Stellaris</p></li>\r\n<li><p><strong>据说啊 叹气会让幸福溜走的</strong> —— 再见了 我们的幼儿园</p></li>\r\n<li><p><strong>你将不再是道具，而是人如其名的人。</strong> —— 紫罗兰永恒的花园</p></li>\r\n<li><p><strong>人没有回忆是无法活下去的哟</strong> —— AIR</p></li>\r\n<li><p><strong>只要万事俱备，就能一直保持冷静，无论发生什么事，都不会害怕。</strong> —— 银魂</p></li>\r\n<li><p><strong>正因为不会发生，人们才称它为”奇迹“</strong> —— KANON</p></li>\r\n<li><p><strong>我想成为一个温柔的人,因为曾被温柔的人那样对待,深深了解那种被温柔相待的感觉。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>我喜欢的人…也能喜欢上自己，我认为这就是奇迹。</strong> —— 月色真美</p></li>\r\n<li><p><strong>大圣此去欲何? 踏南天，碎凌霄！若一去不回.... 便一去不回！</strong> —— 影视</p></li>\r\n<li><p><strong>我们一直在离别中，比如和爱的人，和伤害，甚至和时光。</strong> —— 萤火虫之墓</p></li>\r\n<li><p><strong>至少恋爱不是种机会，我认为它是一种意志。</strong> —— 月色真美</p></li>\r\n<li><p><strong>幸福感就如沉积在悲哀之河底下 隐隐发光的金砂</strong> —— 月色真美</p></li>\r\n<li><p><strong>有样东西是其他生物绝对没有，只有人类才有 那就是人有秘密。</strong> —— 月色真美</p></li>\r\n<li><p><strong>爱一定存在于世上 一定存在 无从寻觅的是爱的表现 是它的表达方式</strong> —— 月色真美</p></li>\r\n<li><p><strong>把同班的可爱女同学娶回家就是我最大的梦想</strong> —— 月色真美</p></li>\r\n<li><p><strong>在狂热思绪下喊出的爱情宣言中，存在着爱情的实体</strong> —— 月色真美</p></li>\r\n<li><p><strong>回首前尘，尽是可耻的过往</strong> —— 月色真美</p></li>\r\n<li><p><strong>月色如水，虽不如阳光般耀眼，但我的眼中却只有比那月色更可爱的你。心跳不知不觉中加速，嘴角也绷不住那溢出来的幸福笑意。月色确实醉人，却是因为你才显得更美</strong> —— 月色真美</p></li>\r\n<li><p><strong>“不管你我相距多远，我都想告诉你 我对你的心意不会变，给即将去到陌生城市的你 ，我永远喜欢你”</strong> —— 月色真美</p></li>\r\n<li><p><strong>我们人是需要吃饭、工作和休息的生物，只要满足了其中一项，其他两项也会逐渐满足，而当这三项都满足后，就会得到强烈的存在感。</strong> —— 银魂</p></li>\r\n<li><p><strong>看来这世界 似乎还想要驯服我 那就如你所愿吧 我会美丽地挣扎到底</strong> —— 你的名字</p></li>\r\n<li><p><strong>如果，樱花掉落的速度是每秒5厘米，那么两颗心需要多久才能靠近？</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>坐上与学校相反方向的电车，展开没有目标的旅行，去往那从未见过的地方</strong> —— 比宇宙更远的地方</p></li>\r\n<li><p><strong>不是为了战斗而活着，而是为了活着而战斗。</strong> —— 《DARLING in the FRANXX》</p></li>\r\n<li><p><strong>幸福的回忆，美满的回忆不一定会成为救赎，有时候，回忆越是美满便越痛苦，也有时候，会越害怕，无论是对于将要离开的人来说，还是对于被留下的人来说，都不可能会成为一种救赎。</strong> —— 可塑性记忆</p></li>\r\n<li><p><strong>恋爱不是谈出来的，而是陷进去的。</strong> —— GAMER电玩咖！</p></li>\r\n<li><p><strong>我们的哀伤和年龄是没有关系的。</strong> —— 樱桃小丸子</p></li>\r\n<li><p><strong>总在不停寻觅你的踪影，无论十字路口抑或梦境之中，明知你不在，却依然不停地找寻。</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>我想你们的努力一定会有回报的</strong> —— 龙与虎</p></li>\r\n<li><p><strong>人生不如意十有八九！</strong> —— 龙与虎</p></li>\r\n<li><p><strong>此身为剑所天成，身如钢铁，心似琉璃。</strong> —— Fate</p></li>\r\n<li><p><strong>我的梦想实现了，也留下了美好的回忆，我已经没有任何遗憾了。</strong> —— 末日时在做什么?有没有空?可以来拯救吗?</p></li>\r\n<li><p><strong>死者的血泪混入滚滚的流沙之中...将会赐予修罗更强的力量...</strong> —— 火影忍者</p></li>\r\n<li><p><strong>有型的东西终究会消逝，不过……终于，这份回忆还是永远不朽的…</strong> —— 火影忍者</p></li>\r\n<li><p><strong>人啊...想要保护重要东西的时候，就真的能变得很坚强。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>寂寞阴暗中度过，孤单孕育了怨与悲凉。锋利的伤痛刺入了我们彼此胸膛，这是我们无法躲避的惩罚，是我们不该任人生撩拨忧伤，不该走过之后又往回看。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>哪怕是打断你的手脚，也要把你带回去。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>从你站在桥上看我的 那一刻起你就是我的世界。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>龙儿是我的，谁都不许碰。</strong> —— 龙与虎</p></li>\r\n<li><p><strong>卧龙低伏，入我阵来。</strong> —— 一人之下</p></li>\r\n<li><p><strong>好红，每当想起你，枫叶就会被染红。</strong> —— 银仙</p></li>\r\n<li><p><strong>相信十年后的八月，我们还会相遇。</strong> —— 未闻花名</p></li>\r\n<li><p><strong>应该可以了吧，我已经很努力了，应该可以抵达终点了……</strong> —— AIR</p></li>\r\n<li><p><strong>殺してあげる</strong> —— 緋色月下、狂咲ノ絶</p></li>\r\n<li><p><strong>能力越大,责任越大</strong> —— 蜘蛛侠</p></li>\r\n<li><p><strong>不要随便贬低自己</strong> —— 终将成为你</p></li>\r\n<li><p><strong>我不喜欢这世界，我只喜欢你</strong> —— 乔一</p></li>\r\n<li><p><strong>神啊 我的人生到底为何而存在呢</strong> —— 蜂蜜与四叶草</p></li>\r\n<li><p><strong>想象力是武器，没有想象力的人会先死。</strong> —— 哥布林杀手</p></li>\r\n<li><p><strong>我们只是历史的过客，目标渺茫，无地自容。我们没有世界大战可以经历，也没有经济大萧条可以恐慌。我们的战争充其量不过是内心之战，我们最大的恐慌就是自己的生活。</strong> —— 搏击俱乐部</p></li>\r\n<li><p><strong>有的只是很简单的唯一的思想…只此一个！“胜利然后支配”！仅此而已...这才是我唯一的满足感！…至于过程和方法之类…并不重要！</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>王有王的才能，厨师有厨师的才能，替身之间是没有强弱之分的</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>如果我们能活着出去的话，千山万水，你愿意陪我一起看吗？</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>如果可以，愿来生你不要忘记我，我也不要忘记你那熟悉的温柔。</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>我愿意呀，五十年前就愿意了。</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>而我不知不觉把自己遗忘，只想为你完成那个梦想。</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>让我成为你的双眼，把那世界万千，描绘在你面前。</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>有很多辛苦的事情，从结果上来说并不好。但是一起努力的过程，绝对不是没用的。我是这么想的。所以现在不是停滞不前的时候。</strong> —— 如果有个妹妹就好了</p></li>\r\n<li><p><strong>你们这些天才止步不前的时候，我会走得更远。</strong> —— 如果有个妹妹就好了</p></li>\r\n<li><p><strong>有些景色必须前进才能看到，那么只有勇往直前。</strong> —— 如果有个妹妹就好了</p></li>\r\n<li><p><strong>果然啊，创造一样东西很开心。让别人享受自己创造的东西，是一种幸福呢。</strong> —— 如果有个妹妹就好了</p></li>\r\n<li><p><strong>世界上哪有不会输的英雄啊</strong> —— 凸变英雄</p></li>\r\n<li><p><strong>我怕失去了你，我的世界就没有了光明</strong> —— 凸变英雄</p></li>\r\n<li><p><strong>虽然有时候，不知道要写些什么，有时候，却有很多想说的，来不及记录。回忆一转身，就悄悄溜走了。</strong> —— 凸变英雄</p></li>\r\n<li><p><strong>哭过喊过便会停止哭泣</strong> —— 从零开始的异世界生活</p></li>\r\n<li><p><strong>很抱歉，前面是单行道，你就乖乖的夹着尾巴耸拉着脑袋返回原点吧！</strong> —— 一方通行</p></li>\r\n<li><p><strong>即便我弱了，也并不代表你强了。</strong> —— 魔法禁书目录</p></li>\r\n<li><p><strong>小鬼，你为坠入不幸深渊之人而心痛 我不会多言，只不过周遭充斥不幸，而你的小船仅能载一人，若救助其他人，只会让彼此沉没。</strong> —— 文豪野犬</p></li>\r\n<li><p><strong>死亡不是终点，被遗忘才是。</strong> —— 寻梦环游记</p></li>\r\n<li><p><strong>世界上的人都变成废柴，这个世界就没有废柴了。</strong> —— 春物</p></li>\r\n<li><p><strong>青春是谎言，是邪恶。</strong> —— 春物</p></li>\r\n<li><p><strong>纵使日薄西山。</strong> —— 末日时在做什么</p></li>\r\n<li><p><strong>孤高的游荡灵魂不需要羁绊之地</strong> —— 春物</p></li>\r\n<li><p><strong>我的金子，只给千寻。</strong> —— 千与千寻</p></li>\r\n<li><p><strong>步伐虽小，密而不停</strong> —— 实验品家庭</p></li>\r\n<li><p><strong>只会比大小真是没品</strong> —— 某科学的超电磁炮S</p></li>\r\n<li><p><strong>问灵十三载，等一不归人。</strong> —— 魔道祖师</p></li>\r\n<li><p><strong>如果我是雨的话，也能像连接那永远都不将交汇的天空和大地一样，去连接某个人的心吗。</strong> —— BLEACH</p></li>\r\n<li><p><strong>你还是...笑起来...最棒了</strong> —— 最终幻想XIV</p></li>\r\n<li><p><strong>'Cause rainbow won't light up the sky unless you let it rain.</strong> —— My Little Pony: Friendship is Magic</p></li>\r\n<li><p><strong>千山万水，因你不过毫厘</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>古往传奇多少别离，我 只是不经意 遇到了你</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>或许，你认为你的心已经给了他。但是，我会证明……我有一颗爱你的心！</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>你相信时间会抚平一切，可时过境迁，你已不复醒</strong> —— 动画</p></li>\r\n<li><p><strong>不拼尽全力去试一下，又怎么会知道啊</strong> —— 刺客伍六七</p></li>\r\n<li><p><strong>我今天就要带她走，我看谁敢拦我！</strong> —— 刺客伍六七</p></li>\r\n<li><p><strong>你们人类让我明白了一个道理，那就是这个世界是不讲道理的</strong> —— 刺客伍六七</p></li>\r\n<li><p><strong>人各有命，上天注定。有人天生为王，有人落草为寇。脚下的路如果不是你自己的选择，那么旅程的终点在哪儿也没人知道，你会走到哪儿，会碰到谁，都不一定。</strong> —— 镇魂街</p></li>\r\n<li><p><strong>世界是无情的，并不存在与生俱来的英雄。 所以只能由刚好在旁边的人粉墨登场， 演一出英雄的戏码。</strong> —— 魔法禁书目录</p></li>\r\n<li><p><strong>樱花满地集于我心，楪舞纷飞祈愿相随</strong> —— 罪恶王冠</p></li>\r\n<li><p><strong>人的能力是有极限的。我从短暂的人生当中学到一件事……越是玩弄计谋,就越会发现人类的能力是有极限的……除非超越人类。</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>那似乎是比翼鸟。这种鸟天生单翼，须靠雌雄二鸟相互依偎才能翱翔天际，是种有缺陷的生物。但是，不知为何，我却感受到了这种生活方式的美妙。</strong> —— Darling in the FRANXX</p></li>\r\n<li><p><strong>追寻只是因为无法抓获，想要触碰，只是因为知道自己触碰不到。</strong> —— FLCL Progressive</p></li>\r\n<li><p><strong>世界上所有的不利情况都是因为当事者的能力不足造成的</strong> —— 东京喰种</p></li>\r\n<li><p><strong>一个人有表里两面，你能看到的，仅仅是其中一面而已。</strong> —— 零的执行人</p></li>\r\n<li><p><strong>不知彼此来世相逢。是否还能记得我是谁？</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>与其因为不信任而后悔，不如因为相信而后悔。</strong> —— 刀剑神域</p></li>\r\n<li><p><strong>人生没有那么多的捷径，你不知道路的尽头是什么，但你必须向前走。</strong> —— 刀剑神域</p></li>\r\n<li><p><strong>一个人决定寂寞，和另一个人相互依偎又有什么错</strong> —— 人渣的本愿</p></li>\r\n<li><p><strong>我可从来不认为恐惧可以成为舍弃他人的借口，人不能因为恐惧，就连身为人类的品性都丢掉。</strong> —— 铁甲城的卡巴内瑞</p></li>\r\n<li><p><strong>你知道吗？从人眼的高度能看到的地平线，是离自身的距离大约是4公里。</strong> —— 青春猪头少年不会梦到兔女郎学姐</p></li>\r\n<li><p><strong>梦想是一个天真的词，实现梦想是一个残酷的词</strong> —— 哆啦A梦</p></li>\r\n<li><p><strong>既然今天是昨天，那么睡到明天就好。</strong> —— 青春猪头少年不会梦到兔女郎学姐</p></li>\r\n<li><p><strong>做不到的事没必要勉强去做，不也挺好吗？</strong> —— 青春猪头少年不会梦到兔女郎学姐</p></li>\r\n<li><p><strong>给我高高的飞起来啊！</strong> —— 星游记</p></li>\r\n<li><p><strong>要是眼睁睁的看着重要的同伴死去，就算是死，我也不能瞑目。</strong> —— 家庭教师</p></li>\r\n<li><p><strong>你的败因只有一个，就是与我为敌。 -</strong> —— 家庭教师</p></li>\r\n<li><p><strong>如果真是这样， 就由我来把彭格列毁灭！</strong> —— 家庭教师</p></li>\r\n<li><p><strong>十代目的意志就是我们的意志！</strong> —— 家庭教师</p></li>\r\n<li><p><strong>但我拒绝！我岸边露伴最喜欢的事情之一，就是向那些自以为是的家伙说，NO！</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>人类的赞歌就是勇气的赞歌！</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>大家都是伪善者，世间充斥着不真实。</strong> —— 无头骑士异闻录</p></li>\r\n<li><p><strong>不服从命令的人是人渣，抛弃同伴的人连人渣都不如。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>砸瓦鲁多！</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>背后即是祖国，我们无路可退。</strong> —— 那年那兔那些事</p></li>\r\n<li><p><strong>不能输，笑吧！</strong> —— 约定的梦幻岛</p></li>\r\n<li><p><strong>不管是怎样的回忆，都是我们活过的人生。</strong> —— Angel Beats!</p></li>\r\n<li><p><strong>孤独的我们才有人类的样子。</strong> —— Angel Beats!</p></li>\r\n<li><p><strong>声起立华乐独奏，曲末音无心结弦。</strong> —— Angel Beats!</p></li>\r\n<li><p><strong>不愿意的时候，逃跑也没有关系！</strong> —— 灵能百分百</p></li>\r\n<li><p><strong>邪王真眼是最强的</strong> —— 中二病也要谈恋爱</p></li>\r\n<li><p><strong>大部分人并不想长大 只是没办法继续当一个小孩子。</strong> —— 小林家的龙女仆</p></li>\r\n<li><p><strong>从开始的第一天起，就回不去了。</strong> —— 流浪地球</p></li>\r\n<li><p><strong>欧拉欧拉欧拉欧拉！</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>一举一动，都是承诺，会被另一个人看在眼里，记在心上的。</strong> —— 悬崖上的金鱼姬</p></li>\r\n<li><p><strong>人各有命，上天注定。有人天生为王，有人落草为寇。脚下的路，如果不是自己的选择，那旅程的终点在哪儿，也没人知道，你会走到哪儿，会碰到谁，都不一定。</strong> —— 镇魂街</p></li>\r\n<li><p><strong>成一事者，是失之不渝的愚者；毁一事者，是停滞不前的贤者。</strong> —— 不正经的魔法讲师</p></li>\r\n<li><p><strong>到底是，为什么呢？</strong> —— 金木研</p></li>\r\n<li><p><strong>我爱你，与你何干？</strong> —— 歌德</p></li>\r\n<li><p><strong>即使我弱了，也并不代表你强了</strong> —— 魔法禁书目录 第二季</p></li>\r\n<li><p><strong>正因为有了音乐，才有了相遇的瞬间，有了相会的感动，有了相逢的人们，有了邂逅的思念。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>你驻足于春色中，于那独一无二的春色之中。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>每当心情郁闷的时候，用手托腮就好，手臂会因为帮上忙而开心的。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>你的所言所行，全都闪烁着光芒，太过刺目，于是我闭上双眼，但内心还是无法停止对你的憧憬。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>或许前路永夜，即便如此我也要前进，因为星光即使微弱也会为我照亮前途。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>九月是蒲公英漫飞的季节，我喜欢这个季节，只可惜今天是九月的最后一天了</strong> —— 我是江小白</p></li>\r\n<li><p><strong>不辜负年华，做自己想做的事，唱自己想唱的歌</strong> —— 我是江小白</p></li>\r\n<li><p><strong>世间有很多事情，人们无法从它寂静的表象，猜测到暗涌，就像一个人和另一个人的相遇</strong> —— 我是江小白</p></li>\r\n<li><p><strong>用我那牵强的微笑，活出无人能比的骄傲。</strong> —— 黑执事</p></li>\r\n<li><p><strong>人类的赞歌就是勇气的赞歌</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>我没有任何理由为了那些人让自己的人生付之一炬！</strong> —— 三月的狮子</p></li>\r\n<li><p><strong>但是，我没有后悔，不能后悔，因为，我所做的事情一定没有错！</strong> —— 三月的狮子</p></li>\r\n<li><p><strong>相信奇迹的人，本身就和奇迹一样了不起。</strong> —— 星游记</p></li>\r\n<li><p><strong>即使天无雨，我亦留此地。</strong> —— 言叶之庭</p></li>\r\n<li><p><strong>有些梦想虽然遥不可及，但不是不可能实现。只要我足够的强。</strong> —— 秦时明月</p></li>\r\n<li><p><strong>有一天，你到了人类的世界，不要去爱上一个人，因为，爱上一个人，会让你真正变成孤单一人。</strong> —— 朝花夕誓</p></li>\r\n<li><p><strong>经为流逝的日月。纬为人们的生业。</strong> —— 朝花夕誓</p></li>\r\n<li><p><strong>悲痛的事，温柔以对；难过的事，坚强以对。</strong> —— 朝花夕誓</p></li>\r\n<li><p><strong>叫做妈妈的人，是不会哭的。</strong> —— 朝花夕誓</p></li>\r\n<li><p><strong>每一个兔子都有一个大国梦</strong> —— 那年那兔那些事</p></li>\r\n<li><p><strong>乘上与平时相反的列车，为了去见从未见过的风景。</strong> —— 比宇宙更远的地方</p></li>\r\n<li><p><strong>我不做人了！</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>我是否住进了某人的心房呢？</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>那么难受，那么痛苦，可是 世界这么美丽...让我如何能够忘记！</strong> —— 朝花夕誓</p></li>\r\n<li><p><strong>雁过拔毛，兽走留皮。涂山，我罩的，懂？</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>那天，我见过的最强剑客，提起了天下最强的宝剑······却早已没了剑心。</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>知识是很美的，它们可以让你不出家门就了解这世上的许多事。</strong> —— 妖精的尾巴</p></li>\r\n<li><p><strong>尽情的依靠我吧，因为总有一天我也会依靠你的。</strong> —— 妖精的尾巴</p></li>\r\n<li><p><strong>电助！凉子，看到了吗！</strong> —— 电脑线圈</p></li>\r\n<li><p><strong>I met the girl under full-bloomed cherry blossoms, and my fate has begun to change.</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>不相信自己的人，连努力的价值都没有。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>我一点也不走运。</strong> —— Fairy gone</p></li>\r\n<li><p><strong>我从未让你们骄傲，你们却待我如宝。</strong> —— Az殇芯的chx</p></li>\r\n<li><p><strong>错的不是我，而是这个世界！</strong> —— 东京喰种</p></li>\r\n<li><p><strong>你驻足于春色中，于那独一无二的春色之中。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>和她相遇的瞬间，我的人生就改变了。所见所闻所感，目之所及全都开始变得多姿多彩起来。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>やり遂げたよ、最後まで。</strong> —— ラブライブ</p></li>\r\n<li><p><strong>要把所有的夜归还给星河，把所有的春光归还给疏疏篱落，把所有的慵慵沉迷与不前，归还给过去的我。</strong> —— 德卡先生的信箱</p></li>\r\n<li><p><strong>总有一天，我要撕碎这片虚伪的星空。</strong> —— 黑之契约者</p></li>\r\n<li><p><strong>那么，开始实验吧！</strong> —— 假面骑士Build</p></li>\r\n<li><p><strong>我看到这个世界的恶意，我们正在接受考验。</strong> —— 机动战士高达00</p></li>\r\n<li><p><strong>喜欢上一个人就是变得束手无策。</strong> —— 悠久之翼2</p></li>\r\n<li><p><strong>所谓人，无论是谁到了最后，都会形单影只。</strong> —— 悠久之翼2</p></li>\r\n<li><p><strong>长大了，才能体会什么是责任！</strong> —— 家庭</p></li>\r\n<li><p><strong>你是否会等待着我?我还想变的更加完美...</strong> —— LoveLive!Sunshine!</p></li>\r\n<li><p><strong>我只是想要得到「我没有逃避」的记忆吧。</strong> —— 三月的狮子</p></li>\r\n<li><p><strong>人生海海，敢死不叫勇气，活着才需要勇气。</strong> —— 麦家-人生海海</p></li>\r\n<li><p><strong>我无知又愚蠢，世界残酷又疯狂。</strong> —— 进击的巨人</p></li>\r\n<li><p><strong>我的面包！</strong> —— Clannad</p></li>\r\n<li><p><strong>是我，是我先，明明都是我先来的，接吻也好，拥抱也好，还是喜欢上那家伙也好。</strong> —— 白色相簿2</p></li>\r\n<li><p><strong>一旦醉心于狩猎，不到最后关头不会发现自己才是猎物。</strong> —— 来自新世界</p></li>\r\n<li><p><strong>人类这种生物，不管有过多少不得不伴着泪水吞咽的教训，只要过了咽喉，所有教训便又会被彻底遗忘。</strong> —— 来自新世界</p></li>\r\n<li><p><strong>即使我变弱了，也不代表你变强了。</strong> —— 魔法禁书目录</p></li>\r\n<li><p><strong>喜欢和不讨厌之间可是有着数亿光年的距离的。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>痛苦着痛苦着，满脑子只能想我的事。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>我拼命地挣扎，我对活下去的执著，都是因为你，是你让我，对和你一起度过的那段时光无比留恋。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>站起来！站起来啊！你是我的腿吧！站起来啊！</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>我不甘心，明明你为我做了那么多，我却什么都不能为你做。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>等着我，有马，不对，别回头，向前进，你要一直向前，我一定会追上来的。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>就此分别吧！请继续向前，迎接樱花漫溢的四月，但请不要忘记我，友人A……</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>那里还有——医生的房间啊！</strong> —— Fate / Grand Order</p></li>\r\n<li><p><strong>因为我...我希望不做任何的努力，让对方喜欢上最真实的我。</strong> —— 女高中生的无所事事</p></li>\r\n<li><p><strong>没有一封信是不必被送达的。</strong> —— 紫罗兰永恒花园</p></li>\r\n<li><p><strong>我觉得，不改变也很好。</strong> —— 来自风平浪静的明天</p></li>\r\n<li><p><strong>痴情的妖怪啊,请再等一世吧。</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>你从我的手中展翅高飞，我深受打击。在这世上的某处，再次寻找崭新的你的影子，那就是我们之间的美好结局。</strong> —— 骚动时节的少女们啊</p></li>\r\n<li><p><strong>一旦你尝试过天空的味道，你就会永远向上仰望</strong> —— 列奥那多·达芬奇</p></li>\r\n<li><p><strong>人间不温柔</strong> —— 李诞</p></li>\r\n<li><p><strong>知道和感觉到是两码事。</strong> —— 《看见》</p></li>\r\n<li><p><strong>只要学不死，就往死里学。</strong> —— 网络热语</p></li>\r\n<li><p><strong>我是奥尔加·伊滋卡，几颗子弹不要紧的！</strong> —— 机动战士高达：铁血的孤儿</p></li>\r\n<li><p><strong>死亡的尽头，没有神</strong> —— 机动战士高达00:先驱者的觉醒</p></li>\r\n<li><p><strong>只要能和大家一起唱歌，大概就算毕业以后我们分开了，只要听见这首歌就能回想起现在。</strong> —— TARI TARI</p></li>\r\n<li><p><strong>我没能说出口，不管是那句「我走了」，还是那句「对不起」，或者那句「谢谢」...</strong> —— TARI TARI</p></li>\r\n<li><p><strong>现世为梦，夜梦为真。</strong> —— 《xxxholic》</p></li>\r\n<li><p><strong>隐约雷鸣阴霾天空即使风无雨我亦留此地</strong> —— 言叶之庭</p></li>\r\n<li><p><strong>今天不想做，所以才要做</strong> —— 春上村树</p></li>\r\n<li><p><strong>嗯，明白。我们是天人的Gundam Meister</strong> —— 机动战士高达00</p></li>\r\n<li><p><strong>不动身的话就永远无法追寻，哪怕是休息也不会就此停下。</strong> —— Aqours</p></li>\r\n<li><p><strong>朝着下一道光芒横渡大海吧！</strong> —— Aqours</p></li>\r\n<li><p><strong>这个世界啊，很美丽的，很广大的，很辽阔的！</strong> —— Darling in the FRANXX</p></li>\r\n<li><p><strong>我对Darling啊，最喜欢了。我们从今以后，都要在一起哦。</strong> —— Darling in the FRANXX</p></li>\r\n<li><p><strong>为了传达不到的思念而苦恼，只会感到痛不欲生。</strong> —— WHITE FIRST LOVE</p></li>\r\n<li><p><strong>千军万马滚滚来，不知何人留情怀！</strong> —— Other</p></li>\r\n<li><p><strong>用决斗......给大家......带来笑容......</strong> —— 游戏王<A-RCV></p></li>\r\n<li><p><strong>别人的看法都是狗屁，你是谁只有你自己说了才算，这是爹教我的道理。</strong> —— 哪吒之魔童降世</p></li>\r\n<li><p><strong>或许前路永夜，即便如此我也要前进，因为星光即使微弱也会为我照亮前路。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>这个世上没有无用的齿轮，也只有齿轮本身能决定自己的用途。</strong> —— 嫌疑人x的献身</p></li>\r\n<li><p><strong>光就是羁绊之力，它会再度被某人继承，散发出耀眼的光。</strong> —— 奈克瑟斯奥特曼</p></li>\r\n<li><p><strong>人们渴望像鸟儿一样自由自在地飞翔，可他们并没有想过，鸟儿也并不自由，它们之所以飞翔，是为了生存。</strong> —— 奈克瑟斯奥特曼</p></li>\r\n<li><p><strong>记忆是不会消失的，只是一时想不起来了而已。</strong> —— 千与千寻</p></li>\r\n<li><p><strong>我不借助别人的力量就没办法跟仰慕的人聊天吗？</strong> —— 女高中生的虚度日常</p></li>\r\n<li><p><strong>强韧，无敌，最强！玉碎，粉碎，大喝彩！</strong> —— 海马濑人</p></li>\r\n<li><p><strong>人的好意是沉重的。</strong> —— 黑神</p></li>\r\n<li><p><strong>我们所度过的每个平凡的日常，也许就是连续发生的奇迹。</strong> —— 日常</p></li>\r\n<li><p><strong>我最喜欢三月的风，四月的雨，不落的太阳和最好的你</strong> —— 闺密</p></li>\r\n<li><p><strong>在末日中，人们总想寻找希望，但要真有希望的话，那还叫希望吗？</strong> —— 灵笼</p></li>\r\n<li><p><strong>可爱即是正义。</strong> —— 游戏人生</p></li>\r\n<li><p><strong>在末日中，人们总想寻找希望，但要真有希望的话，那还叫末日吗？</strong> —— 灵笼</p></li>\r\n<li><p><strong>只要抗争下去就能带来奇迹，这是恐怖分子的教诲，你给我记清楚了。</strong> —— 未来日记</p></li>\r\n<li><p><strong>相信奇迹的人本身就和奇迹一样了不起啊</strong> —— 星游记</p></li>\r\n<li><p><strong>人类的赞歌就是勇气的赞歌。</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>你们腌太监也不会动人脑子啊！</strong> —— 铁心搏奕</p></li>\r\n<li><p><strong>这是你所不能理解的，人类感情的极致，比希望更热烈，比绝望更深邃——爱！</strong> —— 魔法少女小圆新篇</p></li>\r\n<li><p><strong>我不要你觉得，我要我觉得。</strong> —— 中餐厅</p></li>\r\n<li><p><strong>神啊，求求你。已经足够了。已经没事了。我们都会熬过去的。</strong> —— 天气之子</p></li>\r\n<li><p><strong>自古以来，天空上就是另一个世界。</strong> —— 天气之子</p></li>\r\n<li><p><strong>在东京的天空上，我们决定性的改变了世界的模样。</strong> —— 天气之子</p></li>\r\n<li><p><strong>向天空拼命伸出的双手，发射那么巨大的东西，只是为了寻找超出想象的彼岸所存在的东西。</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>你是否会等待着我？我会变得更加完美！</strong> —— Aqours</p></li>\r\n<li><p><strong>さあ，Games始めましょうか</strong> —— 游戏人生</p></li>\r\n<li><p><strong>被一个自己不感兴趣的人示好，你不觉得没有比这更恶心的事吗</strong> —— 人渣的本愿</p></li>\r\n<li><p><strong>世界上所有的不利状况都是因为当事者的能力不足</strong> —— 东京喰种</p></li>\r\n<li><p><strong>在虚构现实里寻求现实感的人才有问题</strong> —— 凉宫春日的忧郁</p></li>\r\n<li><p><strong>Ex - ploooosion !</strong> —— 为美好的世界献上祝福</p></li>\r\n<li><p><strong>是我，是我先，明明都是我先来的……接吻也好，拥抱也好，还是喜欢上那家伙也好</strong> —— 白色相簿2</p></li>\r\n<li><p><strong>没有一个世界会比活在这个世界痛苦</strong> —— 黑岩射手</p></li>\r\n<li><p><strong>如果把那一端的敌人全部杀掉的话，我们就能自由了吗？</strong> —— 进击的巨人</p></li>\r\n<li><p><strong>今后我们来度过满是愉快之事的人生吧</strong> —— Charlotte</p></li>\r\n<li><p><strong>如果一切都是镜花水月，那就让这万物走向终结。如果一切皆是命中注定，那就让这世界消失殆尽。</strong> —— 失落的歌谣</p></li>\r\n<li><p><strong>能够用自己喜欢的工作维持生活是件很幸福的事情</strong> —— 白箱</p></li>\r\n<li><p><strong>有的鱼是永远关不住的，因为他们属于天空。</strong> —— 大鱼海棠</p></li>\r\n<li><p><strong>我会化作人间的风雨陪在你的身边</strong> —— 大鱼海棠</p></li>\r\n<li><p><strong>你以为你接受的是谁的爱，是一个天神的爱！他背叛所有神灵去爱你，为你忍受一切痛苦。</strong> —— 大鱼海棠</p></li>\r\n<li><p><strong>深藏不露是一种卓越的才能</strong> —— 欢迎来到实力至上主义的教室</p></li>\r\n<li><p><strong>这样叹气的话，幸福会像四处逃散的小蜘蛛一样溜走的。</strong> —— 辉夜大小姐想让我告白</p></li>\r\n<li><p><strong>世上所以不公平之事是由于当事人能力不足所致。</strong> —— 金木研</p></li>\r\n<li><p><strong>雨滴降落的速度是每秒十米，我该用怎么样的速度，才能将你挽留？</strong> —— 言叶之庭</p></li>\r\n<li><p><strong>樱花落下的速度是每秒五厘米， 我该用怎么样的速度，才能与你相遇。</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>如果当时我们说了再见，后来是不是就可以再见</strong> —— 昨日青空</p></li>\r\n<li><p><strong>音无结弦之日 跃动天使之心 立于浮华之世 奏响天籁之音</strong> —— Angel Beats!</p></li>\r\n<li><p><strong>温柔正确的人总是难以生存，因为这世界既不温柔，也不正确。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>我一直注视着你，似近，似远。但你永远，看不见我……</strong> —— 来自风平浪静的明天</p></li>\r\n<li><p><strong>与其被人扯碎校服，撕破心灵，倒不如直接剁碎自己的躯体，来得痛快。</strong> —— 黑岩射手</p></li>\r\n<li><p><strong>目标是以科学的力量凌驾于超能力之上，为了伯伦希尔的荣耀。</strong> —— 小绿和小蓝</p></li>\r\n<li><p><strong>这东西是越嚼越有味哦~</strong> —— BanG Dream! 2nd Season</p></li>\r\n<li><p><strong>即使再也没有晴天也没有关系.</strong> —— 天气之子</p></li>\r\n<li><p><strong>我一直以为最糟糕的情况是你离开我，其实最令我难过的，是你不快乐。</strong> —— 精灵旅社</p></li>\r\n<li><p><strong>キラキラ☆ドキドキ</strong> —— 戸山香澄</p></li>\r\n<li><p><strong>我下定决心要当海贼王，就算因此而战死，那也无所谓。</strong> —— 海贼王</p></li>\r\n<li><p><strong>规则是用来被打破的。</strong> —— 机械公敌</p></li>\r\n<li><p><strong>木叶飞舞之处，火亦生生不息</strong> —— 火影忍者</p></li>\r\n<li><p><strong>当我拔出第二把剑时，就是为了我所爱之人</strong> —— 刀剑神域</p></li>\r\n<li><p><strong>你指尖跃动的电光，是我此生不变的信仰，唯我超电磁炮永世长存。</strong> —— 某科学的超电磁炮</p></li>\r\n<li><p><strong>遇事不决，量子力学。</strong> —— 青春期猪头少年不会梦到兔女郎学姐</p></li>\r\n<li><p><strong>我们终会相遇相知，在那悠远的苍穹。</strong> —— 缘之空</p></li>\r\n<li><p><strong>Star Burst Stream!</strong> —— 刀剑神域</p></li>\r\n<li><p><strong>虽然想做一团火，却成了一块透视苦难的冰</strong> —— 卡夫卡研究</p></li>\r\n<li><p><strong>生命可以随心所欲，但不能随波逐流</strong> —— 猫的报恩</p></li>\r\n<li><p><strong>我们所度过的每个平凡的日常，也许就是连续发生的奇迹</strong> —— 日常</p></li>\r\n<li><p><strong>加油</strong> —— 自编</p></li>\r\n<li><p><strong>夕阳真是耀眼无比啊。</strong> —— 女高中生的虚度日常</p></li>\r\n<li><p><strong>今天我就要带她走，我看谁敢拦我</strong> —— 刺客伍六七</p></li>\r\n<li><p><strong>这里有你,他现在只有我了。</strong> —— 罗小黑战记</p></li>\r\n<li><p><strong>星空之所以美丽，就是因为在无限的宇宙中，不管黑暗如何蔓延，都有星星的光芒去把它照亮。世界也是这样，有绝望的地方，就会有希望产生。</strong> —— 星游记</p></li>\r\n<li><p><strong>我来做最不想做的事情了。</strong> —— 22/7</p></li>\r\n<li><p><strong>你只见树，未见森林</strong> —— 火影忍者</p></li>\r\n<li><p><strong>你就赌我会死吧，因为你逢赌必输。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>奶奶说过，男人有两件事不能做——绝不能让女孩子流泪和浪费食物。</strong> —— 假面骑士Kabuto</p></li>\r\n<li><p><strong>正因为这样，我才决定任何时候都要尽全力享受人生，这样的话，无论什么时候死去，都是最幸福的一生了吧</strong> —— 恋爱随意链接</p></li>\r\n<li><p><strong>正因为有了所有的过去，才成就了现在的我。否定自己所走过的路途，就意味着否定现在的自己。</strong> —— 恋爱随意链接</p></li>\r\n<li><p><strong>每个人每一天的价值都是完全相等的，无论做什么，都不会改变我今天活着的价值。</strong> —— 我想吃掉你的胰脏</p></li>\r\n<li><p><strong>我这个人呀，能过着这样平凡普通的日子就很开心了。</strong> —— 我想吃掉你的胰脏</p></li>\r\n<li><p><strong>每个人能走到现在，都是自己选择的结果。</strong> —— 我想吃掉你的胰脏</p></li>\r\n<li><p><strong>都说樱花飘落时让人伤感，而我看到樱花盛开也觉得伤感，因为我会计算，我还能再看几次樱花盛开呢。</strong> —— 我想吃掉你的胰脏</p></li>\r\n<li><p><strong>只要人活在这世上就一定是有意义的，怎么活是自己选的。</strong> —— 我想吃掉你的胰脏</p></li>\r\n<li><p><strong>人生，一半是现实，一半是梦想。一念花开，一念花落。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>我希望，我能完全信任你，我还从来没有能这样信任过谁。我也希望，你将给我最大的支持。</strong> —— 安妮日记</p></li>\r\n<li><p><strong>愿你有一天，能和你最重要的人重逢。</strong> —— 可塑性记忆</p></li>\r\n<li><p><strong>告诉我，神会流血吗？——神不会，但你会。</strong> —— 烦人的村民</p></li>\r\n<li><p><strong>さあ、始めようか。(那么，游戏开始吧。)</strong> —— No Game No Life</p></li>\r\n<li><p><strong>我讨厌温柔的女孩子，温柔的女孩子其实对所有人都温柔，而我却会误以为只对自己温柔，然后沾沾自喜得意忘形，最后弄得不欢而散，双方都受到伤害，所以我才讨厌温柔的女孩子。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>无知而又纯洁的岁月。是任何人都曾拥有的。世界上没有一成不变的事务。所以只要以其他方式找到自己的快乐就行了。</strong> —— CLANNAD</p></li>\r\n<li><p><strong>粉色蓝宝石的宝石语是「献给弱者的正义」。</strong> —— 宝石商人理查德的谜鉴定</p></li>\r\n<li><p><strong>喂，前面可是地狱啊！おい、この先は地狱だぜ！</strong> —— Fate/stay night</p></li>\r\n<li><p><strong>Steel is my body, and fire is my blood.</strong> —— Fate/stay night</p></li>\r\n<li><p><strong>游龙当归海，海不迎我自来也。</strong> —— 火影鸣人</p></li>\r\n<li><p><strong>孩子，我愿意为你而前行。</strong> —— 灵笼</p></li>\r\n<li><p><strong>世界上一切不利状况，都是因为当事人的能力不足。</strong> —— 东京食尸鬼</p></li>\r\n<li><p><strong>隐约雷鸣，阴霾天空，即使天无雨，我亦留此地。</strong> —— 言叶之庭</p></li>\r\n<li><p><strong>没有未来的未来不是我想要的未来。</strong> —— 境界的彼方</p></li>\r\n<li><p><strong>只要怀着理想而行动，就算结果不尽如人意也没有关系。但是如果失去了理想，那就真的一无所有了，连自己珍视的人都保护不了。</strong> —— 境界的彼方</p></li>\r\n<li><p><strong>我喜欢你，比这个世界上其他任何人都喜欢你，我永远都会喜欢你的。只有我的这份心情是不会输给任何人的，即使我的这个身体毁灭了、从世界上消失了，来世我肯定还是会喜欢上你的。</strong> —— 境界的彼方</p></li>\r\n<li><p><strong>愿有朝一日与你见面还能释放温暖拥你入怀。</strong> —— 境界的彼方</p></li>\r\n<li><p><strong>已经没什么好害怕了。</strong> —— 魔法少女小圆</p></li>\r\n<li><p><strong>声起立华乐独奏，曲末音无心结弦。</strong> —— Angel Beats!</p></li>\r\n<li><p><strong>总在不停寻觅你的踪影，无论十字路口抑或梦境之中，明知你不在，却依然不停地找寻。</strong> —— 秒速5厘米</p></li>\r\n<li><p><strong>只要引导着二人的两把命运之剑还在身边，我们就绝不会失败。</strong> —— 刀剑神域</p></li>\r\n<li><p><strong>这虽然这是游戏，但可不是闹着玩的。</strong> —— 刀剑神域</p></li>\r\n<li><p><strong>花开得太好，所以摇摇欲坠；这一切的事情，老得这样快；世间一直熙攘着。</strong> —— 素年锦时</p></li>\r\n<li><p><strong>人要意识到自己过得悲哀，需要很长时间；要意识到其实不必如此，则需要更久。</strong> —— 马男波杰克</p></li>\r\n<li><p><strong>从这里（太空）根本看不到什么国境线，只有地球。</strong> —— 星空清理者</p></li>\r\n<li><p><strong>你那无聊的幻想，就由我来打破！</strong> —— 魔法禁书目录</p></li>\r\n<li><p><strong>正义不是行使武力的理由，而是正相反——为了将动武的理由正当化，人们才会高喊正义。</strong> —— 末日时在做什么？有没有空？可以来拯救吗？</p></li>\r\n<li><p><strong>君子无争，含光无形，坐忘无心。</strong> —— 秦时明月</p></li>\r\n<li><p><strong>我在这里只学会一件事，那就是不到最后绝不轻言放弃。如果回到了现实世界，我一定会再度和桐人你相遇，然后重新喜欢上你。</strong> —— 刀剑神域</p></li>\r\n<li><p><strong>最近我很喜欢明天见这句话，因为只要许下约定，就能期待明天的到来。</strong> —— 结城友奈是勇者</p></li>\r\n<li><p><strong>就算没有意义，偶尔也会有好事发生。</strong> —— 终末少女旅行</p></li>\r\n<li><p><strong>你将不再是道具，而是成为人如其名的人。</strong> —— 紫罗兰的永恒花园</p></li>\r\n<li><p><strong>大家热爱的事物，擅长的事物都不同，都拥有自己的世界，一个人一个世界，这些互相连接的话，就会展开许多的可能性，广大、未知，就像是宇宙一样。</strong> —— 恋爱小行星</p></li>\r\n<li><p><strong>无论人生过得怎么样，都不要失去自己活着的意义，努力的去追逐心中的梦想，留下自己曾经在这个世界活过的痕迹，不要等到一切都失去了才追悔莫及。</strong> —— 天使的心跳</p></li>\r\n<li><p><strong>人生没有那么多预算，不要等到到死后世界叹息，珍惜眼前所有。相信每天都是新的开始，都充满希望.</strong> —— 天使的心跳</p></li>\r\n<li><p><strong>真真需要记住的不是立华奏，而是天使身体里跳动的那颗永不结弦之心。</strong> —— 天使的心跳</p></li>\r\n<li><p><strong>人总有一天会孤独一人，然后活在自己的回忆中。为了能笑着于孤独相依为命，我决定战斗下去，决定不会再以泪洗面。</strong> —— 天使的心跳</p></li>\r\n<li><p><strong>与绝望~和睦相处。</strong> —— 少女终末旅行</p></li>\r\n<li><p><strong>人类的赞歌是勇气的赞歌，人类的伟大是勇气的伟大！</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>孤独的人不会伤害别人，只会不断地伤害自己罢了。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>枷锁，自然规律，时光的流逝，名为身体的容器，名为心灵的自我。</strong> —— 四月一日灵异事件薄</p></li>\r\n<li><p><strong>没事没事，不同朋友擅长的事情也不同。</strong> —— 兽娘动物园</p></li>\r\n<li><p><strong>如果有人对我说抱有希望是错误的花，我会无数次回答“不是这样的”，无论什么时候都一定会这样撑下去。</strong> —— 魔法少女小圆</p></li>\r\n<li><p><strong>这么温暖的世界里有我，要感谢神明了。</strong> —— Comic Girls</p></li>\r\n<li><p><strong>Don't forget. Always,somewhere,someone is fighting for you. As long as you remember her,you are not alone.</strong> —— 魔法少女小圆</p></li>\r\n<li><p><strong>这就是人类感情的极致，比希望更炽热，比绝望更深邃的，爱哟！</strong> —— 魔法少女小圆</p></li>\r\n<li><p><strong>露珠落去花留着，花萎露珠未消去。奈何露已随风去，花间寻觅不见珠。</strong> —— 学园孤岛</p></li>\r\n<li><p><strong>波，高低起伏的东西；波，产生后开始扩散；波，自己无法抵抗的东西。</strong> —— 四月一日灵异事件薄</p></li>\r\n<li><p><strong>在這手心之中的，就是“心”啊。</strong> —— 死神</p></li>\r\n<li><p><strong>木叶飞舞之处，火亦生生不息。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>你以为我是谁？这是我埋下的因，我要亲手解决这一切。</strong> —— 某科学的超电磁炮</p></li>\r\n<li><p><strong>只要呼唤你的名字，我们的牵绊就永远不会消逝。</strong> —— 紫罗兰永恒花园外传：永远与自动手记人偶</p></li>\r\n<li><p><strong>我也许能再一次找到活着的目的，也许能再一次找到活着的意义，为了那些人，奉献出我的人生的话……</strong> —— Angelbeats</p></li>\r\n<li><p><strong>别低下头 排球是一门积极向上的运动！</strong> —— 排球少年</p></li>\r\n<li><p><strong>理解何为孤单，努力想得到爱的你，内心的悲伤是否稍微宣泄了呢？</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>自己不经意的一句话，触动了别人的心。</strong> —— 恋如雨止</p></li>\r\n<li><p><strong>游荡的孤高灵魂不需要羁绊之处。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>如果说现在的日子过得很穷困，那我就去喜欢上穷困。</strong> —— 隐瞒之事</p></li>\r\n<li><p><strong>人和人之间就像这风筝一样，拉的太紧就飞不远，放的太松又掉下来，而当它飞的很高很高你还拽着不放，它就有可能会断掉，再也回不来了。</strong> —— 灵契</p></li>\r\n<li><p><strong>一日为灵，终生为影，灵气共生，魂命无分，阴阳调和，万物皆宁。</strong> —— 灵契</p></li>\r\n<li><p><strong>端木熙，别忘了，你是我的祭司，谁也别来跟我争，他神龙章轩不可以，神也不行。</strong> —— 灵契</p></li>\r\n<li><p><strong>从今往后，你不能斩的人我来斩，你不能伤的人我来杀，既然你要保护这个世界，那我便保护你，这就是我的信念！</strong> —— 灵契</p></li>\r\n<li><p><strong>千载流年一如梦，月落山河一世倾。</strong> —— 灵契</p></li>\r\n<li><p><strong>不可结缘，徒留寂寞……</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>一代锤子一代皇，代代锤子教做人！</strong> —— 斗罗大陆</p></li>\r\n<li><p><strong>花早晚会凋谢，记忆最终也会消散。</strong> —— 镇魂街</p></li>\r\n<li><p><strong>所谓首领，只不过是被势力绑架上制高点的走狗而已。而且，都是身不由己的走狗。</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>无论是人类还是妖怪，只要内心希望他人接触，那么就是相同的存在；会因独处而感到寂寞，也会害怕踏出第一步。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>未来始终掌握在自己手中，从中滑落的，我们称之为过去。</strong> —— 末日时在做什么？有没有空？可以来拯救吗？</p></li>\r\n<li><p><strong>我不努力，就见不到你了啊。</strong> —— 昨日之歌</p></li>\r\n<li><p><strong>无可取代的东西要到失去后才知道珍惜呢。</strong> —— 干物妹小埋</p></li>\r\n<li><p><strong>没有什么背叛，只不过是忠诚过期了而已。</strong> —— 凹凸世界</p></li>\r\n<li><p><strong>Ko no Dio da!</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>我们不是大人，而是同学吧。</strong> —— 恋如雨止</p></li>\r\n<li><p><strong>今天的我，凌驾于阿修罗之上！</strong> —— 机动战士高达00</p></li>\r\n<li><p><strong>Exia，驱逐目标！</strong> —— 机动战士高达00</p></li>\r\n<li><p><strong>花无凋零之时，爱无传达之期，爱情亘古不变，紫罗兰永世长存。</strong> —— 紫罗兰永恒花园</p></li>\r\n<li><p><strong>相比昨日明日，今天更适合开始。</strong> —— Comic Girls</p></li>\r\n<li><p><strong>呐~~凯利，你想成为怎样的大人。</strong> —— Fate/Zero</p></li>\r\n<li><p><strong>当敌人变成战友多半是为了生存，而战友变成敌人多半是为了金钱。</strong> —— 端脑</p></li>\r\n<li><p><strong>正因为听不见和看不到，所以风子才会做这样的事情。</strong> —— Clannad</p></li>\r\n<li><p><strong>我们开始一起攀登，这长长的，长长的坡道。</strong> —— Clannad</p></li>\r\n<li><p><strong>无知而又纯洁的岁月是任何人都曾拥有的，世界上没有一成不变的事物，所以只要以其他方式找到自己的快乐就行了。</strong> —— Clannad</p></li>\r\n<li><p><strong>前天是小兔子，昨天是小鹿，今天是你。</strong> —— Clannad</p></li>\r\n<li><p><strong>能哭的地方只有厕所和爸爸的怀里。</strong> —— Clannad</p></li>\r\n<li><p><strong>美好的事情，现在才开始呐。</strong> —— Clannad</p></li>\r\n<li><p><strong>什么叫忍者？学会忍耐的人就叫忍者。</strong> —— 哔哩哔哩</p></li>\r\n</ul>\r\n","site":{"data":{}},"length":35643,"excerpt":"","more":"<p>尝试 <code>Ctrl + F</code> 一下您看过的动漫吧。</p>\r\n<ul>\r\n<li><p><strong>与众不同的生活方式很累人呢，因为找不到借口。</strong> —— 幸运星</p></li>\r\n<li><p><strong>面对就好，去经历就好。</strong> —— 花伞菌</p></li>\r\n<li><p><strong>将愿望倾入不愿忘却的回忆中……</strong> —— ef-a tale of memories</p></li>\r\n<li><p><strong>美好的人眼里映出的世界也是美好的。</strong> —— ARIA</p></li>\r\n<li><p><strong>看似美好的东西，往往藏着陷阱。</strong> —— 只有神知道的世界</p></li>\r\n<li><p><strong>天空是连着的，如果我们也能各自发光的话，无论距离有多远，都能看到彼此努力的身影。</strong> —— 龙虎斗</p></li>\r\n<li><p><strong>恋ではなく、爱でもなく、もっとずっと 深く重い。</strong> —— sweet pool</p></li>\r\n<li><p><strong>花开花落，再灿烂的星光也会消失。</strong> —— 圣斗士星矢</p></li>\r\n<li><p><strong>挡着在我们面前的是巨大庞然的人生，阻隔在我们中间的是广阔无际的时间，对于他们，我们无能为力……</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>我是一个经常笑的人，可我不是经常开心的人。</strong> —— 未闻花名</p></li>\r\n<li><p><strong>努力是不会背叛自己的，虽然梦想有时会背叛自己。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>人经历风浪是会变得更强，可是船不同，日积月累的只有伤痛。</strong> —— 海贼王</p></li>\r\n<li><p><strong>真相只有一个！</strong> —— 柯南</p></li>\r\n<li><p><strong>用你的笑容去改变这个世界，别让这个世界改变了你的笑容。</strong> —— 网络</p></li>\r\n<li><p><strong>我有在反省，但我不后悔。</strong> —— 物语系列</p></li>\r\n<li><p><strong>我没有梦想，但是我能保护！</strong> —— 假面骑士555</p></li>\r\n<li><p><strong>或许只需一滴露水，便能守护这绽放的花朵。</strong> —— 反叛的鲁鲁修</p></li>\r\n<li><p><strong>我不会让任何人看到我软弱的一面。</strong> —— 桔梗</p></li>\r\n<li><p><strong>当你想做一件事，却无能为力的时候，是最痛苦的。</strong> —— 高达SEED</p></li>\r\n<li><p><strong>我的腿让我停下，可是心却不允许我那么做。</strong> —— 钢之炼金术师</p></li>\r\n<li><p><strong>我手中的魔法，是守护挚爱的力量，是坚定这个信念所必须的力量，我一定会拯救你的，无论在何时、何地。</strong> —— 魔法少女奈叶</p></li>\r\n<li><p><strong>比任何人都要了解自己，比任何人都要关爱自己。喜欢上这样的人，并没有什么奇怪的呢。</strong> —— 初音岛</p></li>\r\n<li><p><strong>像平常的你一样引发奇迹吧-</strong> —— 魔法少女小圆</p></li>\r\n<li><p><strong>既不回头，何必不忘；既然无缘，何须誓言；今日种种，似水无痕；明夕何夕，君已陌路。</strong> —— 仙剑奇侠传</p></li>\r\n<li><p><strong>可是就算我们通一千次短信，我们各自的心，大概也只会相互靠近一厘米吧。</strong> —— 秒速5厘米</p></li>\r\n<li><p><strong>所谓的言语，只有当对方听进去了才开始有意义啊。</strong> —— 少年同盟</p></li>\r\n<li><p><strong>如果还有来生 ，我无论如何都要来到你身边，我已经没有了其他想要追求的东西，因为没有比你更重要的了。</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>世界上没有一个人能代替另一个人。</strong> —— 人型电脑天使心</p></li>\r\n<li><p><strong>其实，恋爱这种东西，当你看上人家的那一刹那就已经失败了。</strong> —— 秋之回忆</p></li>\r\n<li><p><strong>隐约雷鸣，阴霾天空，即使天无雨，我亦留此地。</strong> —— 言叶之庭</p></li>\r\n<li><p><strong>就是因为你不好，才要留在你身边，给你幸福。</strong> —— 哈尔的移动城堡</p></li>\r\n<li><p><strong>微风摇曳着窗帘，夕阳斜射入教室，在那里鼓起勇气告白的少年。即使现在也能清晰地回想起她的声音「当朋友，不行吗？」</strong> —— 果然我的青春恋爱喜剧搞错了</p></li>\r\n<li><p><strong>少罗嗦，你还不如虫子呢！</strong> —— 迷糊餐厅</p></li>\r\n<li><p><strong>别人恋爱不成功，你连暗恋都不成功！</strong> —— 灌篮高手</p></li>\r\n<li><p><strong>就算只有六十亿分之一的机会，我们还是会邂逅。</strong> —— Angel Beats!</p></li>\r\n<li><p><strong>魔装少女就是本少爷！</strong> —— 这是僵尸吗？</p></li>\r\n<li><p><strong>无法飞翔的翅膀也是有意义的，因为它是曾经翱翔于天空所留下的珍贵回忆。</strong> —— AIR</p></li>\r\n<li><p><strong>勇气，就是即便害怕也会去做。</strong> —— 原创</p></li>\r\n<li><p><strong>如果我不会飞，那我就只是一只普通的猪。</strong> —— 红猪</p></li>\r\n<li><p><strong>要相信同伴，拯救同伴。</strong> —— 绯弹的亚里亚</p></li>\r\n<li><p><strong>男人许下的诺言就一定要遵守。</strong> —— 海贼王</p></li>\r\n<li><p><strong>那是，未满45秒的邂逅。</strong> —— EF</p></li>\r\n<li><p><strong>只要有想见面的人，自己就不再是孤单一人。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>如果聚集负的感情，世界就会陷入负的洪流；反之聚集正的感情，世界就会循着正道而行。</strong> —— 钢之炼金术师</p></li>\r\n<li><p><strong>廉价的自尊、粗劣的傲气，无论哪个后生小辈都很重视这些东西。</strong> —— 狼与香辛料</p></li>\r\n<li><p><strong>人不能一个人活下去，不需要任何人的孤独和需要人但得不到的孤独是不一样的。</strong> —— 邻座的怪同学</p></li>\r\n<li><p><strong>一个人吃饭，太寂寞了。</strong> —— 无头骑士异闻录</p></li>\r\n<li><p><strong>欺骗世界，欺骗最初的你。</strong> —— Steins;Gate</p></li>\r\n<li><p><strong>(」?ω?)」うー！(／?ω?)／にゃー！</strong> —— 潜行吧奈亚子</p></li>\r\n<li><p><strong>世界上没有偶然，有的只是必然。</strong> —— XXXHolic</p></li>\r\n<li><p><strong>从小好女色的男人的想像力比不上狗。</strong> —— 寒蝉鸣泣之时</p></li>\r\n<li><p><strong>你愿意陪我走到地狱的底端吗？</strong> —— 魔法禁书目录</p></li>\r\n<li><p><strong>错的不是我， 错的是世界。</strong> —— School Day</p></li>\r\n<li><p><strong>和哥哥的便当比起来夜空的薯片就像大便一样！只会给我大便的大便夜空是笨蛋～笨蛋～</strong> —— 我的朋友很少</p></li>\r\n<li><p><strong>即使如此，我也有我想保护的世界！</strong> —— 高达seed</p></li>\r\n<li><p><strong>我很好奇！</strong> —— 冰菓</p></li>\r\n<li><p><strong>仍是那么熟悉的味道，只是用墓土和骨灰作成的身体，已经不再有体温。</strong> —— 犬夜叉</p></li>\r\n<li><p><strong>我是要成为海贼王的男人！</strong> —— 海贼王</p></li>\r\n<li><p><strong>做不到的话，不过就是一死 。但是，赢了就能活下去，要是不战斗就赢不了。</strong> —— 进击的巨人</p></li>\r\n<li><p><strong>忘记本身就是一件不可能的事。</strong> —— 我们的存在</p></li>\r\n<li><p><strong>我们的夏天仍未结束。</strong> —— 王牌投手</p></li>\r\n<li><p><strong>雨，何时停？</strong> —— 秋之回忆</p></li>\r\n<li><p><strong>在走廊上跌倒会流鼻血，在人生中跌倒会流眼泪。</strong> —— 龙虎斗</p></li>\r\n<li><p><strong>有被杀的觉悟，才有资格开枪。</strong> —— 反叛的鲁路修</p></li>\r\n<li><p><strong>已经无法回到过去了。也不知道将来会是什么模样。</strong> —— 文学少女</p></li>\r\n<li><p><strong>不要哀求，学会争取；若是如此，终有所获。</strong> —— 交响诗篇</p></li>\r\n<li><p><strong>リア充死ね！</strong> —— 我的朋友很少</p></li>\r\n<li><p><strong>拿着刀并且可以让人们变得幸福的只有料理人。</strong> —— 假面骑士kabuto</p></li>\r\n<li><p><strong>我会跟她结婚，并不是因为她是计算机，而是因为她就是她。同样的，我会喜欢你，也是因为你就是你。</strong> —— 人型电脑天使心</p></li>\r\n<li><p><strong>越是试着忘记，越是记得深刻。</strong> —— 天空之城</p></li>\r\n<li><p><strong>喜欢上你，爱上你，真是太好了，谢谢。</strong> —— 龙虎斗</p></li>\r\n<li><p><strong>我对普通的人类没有兴趣，你们只要是有外星人、未来人、异世界人、超能力者， 就尽管来找我吧！以上！</strong> —— 凉宫春日的忧郁</p></li>\r\n<li><p><strong>既然如此，就再努力一次吧。别在这里愁眉不展，也不要再自欺欺人，重新来过！</strong> —— 某科学的超电磁炮</p></li>\r\n<li><p><strong>若隐若现才是艺术！</strong> —— 问题儿童来自异世界</p></li>\r\n<li><p><strong>我想要握紧的并不是匕首或是什么，只不过是他的掌心而已。</strong> —— 空之境界</p></li>\r\n<li><p><strong>下一次重逢，将是何年何月？天空必将见证。</strong> —— SOLA</p></li>\r\n<li><p><strong>就连一直都无容身之地的我……也不是可以任意舍弃的生命。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>所以，他们的祭典还没结束。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>比自己，比梦想更重要的东西永远都存在着...</strong> —— 钢之炼金术师</p></li>\r\n<li><p><strong>选择道路的时候怎么犹豫都没有关系，但决定之后就一定要坚持到底！</strong> —— 青之驱魔师</p></li>\r\n<li><p><strong>煩い！煩い！煩い！</strong> —— 灼眼的夏娜</p></li>\r\n<li><p><strong>重要的是无论我们选择哪条路，都要担负起选择的责任。</strong> —— 蜂蜜与四叶草</p></li>\r\n<li><p><strong>因为无法再见面，所以要笑着说再见。</strong> —— AIR</p></li>\r\n<li><p><strong>无论乌云有多浓厚，星星也一定还在，只是暂时看不到了而已。</strong> —— 电波女与青春男</p></li>\r\n<li><p><strong>如果我拥有如同小狗一样的尾巴的话，肯定会高兴得遮掩不住地摇来摇去吧。</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>在我年轻的时候，不知道什么是恐惧，可偏偏是你的温柔，让我害怕。</strong> —— 东京爱情故事</p></li>\r\n<li><p><strong>你不会死的，因为我会保护你.</strong> —— EVA</p></li>\r\n<li><p><strong>只是相谈就会开心起来，沉浸在温柔的眼神当中，竭尽全力的思念，悄悄地奉献。</strong> —— School Days</p></li>\r\n<li><p><strong>我们虽然距离很远很远，非常非常的远，但是思念或许真的可以穿越时间和距离。</strong> —— 星之声</p></li>\r\n<li><p><strong>梦想是否无聊并不是别人来决定的，不管是什么样的梦想，自己拼命努力去追寻才是最重要的。</strong> —— 守护甜心</p></li>\r\n<li><p><strong>胜而不灭，霸而不辱，这才是真正的征服。</strong> —— fate zero</p></li>\r\n<li><p><strong>我相信十年后的八月，我们还能再相遇。</strong> —— secret base ～君がくれたもの～</p></li>\r\n<li><p><strong>相信十年后的八月，我们还会相遇。</strong> —— 未闻花名</p></li>\r\n<li><p><strong>你的心可以属于耶稣，但你的屁股永远属于陆战队！</strong> —— 魔法少女陆战队</p></li>\r\n<li><p><strong>看到的感受到的永远都不会消失永远都不会忘记，与各种各样的相遇一同永存。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>我们走过风走过雨，就是没能走进彼此的内心。</strong> —— 自分</p></li>\r\n<li><p><strong>烦恼这东西，是只有活着的人，才有的特权哦。</strong> —— 我们的存在</p></li>\r\n<li><p><strong>当朋友是不需要什么资格的。</strong> —— 全职猎人</p></li>\r\n<li><p><strong>年华无多时，恋爱吧男子！</strong> —— 源君物语</p></li>\r\n<li><p><strong>求你，保护那孩子，消除灾厄，抹除祸事。哪怕??那是我自己……</strong> —— 食灵</p></li>\r\n<li><p><strong>如果你不能击败你的敌人，那么就加入他们。</strong> —— 加菲猫</p></li>\r\n<li><p><strong>我们都在命运之湖上荡舟划桨，波浪起伏着而我们无法逃脱孤航。但是假使我们迷失了方向，波浪将指引我们穿越另一天的曙光。</strong> —— 死神</p></li>\r\n<li><p><strong>我们所过的每个平凡的日常，也许就是连续发生的奇迹。</strong> —— 日常</p></li>\r\n<li><p><strong>最近困扰我的是小小的分别，总会带来一丝寂寞。短暂的相遇和分别那一分一秒的时间都让我想要无比珍惜。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>倘若只是为了驱赶心中的寂寞，找谁都可以的。</strong> —— 秒速5厘米</p></li>\r\n<li><p><strong>即使从梦中醒来，还会有回忆留下。</strong> —— AIR</p></li>\r\n<li><p><strong>能够原谅女人的，才是男人。</strong> —— 海贼王</p></li>\r\n<li><p><strong>我会继续等着你，就算是一万二千年。</strong> —— 创圣的大天使EVOL</p></li>\r\n<li><p><strong>不管看到什么样的过去，都请不要迷失自己，不管你变成什么样子，我都是你的同伴。</strong> —— angel beats</p></li>\r\n<li><p><strong>悲伤教会了我喜悦。</strong> —— 秋之回忆</p></li>\r\n<li><p><strong>我到底要以怎么样的速度生活才能与你再次相遇？</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>我的船上没有手下，只有伙伴。</strong> —— 海贼王</p></li>\r\n<li><p><strong>就是因为抱有不现实的理想，所以才总是做出如此极端的事情！</strong> —— 逆袭的夏亚</p></li>\r\n<li><p><strong>要是因为烦恼很痛苦，就选择了轻松的选项，将来一定会后悔。</strong> —— 樱花庄的宠物女孩</p></li>\r\n<li><p><strong>呐，知道么，樱花飘落的速度，是每秒五厘米哦~</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>知道活着的痛苦处的人就能对人温柔，这和软弱是不一样的。</strong> —— eva</p></li>\r\n<li><p><strong>比起悲伤来说，无法分享快乐这件事，要更加的寂寞吧。</strong> —— AIR</p></li>\r\n<li><p><strong>如果你执意追寻着我的幻影，总有一天会被真正的我打败。</strong> —— 棋魂</p></li>\r\n<li><p><strong>乔巴，一个男人，有时候是不能逃避战斗的，尤其是当伙伴的梦想被人嘲笑的时候。</strong> —— 海贼王</p></li>\r\n<li><p><strong>你的那双手呢，是为了紧紧抓住什么而存在的哦。</strong> —— 仰望半月的夜空</p></li>\r\n<li><p><strong>去死两次！</strong> —— 迷途猫</p></li>\r\n<li><p><strong>世界は恋に落ちている。</strong> —— 青春之旅OP（我的世界已坠入爱河）</p></li>\r\n<li><p><strong>自身不先改变的话，一切都不会改变。</strong> —— 银魂</p></li>\r\n<li><p><strong>就算是对我抱有敌意的人，也是被某个人深爱着而降生在这个世界上的。</strong> —— 罪恶王冠</p></li>\r\n<li><p><strong>人生最糟糕的事，一个是饿肚子，一个是孤独。</strong> —— 夏日大作战</p></li>\r\n<li><p><strong>我不是萝莉控，是妹控啊！</strong> —— 我的妹妹不可能那么可爱第二季</p></li>\r\n<li><p><strong>呐，我们好像是，被宇宙和地球拆散的恋人似的。</strong> —— 星之声</p></li>\r\n<li><p><strong>一天吐槽太多次的话，梗也是会用完的。</strong> —— 我的脑内恋爱选项</p></li>\r\n<li><p><strong>自己的感觉，不说出来，别人也不会懂，如果不懂，就应该互相沟通。</strong> —— 好想告诉你</p></li>\r\n<li><p><strong>心，可是很重的。</strong> —— 哈尔的移动城堡</p></li>\r\n<li><p><strong>不能逃避，不能逃避，不能逃避，不能逃避……</strong> —— EVA</p></li>\r\n<li><p><strong>以盐水作配菜，糖水做主食，就有种奢侈的感觉呢。</strong> —— 笨蛋测验召唤兽</p></li>\r\n<li><p><strong>就算鼻血流尽，也不能放弃妄想。</strong> —— 摇曳百合</p></li>\r\n<li><p><strong>爱，其实很简单，困难的是去接受它。</strong> —— 通灵王</p></li>\r\n<li><p><strong>我们不应该根据背负的罪孽来选择道路，而应在选择的道路上背负自己的罪孽。</strong> —— 空之境界</p></li>\r\n<li><p><strong>只要微笑就可以了。</strong> —— EVA</p></li>\r\n<li><p><strong>因为我喜欢你，喜欢得想吃掉你啊！</strong> —— 有顶天家族</p></li>\r\n<li><p><strong>求求你，不要对我这么温柔！</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>我觉得你很幸福，因为你可以选择爱我或不爱我，而我只能选择爱你或更爱你。</strong> —— School Days</p></li>\r\n<li><p><strong>失去的东西虽然拿不回来，但是，忘记的事情是可以想起来的。</strong> —— TOUCH</p></li>\r\n<li><p><strong>你还是这么冷漠啊。不过，仅此而已的话，我是不会泄气的。</strong> —— 银魂</p></li>\r\n<li><p><strong>我能够允许你逃避过去，不过至少从现在或者明天开始都不要再逃避。</strong> —— 无头骑士异闻录</p></li>\r\n<li><p><strong>正因为听不见和看不到，所以风子才会做这样的事情。</strong> —— clannad</p></li>\r\n<li><p><strong>什么都无所谓只想在你身边，什么都无所谓只想和你说话，什么都无所谓所以请你不要逃避。</strong> —— 好想告诉你</p></li>\r\n<li><p><strong>我并不羡慕别人的人生，这就是所谓幸福。</strong> —— 幸运星</p></li>\r\n<li><p><strong>人能够在心里郁积那么多的事情，而他们又会忘记那么多的事情，真是不可思议……</strong> —— 最终幻想</p></li>\r\n<li><p><strong>我要拼，装上假牙也要拼！</strong> —— 灌篮高手</p></li>\r\n<li><p><strong>人一生会遇到约2920万人，两个人相爱的概率是0.000049。所以你不爱我，我不怪你。</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>我的内心就和厕纸一样单纯！</strong> —— Little Busters!</p></li>\r\n<li><p><strong>我的眼睛，就是为了寻找你而存在的。</strong> —— H2O</p></li>\r\n<li><p><strong>烈焰中舞动的火花，将赐予邪恶异性交往以天罚。</strong> —— 潜行吧！奈亚子W</p></li>\r\n<li><p><strong>All for one，one for all.</strong> —— 海贼王</p></li>\r\n<li><p><strong>老是低着头，幸福可是会离你而去的喔。</strong> —— 我们的仙境</p></li>\r\n<li><p><strong>羁绊是那不可切断的深切联系。即使分离，心与心也紧紧的连在一起。</strong> —— 假面骑士kabuto</p></li>\r\n<li><p><strong>对不起，风太大，我没有听清楚……</strong> —— 东京巴比伦</p></li>\r\n<li><p><strong>你知道雪为什么是白色的吗？因为她忘记了本来的颜色。</strong> —— 反叛的鲁路修</p></li>\r\n<li><p><strong>人生在世何其痛苦，所以咖啡至少该甜一点。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>我想让自己强大起来，因为至少我已经有幸和想要保护的人相遇了。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>我只是做了我能做的事，没有时间想将来。</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>一天最大任务莫过于，好好睡觉，好好醒来。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>不相信人咬不到肚脐的，咬破肚脐去死如何？</strong> —— 海猫鸣泣之时</p></li>\r\n<li><p><strong>一直保持微笑是有诀窍的，那就是，在想哭的时候放声大哭。</strong> —— 天使领域</p></li>\r\n<li><p><strong>女人的武器不是眼泪，而是微笑。</strong> —— 凉宫春日的忧郁</p></li>\r\n<li><p><strong>十步做一死，千里不留行，事了拂衣去，深藏功与名~</strong> —— 侠客行</p></li>\r\n<li><p><strong>只要有你，我便无所不能。</strong> —— 进击的巨人</p></li>\r\n<li><p><strong>不相信自己的人，连努力的价值都没有。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>我只对现实世界绝望过，却未对自己绝望过！</strong> —— 只有神知道的世界</p></li>\r\n<li><p><strong>虚伪的眼泪，会伤害别人，虚伪的笑容，会伤害自己。</strong> —— 反叛的鲁鲁修</p></li>\r\n<li><p><strong>我除了投三分，就什么都没有了……</strong> —— 灌篮高手</p></li>\r\n<li><p>**(?_?)** —— 进击的巨人</p></li>\r\n<li><p><strong>我在人生的道路上迷失了。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>历史虽然会一再重演，但人类却无法回到过去。</strong> —— 海贼王</p></li>\r\n<li><p><strong>观察铅笔和橡皮，哪个是攻哪个是受，请写出它们晚上的对话。</strong> —— 学生会的一己之见</p></li>\r\n<li><p><strong>龙儿是我的，谁都不准碰！</strong> —— 龙虎斗</p></li>\r\n<li><p><strong>贫乳是社会地位的象征。是具有稀有价值的！</strong> —— 幸运星</p></li>\r\n<li><p><strong>想要试着去相互接近，但最后还是无法敞开心扉，结果就是擦肩而过……</strong> —— 文学少女</p></li>\r\n<li><p><strong>扎古不论怎么化妆都不可能变成高达的。</strong> —— 银魂</p></li>\r\n<li><p><strong>我在未来等你。</strong> —— 穿越时空的少女</p></li>\r\n<li><p><strong>一般来说，时间会把悲伤冲淡，可是在人的生命中，会有那么一两个特殊的存在，他们的逝去，你永远也不会习惯。</strong> —— 冥王神话</p></li>\r\n<li><p><strong>懂得认输是非常重要的，不尝到失败的不甘，也就不会明白跌倒后怎么爬起来，更不可能再向前迈进。</strong> —— 笨蛋测验召唤兽</p></li>\r\n<li><p><strong>要改变别人的心真是件很难办的事，不过改变自己要容易一点。</strong> —— XXXHolic</p></li>\r\n<li><p><strong>我喜欢你们！超喜欢的！大家和我交往吧！绝对会让你们幸福的！</strong> —— 学生会的一己之见</p></li>\r\n<li><p><strong>美丽的不是这个世界，而是看世界的你的眼神。</strong> —— 吸血鬼骑士</p></li>\r\n<li><p><strong>世界这么大，人生这么长，总会有那么一个人，让你想要温柔的对待。</strong> —— 哈尔的移动城堡</p></li>\r\n<li><p><strong>成功率不到2%，那剩下的用勇气来补足吧！</strong> —— 勇者王</p></li>\r\n<li><p><strong>我一直都在你身边 ，一直都在。</strong> —— CLANNAD</p></li>\r\n<li><p><strong>重要的不是你做了多少事，而是你放了多少心思进去。</strong> —— 凉宫春日的忧郁</p></li>\r\n<li><p><strong>哭泣并不能改变任何事情。</strong> —— 推理之绊</p></li>\r\n<li><p><strong>代表月亮消灭你！</strong> —— 美少女战士</p></li>\r\n<li><p><strong>不要，我现在暂时留在他身边，直到那转瞬即逝的日子到来。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>就算是自私……我也希望那些人能够永远都有笑容……</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>我们开始一起攀登，这长长的，长长的坡道。</strong> —— Clannad</p></li>\r\n<li><p><strong>应该可以了吧，我已经很努力了，应该可以抵达终点了……</strong> —— AIR</p></li>\r\n<li><p><strong>离别并不痛苦，因为我们都微笑着。</strong> —— 青之驱魔师</p></li>\r\n<li><p><strong>只要能努力，就应当去努力；只要还能前进，就要向前走去。</strong> —— CLANNAD</p></li>\r\n<li><p><strong>邂逅本身，就是一种奇迹啊。</strong> —— 游魂</p></li>\r\n<li><p><strong>与其被自己的本性牵着走而痛苦，倒不如试着改变自己。</strong> —— 银魂</p></li>\r\n<li><p><strong>爱迪生说过：“要把BOSS打倒就要准备足够的等级。”</strong> —— 学生会的一己之见</p></li>\r\n<li><p><strong>世界并不完美，却因此而美丽。</strong> —— 奇诺之旅</p></li>\r\n<li><p><strong>我们的心就像那天空一样，永不分离。</strong> —— 缘之空</p></li>\r\n<li><p><strong>和我定下契约，成为魔法少女吧！</strong> —— 魔法少女小圆</p></li>\r\n<li><p><strong>一直注视着你，似近似远，总是触碰不到。</strong> —— 来自风平浪静的明天</p></li>\r\n<li><p><strong>我知道的，面码……自己已经死掉这点事，还是知道的……</strong> —— 我们仍未知道那天所看见的花的名字</p></li>\r\n<li><p><strong>共道人间惆怅事，不知今夕是何年。</strong> —— 周秦行纪</p></li>\r\n<li><p><strong>旅行唯有出发前最愉快，狗儿唯有叫声最吓人，女人唯有背影最美丽。</strong> —— 狼与香辛料</p></li>\r\n<li><p><strong>无论你在哪里，就算我看不见你，我也会一直注视着你。</strong> —— 妖精的尾巴</p></li>\r\n<li><p><strong>我不渴望什么在别的城市迎来的春天，只要和你在一起的春天就好，只要和你在一起就好</strong> —— CLANNAD</p></li>\r\n<li><p><strong>我的愿望是—幸福地活着，幸福地死去。</strong> —— 神不在的星期天</p></li>\r\n<li><p><strong>今天你最后遇见的那个人有在微笑吗？</strong> —— 幸运星</p></li>\r\n<li><p><strong>我的终点，与幸福同在。</strong> —— AIR</p></li>\r\n<li><p><strong>隐约雷鸣，阴霾天空，但盼风雨来，能留你在此。</strong> —— 言叶之庭</p></li>\r\n<li><p><strong>我问你：你是我的Master吗？</strong> —— 命运守护夜</p></li>\r\n<li><p><strong>私だって今日こそ... 遠野くんに告白するんだ。</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>时间并不存在，存在的只有此刻。</strong> —— 魔女猎人</p></li>\r\n<li><p><strong>没有期盼就不会出现奇迹。</strong> —— 古城荆棘王</p></li>\r\n<li><p><strong>受尽苦难而不厌，此乃阿修罗之道。</strong> —— 海贼王</p></li>\r\n<li><p><strong>如果你都不知道自己想去哪里，那去哪里都是一样的。</strong> —— 柴郡猫</p></li>\r\n<li><p><strong>明天，不是你想要就能有的。</strong> —— 未闻花名</p></li>\r\n<li><p><strong>明明只是活着，哀伤却无处不在……</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>错误可不是为了别人才改的过来的，要为了自己才能改正。</strong> —— XXXHolic</p></li>\r\n<li><p><strong>男人从小的时候就是无药可救的。</strong> —— 秋之回忆</p></li>\r\n<li><p><strong>如果我是那雨滴的话，那么，我能够像把不曾交汇的天空与大地连接起来那样，把某人的心串联起来吗？</strong> —— 死神</p></li>\r\n<li><p><strong>真可悲，你什么都不知道，在这个世界上没有什么是不重要的！</strong> —— 最终幻想</p></li>\r\n<li><p><strong>前天是小兔子，昨天是小鹿，今天是你。</strong> —— CLANNAD</p></li>\r\n<li><p><strong>用我的左手将你那个不可理喻的幻想粉碎掉！</strong> —— 魔法禁书目录</p></li>\r\n<li><p><strong>堕入黑暗裏的可怜影子啊，停止伤害他人的行为吧，犯下罪行的灵魂……想死一次么？</strong> —— 地狱少女</p></li>\r\n<li><p><strong>男人变态有什么错！</strong> —— 寒蝉鸣泣之时</p></li>\r\n<li><p><strong>人们只是用好人来称呼对自己有用的人而以，不存在对所有人都有用的人。</strong> —— 进击的巨人</p></li>\r\n<li><p><strong>真正的危机不是机器人像人一样思考，而是人像机器一样思考。</strong> —— 凉宫春日的忧郁</p></li>\r\n<li><p><strong>人は一生、中二病なんだ。</strong> —— 中二病也要谈恋爱</p></li>\r\n<li><p><strong>能够轻易就放弃的梦想，有存在的价值么？</strong> —— 守护甜心</p></li>\r\n<li><p><strong>没有谁能够永远坚强下去的，每个人都会有疲累的无法站起的时候。世间的故事，就是为了这一刻而存在的哦。</strong> —— 文学少女</p></li>\r\n<li><p><strong>只要你在，我便无所不能。</strong> —— 进击的巨人</p></li>\r\n<li><p><strong>24岁的阿升你好，我是15岁的美加子，我现在也还是非常、非常的喜欢阿升哦！</strong> —— 星之声</p></li>\r\n<li><p><strong>比希望更炙热，比绝望更深邃，这就是爱啊。</strong> —— 魔法少女小圆-叛逆的物语</p></li>\r\n<li><p><strong>如果你愿意的话，让我带您去吧，这座小镇，愿望实现的地方……</strong> —— CLANNAD</p></li>\r\n<li><p><strong>窃人者，自失其宝。</strong> —— 假面骑士kabuto</p></li>\r\n<li><p><strong>有你在的日子才是我的日常。</strong> —— 琴浦小姐</p></li>\r\n<li><p><strong>男人就应该保持冷静，沸腾的水只会被蒸发掉。</strong> —— 假面骑士kabuto</p></li>\r\n<li><p><strong>嗯，一个人也要加油，我是坚强的孩子。</strong> —— AIR</p></li>\r\n<li><p><strong>时间带着明显的恶意，缓缓在我的头顶流逝。</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>人的记忆本来就是暧昧的，不值得信任。</strong> —— 叛逆的鲁鲁修R2</p></li>\r\n<li><p><strong>有光的地方必有影，有影的地方也必定有光，绝望的颜色越是浓重，一定会有光芒耀眼的希望。</strong> —— 银魂</p></li>\r\n<li><p><strong>时间可以治愈？如果时间也病了怎么办？</strong> —— 寒蝉鸣泣之时</p></li>\r\n<li><p><strong>无论在哪里遇到你，我都会喜欢上你。</strong> —— AngleBeats!</p></li>\r\n<li><p><strong>取少量学生放入试管，加入过量作业，生成学霸溶液和不溶于水的学渣。过滤，在学渣中加入过量浓试卷，学渣迅速溶解且产生气泡，学霸则无明显现象。</strong> —— 网络</p></li>\r\n<li><p><strong>如果你死了，那什么也改变不了，可如果你还活着，那就能改变一些事情。</strong> —— 最游记</p></li>\r\n<li><p><strong>鲁鲁修，你知道雪花为什么是白色的吗？因为已经忘记自己本来是什么颜色啊。</strong> —— 叛逆的鲁鲁修</p></li>\r\n<li><p><strong>燃烧吧，我的小宇宙！</strong> —— 圣斗士星矢</p></li>\r\n<li><p><strong>无法逃避的是自我，而无法挽回的是过去。</strong> —— 机动战士高达</p></li>\r\n<li><p><strong>做出一副温柔的样子来折磨人不是更令人难受吗？</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>有些事情我不看透，不是我笨，只是我太善良。</strong> —— 樱桃小丸子</p></li>\r\n<li><p><strong>有时语言就像把利刃，使用不当，就会成为凶器。</strong> —— 名侦探柯南</p></li>\r\n<li><p><strong>如果能够重生的话，我想，我想成为水母。想成为只是在海里自由地摇摇摆摆的水母。</strong> —— 海月姬</p></li>\r\n<li><p><strong>所谓的人类，可是连短短的十分钟也等不起的。</strong> —— Angel Beats!</p></li>\r\n<li><p><strong>梦总是有会醒来的时候，不会醒的梦总有一天会变成悲伤。</strong> —— AIR</p></li>\r\n<li><p><strong>能哭的地方只有厕所和爸爸的怀里。</strong> —— CLANNAD</p></li>\r\n<li><p><strong>你再怎么称赞我，我也不会高兴的，你这个混蛋~</strong> —— 海贼王</p></li>\r\n<li><p><strong>除了爱你，我什么都可以。</strong> —— 命运守护夜</p></li>\r\n<li><p><strong>败者死于绝望，胜者死于渴望。</strong> —— 戏言系列</p></li>\r\n<li><p><strong>给，一辈子朋友劵。</strong> —— 日常</p></li>\r\n<li><p><strong>一个人走在路上，形单影只。回首望去，大家都留在远方。回过头来继续前行，这便是所谓坚强。</strong> —— AngelBeats</p></li>\r\n<li><p><strong>无知而又纯洁的岁月是任何人都曾拥有的，世界上没有一成不变的事物，所以只要以其他方式找到自己的快乐就行了。</strong> —— CLANNAD</p></li>\r\n<li><p><strong>沒有永远下不停的雨。</strong> —— 秋之回憶</p></li>\r\n<li><p><strong>不习惯的事越来越多，但我仍在前进……就算步伐很小，我也在一步一步的前进。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>算了，和你说话感觉就像是大姨妈来了。</strong> —— 龙虎斗</p></li>\r\n<li><p><strong>“像你这样的白痴是怎么活过来的？”“因为我很自信。</strong> —— 海贼王</p></li>\r\n<li><p><strong>梦想是什么，梦想是现实的延续；现实是什么，现实是梦想的终结。</strong> —— EVA</p></li>\r\n<li><p><strong>Time waits for no one.</strong> —— 穿越时空的少女</p></li>\r\n<li><p><strong>时间是伟大的作家，总会写下完美的结局。</strong> —— 秋之回忆</p></li>\r\n<li><p><strong>真正让我难受的，大概是因为让你看到如此狼狈的自己。</strong> —— 元气少女缘结神</p></li>\r\n<li><p><strong>淅淅沥沥的雨，即便能填满路上的水坑，也填不满心中的空洞。</strong> —— 神圣之门</p></li>\r\n<li><p><strong>我们总是在注意错过太多，却不注意自己拥有多少。</strong> —— 我们仍未知道那天所看见的花的名字</p></li>\r\n<li><p><strong>不管前方的路有多苦，只要走的方向正确，不管多么崎岖不平，都比站在原地更接近幸福。</strong> —— 千与千寻</p></li>\r\n<li><p><strong>活在现实中的人是错的，而那些哭泣的人才是正确的，孤独的我们才有人类的样子</strong> —— angel beats</p></li>\r\n<li><p><strong>不管是怎样的回忆，都是我们活过的人生。</strong> —— angel beats</p></li>\r\n<li><p><strong>我不知道离别的滋味是这样凄凉，我不知道说声再见要这么坚强。</strong> —— 千与千寻</p></li>\r\n<li><p><strong>人生就是一列开往坟墓的列车，路途上会有很多站，很难有人可以自始至终陪着走完。当陪你的人要下车时，即使不舍也该心存感激，然后挥手道别。</strong> —— 千与千寻</p></li>\r\n<li><p><strong>曾经发生过的事情不可能忘记，只不过是想不起而已。</strong> —— 千与千寻</p></li>\r\n<li><p><strong>人永远不知道，谁哪次不经意的跟你说了再见之后，就真的不会再见了。</strong> —— 千与千寻</p></li>\r\n<li><p><strong>有阳光的地方就会有阴影，所以有阴影的地方也一定会有阳光。绝望的颜色越是浓厚，在哪里也一定会存在耀眼的希望之光。</strong> —— 银魂</p></li>\r\n<li><p><strong>与其想着怎么美丽地牺牲,倒不如想着怎么漂亮地活到最后一刻。</strong> —— 银魂</p></li>\r\n<li><p><strong>人就是要以自卑为跳板才能跳得更高。</strong> —— 银魂</p></li>\r\n<li><p><strong>为了终止绝望的连锁，希望她能化为照亮正确道路的灯火。</strong> —— Re：从零开始的异世界生活</p></li>\r\n<li><p><strong>死亡只要在人生的终点尝试一次就够了~</strong> —— Re：从零开始的异世界生活</p></li>\r\n<li><p><strong>真正重要的东西，总是没有的人比拥有的人清楚。</strong> —— 银魂</p></li>\r\n<li><p><strong>吾于冥河沉浮,受尽命运捉弄，纵然汝将忘吾，吾亦伴汝身旁。</strong> —— Re：从零开始的异世界生活</p></li>\r\n<li><p><strong>关于自己的生活，我和你都不是读者，而是作者。至少结局，还是能自己说了算的。</strong> —— 银魂</p></li>\r\n<li><p><strong>努力可是要默默藏起来的。</strong> —— Re：从零开始的异世界生活</p></li>\r\n<li><p><strong>拥有和舍弃都很痛苦，既然无论怎样都会痛苦的话，我宁可选择守护它而痛苦。</strong> —— 银魂</p></li>\r\n<li><p><strong>只要有你想要保护的东西，那就拔剑好了。</strong> —— 银魂</p></li>\r\n<li><p><strong>所谓的王，乃最贪婪，最豪爽，最易怒之人。且清且浊，追求极致人生。为臣者，因之而仰慕，追随其左右。因此，臣民才会有称王之志，追寻自己的理想。</strong> —— fate/zero</p></li>\r\n<li><p><strong>不过傲慢分为两种。一种是能力过于低下，还有一种是志向异常远大的。前者显得非常愚蠢，后者是难得一见的珍贵种类。</strong> —— fate/zero</p></li>\r\n<li><p><strong>梦存高远，志在争霸，这股热情确实值得赞许。但所谓梦，终有一天是要醒来的。</strong> —— fate/zero</p></li>\r\n<li><p><strong>“把剑放下，成为本王的妻子吧。”</strong> —— fate/zero</p></li>\r\n<li><p><strong>区区一只趴在地上的蝼蚁，谁允许你抬起头的， 虫子就要有虫子的样子，低头伏地然后去死。</strong> —— fate/zero</p></li>\r\n<li><p><strong>即使你忘记了我，我也不会遗忘你。</strong> —— Re：从零开始的异世界生活</p></li>\r\n<li><p><strong>不是别人，是我，承认了你的价值。</strong> —— fate/zero</p></li>\r\n<li><p><strong>世界上 ，没有一拳解决不了的事，如果有，那就两拳。</strong> —— 一拳超人</p></li>\r\n<li><p><strong>明天的事，交给明天的我。</strong> —— 一拳超人</p></li>\r\n<li><p><strong>在灾难面前，如果连英雄都逃跑了，那还有谁能站出来？</strong> —— 一拳超人</p></li>\r\n<li><p><strong>我不是因为需要你们评论几句才去当英雄的，而是因为我想去当所以我才当的。</strong> —— 一拳超人</p></li>\r\n<li><p><strong>由变态化身成为变态，也就是真·变态，也就是说，完全变态呢。</strong> —— 一拳超人</p></li>\r\n<li><p><strong>我秃了，我也变强了</strong> —— 一拳超人</p></li>\r\n<li><p><strong>为了做一名真正的绅士，即使明知必输无疑，也要有勇气接受挑战！</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>JOJO，我不想再做人了！！</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>春天是胖次的季节。</strong> —— 电器街漫画店</p></li>\r\n<li><p><strong>我只是个兴趣使然的英雄。</strong> —— 一拳超人</p></li>\r\n<li><p><strong>不要为自己的努力道歉，这样太对不起自己了！</strong> —— 火影忍者</p></li>\r\n<li><p><strong>这个世界上没有奇迹，有的只是偶然和必然，以及是谁在做些什么。一直期望着能出现奇迹的人们是不会发生奇迹</strong> —— 悠久之翼</p></li>\r\n<li><p><strong>伤害别人的人，就要有被伤害的觉悟！</strong> —— 罪恶王冠</p></li>\r\n<li><p><strong>即使你忘记我，我也不会遗忘你！</strong> —— 从零开始的异世界生活</p></li>\r\n<li><p><strong>我不管这个世上的人怎么说我，我只想依照我的信念做事，绝不后悔，不管现在将来都一样。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>人生中有些事你不竭尽所能去做，你永远不知道自己有多出色！</strong> —— 海贼王</p></li>\r\n<li><p><strong>正因为生命有限，所以才显得重要，正因为生命有限，所以才更应该努力不懈！</strong> —— 名侦探柯南</p></li>\r\n<li><p><strong>人，只有在放弃战斗的时候才算输，只要坚持战斗，就还没输！</strong> —— 进击的巨人</p></li>\r\n<li><p><strong>世间本就没有真实的对与错，也没有绝对的善与恶。地狱天堂，一念之间。</strong> —— 地狱少女</p></li>\r\n<li><p><strong>天才的字典里，没有不可能这三个字。</strong> —— 灌篮高手</p></li>\r\n<li><p><strong>奇迹不是免费的，如果你祈求了希望，也会散播出同等的绝望。</strong> —— 魔法少女小圆</p></li>\r\n<li><p><strong>此生无悔入东方，来世愿生幻想乡！</strong> —— 东方project</p></li>\r\n<li><p><strong>只要是活着的东西，就算是神我也会杀给你看。</strong> —— 空之境界</p></li>\r\n<li><p><strong>我手里拿着刀，没法抱你，我放下刀，没法保护你！</strong> —— 死神</p></li>\r\n<li><p><strong>不好意思，我喜欢的是艾米莉亚</strong> —— Re：从零开始的异世界生活</p></li>\r\n<li><p><strong>前进吧，星星在你的头上闪耀哦！</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>星星只有在夜里才璀璨夺目啊。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>Eloim Essaim Eloim Essaim 请聆听我的请求。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>於此漆黑世界之中，直至光明遍地之时！All Hail Lelouch！</strong> —— 反叛的鲁路修</p></li>\r\n<li><p><strong>只有用心才能看到本质，最重要的东西眼睛是无法看到的。</strong> —— LE</p></li>\r\n<li><p><strong>春天的最后一场雪，你我的最后一次相聚，能遇见你是最幸福的事了，就此分别吧！请继续向前，迎接樱花漫溢的四月，但请不要忘记我，友人A……</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>喜欢的人喜欢别人不是很正常吗。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>男人只要去行动就好，做得到或做不到，女孩子会来告诉你的。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>或许前路永夜，即便如此我也要前进，因为星光即使微弱也会为我照亮前路。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>英雄意味着强大，英雄意味着孤独，最后一幕一定是英雄渐行渐远，我的英雄也是那样的存在。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>迎接我们的也许是漆黑一片的夜路，即便如此，也要相信自己，勇往直前。 星空会为我们在这条道路上点缀出淡淡星光。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>君の名を 今追いかけるよ</strong> —— 君の名は。</p></li>\r\n<li><p><strong>谢谢你至今为止都容忍我的任性，我是你的妹妹真的太好了。</strong> —— 俺妹</p></li>\r\n<li><p><strong>那东西既然被你知道了，我就没脸活下去了，只有一死了之了！可是我还不想死，所以只好把你杀了啊！</strong> —— 逢坂大河</p></li>\r\n<li><p><strong>笨蛋吉娃娃（バカチワワ）</strong> —— 逢坂大河</p></li>\r\n<li><p><strong>吵死了吵死了!</strong> —— 逢坂大河</p></li>\r\n<li><p><strong>回家后我得好好找你人生咨询一下！</strong> —— 高坂桐乃</p></li>\r\n<li><p><strong>Angel大河大人，为了大家能有一个幸福快乐的圣诞，无论是一层皮还是两层皮都给你剥下来，直到最后全裸都没问题的觉悟都做好了！</strong> —— 逢坂大河</p></li>\r\n<li><p><strong>告白当天就要H什么的，真是没办法的男人呢。</strong> —— 高坂桐乃</p></li>\r\n<li><p><strong>桐乃非常非常不愿意你有女朋友，但是你还愿意和我复合吗。开...开玩笑的，你不要回答我不然我真的会死\"</strong> —— 五更琉璃</p></li>\r\n<li><p><strong>“我要诅咒！诅咒所有相爱的情侣！诅咒神圣的夜晚！诅咒这整个世界（世界：怪我咯？）！对所有的现充挥下破坏的铁锤！我会让你尝尝……我生涯最大的诅咒！”</strong> —— 千叶の堕天圣黑猫</p></li>\r\n<li><p><strong>喂？FFF团团长须川亮吗？这有一个要入团的！</strong> —— 五更琉璃</p></li>\r\n<li><p><strong>最有名的莫过于想死一次吗。</strong> —— 阎魔爱</p></li>\r\n<li><p><strong>哥哥也可以喜欢上我之外的女孩子，但只有音梦是不可以的！</strong> —— 芳乃樱对朝仓纯</p></li>\r\n<li><p><strong>我也做个好孩子，成为这幸福光景的一部分，想成为闪耀在圣诞节的城市里，其中一张幸福的笑脸。</strong> —— 逢坂大河</p></li>\r\n<li><p><strong>龙儿是我的！谁都不准碰！</strong> —— 逢坂大河</p></li>\r\n<li><p><strong>以后继续来一起练习打篮球</strong> —— 湊智花</p></li>\r\n<li><p><strong>请不要跟我搭话。我讨厌你！</strong> —— 八九寺真宵</p></li>\r\n<li><p><strong>风子参上！</strong> —— 伊吹风子</p></li>\r\n<li><p><strong>男生送的礼物要方便拿来换钱才好吧！</strong> —— 来栖加奈子</p></li>\r\n<li><p><strong>你是笨蛋吗？</strong> —— 小桐桐（きりりん）</p></li>\r\n<li><p><strong>我跟喜欢成人游戏一样喜欢你</strong> —— 高坂桐乃</p></li>\r\n<li><p><strong>最喜欢你了唷！！ 开玩笑的！！啊--！好害羞 有机会的话会再写信给你。 希望那时，能变得更加坦率捏~</strong> —— 久保由利香致小泉花阳</p></li>\r\n<li><p><strong>最后，士郎……你要去打的話……必须給我贏！你要是死了话……我饶不了你……</strong> —— 遠坂凜</p></li>\r\n<li><p><strong>最后好想有个拥抱....，可是...那种事情怎么能说得出口.....</strong> —— 露西</p></li>\r\n<li><p><strong>受虐狂的娇小美少年……真想带回家去养一段时间啊。</strong> —— 赤井林檎</p></li>\r\n<li><p><strong>希望老师像帮我一样帮帮れいジ</strong> —— 九重凛</p></li>\r\n<li><p><strong>在排练的休息时间里要好好补充水分和盐分哦！</strong> —— 三森铃子致海未</p></li>\r\n<li><p><strong>得到更多人的认可，带著大家的爱意加油哦！</strong> —— 内田彩致南小鸟</p></li>\r\n<li><p><strong>重新再说一次，至今为止，真的谢谢你。 然后，今后也请多指教了。</strong> —— 楠田亞衣奈致东条希</p></li>\r\n<li><p><strong>笨蛋、笨蛋！</strong> —— 星野琉璃</p></li>\r\n<li><p><strong>没问题，绝对没问题</strong> —— 木之本樱（无敌咒语）</p></li>\r\n<li><p><strong>凡人、笨蛋！</strong> —— 维多利加·德·布洛瓦</p></li>\r\n<li><p><strong>笨蛋,蠢货</strong> —— 南千秋</p></li>\r\n<li><p><strong>我绝对会成为火影。我从来都是有话直说，这就是我的忍道！</strong> —— 漩涡鸣人</p></li>\r\n<li><p><strong>Fightだよじゃねつの！</strong> —— 高坂穗乃果</p></li>\r\n<li><p><strong>哦~</strong> —— 袴田日向</p></li>\r\n<li><p><strong>绝对要一起去吃拉面喵~</strong> —— 星空凛</p></li>\r\n<li><p><strong>不管你在世界的哪个地方，我一定会，再次去见你的。</strong> —— 你的名字</p></li>\r\n<li><p><strong>描线一笔接一笔，白色的素描本上渐渐萌生黑意。即便如此，还无法照准记忆中的风景。</strong> —— 你的名字</p></li>\r\n<li><p><strong>你会哭着笑，笑着哭，是因为你的心，早已超越了自己啊。</strong> —— 你的名字</p></li>\r\n<li><p><strong>醒来的时候 不知道自己为什么哭 时常会有的事情 做过的梦总是回想不起 只是 一种有什么消失的丧失感</strong> —— 你的名字</p></li>\r\n<li><p><strong>以彗星为龙，以彗星为绳结。描绘出割裂的彗星舞动的形态。又是一轮岁月。</strong> —— 你的名字</p></li>\r\n<li><p><strong>聚拢，成形，捻转，回绕，时而返回，暂歇，再联结。这就是组纽。这就是时间。这就是，联结</strong> —— 你的名字</p></li>\r\n<li><p><strong>从你的前前前世开始，我就开始找寻你</strong> —— 你的名字</p></li>\r\n<li><p><strong>假如我们相遇，肯定一眼就能认出彼此</strong> —— 你的名字</p></li>\r\n<li><p><strong>从现在开始，我将追寻你的名字。</strong> —— 你的名字</p></li>\r\n<li><p><strong>我，将某个人，唯一的某个人，试图锁定。我，</strong> —— 你的名字</p></li>\r\n<li><p><strong>散落至四方。又或是升起至四方。在无法确认这一事实的浮游感中，彗星耀辉在夜空。彗星裂开，碎片落下。</strong> —— 你的名字</p></li>\r\n<li><p><strong>喜欢喜欢轻飘飘喜欢喜欢轻飘飘让我们一起来！</strong> —— Printemps</p></li>\r\n<li><p><strong>みんなで作る、最高のライブ！</strong> —— LoveLive! The School idol Movie</p></li>\r\n<li><p><strong>凛：450拿来 海：自由女神Shoot！ 希：其实有点像邪神果</strong> —— 乙姬心恋宫殿</p></li>\r\n<li><p><strong>脱！！巨乳！</strong> —— 暗杀教室</p></li>\r\n<li><p><strong>前天是小兔子,昨天是小鹿,今天是你</strong> —— CLANNAD</p></li>\r\n<li><p><strong>有些事情我不看透，不是我太笨，只是我太善良。</strong> —— 樱桃小丸子</p></li>\r\n<li><p><strong>彼方为谁，无我有问 ；九月露湿，待君之前</strong> —— 你的名字</p></li>\r\n<li><p><strong>会起反作用是吧……明明是想保护，却伤害了；明明想要哭泣， 却微笑着。</strong> —— 吸血鬼骑士</p></li>\r\n<li><p><strong>我不是天生的王者 但我骨子里流动着不让我低头的血液</strong> —— 海贼王</p></li>\r\n<li><p><strong>不要停止奔跑，不要回顾来路，来路无可眷恋，值得期待的只有前方。</strong> —— 马男波杰克</p></li>\r\n<li><p><strong>苹果是给那些为了爱选择死亡的人的奖励</strong> —— 回转企鹅罐</p></li>\r\n<li><p><strong>一定要保护自己的梦想，即使牺牲一切。</strong> —— NANA</p></li>\r\n<li><p><strong>喜欢你，因为我喜欢你，比地球上任何人都，喜欢你...</strong> —— 名侦探柯南</p></li>\r\n<li><p><strong>所谓“大家”，就是无视并牺牲了一部分弱势群体后所达到的虚伪的和平与共识。</strong> —— 果然我的青春恋爱喜剧搞错了</p></li>\r\n<li><p><strong>男人至死都是少年</strong> —— 银魂</p></li>\r\n<li><p><strong>润滑油是用来防止磨损的东西。在心中有着润滑油也会活得更加轻松吧。</strong> —— 果然我的青春恋爱喜剧搞错了</p></li>\r\n<li><p><strong>不能逃避，不能逃避，不能逃避，不能逃避…</strong> —— EVA</p></li>\r\n<li><p><strong>我除了投三分，就什么都没有了…</strong> —— 灌篮高手</p></li>\r\n<li><p><strong>我会死在这里，我的每一寸肌肤都会腐烂，除了…一寸，这一寸，它是那么的小，那么的脆弱，却是这世上唯一值得拥有的东西，我们决不能失去或者放弃它，我们决不能让别人把它夺走。</strong> —— 碧之轨迹</p></li>\r\n<li><p><strong>无论是丢下还是被丢下，这两者都是一样痛苦的。</strong> —— 水果篮子</p></li>\r\n<li><p><strong>女生口中的「好人」首先百分之百是「怎样都好的人」的意思，再好也不过止于「方便好使的人」。也就是说，不管怎样都是没戏了。</strong> —— 果然我的青春恋爱喜剧搞错了</p></li>\r\n<li><p><strong>今天的风儿有些喧嚣啊。</strong> —— 男子高中生的日常</p></li>\r\n<li><p><strong>死对任何人都是残酷的，年轻年老、好人坏人都一样。死是平等的，没哪种死亡是特别残酷的，所以死才可怕。品行、年龄、个性、金钱、美貌，这些东西只在生前才有意义。就因能将一切化为乌有，所以怎样的死都是残酷的。</strong> —— 尸鬼</p></li>\r\n<li><p><strong>命运的红线一旦断了，就再也不会接上。</strong> —— 犬夜叉</p></li>\r\n<li><p><strong>活下去的意志是最强的力量！</strong> —— 浪客剑心</p></li>\r\n<li><p><strong>想要试着去相互接近，但最后还是无法敞开心扉，结果就是擦肩而过…</strong> —— 文学少女</p></li>\r\n<li><p><strong>男人的爱情是另存为，女人的爱情是覆盖。</strong> —— 红</p></li>\r\n<li><p><strong>不逆 不耻 不憾</strong> —— 舰队Collection</p></li>\r\n<li><p><strong>有话直说就是我的忍道！</strong> —— 火影忍者</p></li>\r\n<li><p><strong>就连一直都无容身之地的我…也不是可以任意舍弃的生命。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>明明只是活着，哀伤却无处不在…</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>为了你,如果是为了你,即使我被困在永远的迷宫中,也没关系.</strong> —— 魔法少女小圆</p></li>\r\n<li><p><strong>我不渴望什么在别的城市迎来的春天，只要和你在一起的春天就好，只要和你在一起就好…</strong> —— CLANNAD</p></li>\r\n<li><p><strong>“像你这样的白痴是怎么活过来的？”“因为我很自信。“</strong> —— 海贼王</p></li>\r\n<li><p><strong>汝真是个烂好人</strong> —— 狼与香辛料</p></li>\r\n<li><p><strong>我知道的，面码…自己已经死掉这点事，还是知道的…</strong> —— 我们仍未知道那天所看见的花的名字</p></li>\r\n<li><p><strong>不习惯的事越来越多，但我仍在前进…就算步伐很小，我也在一步一步的前进。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>刻意保持距离的人是你，虚拟世界里的区区两公尺，对你来说就真的如此遥不可及?</strong> —— 加速世界</p></li>\r\n<li><p><strong>想哭的时候能哭出来，也是一种坚强</strong> —— 翼年代记</p></li>\r\n<li><p><strong>如果你愿意的话，让我带您去吧，这座小镇，愿望实现的地方…</strong> —— CLANNAD</p></li>\r\n<li><p><strong>有伤害人的人存在的话，也会有能抚慰伤痕的人</strong> —— 水果篮子</p></li>\r\n<li><p><strong>会长和往常一样挺着小小的胸部一副自以为了不起的样子套用某本书的内容说道…</strong> —— 学生会的一己之见</p></li>\r\n<li><p><strong>我觉得只要这样继续加油，总有一天能赶上他们的。</strong> —— 刀剑神域</p></li>\r\n<li><p><strong>如果你是魔女，我只要化身魔王就可以了。</strong> —— 反叛的鲁鲁修</p></li>\r\n<li><p><strong>人的一生会遭遇各种各样的事，其中有令人难以置信的事，也有不讲道理的事，但这就是生活。</strong> —— 地狱少女</p></li>\r\n<li><p><strong>挡着在我们面前的是巨大庞然的人生，阻隔在我们中间的是广阔无际的时间，对于他们，我们无能为力…</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>叶え！私たちの夢ー。</strong> —— ラブライブ！</p></li>\r\n<li><p><strong>人不会对讨厌人要求理由。莫名的生气、莫名的讨厌、莫名的恶心、什么都能成为讨厌人的理由。</strong> —— 果然我的青春恋爱喜剧搞错了</p></li>\r\n<li><p><strong>无论发生什么都不要停下。无论到什么时候都要继续前进。 要一直走下去，直到生命终止的那一刻。</strong> —— 驱魔少年</p></li>\r\n<li><p><strong>堕入黑暗裏的可怜影子啊，停止伤害他人的行为吧，犯下罪行的灵魂…想死一次么？</strong> —— 地狱少女</p></li>\r\n<li><p><strong>我的生命是属于你的，亚丝娜，我将为你而活。</strong> —— 刀剑神域</p></li>\r\n<li><p><strong>“如果我不在了，你会怎样？” “我会去找你” “如果找不见呢？” “我会一直，一直，一直找下去”</strong> —— 人鱼森林</p></li>\r\n<li><p><strong>将愿望倾入不愿忘却的回忆中…</strong> —— ef-a tale of memories</p></li>\r\n<li><p><strong>All for one, one for all.</strong> —— 海贼王</p></li>\r\n<li><p><strong>祈求别人幸福的同时,却不得不去诅咒其他的人,我们魔法少女就是这样的构造吧!</strong> —— 魔法少女小圆</p></li>\r\n<li><p><strong>人的一生会遭遇各种各样的事，其中有令人难以置信的事，也有不讲道理的事，但都必须予以克服，这就是生活</strong> —— 地狱少女</p></li>\r\n<li><p><strong>以为大哭大闹一场就有人来安慰的家伙真是幸福呢。</strong> —— 龙与虎</p></li>\r\n<li><p><strong>时间可以治愈？如果时间也病了怎么办</strong> —— 寒蝉明泣之时</p></li>\r\n<li><p><strong>如果幸福有形状，该是什么样的呢？它就像玻璃，因为平时察觉不到它的存在，而它却时时在我们身边，最有力的证据就是，只要换一个角度，它就会折射出耀眼的光芒，比谁都过分强调自我的存在。</strong> —— 反叛的鲁鲁修</p></li>\r\n<li><p><strong>求你，保护那孩子，消除灾厄，抹除祸事。哪怕…那是我自己…</strong> —— 食灵</p></li>\r\n<li><p><strong>不是我，都是社会的错</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>El Psy Congroo..</strong> —— 命运石之门</p></li>\r\n<li><p><strong>红茶的温度和女人心在任何时代都是难以琢磨呢。</strong> —— 海猫鸣泣之时</p></li>\r\n<li><p><strong>并非喜欢、也不是爱。而是更加深刻而沉重的——</strong> —— SWEET POOL</p></li>\r\n<li><p><strong>Oh,please don't let me die. Waiting for your touch.</strong> —— Re：从零开始的异世界生活</p></li>\r\n<li><p><strong>You Are (Not) Alone;You Can (Not) Advance;You Can (Not) Redo</strong> —— EVA</p></li>\r\n<li><p><strong>禁忌算什么！那难道比爱丽丝的命还重要吗？</strong> —— 刀剑神域</p></li>\r\n<li><p><strong>MAKE OUR DREAMS ALIVE</strong> —— ラブライブ！</p></li>\r\n<li><p><strong>什么都无法舍弃的人，什么都无法改变 。</strong> —— 进击的巨人</p></li>\r\n<li><p><strong>知道人的眼睛为什么长在前面吗？那是因为如果想看到远处的风景的话，就只能向前前进。</strong> —— 天元突破：红莲螺岩</p></li>\r\n<li><p><strong>春天 马上就要来了 让我与你相遇的春天 就要来了 再也没有你的春天 就要来了</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>世间万物，如果一直放着不管的话，便一定会向不好的方向发展。就像即使如何的努力也无法阻止宇宙变冷一样。只是按照‘常理进行’不断积累而构筑出的世界，无论如何也无法脱离物理法则的束缚。</strong> —— 虚渊玄</p></li>\r\n<li><p><strong>无可替代的存在什么的不是很可怕吗？一旦失去就再也无法取回；绝对不能容忍失败；无法再一次得到。</strong> —— 果然我的青春恋爱喜剧搞错了</p></li>\r\n<li><p><strong>其实...根本就没有什么天堂和地狱吧....</strong> —— 死亡笔记</p></li>\r\n<li><p><strong>真正重要的东西，永远都是非常简单的。</strong> —— Clannad</p></li>\r\n<li><p><strong>我已经准备好了足够挡雨的伞，可是却迟迟没有等到雨的到来，这样的尴尬只是我漫长人生中的小插曲罢了。</strong> —— 千与千寻</p></li>\r\n<li><p><strong>我觉得在这里干尽坏事的玩家，都是些在现实世界中也烂到骨子里的家伙。</strong> —— 刀剑神域</p></li>\r\n<li><p><strong>是你赢了...哲...</strong> —— 黑子的篮球</p></li>\r\n<li><p><strong>我们一直在一起，所以最后也想在你身旁。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>人们只是用好人来称呼对自己有用的人而以，不存在对所有人都有用的人</strong> —— 进击的巨人</p></li>\r\n<li><p><strong>要是太勉强自己的话，总有一天会受伤的</strong> —— 吸血鬼骑士</p></li>\r\n<li><p><strong>我本身得不到答案。所以，我希望有能够答出来之物的诞生。</strong> —— Fate/Stay Night</p></li>\r\n<li><p><strong>最初的一步，泪水之后再一次，雕刻的风景线，消逝在黄昏中的风，直到梦的最后。</strong> —— Clannad</p></li>\r\n<li><p><strong>应该可以了吧，我已经很努力了，应该可以抵达终点了…</strong> —— AIR</p></li>\r\n<li><p><strong>所谓的奇迹就是要发生之后才会有价值存在的吧</strong> —— EVA</p></li>\r\n<li><p><strong>笑是对身边的事物感到一瞬间的幸福而表现出来的东西。</strong> —— CLANNAD</p></li>\r\n<li><p><strong>休息对于生存而言，也是紧要问题</strong> —— 虫师</p></li>\r\n<li><p><strong>比自己,比梦想更重要的东西永远都存在着...</strong> —— 钢之炼金术师</p></li>\r\n<li><p><strong>失礼。噛みました</strong> —— 化物语(上)</p></li>\r\n<li><p><strong>驱动着这个世界的，并非只有眼睛能够看到的东西。就像只观察结晶回路的轮盘是无法知晓齿轮的运动一样……</strong> —— 空之轨迹</p></li>\r\n<li><p><strong>是个男人就要对自己的人生负责</strong> —— 麻辣教师</p></li>\r\n<li><p><strong>我们不是狼，我们只是长着獠牙的羊......</strong> —— 羊之歌</p></li>\r\n<li><p><strong>没有偶然的必然，只有必然的偶然</strong> —— 魔卡少女樱</p></li>\r\n<li><p><strong>我觉得你很幸福，因为你可以选择爱或者不爱我，而我只能选择爱或者更爱你</strong> —— 草莓100%</p></li>\r\n<li><p><strong>前天是兔子，昨天是小鹿，今天是你</strong> —— Clannad</p></li>\r\n<li><p><strong>ご無事で何よりです。</strong> —— 妖狐X僕ss</p></li>\r\n<li><p><strong>少年少女 向前走吧。</strong> —— 阳炎PROJECT</p></li>\r\n<li><p><strong>过分的神圣，往往比恶魔更加恶质。</strong> —— 黑执事</p></li>\r\n<li><p><strong>正因生来一无所有，因此我们能拥有一切。</strong> —— 游戏人生</p></li>\r\n<li><p><strong>我从来都不是什么天才，只是一个普通人，是一个连一个小女孩都保护不了的普通的、渺小的人类啊。</strong> —— 钢之炼金术师</p></li>\r\n<li><p><strong>我不会去统治这片大海，在这片大海上，最自由的人就是海贼王！</strong> —— 海贼王</p></li>\r\n<li><p><strong>失礼、噛みました</strong> —— 化物语</p></li>\r\n<li><p><strong>她有心，她的心在我这里。</strong> —— 人形电脑天使心</p></li>\r\n<li><p><strong>努力不会背叛自己，虽然有时会背叛梦想</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>超频链接</strong> —— 加速世界</p></li>\r\n<li><p><strong>若没有可依靠之处，便也找不到自己的归宿，躲躲藏藏随波逐流，依附于某物，却又一头撞在看不见的墙壁上。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>就算是自私…我也希望那些人能够永远都有笑容…</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>挚友的执念烙印此身，无尽的黑暗化为光明，天上天下，一骑当神！</strong> —— 天元突破：红莲螺岩</p></li>\r\n<li><p><strong>人在直面恐惧的时候，自身的灵魂将会受到考验。降生于这世界，究竟有何所求，要成何事，其本性会暴露无遗。</strong> —— PSYCHO-PASS</p></li>\r\n<li><p><strong>整个社会对我都很苛刻。所以至少让我自己宽容一下我自己吧。如果大家都对自己更宽容一点的话。大家都变成废柴就没有废柴了。</strong> —— 果然我的青春恋爱喜剧搞错了</p></li>\r\n<li><p><strong>还能再见面吗? 一定能见面的</strong> —— Fantastic Children</p></li>\r\n<li><p><strong>即使你忘却了我，我也不会遗忘你。</strong> —— 菜月昂</p></li>\r\n<li><p><strong>不要伤害自己，别人总会这样做。</strong> —— 天国王朝</p></li>\r\n<li><p><strong>我喜欢你，比世界上任何人都喜欢你。</strong> —— 名侦探柯南</p></li>\r\n<li><p><strong>人是可以改变一切的，世上的一切。</strong> —— 吹响！上低音号</p></li>\r\n<li><p><strong>所谓的「改变自己，世界就会随之改变」这种事，是不可能的。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>我想成为一个温柔的人，因为曾被温柔的人那样对待，深深了解那种被温柔相待的感觉。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>你喜欢的人已经心有所属不是正常的吗，因为你喜欢他，所以你的眼中就只有她。人啊，总是盲目地去爱。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>忍者的才能不在于所掌握忍术的多少，而在于永不放弃的毅力.笔直向前绝不违背自己的誓言，还有不管何时都不放弃.</strong> —— 火影忍者</p></li>\r\n<li><p><strong>我动身踏上旅程，是为了与你道别。</strong> —— 追逐繁星的孩子</p></li>\r\n<li><p><strong>大家即将各自展开旅程，挥别这个没落的城镇。</strong> —— 仰望半月的夜空</p></li>\r\n<li><p><strong>正气和狂气，理性和知性，自信和确信，在悲剧性的不合理世界，故事开始了。</strong> —— 绝园的暴风雨</p></li>\r\n<li><p><strong>将所有人类当成玩偶的神,本身居然也是个小丑啊。</strong> —— Fate/Zero</p></li>\r\n<li><p><strong>即使想放弃，也没法放弃最想要的东西，这就是人</strong> —— 悠久之翼</p></li>\r\n<li><p><strong>拿起武器，无论顺从还是逃跑，都无法得到自由，既然如此，我们只能战斗，为了自由，站起来吧。</strong> —— 妖精的尾巴</p></li>\r\n<li><p><strong>所谓长大成人，就是不断聚了散，散了又聚。为了让彼此不会受伤害而保持一个适当的距离。</strong> —— 新世纪福音战士</p></li>\r\n<li><p><strong>如果说怪盗是一个技艺精湛，盗取财宝的艺术家，那么侦探就只是跟在怪盗后面吹毛求疵，充其量不过是个评论家。</strong> —— 名侦探柯南</p></li>\r\n<li><p><strong>我不相信人类......但是，我相信人类的“可能性”</strong> —— 游戏人生</p></li>\r\n<li><p><strong>即使作为代价要夺走我什么，即使接下来等待我的是什么，即使那样，我无论如何都不想失去他。</strong> —— 少年阴阳师</p></li>\r\n<li><p><strong>据说之所以有人出现在梦中，是因为对方想见你的心情穿过身体，飞进了你的梦中。</strong> —— 蜂蜜与四叶草</p></li>\r\n<li><p><strong>好梦向来易醒。</strong> —— 风之谷</p></li>\r\n<li><p><strong>追逐梦想的人比抓住梦想的人更能发挥实力。</strong> —— 银魂</p></li>\r\n<li><p><strong>因为世界并不如你想象的那样坏。</strong> —— 无头骑士异闻录</p></li>\r\n<li><p><strong>人只会看到自己想看到的、听到自己想听到的，我也并不例外。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>美丽的不是这个世界，而是接受了这个世界的你的眼睛。</strong> —— 吸血鬼骑士</p></li>\r\n<li><p><strong>干燥的冷气，尘埃的味道，我在其中……踏上旅途。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>人总有一天都会死的，但正因为生命是有限的，才能够欢喜和悲伤。</strong> —— 通灵王</p></li>\r\n<li><p><strong>舞台上演员不能无视剧本随便演，华丽地退场才是完成使命。</strong> —— 绝园的暴风雨</p></li>\r\n<li><p><strong>只顾着追求新事物，却不回顾历史，怎么会有未来。</strong> —— 虞美人盛开的山坡</p></li>\r\n<li><p><strong>为什么妈妈就不明白无所事事的忙碌呢。</strong> —— 白熊咖啡屋</p></li>\r\n<li><p><strong>好红，每当想起你，枫叶就会被染红。</strong> —— 银仙</p></li>\r\n<li><p><strong>也许正义并非太阳，而是如同星星一般的东西，天空中有无数的星星，彼此不断抵消着其他星星的光芒。</strong> —— 亚尔斯兰战纪</p></li>\r\n<li><p><strong>起风了,唯有努力生存。</strong> —— 起风了</p></li>\r\n<li><p><strong>走过一段路 回头看 原来那些痛得快要死去的事情是可以一笑而过的。</strong> —— 黑子的篮球</p></li>\r\n<li><p><strong>我们都在梦中，一个叫青春的梦里。梦总有一天会醒来，而回忆会一直闪烁。</strong> —— 校园迷糊大王</p></li>\r\n<li><p><strong>王冠会让戴上它的人高人一头，是地位的象征。但王冠真正的意义是：当灾难从天而降时，我会为你们抵挡一切，永远让你们只看到金色的希望。</strong> —— 星游记</p></li>\r\n<li><p><strong>只要怀着理想而行动，就算结果不尽如人意也没有关系。但是如果失去了理想，那就真的一无所有了，连自己珍视的人都保护不了。</strong> —— 境界的彼方</p></li>\r\n<li><p><strong>如果要伤害别人的感情才能实现的话，对那个人来说梦想就已经不能称之为梦想了。</strong> —— 名侦探柯南</p></li>\r\n<li><p><strong>我不会忘记，一直，都留在我的心间。</strong> —— 文学少女</p></li>\r\n<li><p><strong>当一个胖纸没有什么不好，最起码可以温暖其他的人。</strong> —— 龙猫</p></li>\r\n<li><p><strong>是鸣人改变了我！是鸣人的笑脸拯救了我！所以，如果是为了保护鸣人，就算死，我也无可畏惧，因为我，最喜欢鸣人了。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>总在不停寻觅你的踪影，无论十字路口抑或梦境之中，明知你不在，却依然不停地找寻。</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>你受伤的时候，我永远都在。</strong> —— 多啦A梦</p></li>\r\n<li><p><strong>在未知的未来将要发生的事，一定有它的意义</strong> —— 火影忍者</p></li>\r\n<li><p><strong>那只萤火虫在很长很长的时间里都是独自一人生活，甚至忘了自己是只萤火虫。</strong> —— 小鸠</p></li>\r\n<li><p><strong>最近的烦恼是小小的离别带来的寂寞，一瞬间的邂逅与分别，这一个一个的刹那，我想好好珍惜起来。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>如果基拉被抓住了，那他就是邪恶，如果基拉统治了世界，那他就是正义。</strong> —— 死亡笔记</p></li>\r\n<li><p><strong>无论最终的结果是什么，只要这是自己选择的道路。</strong> —— 龙与虎</p></li>\r\n<li><p><strong>在面对这些强敌之前...一定要先将眼前敌人逐个打败吧。</strong> —— 网球王子</p></li>\r\n<li><p><strong>物转星移，花开花落，周而复始，生生不息，但今昔已非昨日，然今日花容依旧。</strong> —— 虫师</p></li>\r\n<li><p><strong>隐藏的是心中的秘密，照耀两人的是star和snow……</strong> —— 名侦探柯南</p></li>\r\n<li><p><strong>从进入厨房的瞬间开始，你们就肩负着烹饪美食的责任。</strong> —— 食戟之灵</p></li>\r\n<li><p><strong>生活坏到一定程度就会好起来，因为它无法更坏。</strong> —— 龙猫</p></li>\r\n<li><p><strong>当你决定了要向前迈进的那一刻, 你就已经踏出前进的一步了。</strong> —— Canvas2 ～七彩的素描～</p></li>\r\n<li><p><strong>我再也不要看见她哭的样子了，就算我从此从她心目中消失。</strong> —— 名侦探柯南</p></li>\r\n<li><p><strong>无限接近于零，却又不等于零的可能性。</strong> —— 游戏人生</p></li>\r\n<li><p><strong>在弱者眼里可能是这样，不过，我的确很强。</strong> —— 蔷薇少女</p></li>\r\n<li><p><strong>我无法抗拒泡面这种没营养又廉价的口感。</strong> —— 银仙</p></li>\r\n<li><p><strong>荣耀就在彼方，遥不可及才要挑战，歌颂霸道，展现霸道，为了守护我背影的臣子。</strong> —— RIDER Fate/Zero</p></li>\r\n<li><p><strong>活着本身就是一种价值，因为还有明天。</strong> —— 高达</p></li>\r\n<li><p><strong>大家互相帮助，一起成功，一起幸福什么的，不过是种理想。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>话说回来，现充还真是麻烦啊。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>重逢的时候没想到我会这样喜欢他，虽然你不是我交往的第一人，可却是我的初恋，虽然你可能并不知道。</strong> —— 世界第一初恋</p></li>\r\n<li><p><strong>有了喜欢的人，就会在意各种小事，感觉很不自由，但是，为了那些小事左思右想，心里竟然会这么快乐。</strong> —— 闪烁的青春</p></li>\r\n<li><p><strong>就算世上有着所谓的“好女人”，也不会有着“和我关系好的女人”。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>必须洗净一切往事，否则你永远无法清楚自由地看这个世界</strong> —— 死神</p></li>\r\n<li><p><strong>己所欲者，杀而夺之，亦同天赐</strong> —— 游戏人生</p></li>\r\n<li><p><strong>即使你已经习惯了受伤害，也有人看了会心疼的。</strong> —— 我的恋爱物语果然有问题</p></li>\r\n<li><p><strong>这个世界上没有完美的人类，所以，人无法自己一个人活著。</strong> —— 不可思议游戏</p></li>\r\n<li><p><strong>我们会，慢慢长大成人，随着季节的不停变换 路边盛开的鲜花也在不断变化。</strong> —— 未闻花名</p></li>\r\n<li><p><strong>只要一天活著,难过的事总有一天会让你笑著说出来。</strong> —— 天空之城</p></li>\r\n<li><p><strong>命运的红线一旦断了，就再也接不上了。</strong> —— 犬夜叉</p></li>\r\n<li><p><strong>一举一动，都是承诺，会被另一个人看在眼里，记在心上的。</strong> —— 悬崖上的金鱼姬</p></li>\r\n<li><p><strong>如果你一个人把什么都做完了，那我做什么？</strong> —— 元气少女缘结神</p></li>\r\n<li><p><strong>在自称善意的之时，即存恶意。</strong> —— 罪恶王冠</p></li>\r\n<li><p><strong>正因为生命有限，所以才显得更重要，正因为生命有限，所以才更应该努力不懈。</strong> —— 名侦探柯南</p></li>\r\n<li><p><strong>总觉得跟你在一起，不管多高的地方都可以到达。</strong> —— 网球王子</p></li>\r\n<li><p><strong>人这种东西，除了为了永不满足的欲望追求新的刺激之外，也是重视稀少价值之物的奇怪生物。</strong> —— gosick</p></li>\r\n<li><p><strong>那些坚定决心的人们，会展现出好脸色。</strong> —— 闪电十一人</p></li>\r\n<li><p><strong>世界不完美 所以才显得美丽</strong> —— 钢之炼金术士</p></li>\r\n<li><p><strong>即使匍匐在地，也要持续前进，这才是你的作风。现在的你只靠一些漂亮话当借口，在高墙前使性子，不过是个小鬼罢了。</strong> —— 银魂</p></li>\r\n<li><p><strong>明明喜欢的不得了，可是看到对方幸福洋溢的表情，却觉得很难过、很痛苦，胸口发疼。</strong> —— 彩云国物语</p></li>\r\n<li><p><strong>失望了吗？没错，世上或许有些东西别打开比较好，真正把心打开的人多么麻烦啊！</strong> —— 绝望先生</p></li>\r\n<li><p><strong>哭也不会改变什么，这个世界从来不会对任何人温柔。</strong> —— 黑执事</p></li>\r\n<li><p><strong>不论是过去还是未来，我都会保护你！</strong> —— 旋风管家</p></li>\r\n<li><p><strong>自己的过去会被当做笑话或者捏他的形式，被他人随随便便的共有化。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>因为等待的越久，重逢时就越幸福啊。</strong> —— 名侦探柯南</p></li>\r\n<li><p><strong>我在时光斑驳深处，聆听到花开的声音。</strong> —— 未闻花名</p></li>\r\n<li><p><strong>神会对努力之人微笑，这是骗人的，但我们偶然会被命运之神垂青。</strong> —— 吹响吧！上低音号</p></li>\r\n<li><p><strong>大国战争之后还会繁荣富强，而只有小国涂炭遭殃，让世界感受痛苦吧。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>人生最糟糕的事，一个是饿肚子，一个是孤独。</strong> —— 夏日大作战</p></li>\r\n<li><p><strong>你指尖跳动的电光，是我此生不变的信仰</strong> —— 某科学的超电磁炮</p></li>\r\n<li><p><strong>温柔解救不了这个世界</strong> —— 罪恶王冠</p></li>\r\n<li><p><strong>代你见证世界的终结，来世再续梦之伊甸</strong> —— Eden*/b站弹幕</p></li>\r\n<li><p><strong>今日已成往昔，明日即将到来，为此理所当然之事，感到无比痛心。</strong> —— 寻找失去的未来</p></li>\r\n<li><p><strong>我活在我的时间里，她活在她的时间里，因此，我们时间交错的瞬间，对我而言比任何事物都宝贵。</strong> —— 她与她的猫</p></li>\r\n<li><p><strong>人类，在决战之时难道会选择自己不擅长的武器来战斗吗？</strong> —— 只有神知道的世界</p></li>\r\n<li><p><strong>这只手，暂时不洗了</strong> —— 小林家的龙女仆</p></li>\r\n<li><p><strong>重要的人，不能忘记的人，不想忘记的人。 你，是谁？</strong> —— 你的名字</p></li>\r\n<li><p><strong>正是在对未来没有任何希望的时候，一个人能坚持到什么地步，才真正体现出这个人有多坚强。</strong> —— 来自新世界</p></li>\r\n<li><p><strong>除了这一颗心，都是你的。</strong> —— 人渣的本愿</p></li>\r\n<li><p><strong>正是因为这一点一滴觉得还有希望的自己，才是最无可救药的吧。</strong> —— 人渣的本愿</p></li>\r\n<li><p><strong>我们都很执着,而且思念的越深,越是绝望。</strong> —— 人渣的本愿</p></li>\r\n<li><p><strong>一个人觉得寂寞，和另一个人相互依偎又有什么错</strong> —— 人渣的本愿</p></li>\r\n<li><p><strong>想象力足以改变一切。</strong> —— 来自新世界</p></li>\r\n<li><p><strong>越是珍惜呆在这里的时间，今后就越是悲伤吧。但是我认为不能称之为「后悔」。</strong> —— 小林家的龙女仆</p></li>\r\n<li><p><strong>大部分人并不想长大，只是没办法继续当一个小孩子</strong> —— 小林家的龙女仆</p></li>\r\n<li><p><strong>不得了不得了</strong> —— 小林家的龙女仆</p></li>\r\n<li><p><strong>你已经不是我的狗了。</strong> —— 龙与虎</p></li>\r\n<li><p><strong>正因为有忘也忘不了的回忆，才会变得坚强，这就是所谓的成长吧！</strong> —— 火影忍者</p></li>\r\n<li><p><strong>其实我对混合咖啡还是很有自信的</strong> —— 珈百璃的堕落</p></li>\r\n<li><p><strong>如果当初握住的不是硬币，而是勇者的手......</strong> —— 中二病也要谈恋爱 恋！</p></li>\r\n<li><p><strong>只要是正义的一方，无论手段多么卑鄙都可以被原谅</strong> —— 东京喰种</p></li>\r\n<li><p><strong>你偶尔也该回头看看，那些在你身后的人，说不定已经追到你脚边了！！！</strong> —— 妖精的尾巴</p></li>\r\n<li><p><strong>因为喜欢你，所以想继续相信下去。</strong> —— 空之境界</p></li>\r\n<li><p><strong>自杀是没有理由的，只是今天没有飞起来罢了。</strong> —— 空之境界</p></li>\r\n<li><p><strong>听说，樱花花瓣飘落的速度，是每秒5厘米，思念的距离到底有多远。如果樱花下落时是有声音的，你会不会听到我对你的思念</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>在下雪时。第一次相会时。雪白的夜与漆黑的伞。只要有你在身边。只要你露出微笑。就是幸福。</strong> —— 空之境界</p></li>\r\n<li><p><strong>身体被冻僵了，仅有吐出的气息略带热度。望着彼此即将停止的心脏鼓动。 然后，极为珍惜的记忆随即就会消失而化为眷恋。</strong> —— 空之境界</p></li>\r\n<li><p><strong>对于虚伪而言，真实的光明或许过于耀眼了</strong> —— 蔷薇少女</p></li>\r\n<li><p><strong>好了 接下来就让你们见识一下程序员的本事</strong> —— 骑士与魔法</p></li>\r\n<li><p><strong>如果结果不如你所愿，就在尘埃落定前奋力一搏。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>如果因为害怕失败，而不去努力，那就不会有能够成功的人。</strong> —— 樱花庄的宠物女孩</p></li>\r\n<li><p><strong>你一直相信的事，也让我相信吧。活着，是件美好的事。</strong> —— Angle Beats</p></li>\r\n<li><p><strong>我只希望，我喜欢的人可以健康的活着。</strong> —— 人渣的本愿</p></li>\r\n<li><p><strong>正因为生来什么都没有，因此我们能拥有一切。</strong> —— 游戏人生</p></li>\r\n<li><p><strong>未来的事无人知晓，所以它才如同这重逢一般，拥有着无限的可能性。</strong> —— 命运石之门</p></li>\r\n<li><p><strong>只要努力活下去，总有一天会笑着回忆。</strong> —— 不可思议游戏</p></li>\r\n<li><p><strong>想说什么就说，想做什么就做，我们不就是这么一直过来的吗？</strong> —— LoveLive!</p></li>\r\n<li><p><strong>也许一个人的快乐会建立在另一个人或者很多人的痛苦之上。但是，自己种下的祸根终有一天会报应在自己的身上的。</strong> —— 地狱少女</p></li>\r\n<li><p><strong>何必去在意自己与别人相比是否特别呢？即便只有一个人也好。只要有一个认为自己特别的人，我觉得那就足够了。</strong> —— 冰菓</p></li>\r\n<li><p><strong>虚伪的眼泪，会伤害别人，虚伪的笑容，会伤害自己。</strong> —— 叛逆的鲁鲁修</p></li>\r\n<li><p><strong>空太是笨蛋！</strong> —— 樱花庄的宠物女孩</p></li>\r\n<li><p><strong>不敢反抗压迫的心理将伴你一生</strong> —— 狂赌深渊</p></li>\r\n<li><p><strong>未来的旅程是如此遥远，能见到的光明却是如此稀少。即使如此——我仍然没有完全放弃希望。</strong> —— 刀剑神域</p></li>\r\n<li><p><strong>契约者不会做梦。</strong> —— 黑之契约者</p></li>\r\n<li><p><strong>不可结缘</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>去做你喜欢做的事吧 这就是所谓的那啥...青春嘛</strong> —— 月色真美</p></li>\r\n<li><p><strong>重要的感情总是非常单纯 自然脱口而出的</strong> —— GAMERS电玩咖！</p></li>\r\n<li><p><strong>This is your dream! Anything you can do in your dreams, you can do now!</strong> —— My Little Pony: Friendship is Magic</p></li>\r\n<li><p><strong>What about super-ultra-extreme-awesomazing?</strong> —— My Little Pony: Friendship is Magic</p></li>\r\n<li><p><strong>We've learned that friendship isn't always easy, but there's no doubt it's worth fighting for!</strong> —— My Little Pony: Friendship is Magic</p></li>\r\n<li><p><strong>今宵之月，绝不西沉。只此美梦，不再苏醒。从今往后，生生世世，长相厮守，为你立誓。</strong> —— 银魂</p></li>\r\n<li><p><strong>打架这玩意，不就是为了守护什么东西吗？</strong> —— 银魂</p></li>\r\n<li><p><strong>届けて— 切なさには 名前をつけようか“Snow halation”</strong> —— Snow Halation</p></li>\r\n<li><p><strong>我是想被包养，但不会接受施舍</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>善于破坏气氛的人，不仅能破坏好的气氛，其实也能把坏的气氛破坏掉。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>为什么要称赞他人？那是为了把对方捧到更高的地方更容易绊他的脚，为了把他从高处摔下来。这就叫做称赞杀人法。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>女生口中的「好人」首先百分之百是「怎样都好的人」的意思，再好也不过止于「方便好使的人」。也就是说，不管怎样都是没戏了</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>夜晚还远远没有结束!</strong> —— 春宵苦短，少女前进吧！</p></li>\r\n<li><p><strong>只要世间有酒,我就喝不够!</strong> —— 春宵苦短，少女前进吧！</p></li>\r\n<li><p><strong>如果我们能活着出去，千山万水，你愿意陪我一起看吗？</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>不可结缘,徒增寂寞</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>就算世界终结，也无所谓</strong> —— 少女终末旅行</p></li>\r\n<li><p><strong>遇到事情不能坐以待毙！</strong> —— 捷德奥特曼</p></li>\r\n<li><p><strong>为了爱，与梦想！</strong> —— 眼大人</p></li>\r\n<li><p><strong>今日的余晖和你最后那天给我的拥抱，同一个温度</strong> —— Myself</p></li>\r\n<li><p><strong>想和你重新认识一次 从你叫什么名字说起。</strong> —— 你的名字</p></li>\r\n<li><p><strong>不管你在世界的哪个地方，我一定会，再次去见你的。</strong> —— 你的名字</p></li>\r\n<li><p><strong>只要记住你的名字，不管你在世界的哪个地方 ，我一定会，去见你。</strong> —— 你的名字</p></li>\r\n<li><p><strong>和绝望，和睦相处</strong> —— 少女终末旅行</p></li>\r\n<li><p><strong>愿你有一天，能与你最重要的人重逢</strong> —— 可塑性记忆</p></li>\r\n<li><p><strong>不相信人咬不到肚脐的，咬破肚脐去死如何？</strong> —— 海猫鸣泣之时</p></li>\r\n<li><p><strong>梦想是否无聊并不是别人来决定的，不管是什么样的梦想，自己拼命努力去追寻才是最重要的。</strong> —— 守护甜心</p></li>\r\n<li><p><strong>将愿望倾入不愿忘却的回忆中??</strong> —— ef-a tale of memories</p></li>\r\n<li><p><strong>倘若只是为了驱赶心中的寂寞，找谁都可以的。</strong> —— 秒速5厘米</p></li>\r\n<li><p><strong>什么都无法舍弃的人，什么都无法改变 。</strong> —— 进击的巨人</p></li>\r\n<li><p><strong>比希望更炙热，比绝望更深邃，这就是爱啊。</strong> —— 魔法少女小圆-叛逆的物语</p></li>\r\n<li><p><strong>我们都在命运之湖上荡舟划桨，波浪起伏着而我们无法逃脱孤航。但是假使我们迷失了方向，波浪将指引我们穿越另一天的曙光。</strong> —— 死神</p></li>\r\n<li><p><strong>懂得认输是非常重要的，不尝到失败的不甘，也就不会明白跌倒后怎么爬起来，更不可能再向前迈进。</strong> —— 笨蛋测验召唤兽</p></li>\r\n<li><p><strong>重要的不是你做了多少事，而是你放了多少心思进去。</strong> —— 凉宫春日的忧郁</p></li>\r\n<li><p><strong>就算是自私??我也希望那些人能够永远都有笑容??</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>(」?ω?)」うー！(／?ω?)／にゃー！</strong> —— 潜行吧奈亚子</p></li>\r\n<li><p><strong>欺骗世界，欺骗最初的你。</strong> —— Steins;Gate</p></li>\r\n<li><p><strong>在走廊上跌倒会流鼻血，在人生中跌倒会流眼泪。</strong> —— 龙虎斗</p></li>\r\n<li><p><strong>相信十年后的八月，我们还会相遇。</strong> —— 未闻花名</p></li>\r\n<li><p><strong>男人就应该保持冷静，沸腾的水只会被蒸发掉。</strong> —— 假面骑士kabuto</p></li>\r\n<li><p><strong>不管看到什么样的过去，都请不要迷失自己，不管你变成什么样子，我都是你的同伴。</strong> —— angel beats</p></li>\r\n<li><p><strong>想要试着去相互接近，但最后还是无法敞开心扉，结果就是擦肩而过??</strong> —— 文学少女</p></li>\r\n<li><p><strong>不能逃避，不能逃避，不能逃避，不能逃避??</strong> —— EVA</p></li>\r\n<li><p><strong>我终不能改变那个开始，何不忘了那个结局呢。</strong> —— 悟空传</p></li>\r\n<li><p><strong>因为我想活着，我不能掩藏我心中的本欲，正如我心中爱你美丽,又怎能嘴上装四大皆空。</strong> —— 悟空传</p></li>\r\n<li><p><strong>这短短的一生，我们最终都会失去。你不妨大胆一些，爱一个人，攀一座山，追一个梦。</strong> —— 大鱼海棠</p></li>\r\n<li><p><strong>出来吧，刻刻帝！</strong> —— 时崎狂三</p></li>\r\n<li><p><strong>翠星石最喜欢苍星石的说,所以到死也要在一起的说...</strong> —— Rozen Maiden</p></li>\r\n<li><p><strong>都是时辰的错！</strong> —— Fate/Zero</p></li>\r\n<li><p><strong>鸣神の　少しとよみて　さし昙り　雨も降らんか　君を留めん</strong> —— 言叶之庭</p></li>\r\n<li><p><strong>所谓爱情，是对对自己最重要的人，以慈悲的心保护他的想法。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>旅行唯有出发前最愉快，狗儿唯有叫声最吓人，女人唯有背影最美丽。</strong> —— 狼与香辛料</p></li>\r\n<li><p><strong>让我们开始我们的约会（战争）吧</strong> —— 约会大作战</p></li>\r\n<li><p><strong>连我爸都没打过我</strong> —— 高达0079</p></li>\r\n<li><p><strong>这是你所不能理解的，人类感情的极致，比希望更热烈，比绝望更深邃——爱！</strong> —— 魔法少女小圆新篇 叛逆的物语</p></li>\r\n<li><p><strong>What, so everyone's supposed to sleep every single night now? You realize that nighttime makes up half of all time?</strong> —— Rick</p></li>\r\n<li><p><strong>人生没有彩排，只有现场直播，所以做最好的自己。</strong> —— Internet</p></li>\r\n<li><p><strong>对自己有自信时，不能对别人说「期待」。所谓的「期待」是放弃时的托词，因为别无选择。若缺少这种无奈感，这个词就太虚伪了。</strong> —— 冰菓</p></li>\r\n<li><p><strong>人难免伤害别人,也难免受伤,不过,人是不会轻易讨厌别人的.</strong> —— 火影忍者</p></li>\r\n<li><p><strong>以智者之名，为愚者代辩。</strong> —— Gosick</p></li>\r\n<li><p><strong>清算，终将到来。</strong> —— Stellaris</p></li>\r\n<li><p><strong>据说啊 叹气会让幸福溜走的</strong> —— 再见了 我们的幼儿园</p></li>\r\n<li><p><strong>你将不再是道具，而是人如其名的人。</strong> —— 紫罗兰永恒的花园</p></li>\r\n<li><p><strong>人没有回忆是无法活下去的哟</strong> —— AIR</p></li>\r\n<li><p><strong>只要万事俱备，就能一直保持冷静，无论发生什么事，都不会害怕。</strong> —— 银魂</p></li>\r\n<li><p><strong>正因为不会发生，人们才称它为”奇迹“</strong> —— KANON</p></li>\r\n<li><p><strong>我想成为一个温柔的人,因为曾被温柔的人那样对待,深深了解那种被温柔相待的感觉。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>我喜欢的人…也能喜欢上自己，我认为这就是奇迹。</strong> —— 月色真美</p></li>\r\n<li><p><strong>大圣此去欲何? 踏南天，碎凌霄！若一去不回.... 便一去不回！</strong> —— 影视</p></li>\r\n<li><p><strong>我们一直在离别中，比如和爱的人，和伤害，甚至和时光。</strong> —— 萤火虫之墓</p></li>\r\n<li><p><strong>至少恋爱不是种机会，我认为它是一种意志。</strong> —— 月色真美</p></li>\r\n<li><p><strong>幸福感就如沉积在悲哀之河底下 隐隐发光的金砂</strong> —— 月色真美</p></li>\r\n<li><p><strong>有样东西是其他生物绝对没有，只有人类才有 那就是人有秘密。</strong> —— 月色真美</p></li>\r\n<li><p><strong>爱一定存在于世上 一定存在 无从寻觅的是爱的表现 是它的表达方式</strong> —— 月色真美</p></li>\r\n<li><p><strong>把同班的可爱女同学娶回家就是我最大的梦想</strong> —— 月色真美</p></li>\r\n<li><p><strong>在狂热思绪下喊出的爱情宣言中，存在着爱情的实体</strong> —— 月色真美</p></li>\r\n<li><p><strong>回首前尘，尽是可耻的过往</strong> —— 月色真美</p></li>\r\n<li><p><strong>月色如水，虽不如阳光般耀眼，但我的眼中却只有比那月色更可爱的你。心跳不知不觉中加速，嘴角也绷不住那溢出来的幸福笑意。月色确实醉人，却是因为你才显得更美</strong> —— 月色真美</p></li>\r\n<li><p><strong>“不管你我相距多远，我都想告诉你 我对你的心意不会变，给即将去到陌生城市的你 ，我永远喜欢你”</strong> —— 月色真美</p></li>\r\n<li><p><strong>我们人是需要吃饭、工作和休息的生物，只要满足了其中一项，其他两项也会逐渐满足，而当这三项都满足后，就会得到强烈的存在感。</strong> —— 银魂</p></li>\r\n<li><p><strong>看来这世界 似乎还想要驯服我 那就如你所愿吧 我会美丽地挣扎到底</strong> —— 你的名字</p></li>\r\n<li><p><strong>如果，樱花掉落的速度是每秒5厘米，那么两颗心需要多久才能靠近？</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>坐上与学校相反方向的电车，展开没有目标的旅行，去往那从未见过的地方</strong> —— 比宇宙更远的地方</p></li>\r\n<li><p><strong>不是为了战斗而活着，而是为了活着而战斗。</strong> —— 《DARLING in the FRANXX》</p></li>\r\n<li><p><strong>幸福的回忆，美满的回忆不一定会成为救赎，有时候，回忆越是美满便越痛苦，也有时候，会越害怕，无论是对于将要离开的人来说，还是对于被留下的人来说，都不可能会成为一种救赎。</strong> —— 可塑性记忆</p></li>\r\n<li><p><strong>恋爱不是谈出来的，而是陷进去的。</strong> —— GAMER电玩咖！</p></li>\r\n<li><p><strong>我们的哀伤和年龄是没有关系的。</strong> —— 樱桃小丸子</p></li>\r\n<li><p><strong>总在不停寻觅你的踪影，无论十字路口抑或梦境之中，明知你不在，却依然不停地找寻。</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>我想你们的努力一定会有回报的</strong> —— 龙与虎</p></li>\r\n<li><p><strong>人生不如意十有八九！</strong> —— 龙与虎</p></li>\r\n<li><p><strong>此身为剑所天成，身如钢铁，心似琉璃。</strong> —— Fate</p></li>\r\n<li><p><strong>我的梦想实现了，也留下了美好的回忆，我已经没有任何遗憾了。</strong> —— 末日时在做什么?有没有空?可以来拯救吗?</p></li>\r\n<li><p><strong>死者的血泪混入滚滚的流沙之中...将会赐予修罗更强的力量...</strong> —— 火影忍者</p></li>\r\n<li><p><strong>有型的东西终究会消逝，不过……终于，这份回忆还是永远不朽的…</strong> —— 火影忍者</p></li>\r\n<li><p><strong>人啊...想要保护重要东西的时候，就真的能变得很坚强。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>寂寞阴暗中度过，孤单孕育了怨与悲凉。锋利的伤痛刺入了我们彼此胸膛，这是我们无法躲避的惩罚，是我们不该任人生撩拨忧伤，不该走过之后又往回看。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>哪怕是打断你的手脚，也要把你带回去。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>从你站在桥上看我的 那一刻起你就是我的世界。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>龙儿是我的，谁都不许碰。</strong> —— 龙与虎</p></li>\r\n<li><p><strong>卧龙低伏，入我阵来。</strong> —— 一人之下</p></li>\r\n<li><p><strong>好红，每当想起你，枫叶就会被染红。</strong> —— 银仙</p></li>\r\n<li><p><strong>相信十年后的八月，我们还会相遇。</strong> —— 未闻花名</p></li>\r\n<li><p><strong>应该可以了吧，我已经很努力了，应该可以抵达终点了……</strong> —— AIR</p></li>\r\n<li><p><strong>殺してあげる</strong> —— 緋色月下、狂咲ノ絶</p></li>\r\n<li><p><strong>能力越大,责任越大</strong> —— 蜘蛛侠</p></li>\r\n<li><p><strong>不要随便贬低自己</strong> —— 终将成为你</p></li>\r\n<li><p><strong>我不喜欢这世界，我只喜欢你</strong> —— 乔一</p></li>\r\n<li><p><strong>神啊 我的人生到底为何而存在呢</strong> —— 蜂蜜与四叶草</p></li>\r\n<li><p><strong>想象力是武器，没有想象力的人会先死。</strong> —— 哥布林杀手</p></li>\r\n<li><p><strong>我们只是历史的过客，目标渺茫，无地自容。我们没有世界大战可以经历，也没有经济大萧条可以恐慌。我们的战争充其量不过是内心之战，我们最大的恐慌就是自己的生活。</strong> —— 搏击俱乐部</p></li>\r\n<li><p><strong>有的只是很简单的唯一的思想…只此一个！“胜利然后支配”！仅此而已...这才是我唯一的满足感！…至于过程和方法之类…并不重要！</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>王有王的才能，厨师有厨师的才能，替身之间是没有强弱之分的</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>如果我们能活着出去的话，千山万水，你愿意陪我一起看吗？</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>如果可以，愿来生你不要忘记我，我也不要忘记你那熟悉的温柔。</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>我愿意呀，五十年前就愿意了。</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>而我不知不觉把自己遗忘，只想为你完成那个梦想。</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>让我成为你的双眼，把那世界万千，描绘在你面前。</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>有很多辛苦的事情，从结果上来说并不好。但是一起努力的过程，绝对不是没用的。我是这么想的。所以现在不是停滞不前的时候。</strong> —— 如果有个妹妹就好了</p></li>\r\n<li><p><strong>你们这些天才止步不前的时候，我会走得更远。</strong> —— 如果有个妹妹就好了</p></li>\r\n<li><p><strong>有些景色必须前进才能看到，那么只有勇往直前。</strong> —— 如果有个妹妹就好了</p></li>\r\n<li><p><strong>果然啊，创造一样东西很开心。让别人享受自己创造的东西，是一种幸福呢。</strong> —— 如果有个妹妹就好了</p></li>\r\n<li><p><strong>世界上哪有不会输的英雄啊</strong> —— 凸变英雄</p></li>\r\n<li><p><strong>我怕失去了你，我的世界就没有了光明</strong> —— 凸变英雄</p></li>\r\n<li><p><strong>虽然有时候，不知道要写些什么，有时候，却有很多想说的，来不及记录。回忆一转身，就悄悄溜走了。</strong> —— 凸变英雄</p></li>\r\n<li><p><strong>哭过喊过便会停止哭泣</strong> —— 从零开始的异世界生活</p></li>\r\n<li><p><strong>很抱歉，前面是单行道，你就乖乖的夹着尾巴耸拉着脑袋返回原点吧！</strong> —— 一方通行</p></li>\r\n<li><p><strong>即便我弱了，也并不代表你强了。</strong> —— 魔法禁书目录</p></li>\r\n<li><p><strong>小鬼，你为坠入不幸深渊之人而心痛 我不会多言，只不过周遭充斥不幸，而你的小船仅能载一人，若救助其他人，只会让彼此沉没。</strong> —— 文豪野犬</p></li>\r\n<li><p><strong>死亡不是终点，被遗忘才是。</strong> —— 寻梦环游记</p></li>\r\n<li><p><strong>世界上的人都变成废柴，这个世界就没有废柴了。</strong> —— 春物</p></li>\r\n<li><p><strong>青春是谎言，是邪恶。</strong> —— 春物</p></li>\r\n<li><p><strong>纵使日薄西山。</strong> —— 末日时在做什么</p></li>\r\n<li><p><strong>孤高的游荡灵魂不需要羁绊之地</strong> —— 春物</p></li>\r\n<li><p><strong>我的金子，只给千寻。</strong> —— 千与千寻</p></li>\r\n<li><p><strong>步伐虽小，密而不停</strong> —— 实验品家庭</p></li>\r\n<li><p><strong>只会比大小真是没品</strong> —— 某科学的超电磁炮S</p></li>\r\n<li><p><strong>问灵十三载，等一不归人。</strong> —— 魔道祖师</p></li>\r\n<li><p><strong>如果我是雨的话，也能像连接那永远都不将交汇的天空和大地一样，去连接某个人的心吗。</strong> —— BLEACH</p></li>\r\n<li><p><strong>你还是...笑起来...最棒了</strong> —— 最终幻想XIV</p></li>\r\n<li><p><strong>'Cause rainbow won't light up the sky unless you let it rain.</strong> —— My Little Pony: Friendship is Magic</p></li>\r\n<li><p><strong>千山万水，因你不过毫厘</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>古往传奇多少别离，我 只是不经意 遇到了你</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>或许，你认为你的心已经给了他。但是，我会证明……我有一颗爱你的心！</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>你相信时间会抚平一切，可时过境迁，你已不复醒</strong> —— 动画</p></li>\r\n<li><p><strong>不拼尽全力去试一下，又怎么会知道啊</strong> —— 刺客伍六七</p></li>\r\n<li><p><strong>我今天就要带她走，我看谁敢拦我！</strong> —— 刺客伍六七</p></li>\r\n<li><p><strong>你们人类让我明白了一个道理，那就是这个世界是不讲道理的</strong> —— 刺客伍六七</p></li>\r\n<li><p><strong>人各有命，上天注定。有人天生为王，有人落草为寇。脚下的路如果不是你自己的选择，那么旅程的终点在哪儿也没人知道，你会走到哪儿，会碰到谁，都不一定。</strong> —— 镇魂街</p></li>\r\n<li><p><strong>世界是无情的，并不存在与生俱来的英雄。 所以只能由刚好在旁边的人粉墨登场， 演一出英雄的戏码。</strong> —— 魔法禁书目录</p></li>\r\n<li><p><strong>樱花满地集于我心，楪舞纷飞祈愿相随</strong> —— 罪恶王冠</p></li>\r\n<li><p><strong>人的能力是有极限的。我从短暂的人生当中学到一件事……越是玩弄计谋,就越会发现人类的能力是有极限的……除非超越人类。</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>那似乎是比翼鸟。这种鸟天生单翼，须靠雌雄二鸟相互依偎才能翱翔天际，是种有缺陷的生物。但是，不知为何，我却感受到了这种生活方式的美妙。</strong> —— Darling in the FRANXX</p></li>\r\n<li><p><strong>追寻只是因为无法抓获，想要触碰，只是因为知道自己触碰不到。</strong> —— FLCL Progressive</p></li>\r\n<li><p><strong>世界上所有的不利情况都是因为当事者的能力不足造成的</strong> —— 东京喰种</p></li>\r\n<li><p><strong>一个人有表里两面，你能看到的，仅仅是其中一面而已。</strong> —— 零的执行人</p></li>\r\n<li><p><strong>不知彼此来世相逢。是否还能记得我是谁？</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>与其因为不信任而后悔，不如因为相信而后悔。</strong> —— 刀剑神域</p></li>\r\n<li><p><strong>人生没有那么多的捷径，你不知道路的尽头是什么，但你必须向前走。</strong> —— 刀剑神域</p></li>\r\n<li><p><strong>一个人决定寂寞，和另一个人相互依偎又有什么错</strong> —— 人渣的本愿</p></li>\r\n<li><p><strong>我可从来不认为恐惧可以成为舍弃他人的借口，人不能因为恐惧，就连身为人类的品性都丢掉。</strong> —— 铁甲城的卡巴内瑞</p></li>\r\n<li><p><strong>你知道吗？从人眼的高度能看到的地平线，是离自身的距离大约是4公里。</strong> —— 青春猪头少年不会梦到兔女郎学姐</p></li>\r\n<li><p><strong>梦想是一个天真的词，实现梦想是一个残酷的词</strong> —— 哆啦A梦</p></li>\r\n<li><p><strong>既然今天是昨天，那么睡到明天就好。</strong> —— 青春猪头少年不会梦到兔女郎学姐</p></li>\r\n<li><p><strong>做不到的事没必要勉强去做，不也挺好吗？</strong> —— 青春猪头少年不会梦到兔女郎学姐</p></li>\r\n<li><p><strong>给我高高的飞起来啊！</strong> —— 星游记</p></li>\r\n<li><p><strong>要是眼睁睁的看着重要的同伴死去，就算是死，我也不能瞑目。</strong> —— 家庭教师</p></li>\r\n<li><p><strong>你的败因只有一个，就是与我为敌。 -</strong> —— 家庭教师</p></li>\r\n<li><p><strong>如果真是这样， 就由我来把彭格列毁灭！</strong> —— 家庭教师</p></li>\r\n<li><p><strong>十代目的意志就是我们的意志！</strong> —— 家庭教师</p></li>\r\n<li><p><strong>但我拒绝！我岸边露伴最喜欢的事情之一，就是向那些自以为是的家伙说，NO！</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>人类的赞歌就是勇气的赞歌！</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>大家都是伪善者，世间充斥着不真实。</strong> —— 无头骑士异闻录</p></li>\r\n<li><p><strong>不服从命令的人是人渣，抛弃同伴的人连人渣都不如。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>砸瓦鲁多！</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>背后即是祖国，我们无路可退。</strong> —— 那年那兔那些事</p></li>\r\n<li><p><strong>不能输，笑吧！</strong> —— 约定的梦幻岛</p></li>\r\n<li><p><strong>不管是怎样的回忆，都是我们活过的人生。</strong> —— Angel Beats!</p></li>\r\n<li><p><strong>孤独的我们才有人类的样子。</strong> —— Angel Beats!</p></li>\r\n<li><p><strong>声起立华乐独奏，曲末音无心结弦。</strong> —— Angel Beats!</p></li>\r\n<li><p><strong>不愿意的时候，逃跑也没有关系！</strong> —— 灵能百分百</p></li>\r\n<li><p><strong>邪王真眼是最强的</strong> —— 中二病也要谈恋爱</p></li>\r\n<li><p><strong>大部分人并不想长大 只是没办法继续当一个小孩子。</strong> —— 小林家的龙女仆</p></li>\r\n<li><p><strong>从开始的第一天起，就回不去了。</strong> —— 流浪地球</p></li>\r\n<li><p><strong>欧拉欧拉欧拉欧拉！</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>一举一动，都是承诺，会被另一个人看在眼里，记在心上的。</strong> —— 悬崖上的金鱼姬</p></li>\r\n<li><p><strong>人各有命，上天注定。有人天生为王，有人落草为寇。脚下的路，如果不是自己的选择，那旅程的终点在哪儿，也没人知道，你会走到哪儿，会碰到谁，都不一定。</strong> —— 镇魂街</p></li>\r\n<li><p><strong>成一事者，是失之不渝的愚者；毁一事者，是停滞不前的贤者。</strong> —— 不正经的魔法讲师</p></li>\r\n<li><p><strong>到底是，为什么呢？</strong> —— 金木研</p></li>\r\n<li><p><strong>我爱你，与你何干？</strong> —— 歌德</p></li>\r\n<li><p><strong>即使我弱了，也并不代表你强了</strong> —— 魔法禁书目录 第二季</p></li>\r\n<li><p><strong>正因为有了音乐，才有了相遇的瞬间，有了相会的感动，有了相逢的人们，有了邂逅的思念。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>你驻足于春色中，于那独一无二的春色之中。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>每当心情郁闷的时候，用手托腮就好，手臂会因为帮上忙而开心的。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>你的所言所行，全都闪烁着光芒，太过刺目，于是我闭上双眼，但内心还是无法停止对你的憧憬。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>或许前路永夜，即便如此我也要前进，因为星光即使微弱也会为我照亮前途。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>九月是蒲公英漫飞的季节，我喜欢这个季节，只可惜今天是九月的最后一天了</strong> —— 我是江小白</p></li>\r\n<li><p><strong>不辜负年华，做自己想做的事，唱自己想唱的歌</strong> —— 我是江小白</p></li>\r\n<li><p><strong>世间有很多事情，人们无法从它寂静的表象，猜测到暗涌，就像一个人和另一个人的相遇</strong> —— 我是江小白</p></li>\r\n<li><p><strong>用我那牵强的微笑，活出无人能比的骄傲。</strong> —— 黑执事</p></li>\r\n<li><p><strong>人类的赞歌就是勇气的赞歌</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>我没有任何理由为了那些人让自己的人生付之一炬！</strong> —— 三月的狮子</p></li>\r\n<li><p><strong>但是，我没有后悔，不能后悔，因为，我所做的事情一定没有错！</strong> —— 三月的狮子</p></li>\r\n<li><p><strong>相信奇迹的人，本身就和奇迹一样了不起。</strong> —— 星游记</p></li>\r\n<li><p><strong>即使天无雨，我亦留此地。</strong> —— 言叶之庭</p></li>\r\n<li><p><strong>有些梦想虽然遥不可及，但不是不可能实现。只要我足够的强。</strong> —— 秦时明月</p></li>\r\n<li><p><strong>有一天，你到了人类的世界，不要去爱上一个人，因为，爱上一个人，会让你真正变成孤单一人。</strong> —— 朝花夕誓</p></li>\r\n<li><p><strong>经为流逝的日月。纬为人们的生业。</strong> —— 朝花夕誓</p></li>\r\n<li><p><strong>悲痛的事，温柔以对；难过的事，坚强以对。</strong> —— 朝花夕誓</p></li>\r\n<li><p><strong>叫做妈妈的人，是不会哭的。</strong> —— 朝花夕誓</p></li>\r\n<li><p><strong>每一个兔子都有一个大国梦</strong> —— 那年那兔那些事</p></li>\r\n<li><p><strong>乘上与平时相反的列车，为了去见从未见过的风景。</strong> —— 比宇宙更远的地方</p></li>\r\n<li><p><strong>我不做人了！</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>我是否住进了某人的心房呢？</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>那么难受，那么痛苦，可是 世界这么美丽...让我如何能够忘记！</strong> —— 朝花夕誓</p></li>\r\n<li><p><strong>雁过拔毛，兽走留皮。涂山，我罩的，懂？</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>那天，我见过的最强剑客，提起了天下最强的宝剑······却早已没了剑心。</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>知识是很美的，它们可以让你不出家门就了解这世上的许多事。</strong> —— 妖精的尾巴</p></li>\r\n<li><p><strong>尽情的依靠我吧，因为总有一天我也会依靠你的。</strong> —— 妖精的尾巴</p></li>\r\n<li><p><strong>电助！凉子，看到了吗！</strong> —— 电脑线圈</p></li>\r\n<li><p><strong>I met the girl under full-bloomed cherry blossoms, and my fate has begun to change.</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>不相信自己的人，连努力的价值都没有。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>我一点也不走运。</strong> —— Fairy gone</p></li>\r\n<li><p><strong>我从未让你们骄傲，你们却待我如宝。</strong> —— Az殇芯的chx</p></li>\r\n<li><p><strong>错的不是我，而是这个世界！</strong> —— 东京喰种</p></li>\r\n<li><p><strong>你驻足于春色中，于那独一无二的春色之中。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>和她相遇的瞬间，我的人生就改变了。所见所闻所感，目之所及全都开始变得多姿多彩起来。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>やり遂げたよ、最後まで。</strong> —— ラブライブ</p></li>\r\n<li><p><strong>要把所有的夜归还给星河，把所有的春光归还给疏疏篱落，把所有的慵慵沉迷与不前，归还给过去的我。</strong> —— 德卡先生的信箱</p></li>\r\n<li><p><strong>总有一天，我要撕碎这片虚伪的星空。</strong> —— 黑之契约者</p></li>\r\n<li><p><strong>那么，开始实验吧！</strong> —— 假面骑士Build</p></li>\r\n<li><p><strong>我看到这个世界的恶意，我们正在接受考验。</strong> —— 机动战士高达00</p></li>\r\n<li><p><strong>喜欢上一个人就是变得束手无策。</strong> —— 悠久之翼2</p></li>\r\n<li><p><strong>所谓人，无论是谁到了最后，都会形单影只。</strong> —— 悠久之翼2</p></li>\r\n<li><p><strong>长大了，才能体会什么是责任！</strong> —— 家庭</p></li>\r\n<li><p><strong>你是否会等待着我?我还想变的更加完美...</strong> —— LoveLive!Sunshine!</p></li>\r\n<li><p><strong>我只是想要得到「我没有逃避」的记忆吧。</strong> —— 三月的狮子</p></li>\r\n<li><p><strong>人生海海，敢死不叫勇气，活着才需要勇气。</strong> —— 麦家-人生海海</p></li>\r\n<li><p><strong>我无知又愚蠢，世界残酷又疯狂。</strong> —— 进击的巨人</p></li>\r\n<li><p><strong>我的面包！</strong> —— Clannad</p></li>\r\n<li><p><strong>是我，是我先，明明都是我先来的，接吻也好，拥抱也好，还是喜欢上那家伙也好。</strong> —— 白色相簿2</p></li>\r\n<li><p><strong>一旦醉心于狩猎，不到最后关头不会发现自己才是猎物。</strong> —— 来自新世界</p></li>\r\n<li><p><strong>人类这种生物，不管有过多少不得不伴着泪水吞咽的教训，只要过了咽喉，所有教训便又会被彻底遗忘。</strong> —— 来自新世界</p></li>\r\n<li><p><strong>即使我变弱了，也不代表你变强了。</strong> —— 魔法禁书目录</p></li>\r\n<li><p><strong>喜欢和不讨厌之间可是有着数亿光年的距离的。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>痛苦着痛苦着，满脑子只能想我的事。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>我拼命地挣扎，我对活下去的执著，都是因为你，是你让我，对和你一起度过的那段时光无比留恋。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>站起来！站起来啊！你是我的腿吧！站起来啊！</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>我不甘心，明明你为我做了那么多，我却什么都不能为你做。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>等着我，有马，不对，别回头，向前进，你要一直向前，我一定会追上来的。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>就此分别吧！请继续向前，迎接樱花漫溢的四月，但请不要忘记我，友人A……</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>那里还有——医生的房间啊！</strong> —— Fate / Grand Order</p></li>\r\n<li><p><strong>因为我...我希望不做任何的努力，让对方喜欢上最真实的我。</strong> —— 女高中生的无所事事</p></li>\r\n<li><p><strong>没有一封信是不必被送达的。</strong> —— 紫罗兰永恒花园</p></li>\r\n<li><p><strong>我觉得，不改变也很好。</strong> —— 来自风平浪静的明天</p></li>\r\n<li><p><strong>痴情的妖怪啊,请再等一世吧。</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>你从我的手中展翅高飞，我深受打击。在这世上的某处，再次寻找崭新的你的影子，那就是我们之间的美好结局。</strong> —— 骚动时节的少女们啊</p></li>\r\n<li><p><strong>一旦你尝试过天空的味道，你就会永远向上仰望</strong> —— 列奥那多·达芬奇</p></li>\r\n<li><p><strong>人间不温柔</strong> —— 李诞</p></li>\r\n<li><p><strong>知道和感觉到是两码事。</strong> —— 《看见》</p></li>\r\n<li><p><strong>只要学不死，就往死里学。</strong> —— 网络热语</p></li>\r\n<li><p><strong>我是奥尔加·伊滋卡，几颗子弹不要紧的！</strong> —— 机动战士高达：铁血的孤儿</p></li>\r\n<li><p><strong>死亡的尽头，没有神</strong> —— 机动战士高达00:先驱者的觉醒</p></li>\r\n<li><p><strong>只要能和大家一起唱歌，大概就算毕业以后我们分开了，只要听见这首歌就能回想起现在。</strong> —— TARI TARI</p></li>\r\n<li><p><strong>我没能说出口，不管是那句「我走了」，还是那句「对不起」，或者那句「谢谢」...</strong> —— TARI TARI</p></li>\r\n<li><p><strong>现世为梦，夜梦为真。</strong> —— 《xxxholic》</p></li>\r\n<li><p><strong>隐约雷鸣阴霾天空即使风无雨我亦留此地</strong> —— 言叶之庭</p></li>\r\n<li><p><strong>今天不想做，所以才要做</strong> —— 春上村树</p></li>\r\n<li><p><strong>嗯，明白。我们是天人的Gundam Meister</strong> —— 机动战士高达00</p></li>\r\n<li><p><strong>不动身的话就永远无法追寻，哪怕是休息也不会就此停下。</strong> —— Aqours</p></li>\r\n<li><p><strong>朝着下一道光芒横渡大海吧！</strong> —— Aqours</p></li>\r\n<li><p><strong>这个世界啊，很美丽的，很广大的，很辽阔的！</strong> —— Darling in the FRANXX</p></li>\r\n<li><p><strong>我对Darling啊，最喜欢了。我们从今以后，都要在一起哦。</strong> —— Darling in the FRANXX</p></li>\r\n<li><p><strong>为了传达不到的思念而苦恼，只会感到痛不欲生。</strong> —— WHITE FIRST LOVE</p></li>\r\n<li><p><strong>千军万马滚滚来，不知何人留情怀！</strong> —— Other</p></li>\r\n<li><p><strong>用决斗......给大家......带来笑容......</strong> —— 游戏王<A-RCV></p></li>\r\n<li><p><strong>别人的看法都是狗屁，你是谁只有你自己说了才算，这是爹教我的道理。</strong> —— 哪吒之魔童降世</p></li>\r\n<li><p><strong>或许前路永夜，即便如此我也要前进，因为星光即使微弱也会为我照亮前路。</strong> —— 四月是你的谎言</p></li>\r\n<li><p><strong>这个世上没有无用的齿轮，也只有齿轮本身能决定自己的用途。</strong> —— 嫌疑人x的献身</p></li>\r\n<li><p><strong>光就是羁绊之力，它会再度被某人继承，散发出耀眼的光。</strong> —— 奈克瑟斯奥特曼</p></li>\r\n<li><p><strong>人们渴望像鸟儿一样自由自在地飞翔，可他们并没有想过，鸟儿也并不自由，它们之所以飞翔，是为了生存。</strong> —— 奈克瑟斯奥特曼</p></li>\r\n<li><p><strong>记忆是不会消失的，只是一时想不起来了而已。</strong> —— 千与千寻</p></li>\r\n<li><p><strong>我不借助别人的力量就没办法跟仰慕的人聊天吗？</strong> —— 女高中生的虚度日常</p></li>\r\n<li><p><strong>强韧，无敌，最强！玉碎，粉碎，大喝彩！</strong> —— 海马濑人</p></li>\r\n<li><p><strong>人的好意是沉重的。</strong> —— 黑神</p></li>\r\n<li><p><strong>我们所度过的每个平凡的日常，也许就是连续发生的奇迹。</strong> —— 日常</p></li>\r\n<li><p><strong>我最喜欢三月的风，四月的雨，不落的太阳和最好的你</strong> —— 闺密</p></li>\r\n<li><p><strong>在末日中，人们总想寻找希望，但要真有希望的话，那还叫希望吗？</strong> —— 灵笼</p></li>\r\n<li><p><strong>可爱即是正义。</strong> —— 游戏人生</p></li>\r\n<li><p><strong>在末日中，人们总想寻找希望，但要真有希望的话，那还叫末日吗？</strong> —— 灵笼</p></li>\r\n<li><p><strong>只要抗争下去就能带来奇迹，这是恐怖分子的教诲，你给我记清楚了。</strong> —— 未来日记</p></li>\r\n<li><p><strong>相信奇迹的人本身就和奇迹一样了不起啊</strong> —— 星游记</p></li>\r\n<li><p><strong>人类的赞歌就是勇气的赞歌。</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>你们腌太监也不会动人脑子啊！</strong> —— 铁心搏奕</p></li>\r\n<li><p><strong>这是你所不能理解的，人类感情的极致，比希望更热烈，比绝望更深邃——爱！</strong> —— 魔法少女小圆新篇</p></li>\r\n<li><p><strong>我不要你觉得，我要我觉得。</strong> —— 中餐厅</p></li>\r\n<li><p><strong>神啊，求求你。已经足够了。已经没事了。我们都会熬过去的。</strong> —— 天气之子</p></li>\r\n<li><p><strong>自古以来，天空上就是另一个世界。</strong> —— 天气之子</p></li>\r\n<li><p><strong>在东京的天空上，我们决定性的改变了世界的模样。</strong> —— 天气之子</p></li>\r\n<li><p><strong>向天空拼命伸出的双手，发射那么巨大的东西，只是为了寻找超出想象的彼岸所存在的东西。</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>你是否会等待着我？我会变得更加完美！</strong> —— Aqours</p></li>\r\n<li><p><strong>さあ，Games始めましょうか</strong> —— 游戏人生</p></li>\r\n<li><p><strong>被一个自己不感兴趣的人示好，你不觉得没有比这更恶心的事吗</strong> —— 人渣的本愿</p></li>\r\n<li><p><strong>世界上所有的不利状况都是因为当事者的能力不足</strong> —— 东京喰种</p></li>\r\n<li><p><strong>在虚构现实里寻求现实感的人才有问题</strong> —— 凉宫春日的忧郁</p></li>\r\n<li><p><strong>Ex - ploooosion !</strong> —— 为美好的世界献上祝福</p></li>\r\n<li><p><strong>是我，是我先，明明都是我先来的……接吻也好，拥抱也好，还是喜欢上那家伙也好</strong> —— 白色相簿2</p></li>\r\n<li><p><strong>没有一个世界会比活在这个世界痛苦</strong> —— 黑岩射手</p></li>\r\n<li><p><strong>如果把那一端的敌人全部杀掉的话，我们就能自由了吗？</strong> —— 进击的巨人</p></li>\r\n<li><p><strong>今后我们来度过满是愉快之事的人生吧</strong> —— Charlotte</p></li>\r\n<li><p><strong>如果一切都是镜花水月，那就让这万物走向终结。如果一切皆是命中注定，那就让这世界消失殆尽。</strong> —— 失落的歌谣</p></li>\r\n<li><p><strong>能够用自己喜欢的工作维持生活是件很幸福的事情</strong> —— 白箱</p></li>\r\n<li><p><strong>有的鱼是永远关不住的，因为他们属于天空。</strong> —— 大鱼海棠</p></li>\r\n<li><p><strong>我会化作人间的风雨陪在你的身边</strong> —— 大鱼海棠</p></li>\r\n<li><p><strong>你以为你接受的是谁的爱，是一个天神的爱！他背叛所有神灵去爱你，为你忍受一切痛苦。</strong> —— 大鱼海棠</p></li>\r\n<li><p><strong>深藏不露是一种卓越的才能</strong> —— 欢迎来到实力至上主义的教室</p></li>\r\n<li><p><strong>这样叹气的话，幸福会像四处逃散的小蜘蛛一样溜走的。</strong> —— 辉夜大小姐想让我告白</p></li>\r\n<li><p><strong>世上所以不公平之事是由于当事人能力不足所致。</strong> —— 金木研</p></li>\r\n<li><p><strong>雨滴降落的速度是每秒十米，我该用怎么样的速度，才能将你挽留？</strong> —— 言叶之庭</p></li>\r\n<li><p><strong>樱花落下的速度是每秒五厘米， 我该用怎么样的速度，才能与你相遇。</strong> —— 秒速五厘米</p></li>\r\n<li><p><strong>如果当时我们说了再见，后来是不是就可以再见</strong> —— 昨日青空</p></li>\r\n<li><p><strong>音无结弦之日 跃动天使之心 立于浮华之世 奏响天籁之音</strong> —— Angel Beats!</p></li>\r\n<li><p><strong>温柔正确的人总是难以生存，因为这世界既不温柔，也不正确。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>我一直注视着你，似近，似远。但你永远，看不见我……</strong> —— 来自风平浪静的明天</p></li>\r\n<li><p><strong>与其被人扯碎校服，撕破心灵，倒不如直接剁碎自己的躯体，来得痛快。</strong> —— 黑岩射手</p></li>\r\n<li><p><strong>目标是以科学的力量凌驾于超能力之上，为了伯伦希尔的荣耀。</strong> —— 小绿和小蓝</p></li>\r\n<li><p><strong>这东西是越嚼越有味哦~</strong> —— BanG Dream! 2nd Season</p></li>\r\n<li><p><strong>即使再也没有晴天也没有关系.</strong> —— 天气之子</p></li>\r\n<li><p><strong>我一直以为最糟糕的情况是你离开我，其实最令我难过的，是你不快乐。</strong> —— 精灵旅社</p></li>\r\n<li><p><strong>キラキラ☆ドキドキ</strong> —— 戸山香澄</p></li>\r\n<li><p><strong>我下定决心要当海贼王，就算因此而战死，那也无所谓。</strong> —— 海贼王</p></li>\r\n<li><p><strong>规则是用来被打破的。</strong> —— 机械公敌</p></li>\r\n<li><p><strong>木叶飞舞之处，火亦生生不息</strong> —— 火影忍者</p></li>\r\n<li><p><strong>当我拔出第二把剑时，就是为了我所爱之人</strong> —— 刀剑神域</p></li>\r\n<li><p><strong>你指尖跃动的电光，是我此生不变的信仰，唯我超电磁炮永世长存。</strong> —— 某科学的超电磁炮</p></li>\r\n<li><p><strong>遇事不决，量子力学。</strong> —— 青春期猪头少年不会梦到兔女郎学姐</p></li>\r\n<li><p><strong>我们终会相遇相知，在那悠远的苍穹。</strong> —— 缘之空</p></li>\r\n<li><p><strong>Star Burst Stream!</strong> —— 刀剑神域</p></li>\r\n<li><p><strong>虽然想做一团火，却成了一块透视苦难的冰</strong> —— 卡夫卡研究</p></li>\r\n<li><p><strong>生命可以随心所欲，但不能随波逐流</strong> —— 猫的报恩</p></li>\r\n<li><p><strong>我们所度过的每个平凡的日常，也许就是连续发生的奇迹</strong> —— 日常</p></li>\r\n<li><p><strong>加油</strong> —— 自编</p></li>\r\n<li><p><strong>夕阳真是耀眼无比啊。</strong> —— 女高中生的虚度日常</p></li>\r\n<li><p><strong>今天我就要带她走，我看谁敢拦我</strong> —— 刺客伍六七</p></li>\r\n<li><p><strong>这里有你,他现在只有我了。</strong> —— 罗小黑战记</p></li>\r\n<li><p><strong>星空之所以美丽，就是因为在无限的宇宙中，不管黑暗如何蔓延，都有星星的光芒去把它照亮。世界也是这样，有绝望的地方，就会有希望产生。</strong> —— 星游记</p></li>\r\n<li><p><strong>我来做最不想做的事情了。</strong> —— 22/7</p></li>\r\n<li><p><strong>你只见树，未见森林</strong> —— 火影忍者</p></li>\r\n<li><p><strong>你就赌我会死吧，因为你逢赌必输。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>奶奶说过，男人有两件事不能做——绝不能让女孩子流泪和浪费食物。</strong> —— 假面骑士Kabuto</p></li>\r\n<li><p><strong>正因为这样，我才决定任何时候都要尽全力享受人生，这样的话，无论什么时候死去，都是最幸福的一生了吧</strong> —— 恋爱随意链接</p></li>\r\n<li><p><strong>正因为有了所有的过去，才成就了现在的我。否定自己所走过的路途，就意味着否定现在的自己。</strong> —— 恋爱随意链接</p></li>\r\n<li><p><strong>每个人每一天的价值都是完全相等的，无论做什么，都不会改变我今天活着的价值。</strong> —— 我想吃掉你的胰脏</p></li>\r\n<li><p><strong>我这个人呀，能过着这样平凡普通的日子就很开心了。</strong> —— 我想吃掉你的胰脏</p></li>\r\n<li><p><strong>每个人能走到现在，都是自己选择的结果。</strong> —— 我想吃掉你的胰脏</p></li>\r\n<li><p><strong>都说樱花飘落时让人伤感，而我看到樱花盛开也觉得伤感，因为我会计算，我还能再看几次樱花盛开呢。</strong> —— 我想吃掉你的胰脏</p></li>\r\n<li><p><strong>只要人活在这世上就一定是有意义的，怎么活是自己选的。</strong> —— 我想吃掉你的胰脏</p></li>\r\n<li><p><strong>人生，一半是现实，一半是梦想。一念花开，一念花落。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>我希望，我能完全信任你，我还从来没有能这样信任过谁。我也希望，你将给我最大的支持。</strong> —— 安妮日记</p></li>\r\n<li><p><strong>愿你有一天，能和你最重要的人重逢。</strong> —— 可塑性记忆</p></li>\r\n<li><p><strong>告诉我，神会流血吗？——神不会，但你会。</strong> —— 烦人的村民</p></li>\r\n<li><p><strong>さあ、始めようか。(那么，游戏开始吧。)</strong> —— No Game No Life</p></li>\r\n<li><p><strong>我讨厌温柔的女孩子，温柔的女孩子其实对所有人都温柔，而我却会误以为只对自己温柔，然后沾沾自喜得意忘形，最后弄得不欢而散，双方都受到伤害，所以我才讨厌温柔的女孩子。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>无知而又纯洁的岁月。是任何人都曾拥有的。世界上没有一成不变的事务。所以只要以其他方式找到自己的快乐就行了。</strong> —— CLANNAD</p></li>\r\n<li><p><strong>粉色蓝宝石的宝石语是「献给弱者的正义」。</strong> —— 宝石商人理查德的谜鉴定</p></li>\r\n<li><p><strong>喂，前面可是地狱啊！おい、この先は地狱だぜ！</strong> —— Fate/stay night</p></li>\r\n<li><p><strong>Steel is my body, and fire is my blood.</strong> —— Fate/stay night</p></li>\r\n<li><p><strong>游龙当归海，海不迎我自来也。</strong> —— 火影鸣人</p></li>\r\n<li><p><strong>孩子，我愿意为你而前行。</strong> —— 灵笼</p></li>\r\n<li><p><strong>世界上一切不利状况，都是因为当事人的能力不足。</strong> —— 东京食尸鬼</p></li>\r\n<li><p><strong>隐约雷鸣，阴霾天空，即使天无雨，我亦留此地。</strong> —— 言叶之庭</p></li>\r\n<li><p><strong>没有未来的未来不是我想要的未来。</strong> —— 境界的彼方</p></li>\r\n<li><p><strong>只要怀着理想而行动，就算结果不尽如人意也没有关系。但是如果失去了理想，那就真的一无所有了，连自己珍视的人都保护不了。</strong> —— 境界的彼方</p></li>\r\n<li><p><strong>我喜欢你，比这个世界上其他任何人都喜欢你，我永远都会喜欢你的。只有我的这份心情是不会输给任何人的，即使我的这个身体毁灭了、从世界上消失了，来世我肯定还是会喜欢上你的。</strong> —— 境界的彼方</p></li>\r\n<li><p><strong>愿有朝一日与你见面还能释放温暖拥你入怀。</strong> —— 境界的彼方</p></li>\r\n<li><p><strong>已经没什么好害怕了。</strong> —— 魔法少女小圆</p></li>\r\n<li><p><strong>声起立华乐独奏，曲末音无心结弦。</strong> —— Angel Beats!</p></li>\r\n<li><p><strong>总在不停寻觅你的踪影，无论十字路口抑或梦境之中，明知你不在，却依然不停地找寻。</strong> —— 秒速5厘米</p></li>\r\n<li><p><strong>只要引导着二人的两把命运之剑还在身边，我们就绝不会失败。</strong> —— 刀剑神域</p></li>\r\n<li><p><strong>这虽然这是游戏，但可不是闹着玩的。</strong> —— 刀剑神域</p></li>\r\n<li><p><strong>花开得太好，所以摇摇欲坠；这一切的事情，老得这样快；世间一直熙攘着。</strong> —— 素年锦时</p></li>\r\n<li><p><strong>人要意识到自己过得悲哀，需要很长时间；要意识到其实不必如此，则需要更久。</strong> —— 马男波杰克</p></li>\r\n<li><p><strong>从这里（太空）根本看不到什么国境线，只有地球。</strong> —— 星空清理者</p></li>\r\n<li><p><strong>你那无聊的幻想，就由我来打破！</strong> —— 魔法禁书目录</p></li>\r\n<li><p><strong>正义不是行使武力的理由，而是正相反——为了将动武的理由正当化，人们才会高喊正义。</strong> —— 末日时在做什么？有没有空？可以来拯救吗？</p></li>\r\n<li><p><strong>君子无争，含光无形，坐忘无心。</strong> —— 秦时明月</p></li>\r\n<li><p><strong>我在这里只学会一件事，那就是不到最后绝不轻言放弃。如果回到了现实世界，我一定会再度和桐人你相遇，然后重新喜欢上你。</strong> —— 刀剑神域</p></li>\r\n<li><p><strong>最近我很喜欢明天见这句话，因为只要许下约定，就能期待明天的到来。</strong> —— 结城友奈是勇者</p></li>\r\n<li><p><strong>就算没有意义，偶尔也会有好事发生。</strong> —— 终末少女旅行</p></li>\r\n<li><p><strong>你将不再是道具，而是成为人如其名的人。</strong> —— 紫罗兰的永恒花园</p></li>\r\n<li><p><strong>大家热爱的事物，擅长的事物都不同，都拥有自己的世界，一个人一个世界，这些互相连接的话，就会展开许多的可能性，广大、未知，就像是宇宙一样。</strong> —— 恋爱小行星</p></li>\r\n<li><p><strong>无论人生过得怎么样，都不要失去自己活着的意义，努力的去追逐心中的梦想，留下自己曾经在这个世界活过的痕迹，不要等到一切都失去了才追悔莫及。</strong> —— 天使的心跳</p></li>\r\n<li><p><strong>人生没有那么多预算，不要等到到死后世界叹息，珍惜眼前所有。相信每天都是新的开始，都充满希望.</strong> —— 天使的心跳</p></li>\r\n<li><p><strong>真真需要记住的不是立华奏，而是天使身体里跳动的那颗永不结弦之心。</strong> —— 天使的心跳</p></li>\r\n<li><p><strong>人总有一天会孤独一人，然后活在自己的回忆中。为了能笑着于孤独相依为命，我决定战斗下去，决定不会再以泪洗面。</strong> —— 天使的心跳</p></li>\r\n<li><p><strong>与绝望~和睦相处。</strong> —— 少女终末旅行</p></li>\r\n<li><p><strong>人类的赞歌是勇气的赞歌，人类的伟大是勇气的伟大！</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>孤独的人不会伤害别人，只会不断地伤害自己罢了。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>枷锁，自然规律，时光的流逝，名为身体的容器，名为心灵的自我。</strong> —— 四月一日灵异事件薄</p></li>\r\n<li><p><strong>没事没事，不同朋友擅长的事情也不同。</strong> —— 兽娘动物园</p></li>\r\n<li><p><strong>如果有人对我说抱有希望是错误的花，我会无数次回答“不是这样的”，无论什么时候都一定会这样撑下去。</strong> —— 魔法少女小圆</p></li>\r\n<li><p><strong>这么温暖的世界里有我，要感谢神明了。</strong> —— Comic Girls</p></li>\r\n<li><p><strong>Don't forget. Always,somewhere,someone is fighting for you. As long as you remember her,you are not alone.</strong> —— 魔法少女小圆</p></li>\r\n<li><p><strong>这就是人类感情的极致，比希望更炽热，比绝望更深邃的，爱哟！</strong> —— 魔法少女小圆</p></li>\r\n<li><p><strong>露珠落去花留着，花萎露珠未消去。奈何露已随风去，花间寻觅不见珠。</strong> —— 学园孤岛</p></li>\r\n<li><p><strong>波，高低起伏的东西；波，产生后开始扩散；波，自己无法抵抗的东西。</strong> —— 四月一日灵异事件薄</p></li>\r\n<li><p><strong>在這手心之中的，就是“心”啊。</strong> —— 死神</p></li>\r\n<li><p><strong>木叶飞舞之处，火亦生生不息。</strong> —— 火影忍者</p></li>\r\n<li><p><strong>你以为我是谁？这是我埋下的因，我要亲手解决这一切。</strong> —— 某科学的超电磁炮</p></li>\r\n<li><p><strong>只要呼唤你的名字，我们的牵绊就永远不会消逝。</strong> —— 紫罗兰永恒花园外传：永远与自动手记人偶</p></li>\r\n<li><p><strong>我也许能再一次找到活着的目的，也许能再一次找到活着的意义，为了那些人，奉献出我的人生的话……</strong> —— Angelbeats</p></li>\r\n<li><p><strong>别低下头 排球是一门积极向上的运动！</strong> —— 排球少年</p></li>\r\n<li><p><strong>理解何为孤单，努力想得到爱的你，内心的悲伤是否稍微宣泄了呢？</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>自己不经意的一句话，触动了别人的心。</strong> —— 恋如雨止</p></li>\r\n<li><p><strong>游荡的孤高灵魂不需要羁绊之处。</strong> —— 我的青春恋爱物语果然有问题</p></li>\r\n<li><p><strong>如果说现在的日子过得很穷困，那我就去喜欢上穷困。</strong> —— 隐瞒之事</p></li>\r\n<li><p><strong>人和人之间就像这风筝一样，拉的太紧就飞不远，放的太松又掉下来，而当它飞的很高很高你还拽着不放，它就有可能会断掉，再也回不来了。</strong> —— 灵契</p></li>\r\n<li><p><strong>一日为灵，终生为影，灵气共生，魂命无分，阴阳调和，万物皆宁。</strong> —— 灵契</p></li>\r\n<li><p><strong>端木熙，别忘了，你是我的祭司，谁也别来跟我争，他神龙章轩不可以，神也不行。</strong> —— 灵契</p></li>\r\n<li><p><strong>从今往后，你不能斩的人我来斩，你不能伤的人我来杀，既然你要保护这个世界，那我便保护你，这就是我的信念！</strong> —— 灵契</p></li>\r\n<li><p><strong>千载流年一如梦，月落山河一世倾。</strong> —— 灵契</p></li>\r\n<li><p><strong>不可结缘，徒留寂寞……</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>一代锤子一代皇，代代锤子教做人！</strong> —— 斗罗大陆</p></li>\r\n<li><p><strong>花早晚会凋谢，记忆最终也会消散。</strong> —— 镇魂街</p></li>\r\n<li><p><strong>所谓首领，只不过是被势力绑架上制高点的走狗而已。而且，都是身不由己的走狗。</strong> —— 狐妖小红娘</p></li>\r\n<li><p><strong>无论是人类还是妖怪，只要内心希望他人接触，那么就是相同的存在；会因独处而感到寂寞，也会害怕踏出第一步。</strong> —— 夏目友人帐</p></li>\r\n<li><p><strong>未来始终掌握在自己手中，从中滑落的，我们称之为过去。</strong> —— 末日时在做什么？有没有空？可以来拯救吗？</p></li>\r\n<li><p><strong>我不努力，就见不到你了啊。</strong> —— 昨日之歌</p></li>\r\n<li><p><strong>无可取代的东西要到失去后才知道珍惜呢。</strong> —— 干物妹小埋</p></li>\r\n<li><p><strong>没有什么背叛，只不过是忠诚过期了而已。</strong> —— 凹凸世界</p></li>\r\n<li><p><strong>Ko no Dio da!</strong> —— JOJO的奇妙冒险</p></li>\r\n<li><p><strong>我们不是大人，而是同学吧。</strong> —— 恋如雨止</p></li>\r\n<li><p><strong>今天的我，凌驾于阿修罗之上！</strong> —— 机动战士高达00</p></li>\r\n<li><p><strong>Exia，驱逐目标！</strong> —— 机动战士高达00</p></li>\r\n<li><p><strong>花无凋零之时，爱无传达之期，爱情亘古不变，紫罗兰永世长存。</strong> —— 紫罗兰永恒花园</p></li>\r\n<li><p><strong>相比昨日明日，今天更适合开始。</strong> —— Comic Girls</p></li>\r\n<li><p><strong>呐~~凯利，你想成为怎样的大人。</strong> —— Fate/Zero</p></li>\r\n<li><p><strong>当敌人变成战友多半是为了生存，而战友变成敌人多半是为了金钱。</strong> —— 端脑</p></li>\r\n<li><p><strong>正因为听不见和看不到，所以风子才会做这样的事情。</strong> —— Clannad</p></li>\r\n<li><p><strong>我们开始一起攀登，这长长的，长长的坡道。</strong> —— Clannad</p></li>\r\n<li><p><strong>无知而又纯洁的岁月是任何人都曾拥有的，世界上没有一成不变的事物，所以只要以其他方式找到自己的快乐就行了。</strong> —— Clannad</p></li>\r\n<li><p><strong>前天是小兔子，昨天是小鹿，今天是你。</strong> —— Clannad</p></li>\r\n<li><p><strong>能哭的地方只有厕所和爸爸的怀里。</strong> —— Clannad</p></li>\r\n<li><p><strong>美好的事情，现在才开始呐。</strong> —— Clannad</p></li>\r\n<li><p><strong>什么叫忍者？学会忍耐的人就叫忍者。</strong> —— 哔哩哔哩</p></li>\r\n</ul>\r\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cktfuxgz80001ootnd14262cw","category_id":"cktfuxgzd0004ootnbvejgzkw","_id":"cktfuxgzk000eootn66he43pc"},{"post_id":"cktfuxgzj000cootnhd6igolb","category_id":"cktfuxgzi000aootn0hdt5hpc","_id":"cktfuxgzo000jootn2gfca2q2"},{"post_id":"cktfuxgzc0003ootnay514bwf","category_id":"cktfuxgzi000aootn0hdt5hpc","_id":"cktfuxgzp000nootn2podfitm"},{"post_id":"cktfuxgzk000dootnaq1fdrze","category_id":"cktfuxgzi000aootn0hdt5hpc","_id":"cktfuxgzq000pootncxij6rzj"},{"post_id":"cktfuxgzm000hootn4b9l05sa","category_id":"cktfuxgzi000aootn0hdt5hpc","_id":"cktfuxgzr000tootnfqrlemh4"},{"post_id":"cktfuxgzf0007ootn8uajb5sj","category_id":"cktfuxgzi000aootn0hdt5hpc","_id":"cktfuxgzt000wootng8yq3rmf"},{"post_id":"cktfuxgzn000iootn8fks0s6f","category_id":"cktfuxgzi000aootn0hdt5hpc","_id":"cktfuxgzu000zootnhili3pye"},{"post_id":"cktfuxgzp000mootnaem74fd7","category_id":"cktfuxgzi000aootn0hdt5hpc","_id":"cktfuxgzv0013ootnds3rhjo4"},{"post_id":"cktfuxgzg0008ootn1ii8gnvn","category_id":"cktfuxgzo000kootnhijj3257","_id":"cktfuxgzw0016ootneg1a4l64"},{"post_id":"cktfuxgzp000oootnh031bevk","category_id":"cktfuxgzi000aootn0hdt5hpc","_id":"cktfuxgzx001aootnbg3xa2e2"},{"post_id":"cktfuxgzr000sootn1ui68khy","category_id":"cktfuxgzi000aootn0hdt5hpc","_id":"cktfuxgzy001cootnarhv3f95"},{"post_id":"cktfuxgzh0009ootnbl32fj1d","category_id":"cktfuxgzi000aootn0hdt5hpc","_id":"cktfuxgzz001footn7temeohg"},{"post_id":"cktfuxgzs000vootn7ij97f6n","category_id":"cktfuxgzi000aootn0hdt5hpc","_id":"cktfuxgzz001iootn7z3d82wa"},{"post_id":"cktfuxgzt000yootn2z3oc7bs","category_id":"cktfuxgzi000aootn0hdt5hpc","_id":"cktfuxh00001mootn2urn5kxw"},{"post_id":"cktfuxgzu0012ootncu3t3xus","category_id":"cktfuxgzi000aootn0hdt5hpc","_id":"cktfuxh01001pootn8hk636ud"},{"post_id":"cktfuxgzv0015ootn4pqv90ir","category_id":"cktfuxgzi000aootn0hdt5hpc","_id":"cktfuxh02001tootncrr21qu1"},{"post_id":"cktfuxgzw0019ootn9cet8kv2","category_id":"cktfuxgzi000aootn0hdt5hpc","_id":"cktfuxh03001vootnaxa7fo1x"},{"post_id":"cktfuxgzx001bootn9hy4h0le","category_id":"cktfuxgzi000aootn0hdt5hpc","_id":"cktfuxh04001xootn7ag995n0"},{"post_id":"cktfuxgzy001eootnctq0fpr7","category_id":"cktfuxgzi000aootn0hdt5hpc","_id":"cktfuxh050022ootn8sqlewkj"},{"post_id":"cktfuxgzz001hootnfqcqgs66","category_id":"cktfuxgzi000aootn0hdt5hpc","_id":"cktfuxh080025ootn2roz9gf4"},{"post_id":"cktfuxh00001lootn0ruo852i","category_id":"cktfuxgzi000aootn0hdt5hpc","_id":"cktfuxh0b002aootnbj5ccvtm"},{"post_id":"cktfuxh02001sootn8y17gs97","category_id":"cktfuxgzi000aootn0hdt5hpc","_id":"cktfuxh0c002cootng3y4f2vr"},{"post_id":"cktfuxh03001uootncgxbc09w","category_id":"cktfuxh04001zootnfod93aor","_id":"cktfuxh0e002hootn3pfz0sjn"},{"post_id":"cktfuxh03001wootnaf27hcj4","category_id":"cktfuxh04001zootnfod93aor","_id":"cktfuxh0j002oootnd7dze8es"},{"post_id":"cktfuxh050021ootnbviu7tnp","category_id":"cktfuxh04001zootnfod93aor","_id":"cktfuxh0l002sootnbdyf64fq"},{"post_id":"cktfuxh060024ootnhn3b2p5l","category_id":"cktfuxh0i002nootnfeus43na","_id":"cktfuxh0n002yootndknm3euw"},{"post_id":"cktfuxh0a0028ootn116ffzdj","category_id":"cktfuxh0l002tootn5ze3g1yp","_id":"cktfuxh0r0034ootn2way59wi"},{"post_id":"cktfuxh0b002bootngpls904j","category_id":"cktfuxh0n002zootnbvqq5e9h","_id":"cktfuxh0t003aootn29122ncq"},{"post_id":"cktfuxh0e002footncyti6e54","category_id":"cktfuxh0r0035ootngti891de","_id":"cktfuxh0w003hootn0ffc92vj"},{"post_id":"cktfuxh0i002mootn52vu9bia","category_id":"cktfuxh0u003cootn49unguzf","_id":"cktfuxh0y003mootndgdy5ys2"},{"post_id":"cktfuxh0n002wootn3lvc0avc","category_id":"cktfuxh0w003iootnh8t6aqd0","_id":"cktfuxh10003rootnhbn062pa"},{"post_id":"cktfuxh0y003lootn0n0l6xd2","category_id":"cktfuxh0u003cootn49unguzf","_id":"cktfuxh10003vootnay474fjw"},{"post_id":"cktfuxh0z003pootn0ff13dh1","category_id":"cktfuxh0u003cootn49unguzf","_id":"cktfuxh10003xootncneo1la9"},{"post_id":"cktfuxh0o0030ootn4omf2cgf","category_id":"cktfuxh0y003nootnc698djm6","_id":"cktfuxh110040ootnfgng85xy"},{"post_id":"cktfuxh0q0033ootn0g78bh46","category_id":"cktfuxh0y003nootnc698djm6","_id":"cktfuxh110042ootn7ivl0ish"},{"post_id":"cktfuxh0r0036ootn68hf2kpr","category_id":"cktfuxh0u003cootn49unguzf","_id":"cktfuxh120044ootn6a9chxsc"},{"post_id":"cktfuxh0s0038ootndocp07zz","category_id":"cktfuxh110041ootn77mkbnvr","_id":"cktfuxh130049ootn6dyl30xx"},{"post_id":"cktfuxh0u003bootn3v3ddjli","category_id":"cktfuxh110041ootn77mkbnvr","_id":"cktfuxh14004eootn2ttj599n"},{"post_id":"cktfuxh0v003footnhuc2hs9o","category_id":"cktfuxh110041ootn77mkbnvr","_id":"cktfuxh15004jootn151qac3o"},{"post_id":"cktfuxh0w003gootnfcnb8kol","category_id":"cktfuxh110041ootn77mkbnvr","_id":"cktfuxh15004mootn0yfs29zd"},{"post_id":"cktfuxh0x003kootn9r6d62kn","category_id":"cktfuxh110041ootn77mkbnvr","_id":"cktfuxh16004pootngzr5gj4j"},{"post_id":"cktfuxh1x007hootnfi8gcpa4","category_id":"cktfuxh0u003cootn49unguzf","_id":"cktfuxh1y007kootn3mtqh1h7"}],"PostTag":[{"post_id":"cktfuxgz80001ootnd14262cw","tag_id":"cktfuxgzf0005ootnehug0joz","_id":"cktfuxgzs000uootn3uawg5tu"},{"post_id":"cktfuxgz80001ootnd14262cw","tag_id":"cktfuxgzi000bootnd9xf34rk","_id":"cktfuxgzt000xootn7keyhgv6"},{"post_id":"cktfuxgz80001ootnd14262cw","tag_id":"cktfuxgzk000gootn7tks6aro","_id":"cktfuxgzu0011ootnawq88ai5"},{"post_id":"cktfuxgz80001ootnd14262cw","tag_id":"cktfuxgzo000lootn5sz96wop","_id":"cktfuxgzv0014ootn34bz9o2a"},{"post_id":"cktfuxgzc0003ootnay514bwf","tag_id":"cktfuxgzr000rootncpl4hu8q","_id":"cktfuxgzw0018ootn5rcg7ymx"},{"post_id":"cktfuxgzf0007ootn8uajb5sj","tag_id":"cktfuxgzr000rootncpl4hu8q","_id":"cktfuxgzz001gootnfxafc7wq"},{"post_id":"cktfuxgzf0007ootn8uajb5sj","tag_id":"cktfuxgzw0017ootn5vm06lue","_id":"cktfuxh00001jootn8n4c8uxj"},{"post_id":"cktfuxgzy001eootnctq0fpr7","tag_id":"cktfuxgzr000rootncpl4hu8q","_id":"cktfuxh01001nootndptegzi4"},{"post_id":"cktfuxgzy001eootnctq0fpr7","tag_id":"cktfuxgzw0017ootn5vm06lue","_id":"cktfuxh01001qootn74s25w4v"},{"post_id":"cktfuxgzg0008ootn1ii8gnvn","tag_id":"cktfuxgzy001dootn56mtdl54","_id":"cktfuxh050020ootngrdh94ln"},{"post_id":"cktfuxgzg0008ootn1ii8gnvn","tag_id":"cktfuxh00001kootngafrgocb","_id":"cktfuxh050023ootncsm4204x"},{"post_id":"cktfuxgzg0008ootn1ii8gnvn","tag_id":"cktfuxh02001rootncjeo6p89","_id":"cktfuxh090027ootnaz0hazjf"},{"post_id":"cktfuxgzh0009ootnbl32fj1d","tag_id":"cktfuxgzy001dootn56mtdl54","_id":"cktfuxh0d002eootnfhmmh5zs"},{"post_id":"cktfuxgzh0009ootnbl32fj1d","tag_id":"cktfuxh00001kootngafrgocb","_id":"cktfuxh0f002iootn1omf1kik"},{"post_id":"cktfuxgzj000cootnhd6igolb","tag_id":"cktfuxgzr000rootncpl4hu8q","_id":"cktfuxh0h002lootnewld836t"},{"post_id":"cktfuxgzk000dootnaq1fdrze","tag_id":"cktfuxgzy001dootn56mtdl54","_id":"cktfuxh0n002xootn0npoeyvj"},{"post_id":"cktfuxgzk000dootnaq1fdrze","tag_id":"cktfuxh0k002qootnctpthtsm","_id":"cktfuxh0p0031ootneo874ssr"},{"post_id":"cktfuxgzm000hootn4b9l05sa","tag_id":"cktfuxgzy001dootn56mtdl54","_id":"cktfuxh0t0039ootnegcg5ua5"},{"post_id":"cktfuxgzm000hootn4b9l05sa","tag_id":"cktfuxh00001kootngafrgocb","_id":"cktfuxh0u003dootnc60oavyb"},{"post_id":"cktfuxgzn000iootn8fks0s6f","tag_id":"cktfuxh0s0037ootnepw3gjv6","_id":"cktfuxh0z003qootn5lpm6ovu"},{"post_id":"cktfuxgzn000iootn8fks0s6f","tag_id":"cktfuxh0v003eootndciv26ox","_id":"cktfuxh10003sootn96nzct5n"},{"post_id":"cktfuxgzn000iootn8fks0s6f","tag_id":"cktfuxgzr000rootncpl4hu8q","_id":"cktfuxh10003wootnaf0h6bfk"},{"post_id":"cktfuxgzp000mootnaem74fd7","tag_id":"cktfuxh0y003oootn8azkdf2a","_id":"cktfuxh130047ootnhnlqf4oi"},{"post_id":"cktfuxgzp000mootnaem74fd7","tag_id":"cktfuxh10003uootn89p7aexk","_id":"cktfuxh13004aootn8fwqcdqh"},{"post_id":"cktfuxgzp000mootnaem74fd7","tag_id":"cktfuxh11003zootnazwy92xp","_id":"cktfuxh13004cootn2e1x8g67"},{"post_id":"cktfuxgzp000mootnaem74fd7","tag_id":"cktfuxgzr000rootncpl4hu8q","_id":"cktfuxh14004footndf183a81"},{"post_id":"cktfuxgzp000oootnh031bevk","tag_id":"cktfuxgzy001dootn56mtdl54","_id":"cktfuxh14004hootnegb39sqr"},{"post_id":"cktfuxgzp000oootnh031bevk","tag_id":"cktfuxh13004bootn2k64ab0a","_id":"cktfuxh15004kootn9bbuao2f"},{"post_id":"cktfuxgzr000sootn1ui68khy","tag_id":"cktfuxgzy001dootn56mtdl54","_id":"cktfuxh16004oootn10ew43mz"},{"post_id":"cktfuxgzr000sootn1ui68khy","tag_id":"cktfuxgzf0005ootnehug0joz","_id":"cktfuxh16004qootn11oe05q9"},{"post_id":"cktfuxgzr000sootn1ui68khy","tag_id":"cktfuxh0k002qootnctpthtsm","_id":"cktfuxh17004sootnfeji6pl2"},{"post_id":"cktfuxgzs000vootn7ij97f6n","tag_id":"cktfuxgzy001dootn56mtdl54","_id":"cktfuxh17004uootncrlr53bf"},{"post_id":"cktfuxgzs000vootn7ij97f6n","tag_id":"cktfuxh13004bootn2k64ab0a","_id":"cktfuxh17004vootn73s6hkcy"},{"post_id":"cktfuxgzt000yootn2z3oc7bs","tag_id":"cktfuxgzf0005ootnehug0joz","_id":"cktfuxh18004xootnek0c9tse"},{"post_id":"cktfuxgzt000yootn2z3oc7bs","tag_id":"cktfuxh13004bootn2k64ab0a","_id":"cktfuxh18004yootn9ntkfagv"},{"post_id":"cktfuxgzu0012ootncu3t3xus","tag_id":"cktfuxgzy001dootn56mtdl54","_id":"cktfuxh180051ootnd99fhjma"},{"post_id":"cktfuxgzu0012ootncu3t3xus","tag_id":"cktfuxh13004bootn2k64ab0a","_id":"cktfuxh180052ootn5faz93o0"},{"post_id":"cktfuxgzv0015ootn4pqv90ir","tag_id":"cktfuxgzr000rootncpl4hu8q","_id":"cktfuxh190054ootnadwe80hb"},{"post_id":"cktfuxgzv0015ootn4pqv90ir","tag_id":"cktfuxh180050ootn1ezb6ab9","_id":"cktfuxh190055ootnf0gt3u95"},{"post_id":"cktfuxgzw0019ootn9cet8kv2","tag_id":"cktfuxh190053ootn46mafpfq","_id":"cktfuxh190057ootncnf95s32"},{"post_id":"cktfuxgzx001bootn9hy4h0le","tag_id":"cktfuxgzy001dootn56mtdl54","_id":"cktfuxh1a005bootn6u8f44a3"},{"post_id":"cktfuxgzx001bootn9hy4h0le","tag_id":"cktfuxh190058ootncyq3foua","_id":"cktfuxh1a005cootnb5uq2cm7"},{"post_id":"cktfuxgzx001bootn9hy4h0le","tag_id":"cktfuxh1a0059ootn0ion5bw2","_id":"cktfuxh1b005eootng6q169vj"},{"post_id":"cktfuxgzz001hootnfqcqgs66","tag_id":"cktfuxgzr000rootncpl4hu8q","_id":"cktfuxh1b005gootn6ubx54v2"},{"post_id":"cktfuxgzz001hootnfqcqgs66","tag_id":"cktfuxh0y003oootn8azkdf2a","_id":"cktfuxh1b005hootnd31ug0uj"},{"post_id":"cktfuxgzz001hootnfqcqgs66","tag_id":"cktfuxh1a005dootnfzb5aovs","_id":"cktfuxh1c005jootn0dz4hggj"},{"post_id":"cktfuxh00001lootn0ruo852i","tag_id":"cktfuxgzr000rootncpl4hu8q","_id":"cktfuxh1d005kootna7lsh13p"},{"post_id":"cktfuxh00001lootn0ruo852i","tag_id":"cktfuxh1b005footnf0f76ki0","_id":"cktfuxh1d005mootn8ff2csnq"},{"post_id":"cktfuxh02001sootn8y17gs97","tag_id":"cktfuxgzr000rootncpl4hu8q","_id":"cktfuxh1e005nootn7kqxdkrz"},{"post_id":"cktfuxh02001sootn8y17gs97","tag_id":"cktfuxh1b005iootnbp9yfxvf","_id":"cktfuxh1e005pootnd0ez6vn6"},{"post_id":"cktfuxh03001uootncgxbc09w","tag_id":"cktfuxh1b005iootnbp9yfxvf","_id":"cktfuxh1e005qootn0ph3gpj8"},{"post_id":"cktfuxh03001wootnaf27hcj4","tag_id":"cktfuxh1b005iootnbp9yfxvf","_id":"cktfuxh1f005sootndk9f5jze"},{"post_id":"cktfuxh050021ootnbviu7tnp","tag_id":"cktfuxh1b005iootnbp9yfxvf","_id":"cktfuxh1g005wootney5b7mjd"},{"post_id":"cktfuxh050021ootnbviu7tnp","tag_id":"cktfuxh1f005tootnfkz2863v","_id":"cktfuxh1g005xootn0hihg1vn"},{"post_id":"cktfuxh050021ootnbviu7tnp","tag_id":"cktfuxh1f005uootn7cac2d9c","_id":"cktfuxh1g005zootn2ulc2g9h"},{"post_id":"cktfuxh060024ootnhn3b2p5l","tag_id":"cktfuxgzr000rootncpl4hu8q","_id":"cktfuxh1g0060ootn1nz1djgb"},{"post_id":"cktfuxh060024ootnhn3b2p5l","tag_id":"cktfuxh1a005dootnfzb5aovs","_id":"cktfuxh1i0062ootn3xzp6zjx"},{"post_id":"cktfuxh0a0028ootn116ffzdj","tag_id":"cktfuxgzf0005ootnehug0joz","_id":"cktfuxh1i0063ootnfmnp529q"},{"post_id":"cktfuxh0a0028ootn116ffzdj","tag_id":"cktfuxgzr000rootncpl4hu8q","_id":"cktfuxh1j0065ootn7pxses6f"},{"post_id":"cktfuxh0a0028ootn116ffzdj","tag_id":"cktfuxh11003zootnazwy92xp","_id":"cktfuxh1j0066ootng49t4ouf"},{"post_id":"cktfuxh0b002bootngpls904j","tag_id":"cktfuxh13004bootn2k64ab0a","_id":"cktfuxh1j0068ootn8vd626zv"},{"post_id":"cktfuxh0b002bootngpls904j","tag_id":"cktfuxgzw0017ootn5vm06lue","_id":"cktfuxh1j0069ootn8iz66kwb"},{"post_id":"cktfuxh0i002mootn52vu9bia","tag_id":"cktfuxh1i0064ootnccukb1ch","_id":"cktfuxh1j006bootn822zh18f"},{"post_id":"cktfuxh0i002mootn52vu9bia","tag_id":"cktfuxgzf0005ootnehug0joz","_id":"cktfuxh1k006cootngv3zfosz"},{"post_id":"cktfuxh0i002mootn52vu9bia","tag_id":"cktfuxgzo000lootn5sz96wop","_id":"cktfuxh1k006eootn9ekqhn57"},{"post_id":"cktfuxh0i002mootn52vu9bia","tag_id":"cktfuxgzk000gootn7tks6aro","_id":"cktfuxh1k006footn5gy6b8ur"},{"post_id":"cktfuxh0i002mootn52vu9bia","tag_id":"cktfuxh1j0067ootndp5ah100","_id":"cktfuxh1k006hootn3g9pcpvg"},{"post_id":"cktfuxh0m002uootncaw3crja","tag_id":"cktfuxh1j006aootn7cc1ff4n","_id":"cktfuxh1k006iootnazpfhhsl"},{"post_id":"cktfuxh0o0030ootn4omf2cgf","tag_id":"cktfuxgzf0005ootnehug0joz","_id":"cktfuxh1l006kootnhcbe4pcf"},{"post_id":"cktfuxh0o0030ootn4omf2cgf","tag_id":"cktfuxh1k006dootn7brqeusa","_id":"cktfuxh1l006lootnbe6na7iz"},{"post_id":"cktfuxh0o0030ootn4omf2cgf","tag_id":"cktfuxh1k006gootn2gen00np","_id":"cktfuxh1l006nootnhqus1q14"},{"post_id":"cktfuxh0q0033ootn0g78bh46","tag_id":"cktfuxh190053ootn46mafpfq","_id":"cktfuxh1m006pootn4sc4czsz"},{"post_id":"cktfuxh0q0033ootn0g78bh46","tag_id":"cktfuxh1l006mootnai15fhnk","_id":"cktfuxh1m006qootn8vucdnfu"},{"post_id":"cktfuxh0r0036ootn68hf2kpr","tag_id":"cktfuxh1i0064ootnccukb1ch","_id":"cktfuxh1n006uootn9cbx0i9f"},{"post_id":"cktfuxh0r0036ootn68hf2kpr","tag_id":"cktfuxh0s0037ootnepw3gjv6","_id":"cktfuxh1n006vootngpsi74d9"},{"post_id":"cktfuxh0r0036ootn68hf2kpr","tag_id":"cktfuxh0v003eootndciv26ox","_id":"cktfuxh1n006xootn8yaqd9li"},{"post_id":"cktfuxh0s0038ootndocp07zz","tag_id":"cktfuxh1b005iootnbp9yfxvf","_id":"cktfuxh1n006yootnazcpft5z"},{"post_id":"cktfuxh0u003bootn3v3ddjli","tag_id":"cktfuxh1b005iootnbp9yfxvf","_id":"cktfuxh1o0072ootn322q7lbz"},{"post_id":"cktfuxh0u003bootn3v3ddjli","tag_id":"cktfuxh1n006zootn8qu5d4n2","_id":"cktfuxh1o0073ootn2qhi0re7"},{"post_id":"cktfuxh0u003bootn3v3ddjli","tag_id":"cktfuxh1o0070ootn0y1md9bi","_id":"cktfuxh1p0075ootn261fgewo"},{"post_id":"cktfuxh0v003footnhuc2hs9o","tag_id":"cktfuxgzf0005ootnehug0joz","_id":"cktfuxh1p0076ootndb9ge1pt"},{"post_id":"cktfuxh0v003footnhuc2hs9o","tag_id":"cktfuxh1o0071ootn4sstcl5h","_id":"cktfuxh1q0078ootn1xk1fz8f"},{"post_id":"cktfuxh0w003gootnfcnb8kol","tag_id":"cktfuxgzr000rootncpl4hu8q","_id":"cktfuxh1s0079ootnd3gf16lc"},{"post_id":"cktfuxh0w003gootnfcnb8kol","tag_id":"cktfuxh1o0074ootn2l3x39eg","_id":"cktfuxh1t007bootn5x793vum"},{"post_id":"cktfuxh0w003gootnfcnb8kol","tag_id":"cktfuxgzf0005ootnehug0joz","_id":"cktfuxh1v007cootn13kzbg4n"},{"post_id":"cktfuxh0y003lootn0n0l6xd2","tag_id":"cktfuxh1i0064ootnccukb1ch","_id":"cktfuxh1v007eootngzb948rx"},{"post_id":"cktfuxh0y003lootn0n0l6xd2","tag_id":"cktfuxh1s007aootncx7o2wik","_id":"cktfuxh1v007footn37n32y7m"},{"post_id":"cktfuxh0y003lootn0n0l6xd2","tag_id":"cktfuxh1j006aootn7cc1ff4n","_id":"cktfuxh1v007gootn8pwbaa1t"},{"post_id":"cktfuxh1x007hootnfi8gcpa4","tag_id":"cktfuxh1i0064ootnccukb1ch","_id":"cktfuxh1y007iootn31i31rog"},{"post_id":"cktfuxh1x007hootnfi8gcpa4","tag_id":"cktfuxgzf0005ootnehug0joz","_id":"cktfuxh1y007jootnczha0xg8"},{"post_id":"cktfuxh1x007hootnfi8gcpa4","tag_id":"cktfuxgzi000bootnd9xf34rk","_id":"cktfuxh1y007lootnc00ugv6x"},{"post_id":"cktfuxh2o007mootn92qa0hgs","tag_id":"cktfuxh1j006aootn7cc1ff4n","_id":"cktfuxh2p007oootnap8bbt55"},{"post_id":"cktfuxh2o007mootn92qa0hgs","tag_id":"cktfuxh2o007nootn1db7huk1","_id":"cktfuxh2p007pootn8yx77gkh"},{"post_id":"cktfuxh47007rootn51ys72sz","tag_id":"cktfuxh48007sootnd6jb0i2c","_id":"cktfuxh49007tootnd98wdsfk"},{"post_id":"cktfuxh47007rootn51ys72sz","tag_id":"cktfuxh2o007nootn1db7huk1","_id":"cktfuxh49007uootn20lrhes4"}],"Tag":[{"name":"数论","_id":"cktfuxgzf0005ootnehug0joz"},{"name":"自然数等幂求和","_id":"cktfuxgzi000bootnd9xf34rk"},{"name":"Min-25 筛","_id":"cktfuxgzk000gootn7tks6aro"},{"name":"杜教筛","_id":"cktfuxgzo000lootn5sz96wop"},{"name":"动态规划","_id":"cktfuxgzr000rootncpl4hu8q"},{"name":"贪心","_id":"cktfuxgzw0017ootn5vm06lue"},{"name":"图论","_id":"cktfuxgzy001dootn56mtdl54"},{"name":"最小生成树","_id":"cktfuxh00001kootngafrgocb"},{"name":"倍增","_id":"cktfuxh02001rootncjeo6p89"},{"name":"强连通分量","_id":"cktfuxh0k002qootnctpthtsm"},{"name":"博弈论","_id":"cktfuxh0s0037ootnepw3gjv6"},{"name":"阶梯 NIM 游戏","_id":"cktfuxh0v003eootndciv26ox"},{"name":"组合计数","_id":"cktfuxh0y003oootn8azkdf2a"},{"name":"置换","_id":"cktfuxh10003uootn89p7aexk"},{"name":"容斥原理","_id":"cktfuxh11003zootnazwy92xp"},{"name":"构造","_id":"cktfuxh13004bootn2k64ab0a"},{"name":"状压动态规划","_id":"cktfuxh180050ootn1ezb6ab9"},{"name":"分治","_id":"cktfuxh190053ootn46mafpfq"},{"name":"边双连通分量","_id":"cktfuxh190058ootncyq3foua"},{"name":"树上差分","_id":"cktfuxh1a0059ootn0ion5bw2"},{"name":"数位动态规划","_id":"cktfuxh1a005dootnfzb5aovs"},{"name":"区间动态规划","_id":"cktfuxh1b005footnf0f76ki0"},{"name":"数据结构","_id":"cktfuxh1b005iootnbp9yfxvf"},{"name":"树的重心","_id":"cktfuxh1f005tootnfkz2863v"},{"name":"树的直径","_id":"cktfuxh1f005uootn7cac2d9c"},{"name":"知识总结","_id":"cktfuxh1i0064ootnccukb1ch"},{"name":"Powerful Number 筛","_id":"cktfuxh1j0067ootndp5ah100"},{"name":"模板","_id":"cktfuxh1j006aootn7cc1ff4n"},{"name":"生成函数","_id":"cktfuxh1k006dootn7brqeusa"},{"name":"递推","_id":"cktfuxh1k006gootn2gen00np"},{"name":"双指针","_id":"cktfuxh1l006mootnai15fhnk"},{"name":"分块","_id":"cktfuxh1n006zootn8qu5d4n2"},{"name":"斜率优化","_id":"cktfuxh1o0070ootn0y1md9bi"},{"name":"线性基","_id":"cktfuxh1o0071ootn4sstcl5h"},{"name":"概率","_id":"cktfuxh1o0074ootn2l3x39eg"},{"name":"快速傅里叶变换","_id":"cktfuxh1s007aootncx7o2wik"},{"name":"持续更新","_id":"cktfuxh2o007nootn1db7huk1"},{"name":"其他","_id":"cktfuxh48007sootnd6jb0i2c"}]}}